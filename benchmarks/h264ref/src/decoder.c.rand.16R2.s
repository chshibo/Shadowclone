	.text
	.file	"decoder.c"
	.globl	decode_one_b8block      # -- Begin function decode_one_b8block
	.p2align	4, 0x90
	.type	decode_one_b8block,@function
decode_one_b8block:                     # @decode_one_b8block
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB0_17
# %bb.1:                                # %func_decode_one_b8block.3
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.3
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_decode_one_b8block.4
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.4
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_decode_one_b8block.20
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.20
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_decode_one_b8block.21
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.21
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %func_decode_one_b8block.28
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.28
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_6:                                # %func_decode_one_b8block.32
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.32
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_7:                                # %func_decode_one_b8block.34
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.34
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_8:                                # %func_decode_one_b8block.51
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.51
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_9:                                # %func_decode_one_b8block.52
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.52
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_10:                               # %func_decode_one_b8block.55
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.55
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_11:                               # %func_decode_one_b8block.67
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.67
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_12:                               # %func_decode_one_b8block.83
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.83
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_13:                               # %func_decode_one_b8block.88
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.88
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_14:                               # %func_decode_one_b8block.97
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.97
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_15:                               # %func_decode_one_b8block.107
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.107
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_16:                               # %func_decode_one_b8block.111
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.111
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB0_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB0_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB0_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB0_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB0_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB0_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB0_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB0_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB0_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB0_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB0_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB0_15
	jmp	.LBB0_16
.Lfunc_end0:
	.size	decode_one_b8block, .Lfunc_end0-decode_one_b8block
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block     # -- Begin function Get_Reference_Block
	.p2align	4, 0x90
	.type	Get_Reference_Block,@function
Get_Reference_Block:                    # @Get_Reference_Block
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, -48(%rbp)          # 8-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB1_17
# %bb.1:                                # %func_Get_Reference_Block.14
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movq	-48(%rbp), %r9          # 8-byte Reload
	callq	Get_Reference_Block.14
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_Get_Reference_Block.15
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movl	%r11d, %r8d
	movq	%r10, %r9
	callq	Get_Reference_Block.15
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_3:                                # %func_Get_Reference_Block.26
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.26
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_4:                                # %func_Get_Reference_Block.29
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.29
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_5:                                # %func_Get_Reference_Block.30
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.30
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_6:                                # %func_Get_Reference_Block.31
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.31
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_7:                                # %func_Get_Reference_Block.33
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.33
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_8:                                # %func_Get_Reference_Block.35
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.35
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_9:                                # %func_Get_Reference_Block.39
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.39
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_10:                               # %func_Get_Reference_Block.42
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.42
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_11:                               # %func_Get_Reference_Block.61
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.61
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_12:                               # %func_Get_Reference_Block.76
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.76
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_13:                               # %func_Get_Reference_Block.77
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.77
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_14:                               # %func_Get_Reference_Block.78
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.78
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_15:                               # %func_Get_Reference_Block.89
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movl	%r11d, %r8d
	movq	%r10, %r9
	callq	Get_Reference_Block.89
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_16:                               # %func_Get_Reference_Block.91
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movl	%r11d, %r8d
	movq	%r10, %r9
	callq	Get_Reference_Block.91
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %r11d
	movq	-48(%rbp), %r10         # 8-byte Reload
	cmpl	$1, %eax
	je	.LBB1_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	movq	%r10, %r9
	movl	%r11d, %r8d
	movl	%r13d, %r15d
	movl	%edx, %r12d
	movl	%esi, %r14d
	movq	%rdi, %rbx
	je	.LBB1_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB1_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB1_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB1_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB1_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB1_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB1_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB1_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB1_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB1_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB1_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB1_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB1_15
	jmp	.LBB1_16
.Lfunc_end1:
	.size	Get_Reference_Block, .Lfunc_end1-Get_Reference_Block
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_mb           # -- Begin function decode_one_mb
	.p2align	4, 0x90
	.type	decode_one_mb,@function
decode_one_mb:                          # @decode_one_mb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB2_2
# %bb.1:                                # %func_decode_one_mb.1
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	decode_one_mb.1
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_decode_one_mb.6
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	decode_one_mb.6
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end2:
	.size	decode_one_mb, .Lfunc_end2-decode_one_mb
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel     # -- Begin function Get_Reference_Pixel
	.p2align	4, 0x90
	.type	Get_Reference_Pixel,@function
Get_Reference_Pixel:                    # @Get_Reference_Pixel
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB3_17
# %bb.1:                                # %func_Get_Reference_Pixel.2
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.2
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_Get_Reference_Pixel.17
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.17
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_Get_Reference_Pixel.18
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.18
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_Get_Reference_Pixel.19
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.19
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %func_Get_Reference_Pixel.24
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.24
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_6:                                # %func_Get_Reference_Pixel.40
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.40
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_7:                                # %func_Get_Reference_Pixel.48
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.48
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_8:                                # %func_Get_Reference_Pixel.53
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.53
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_9:                                # %func_Get_Reference_Pixel.56
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.56
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_10:                               # %func_Get_Reference_Pixel.58
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.58
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_11:                               # %func_Get_Reference_Pixel.63
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.63
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_12:                               # %func_Get_Reference_Pixel.66
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.66
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_13:                               # %func_Get_Reference_Pixel.68
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.68
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_14:                               # %func_Get_Reference_Pixel.73
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.73
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_15:                               # %func_Get_Reference_Pixel.75
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.75
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_16:                               # %func_Get_Reference_Pixel.79
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.79
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB3_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB3_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB3_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB3_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB3_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB3_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB3_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB3_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB3_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB3_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB3_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB3_15
	jmp	.LBB3_16
.Lfunc_end3:
	.size	Get_Reference_Pixel, .Lfunc_end3-Get_Reference_Pixel
	.cfi_endproc
                                        # -- End function
	.globl	UpdateDecoders          # -- Begin function UpdateDecoders
	.p2align	4, 0x90
	.type	UpdateDecoders,@function
UpdateDecoders:                         # @UpdateDecoders
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$0, -4(%rbp)
.LBB4_1:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB4_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	decs, %rax
	movq	40(%rax), %rdi
	callq	Build_Status_Map
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	decs, %rax
	movq	40(%rax), %rsi
	movq	decs, %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	callq	Error_Concealment
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	decs, %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	DecOneForthPix
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB4_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB4_1
.LBB4_4:                                # %for.end
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end4:
	.size	UpdateDecoders, .Lfunc_end4-UpdateDecoders
	.cfi_endproc
                                        # -- End function
	.globl	Build_Status_Map        # -- Begin function Build_Status_Map
	.p2align	4, 0x90
	.type	Build_Status_Map,@function
Build_Status_Map:                       # @Build_Status_Map
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB5_17
# %bb.1:                                # %func_Build_Status_Map.11
	movq	%rbx, %rdi
	callq	Build_Status_Map.11
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_Build_Status_Map.13
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.13
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_Build_Status_Map.25
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.25
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_Build_Status_Map.69
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.69
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %func_Build_Status_Map.70
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.70
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_6:                                # %func_Build_Status_Map.84
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.84
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_7:                                # %func_Build_Status_Map.99
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.99
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_8:                                # %func_Build_Status_Map.114
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.114
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_9:                                # %func_Build_Status_Map.119
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.119
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_10:                               # %func_Build_Status_Map.120
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.120
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_11:                               # %func_Build_Status_Map.125
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.125
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_12:                               # %func_Build_Status_Map.126
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.126
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_13:                               # %func_Build_Status_Map.127
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.127
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_14:                               # %func_Build_Status_Map.128
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.128
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_15:                               # %func_Build_Status_Map.129
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.129
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_16:                               # %func_Build_Status_Map.130
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.130
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB5_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB5_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB5_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB5_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB5_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB5_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB5_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB5_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB5_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB5_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB5_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB5_15
	jmp	.LBB5_16
.Lfunc_end5:
	.size	Build_Status_Map, .Lfunc_end5-Build_Status_Map
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment       # -- Begin function Error_Concealment
	.p2align	4, 0x90
	.type	Error_Concealment,@function
Error_Concealment:                      # @Error_Concealment
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB6_17
# %bb.1:                                # %func_Error_Concealment.9
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.9
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_Error_Concealment.10
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.10
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_Error_Concealment.23
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.23
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_Error_Concealment.41
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.41
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %func_Error_Concealment.60
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.60
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_6:                                # %func_Error_Concealment.64
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.64
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_7:                                # %func_Error_Concealment.82
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.82
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_8:                                # %func_Error_Concealment.85
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.85
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_9:                                # %func_Error_Concealment.87
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.87
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_10:                               # %func_Error_Concealment.90
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.90
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_11:                               # %func_Error_Concealment.105
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.105
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_12:                               # %func_Error_Concealment.109
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.109
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_13:                               # %func_Error_Concealment.112
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.112
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_14:                               # %func_Error_Concealment.115
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.115
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_15:                               # %func_Error_Concealment.121
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.121
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_16:                               # %func_Error_Concealment.122
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.122
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB6_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB6_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB6_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB6_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB6_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB6_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB6_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB6_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB6_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB6_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB6_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB6_15
	jmp	.LBB6_16
.Lfunc_end6:
	.size	Error_Concealment, .Lfunc_end6-Error_Concealment
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix          # -- Begin function DecOneForthPix
	.p2align	4, 0x90
	.type	DecOneForthPix,@function
DecOneForthPix:                         # @DecOneForthPix
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB7_17
# %bb.1:                                # %func_DecOneForthPix.7
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.7
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_DecOneForthPix.8
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.8
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_DecOneForthPix.38
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.38
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_DecOneForthPix.43
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.43
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %func_DecOneForthPix.44
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.44
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_6:                                # %func_DecOneForthPix.72
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.72
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_7:                                # %func_DecOneForthPix.81
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.81
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_8:                                # %func_DecOneForthPix.92
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.92
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_9:                                # %func_DecOneForthPix.94
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.94
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_10:                               # %func_DecOneForthPix.95
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.95
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_11:                               # %func_DecOneForthPix.101
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.101
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_12:                               # %func_DecOneForthPix.103
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.103
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_13:                               # %func_DecOneForthPix.108
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.108
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_14:                               # %func_DecOneForthPix.118
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.118
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_15:                               # %func_DecOneForthPix.123
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.123
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_16:                               # %func_DecOneForthPix.124
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.124
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB7_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB7_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB7_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB7_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB7_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB7_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB7_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB7_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB7_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB7_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB7_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB7_15
	jmp	.LBB7_16
.Lfunc_end7:
	.size	DecOneForthPix, .Lfunc_end7-DecOneForthPix
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block # -- Begin function compute_residue_b8block
	.p2align	4, 0x90
	.type	compute_residue_b8block,@function
compute_residue_b8block:                # @compute_residue_b8block
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB8_17
# %bb.1:                                # %func_compute_residue_b8block.16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.16
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_compute_residue_b8block.27
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.27
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_3:                                # %func_compute_residue_b8block.36
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.36
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_4:                                # %func_compute_residue_b8block.37
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.37
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_5:                                # %func_compute_residue_b8block.46
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.46
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_6:                                # %func_compute_residue_b8block.47
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.47
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_7:                                # %func_compute_residue_b8block.57
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.57
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_8:                                # %func_compute_residue_b8block.62
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.62
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_9:                                # %func_compute_residue_b8block.71
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.71
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_10:                               # %func_compute_residue_b8block.80
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.80
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_11:                               # %func_compute_residue_b8block.86
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.86
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_12:                               # %func_compute_residue_b8block.93
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.93
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_13:                               # %func_compute_residue_b8block.98
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.98
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_14:                               # %func_compute_residue_b8block.100
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.100
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_15:                               # %func_compute_residue_b8block.102
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.102
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_16:                               # %func_compute_residue_b8block.104
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.104
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB8_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB8_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB8_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB8_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB8_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB8_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB8_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB8_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB8_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB8_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB8_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB8_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB8_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB8_15
	jmp	.LBB8_16
.Lfunc_end8:
	.size	compute_residue_b8block, .Lfunc_end8-compute_residue_b8block
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_mb      # -- Begin function compute_residue_mb
	.p2align	4, 0x90
	.type	compute_residue_mb,@function
compute_residue_mb:                     # @compute_residue_mb
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %esi
	xorl	%edi, %edi
	callq	compute_residue_b8block
	movl	-4(%rbp), %esi
	movl	$1, %edi
	callq	compute_residue_b8block
	movl	-4(%rbp), %esi
	movl	$2, %edi
	callq	compute_residue_b8block
	movl	-4(%rbp), %esi
	movl	$3, %edi
	callq	compute_residue_b8block
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end9:
	.size	compute_residue_mb, .Lfunc_end9-compute_residue_mb
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error           # -- Begin function Conceal_Error
	.p2align	4, 0x90
	.type	Conceal_Error,@function
Conceal_Error:                          # @Conceal_Error
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r8, %r14
	movq	%rcx, %r15
	movl	%edx, %r12d
	movl	%esi, %r13d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB10_17
# %bb.1:                                # %func_Conceal_Error.5
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.5
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_Conceal_Error.12
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.12
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_3:                               # %func_Conceal_Error.22
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.22
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_4:                               # %func_Conceal_Error.45
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.45
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_5:                               # %func_Conceal_Error.49
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.49
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_6:                               # %func_Conceal_Error.50
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.50
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_7:                               # %func_Conceal_Error.54
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.54
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_8:                               # %func_Conceal_Error.59
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.59
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_9:                               # %func_Conceal_Error.65
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.65
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_10:                              # %func_Conceal_Error.74
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.74
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_11:                              # %func_Conceal_Error.96
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.96
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_12:                              # %func_Conceal_Error.106
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.106
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_13:                              # %func_Conceal_Error.110
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.110
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_14:                              # %func_Conceal_Error.113
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.113
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_15:                              # %func_Conceal_Error.116
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.116
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_16:                              # %func_Conceal_Error.117
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.117
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB10_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB10_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB10_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB10_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB10_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB10_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB10_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB10_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB10_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB10_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB10_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB10_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB10_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB10_15
	jmp	.LBB10_16
.Lfunc_end10:
	.size	Conceal_Error, .Lfunc_end10-Conceal_Error
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_mb.1         # -- Begin function decode_one_mb.1
	.p2align	4, 0x90
	.type	decode_one_mb.1,@function
decode_one_mb.1:                        # @decode_one_mb.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$500305422, -4(%rbp)    # imm = 0x1DD20E0E
	movl	%edi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpl	$500305422, -4(%rbp)    # imm = 0x1DD20E0E
	jne	.LBB11_2
.LBB11_1:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB11_1
.Lfunc_end11:
	.size	decode_one_mb.1, .Lfunc_end11-decode_one_mb.1
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.2   # -- Begin function Get_Reference_Pixel.2
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.2,@function
Get_Reference_Pixel.2:                  # @Get_Reference_Pixel.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$736940132, -100(%rbp)  # imm = 0x2BECD064
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB12_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB12_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB12_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB12_5
.LBB12_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB12_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB12_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB12_11
.LBB12_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB12_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB12_10
.LBB12_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB12_10:                              # %cond.end14
.LBB12_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB12_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB12_14
.LBB12_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB12_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB12_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB12_20
.LBB12_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB12_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB12_19
.LBB12_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB12_19:                              # %cond.end29
.LBB12_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_332
.LBB12_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB12_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB12_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB12_25
.LBB12_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB12_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB12_31
.LBB12_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB12_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB12_30
.LBB12_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB12_30:                              # %cond.end52
.LBB12_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB12_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB12_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB12_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB12_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB12_36
.LBB12_35:                              # %cond.false61
                                        #   in Loop: Header=BB12_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB12_36:                              # %cond.end63
                                        #   in Loop: Header=BB12_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB12_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB12_42
.LBB12_38:                              # %cond.false68
                                        #   in Loop: Header=BB12_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB12_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB12_41
.LBB12_40:                              # %cond.false73
                                        #   in Loop: Header=BB12_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB12_41:                              # %cond.end75
                                        #   in Loop: Header=BB12_32 Depth=1
.LBB12_42:                              # %cond.end77
                                        #   in Loop: Header=BB12_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB12_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB12_32
.LBB12_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB12_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_47
.LBB12_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB12_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB12_53
.LBB12_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB12_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_52
.LBB12_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB12_52:                              # %cond.end113
.LBB12_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB12_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB12_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB12_57
.LBB12_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB12_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB12_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB12_63
.LBB12_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB12_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB12_62
.LBB12_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB12_62:                              # %cond.end136
.LBB12_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB12_76
.LBB12_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB12_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB12_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB12_68
.LBB12_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB12_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB12_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB12_74
.LBB12_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB12_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB12_73
.LBB12_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB12_73:                              # %cond.end169
.LBB12_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB12_75:                              # %if.end
	jmp	.LBB12_76
.LBB12_76:                              # %if.end178
	jmp	.LBB12_331
.LBB12_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB12_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB12_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB12_81
.LBB12_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB12_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB12_87
.LBB12_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB12_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB12_86
.LBB12_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB12_86:                              # %cond.end197
.LBB12_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB12_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB12_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB12_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB12_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB12_92
.LBB12_91:                              # %cond.false209
                                        #   in Loop: Header=BB12_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB12_92:                              # %cond.end211
                                        #   in Loop: Header=BB12_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB12_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB12_98
.LBB12_94:                              # %cond.false216
                                        #   in Loop: Header=BB12_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB12_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB12_97
.LBB12_96:                              # %cond.false221
                                        #   in Loop: Header=BB12_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB12_97:                              # %cond.end223
                                        #   in Loop: Header=BB12_88 Depth=1
.LBB12_98:                              # %cond.end225
                                        #   in Loop: Header=BB12_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB12_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_88
.LBB12_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB12_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_103
.LBB12_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB12_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB12_109
.LBB12_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB12_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_108
.LBB12_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB12_108:                             # %cond.end266
.LBB12_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB12_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB12_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB12_113
.LBB12_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB12_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB12_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB12_119
.LBB12_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB12_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB12_118
.LBB12_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB12_118:                             # %cond.end287
.LBB12_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB12_132
.LBB12_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB12_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB12_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB12_124
.LBB12_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB12_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB12_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB12_130
.LBB12_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB12_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB12_129
.LBB12_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB12_129:                             # %cond.end320
.LBB12_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB12_131:                             # %if.end331
	jmp	.LBB12_132
.LBB12_132:                             # %if.end332
	jmp	.LBB12_330
.LBB12_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB12_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB12_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB12_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB12_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB12_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB12_139
.LBB12_138:                             # %cond.false345
                                        #   in Loop: Header=BB12_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB12_139:                             # %cond.end347
                                        #   in Loop: Header=BB12_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB12_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB12_145
.LBB12_141:                             # %cond.false352
                                        #   in Loop: Header=BB12_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB12_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB12_144
.LBB12_143:                             # %cond.false357
                                        #   in Loop: Header=BB12_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB12_144:                             # %cond.end359
                                        #   in Loop: Header=BB12_135 Depth=1
.LBB12_145:                             # %cond.end361
                                        #   in Loop: Header=BB12_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB12_146:                             # %for.cond363
                                        #   Parent Loop BB12_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB12_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB12_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB12_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB12_150
.LBB12_149:                             # %cond.false371
                                        #   in Loop: Header=BB12_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB12_150:                             # %cond.end373
                                        #   in Loop: Header=BB12_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB12_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB12_156
.LBB12_152:                             # %cond.false378
                                        #   in Loop: Header=BB12_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB12_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB12_155
.LBB12_154:                             # %cond.false383
                                        #   in Loop: Header=BB12_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB12_155:                             # %cond.end385
                                        #   in Loop: Header=BB12_146 Depth=2
.LBB12_156:                             # %cond.end387
                                        #   in Loop: Header=BB12_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB12_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB12_146
.LBB12_158:                             # %for.end401
                                        #   in Loop: Header=BB12_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB12_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_135
.LBB12_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB12_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB12_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB12_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB12_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_161
.LBB12_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB12_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_167
.LBB12_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB12_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB12_173
.LBB12_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB12_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_172
.LBB12_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB12_172:                             # %cond.end449
.LBB12_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB12_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB12_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_177
.LBB12_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB12_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB12_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB12_183
.LBB12_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB12_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_182
.LBB12_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB12_182:                             # %cond.end486
.LBB12_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB12_196
.LBB12_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB12_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB12_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_188
.LBB12_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB12_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB12_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB12_194
.LBB12_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB12_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_193
.LBB12_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB12_193:                             # %cond.end526
.LBB12_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB12_195:                             # %if.end532
	jmp	.LBB12_196
.LBB12_196:                             # %if.end533
	jmp	.LBB12_329
.LBB12_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB12_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB12_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB12_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB12_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB12_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB12_203
.LBB12_202:                             # %cond.false546
                                        #   in Loop: Header=BB12_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB12_203:                             # %cond.end548
                                        #   in Loop: Header=BB12_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB12_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB12_209
.LBB12_205:                             # %cond.false553
                                        #   in Loop: Header=BB12_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB12_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB12_208
.LBB12_207:                             # %cond.false558
                                        #   in Loop: Header=BB12_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB12_208:                             # %cond.end560
                                        #   in Loop: Header=BB12_199 Depth=1
.LBB12_209:                             # %cond.end562
                                        #   in Loop: Header=BB12_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB12_210:                             # %for.cond564
                                        #   Parent Loop BB12_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB12_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB12_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB12_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB12_214
.LBB12_213:                             # %cond.false572
                                        #   in Loop: Header=BB12_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB12_214:                             # %cond.end574
                                        #   in Loop: Header=BB12_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB12_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB12_220
.LBB12_216:                             # %cond.false579
                                        #   in Loop: Header=BB12_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB12_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB12_219
.LBB12_218:                             # %cond.false584
                                        #   in Loop: Header=BB12_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB12_219:                             # %cond.end586
                                        #   in Loop: Header=BB12_210 Depth=2
.LBB12_220:                             # %cond.end588
                                        #   in Loop: Header=BB12_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB12_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_210
.LBB12_222:                             # %for.end602
                                        #   in Loop: Header=BB12_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB12_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB12_199
.LBB12_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB12_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB12_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB12_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB12_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB12_225
.LBB12_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB12_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_231
.LBB12_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB12_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB12_237
.LBB12_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB12_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_236
.LBB12_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB12_236:                             # %cond.end650
.LBB12_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB12_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB12_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_241
.LBB12_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB12_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB12_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB12_247
.LBB12_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB12_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_246
.LBB12_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB12_246:                             # %cond.end687
.LBB12_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB12_258
.LBB12_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB12_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_251
.LBB12_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB12_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB12_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB12_257
.LBB12_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB12_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_256
.LBB12_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB12_256:                             # %cond.end724
.LBB12_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB12_258:                             # %if.end730
	jmp	.LBB12_328
.LBB12_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB12_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB12_262
.LBB12_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB12_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB12_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB12_265
.LBB12_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB12_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB12_271
.LBB12_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB12_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB12_270
.LBB12_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB12_270:                             # %cond.end753
.LBB12_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB12_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB12_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB12_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB12_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB12_276
.LBB12_275:                             # %cond.false765
                                        #   in Loop: Header=BB12_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB12_276:                             # %cond.end767
                                        #   in Loop: Header=BB12_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB12_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB12_282
.LBB12_278:                             # %cond.false772
                                        #   in Loop: Header=BB12_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB12_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB12_281
.LBB12_280:                             # %cond.false777
                                        #   in Loop: Header=BB12_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB12_281:                             # %cond.end779
                                        #   in Loop: Header=BB12_272 Depth=1
.LBB12_282:                             # %cond.end781
                                        #   in Loop: Header=BB12_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB12_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB12_272
.LBB12_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB12_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_287
.LBB12_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB12_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB12_293
.LBB12_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB12_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_292
.LBB12_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB12_292:                             # %cond.end822
.LBB12_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB12_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB12_296
.LBB12_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB12_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB12_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB12_299
.LBB12_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB12_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB12_305
.LBB12_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB12_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB12_304
.LBB12_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB12_304:                             # %cond.end847
.LBB12_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB12_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB12_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB12_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB12_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB12_310
.LBB12_309:                             # %cond.false859
                                        #   in Loop: Header=BB12_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB12_310:                             # %cond.end861
                                        #   in Loop: Header=BB12_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB12_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB12_316
.LBB12_312:                             # %cond.false866
                                        #   in Loop: Header=BB12_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB12_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB12_315
.LBB12_314:                             # %cond.false871
                                        #   in Loop: Header=BB12_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB12_315:                             # %cond.end873
                                        #   in Loop: Header=BB12_306 Depth=1
.LBB12_316:                             # %cond.end875
                                        #   in Loop: Header=BB12_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB12_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_306
.LBB12_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB12_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_321
.LBB12_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB12_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB12_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB12_327
.LBB12_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB12_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_326
.LBB12_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB12_326:                             # %cond.end916
.LBB12_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-104(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB12_328:                             # %if.end922
	jmp	.LBB12_329
.LBB12_329:                             # %if.end923
	jmp	.LBB12_330
.LBB12_330:                             # %if.end924
	jmp	.LBB12_331
.LBB12_331:                             # %if.end925
	jmp	.LBB12_332
.LBB12_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$736940132, -100(%rbp)  # imm = 0x2BECD064
	jne	.LBB12_334
.LBB12_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB12_333
.Lfunc_end12:
	.size	Get_Reference_Pixel.2, .Lfunc_end12-Get_Reference_Pixel.2
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.3    # -- Begin function decode_one_b8block.3
	.p2align	4, 0x90
	.type	decode_one_b8block.3,@function
decode_one_b8block.3:                   # @decode_one_b8block.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1277241731, -84(%rbp)  # imm = 0x4C212983
	movl	%edi, -52(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB13_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB13_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB13_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB13_4:                               # %for.cond9
                                        #   Parent Loop BB13_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB13_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB13_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB13_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_4
.LBB13_7:                               # %for.end
                                        #   in Loop: Header=BB13_2 Depth=1
	jmp	.LBB13_8
.LBB13_8:                               # %for.inc26
                                        #   in Loop: Header=BB13_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_2
.LBB13_9:                               # %for.end28
	jmp	.LBB13_96
.LBB13_10:                              # %if.else
	cmpl	$0, -76(%rbp)
	jne	.LBB13_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB13_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB13_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB13_31
.LBB13_14:                              # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB13_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB13_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB13_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB13_17:                              # %for.cond40
                                        #   Parent Loop BB13_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB13_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB13_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB13_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_17
.LBB13_20:                              # %for.end49
                                        #   in Loop: Header=BB13_15 Depth=1
	jmp	.LBB13_21
.LBB13_21:                              # %for.inc50
                                        #   in Loop: Header=BB13_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_15
.LBB13_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB13_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB13_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB13_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB13_25:                              # %for.cond56
                                        #   Parent Loop BB13_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB13_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB13_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB13_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_25
.LBB13_28:                              # %for.end71
                                        #   in Loop: Header=BB13_23 Depth=1
	jmp	.LBB13_29
.LBB13_29:                              # %for.inc72
                                        #   in Loop: Header=BB13_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_23
.LBB13_30:                              # %for.end74
	jmp	.LBB13_60
.LBB13_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB13_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB13_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB13_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB13_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB13_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB13_36:                              # %for.cond83
                                        #   Parent Loop BB13_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB13_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB13_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB13_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_36
.LBB13_39:                              # %for.end120
                                        #   in Loop: Header=BB13_34 Depth=1
	jmp	.LBB13_40
.LBB13_40:                              # %for.inc121
                                        #   in Loop: Header=BB13_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_34
.LBB13_41:                              # %for.end123
	jmp	.LBB13_51
.LBB13_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB13_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB13_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB13_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB13_45:                              # %for.cond129
                                        #   Parent Loop BB13_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB13_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB13_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB13_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_45
.LBB13_48:                              # %for.end145
                                        #   in Loop: Header=BB13_43 Depth=1
	jmp	.LBB13_49
.LBB13_49:                              # %for.inc146
                                        #   in Loop: Header=BB13_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_43
.LBB13_50:                              # %for.end148
	jmp	.LBB13_51
.LBB13_51:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB13_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB13_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB13_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB13_54:                              # %for.cond153
                                        #   Parent Loop BB13_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB13_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB13_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB13_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_54
.LBB13_57:                              # %for.end167
                                        #   in Loop: Header=BB13_52 Depth=1
	jmp	.LBB13_58
.LBB13_58:                              # %for.inc168
                                        #   in Loop: Header=BB13_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_52
.LBB13_59:                              # %for.end170
	jmp	.LBB13_60
.LBB13_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB13_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB13_66
.LBB13_62:                              # %lor.lhs.false177
	cmpl	$0, -76(%rbp)
	jne	.LBB13_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB13_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB13_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB13_86
.LBB13_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB13_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_69 Depth 2
                                        #       Child Loop BB13_74 Depth 3
                                        #         Child Loop BB13_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB13_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB13_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB13_69:                              # %for.cond197
                                        #   Parent Loop BB13_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_74 Depth 3
                                        #         Child Loop BB13_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB13_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB13_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB13_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB13_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB13_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB13_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
.LBB13_73:                              # %if.end218
                                        #   in Loop: Header=BB13_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-80(%rbp), %esi
	movl	-68(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB13_74:                              # %for.cond233
                                        #   Parent Loop BB13_67 Depth=1
                                        #     Parent Loop BB13_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB13_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB13_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB13_74 Depth=3
	movl	$0, -8(%rbp)
.LBB13_76:                              # %for.cond237
                                        #   Parent Loop BB13_67 Depth=1
                                        #     Parent Loop BB13_69 Depth=2
                                        #       Parent Loop BB13_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB13_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB13_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB13_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_76
.LBB13_79:                              # %for.end269
                                        #   in Loop: Header=BB13_74 Depth=3
	jmp	.LBB13_80
.LBB13_80:                              # %for.inc270
                                        #   in Loop: Header=BB13_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_74
.LBB13_81:                              # %for.end272
                                        #   in Loop: Header=BB13_69 Depth=2
	jmp	.LBB13_82
.LBB13_82:                              # %for.inc273
                                        #   in Loop: Header=BB13_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_69
.LBB13_83:                              # %for.end275
                                        #   in Loop: Header=BB13_67 Depth=1
	jmp	.LBB13_84
.LBB13_84:                              # %for.inc276
                                        #   in Loop: Header=BB13_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_67
.LBB13_85:                              # %for.end278
	jmp	.LBB13_95
.LBB13_86:                              # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB13_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB13_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB13_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB13_89:                              # %for.cond284
                                        #   Parent Loop BB13_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB13_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB13_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB13_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_89
.LBB13_92:                              # %for.end310
                                        #   in Loop: Header=BB13_87 Depth=1
	jmp	.LBB13_93
.LBB13_93:                              # %for.inc311
                                        #   in Loop: Header=BB13_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_87
.LBB13_94:                              # %for.end313
	jmp	.LBB13_95
.LBB13_95:                              # %if.end314
	jmp	.LBB13_96
.LBB13_96:                              # %if.end315
	cmpl	$1277241731, -84(%rbp)  # imm = 0x4C212983
	jne	.LBB13_98
.LBB13_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB13_97
.Lfunc_end13:
	.size	decode_one_b8block.3, .Lfunc_end13-decode_one_b8block.3
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.4    # -- Begin function decode_one_b8block.4
	.p2align	4, 0x90
	.type	decode_one_b8block.4,@function
decode_one_b8block.4:                   # @decode_one_b8block.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$8533616, -84(%rbp)     # imm = 0x823670
	movl	%edi, -56(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB14_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB14_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB14_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB14_4:                               # %for.cond9
                                        #   Parent Loop BB14_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB14_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB14_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB14_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_4
.LBB14_7:                               # %for.end
                                        #   in Loop: Header=BB14_2 Depth=1
	jmp	.LBB14_8
.LBB14_8:                               # %for.inc26
                                        #   in Loop: Header=BB14_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_2
.LBB14_9:                               # %for.end28
	jmp	.LBB14_96
.LBB14_10:                              # %if.else
	cmpl	$0, -68(%rbp)
	jne	.LBB14_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB14_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB14_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB14_31
.LBB14_14:                              # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB14_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB14_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB14_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB14_17:                              # %for.cond40
                                        #   Parent Loop BB14_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB14_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB14_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB14_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_17
.LBB14_20:                              # %for.end49
                                        #   in Loop: Header=BB14_15 Depth=1
	jmp	.LBB14_21
.LBB14_21:                              # %for.inc50
                                        #   in Loop: Header=BB14_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_15
.LBB14_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB14_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB14_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB14_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB14_25:                              # %for.cond56
                                        #   Parent Loop BB14_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB14_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB14_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB14_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_25
.LBB14_28:                              # %for.end71
                                        #   in Loop: Header=BB14_23 Depth=1
	jmp	.LBB14_29
.LBB14_29:                              # %for.inc72
                                        #   in Loop: Header=BB14_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_23
.LBB14_30:                              # %for.end74
	jmp	.LBB14_60
.LBB14_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB14_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB14_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB14_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB14_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB14_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB14_36:                              # %for.cond83
                                        #   Parent Loop BB14_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB14_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB14_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB14_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_36
.LBB14_39:                              # %for.end120
                                        #   in Loop: Header=BB14_34 Depth=1
	jmp	.LBB14_40
.LBB14_40:                              # %for.inc121
                                        #   in Loop: Header=BB14_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_34
.LBB14_41:                              # %for.end123
	jmp	.LBB14_51
.LBB14_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB14_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB14_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB14_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB14_45:                              # %for.cond129
                                        #   Parent Loop BB14_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB14_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB14_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB14_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_45
.LBB14_48:                              # %for.end145
                                        #   in Loop: Header=BB14_43 Depth=1
	jmp	.LBB14_49
.LBB14_49:                              # %for.inc146
                                        #   in Loop: Header=BB14_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_43
.LBB14_50:                              # %for.end148
	jmp	.LBB14_51
.LBB14_51:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB14_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB14_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB14_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB14_54:                              # %for.cond153
                                        #   Parent Loop BB14_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB14_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB14_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB14_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_54
.LBB14_57:                              # %for.end167
                                        #   in Loop: Header=BB14_52 Depth=1
	jmp	.LBB14_58
.LBB14_58:                              # %for.inc168
                                        #   in Loop: Header=BB14_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_52
.LBB14_59:                              # %for.end170
	jmp	.LBB14_60
.LBB14_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB14_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB14_66
.LBB14_62:                              # %lor.lhs.false177
	cmpl	$0, -68(%rbp)
	jne	.LBB14_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB14_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB14_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB14_86
.LBB14_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB14_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_69 Depth 2
                                        #       Child Loop BB14_74 Depth 3
                                        #         Child Loop BB14_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB14_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB14_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB14_69:                              # %for.cond197
                                        #   Parent Loop BB14_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB14_74 Depth 3
                                        #         Child Loop BB14_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB14_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB14_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB14_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB14_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB14_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB14_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
.LBB14_73:                              # %if.end218
                                        #   in Loop: Header=BB14_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-72(%rbp), %esi
	movl	-64(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB14_74:                              # %for.cond233
                                        #   Parent Loop BB14_67 Depth=1
                                        #     Parent Loop BB14_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB14_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB14_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB14_74 Depth=3
	movl	$0, -8(%rbp)
.LBB14_76:                              # %for.cond237
                                        #   Parent Loop BB14_67 Depth=1
                                        #     Parent Loop BB14_69 Depth=2
                                        #       Parent Loop BB14_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB14_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB14_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB14_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_76
.LBB14_79:                              # %for.end269
                                        #   in Loop: Header=BB14_74 Depth=3
	jmp	.LBB14_80
.LBB14_80:                              # %for.inc270
                                        #   in Loop: Header=BB14_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_74
.LBB14_81:                              # %for.end272
                                        #   in Loop: Header=BB14_69 Depth=2
	jmp	.LBB14_82
.LBB14_82:                              # %for.inc273
                                        #   in Loop: Header=BB14_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_69
.LBB14_83:                              # %for.end275
                                        #   in Loop: Header=BB14_67 Depth=1
	jmp	.LBB14_84
.LBB14_84:                              # %for.inc276
                                        #   in Loop: Header=BB14_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_67
.LBB14_85:                              # %for.end278
	jmp	.LBB14_95
.LBB14_86:                              # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB14_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB14_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB14_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB14_89:                              # %for.cond284
                                        #   Parent Loop BB14_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB14_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB14_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB14_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_89
.LBB14_92:                              # %for.end310
                                        #   in Loop: Header=BB14_87 Depth=1
	jmp	.LBB14_93
.LBB14_93:                              # %for.inc311
                                        #   in Loop: Header=BB14_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_87
.LBB14_94:                              # %for.end313
	jmp	.LBB14_95
.LBB14_95:                              # %if.end314
	jmp	.LBB14_96
.LBB14_96:                              # %if.end315
	cmpl	$8533616, -84(%rbp)     # imm = 0x823670
	jne	.LBB14_98
.LBB14_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB14_97
.Lfunc_end14:
	.size	decode_one_b8block.4, .Lfunc_end14-decode_one_b8block.4
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.5         # -- Begin function Conceal_Error.5
	.p2align	4, 0x90
	.type	Conceal_Error.5,@function
Conceal_Error.5:                        # @Conceal_Error.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1590889236, -68(%rbp)  # imm = 0x5ED30B14
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB15_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB15_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB15_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB15_4:                               # %land.end
.LBB15_5:                               # %lor.end
.LBB15_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB15_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB15_9
.LBB15_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB15_14
.LBB15_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB15_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB15_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB15_12:                              # %land.end51
.LBB15_13:                              # %lor.end53
.LBB15_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB15_180
# %bb.15:                               # %land.end54
	movq	.LJTI15_0(,%rax,8), %rax
	jmpq	*%rax
.LBB15_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB15_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB15_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB15_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB15_18 Depth=1
	movl	$0, -4(%rbp)
.LBB15_20:                              # %for.cond68
                                        #   Parent Loop BB15_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB15_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB15_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB15_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_20
.LBB15_23:                              # %for.end
                                        #   in Loop: Header=BB15_18 Depth=1
	jmp	.LBB15_24
.LBB15_24:                              # %for.inc85
                                        #   in Loop: Header=BB15_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_18
.LBB15_25:                              # %for.end87
	jmp	.LBB15_35
.LBB15_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB15_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB15_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB15_27 Depth=1
	movl	$0, -4(%rbp)
.LBB15_29:                              # %for.cond92
                                        #   Parent Loop BB15_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB15_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB15_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB15_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_29
.LBB15_32:                              # %for.end104
                                        #   in Loop: Header=BB15_27 Depth=1
	jmp	.LBB15_33
.LBB15_33:                              # %for.inc105
                                        #   in Loop: Header=BB15_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_27
.LBB15_34:                              # %for.end107
	jmp	.LBB15_35
.LBB15_35:                              # %if.end
	jmp	.LBB15_180
.LBB15_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB15_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_39 Depth 2
                                        #       Child Loop BB15_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB15_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB15_37 Depth=1
	movl	$0, -16(%rbp)
.LBB15_39:                              # %for.cond113
                                        #   Parent Loop BB15_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB15_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB15_39 Depth=2
	movl	$0, -4(%rbp)
.LBB15_41:                              # %for.cond117
                                        #   Parent Loop BB15_37 Depth=1
                                        #     Parent Loop BB15_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB15_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB15_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB15_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_41
.LBB15_44:                              # %for.end141
                                        #   in Loop: Header=BB15_39 Depth=2
	jmp	.LBB15_45
.LBB15_45:                              # %for.inc142
                                        #   in Loop: Header=BB15_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_39
.LBB15_46:                              # %for.end144
                                        #   in Loop: Header=BB15_37 Depth=1
	jmp	.LBB15_47
.LBB15_47:                              # %for.inc145
                                        #   in Loop: Header=BB15_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_37
.LBB15_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB15_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB15_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB15_49 Depth=1
	movl	$0, -8(%rbp)
.LBB15_51:                              # %for.cond152
                                        #   Parent Loop BB15_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB15_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB15_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB15_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_51
.LBB15_54:                              # %for.end162
                                        #   in Loop: Header=BB15_49 Depth=1
	jmp	.LBB15_55
.LBB15_55:                              # %for.inc163
                                        #   in Loop: Header=BB15_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_49
.LBB15_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB15_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB15_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB15_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB15_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB15_59 Depth=1
	movl	$0, -4(%rbp)
.LBB15_61:                              # %for.cond175
                                        #   Parent Loop BB15_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB15_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB15_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB15_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_61
.LBB15_64:                              # %for.end195
                                        #   in Loop: Header=BB15_59 Depth=1
	jmp	.LBB15_65
.LBB15_65:                              # %for.inc196
                                        #   in Loop: Header=BB15_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_59
.LBB15_66:                              # %for.end198
	jmp	.LBB15_95
.LBB15_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB15_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB15_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_71 Depth 2
                                        #       Child Loop BB15_73 Depth 3
                                        #         Child Loop BB15_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB15_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB15_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB15_71:                              # %for.cond210
                                        #   Parent Loop BB15_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_73 Depth 3
                                        #         Child Loop BB15_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB15_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB15_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB15_73:                              # %for.cond236
                                        #   Parent Loop BB15_69 Depth=1
                                        #     Parent Loop BB15_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB15_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB15_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB15_73 Depth=3
	movl	$0, -4(%rbp)
.LBB15_75:                              # %for.cond240
                                        #   Parent Loop BB15_69 Depth=1
                                        #     Parent Loop BB15_71 Depth=2
                                        #       Parent Loop BB15_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB15_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB15_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB15_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_75
.LBB15_78:                              # %for.end259
                                        #   in Loop: Header=BB15_73 Depth=3
	jmp	.LBB15_79
.LBB15_79:                              # %for.inc260
                                        #   in Loop: Header=BB15_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_73
.LBB15_80:                              # %for.end262
                                        #   in Loop: Header=BB15_71 Depth=2
	jmp	.LBB15_81
.LBB15_81:                              # %for.inc263
                                        #   in Loop: Header=BB15_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_71
.LBB15_82:                              # %for.end265
                                        #   in Loop: Header=BB15_69 Depth=1
	jmp	.LBB15_83
.LBB15_83:                              # %for.inc266
                                        #   in Loop: Header=BB15_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_69
.LBB15_84:                              # %for.end268
	jmp	.LBB15_94
.LBB15_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB15_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB15_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB15_86 Depth=1
	movl	$0, -4(%rbp)
.LBB15_88:                              # %for.cond274
                                        #   Parent Loop BB15_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB15_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB15_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB15_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_88
.LBB15_91:                              # %for.end294
                                        #   in Loop: Header=BB15_86 Depth=1
	jmp	.LBB15_92
.LBB15_92:                              # %for.inc295
                                        #   in Loop: Header=BB15_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_86
.LBB15_93:                              # %for.end297
	jmp	.LBB15_94
.LBB15_94:                              # %if.end298
	jmp	.LBB15_95
.LBB15_95:                              # %if.end299
	jmp	.LBB15_105
.LBB15_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB15_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB15_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB15_97 Depth=1
	movl	$0, -4(%rbp)
.LBB15_99:                              # %for.cond305
                                        #   Parent Loop BB15_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB15_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB15_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB15_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_99
.LBB15_102:                             # %for.end317
                                        #   in Loop: Header=BB15_97 Depth=1
	jmp	.LBB15_103
.LBB15_103:                             # %for.inc318
                                        #   in Loop: Header=BB15_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_97
.LBB15_104:                             # %for.end320
	jmp	.LBB15_105
.LBB15_105:                             # %if.end321
	jmp	.LBB15_180
.LBB15_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB15_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB15_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_110 Depth 2
                                        #       Child Loop BB15_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB15_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB15_108 Depth=1
	movl	$0, -16(%rbp)
.LBB15_110:                             # %for.cond331
                                        #   Parent Loop BB15_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB15_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB15_110 Depth=2
	movl	$0, -4(%rbp)
.LBB15_112:                             # %for.cond335
                                        #   Parent Loop BB15_108 Depth=1
                                        #     Parent Loop BB15_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB15_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB15_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB15_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_112
.LBB15_115:                             # %for.end359
                                        #   in Loop: Header=BB15_110 Depth=2
	jmp	.LBB15_116
.LBB15_116:                             # %for.inc360
                                        #   in Loop: Header=BB15_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_110
.LBB15_117:                             # %for.end362
                                        #   in Loop: Header=BB15_108 Depth=1
	jmp	.LBB15_118
.LBB15_118:                             # %for.inc363
                                        #   in Loop: Header=BB15_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_108
.LBB15_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB15_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB15_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB15_120 Depth=1
	movl	$0, -8(%rbp)
.LBB15_122:                             # %for.cond370
                                        #   Parent Loop BB15_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB15_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB15_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB15_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_122
.LBB15_125:                             # %for.end380
                                        #   in Loop: Header=BB15_120 Depth=1
	jmp	.LBB15_126
.LBB15_126:                             # %for.inc381
                                        #   in Loop: Header=BB15_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_120
.LBB15_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB15_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB15_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB15_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB15_129 Depth=1
	movl	$0, -4(%rbp)
.LBB15_131:                             # %for.cond390
                                        #   Parent Loop BB15_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB15_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB15_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB15_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_131
.LBB15_134:                             # %for.end410
                                        #   in Loop: Header=BB15_129 Depth=1
	jmp	.LBB15_135
.LBB15_135:                             # %for.inc411
                                        #   in Loop: Header=BB15_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_129
.LBB15_136:                             # %for.end413
	jmp	.LBB15_156
.LBB15_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB15_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB15_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_141 Depth 2
                                        #       Child Loop BB15_143 Depth 3
                                        #         Child Loop BB15_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB15_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB15_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB15_141:                             # %for.cond425
                                        #   Parent Loop BB15_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_143 Depth 3
                                        #         Child Loop BB15_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB15_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB15_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB15_143:                             # %for.cond452
                                        #   Parent Loop BB15_139 Depth=1
                                        #     Parent Loop BB15_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB15_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB15_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB15_143 Depth=3
	movl	$0, -4(%rbp)
.LBB15_145:                             # %for.cond456
                                        #   Parent Loop BB15_139 Depth=1
                                        #     Parent Loop BB15_141 Depth=2
                                        #       Parent Loop BB15_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB15_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB15_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB15_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_145
.LBB15_148:                             # %for.end475
                                        #   in Loop: Header=BB15_143 Depth=3
	jmp	.LBB15_149
.LBB15_149:                             # %for.inc476
                                        #   in Loop: Header=BB15_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_143
.LBB15_150:                             # %for.end478
                                        #   in Loop: Header=BB15_141 Depth=2
	jmp	.LBB15_151
.LBB15_151:                             # %for.inc479
                                        #   in Loop: Header=BB15_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_141
.LBB15_152:                             # %for.end481
                                        #   in Loop: Header=BB15_139 Depth=1
	jmp	.LBB15_153
.LBB15_153:                             # %for.inc482
                                        #   in Loop: Header=BB15_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_139
.LBB15_154:                             # %for.end484
	jmp	.LBB15_155
.LBB15_155:                             # %if.end485
	jmp	.LBB15_156
.LBB15_156:                             # %if.end486
	jmp	.LBB15_157
.LBB15_157:                             # %if.end487
	jmp	.LBB15_180
.LBB15_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB15_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB15_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB15_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB15_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB15_161 Depth=1
	movl	$0, -4(%rbp)
.LBB15_163:                             # %for.cond499
                                        #   Parent Loop BB15_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB15_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB15_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB15_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_163
.LBB15_166:                             # %for.end519
                                        #   in Loop: Header=BB15_161 Depth=1
	jmp	.LBB15_167
.LBB15_167:                             # %for.inc520
                                        #   in Loop: Header=BB15_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_161
.LBB15_168:                             # %for.end522
	jmp	.LBB15_169
.LBB15_169:                             # %if.end523
	jmp	.LBB15_179
.LBB15_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB15_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB15_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB15_171 Depth=1
	movl	$0, -4(%rbp)
.LBB15_173:                             # %for.cond529
                                        #   Parent Loop BB15_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB15_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB15_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB15_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_173
.LBB15_176:                             # %for.end541
                                        #   in Loop: Header=BB15_171 Depth=1
	jmp	.LBB15_177
.LBB15_177:                             # %for.inc542
                                        #   in Loop: Header=BB15_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_171
.LBB15_178:                             # %for.end544
	jmp	.LBB15_179
.LBB15_179:                             # %if.end545
	jmp	.LBB15_180
.LBB15_180:                             # %sw.epilog
	cmpl	$1590889236, -68(%rbp)  # imm = 0x5ED30B14
	jne	.LBB15_182
.LBB15_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB15_181
.Lfunc_end15:
	.size	Conceal_Error.5, .Lfunc_end15-Conceal_Error.5
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI15_0:
	.quad	.LBB15_16
	.quad	.LBB15_158
	.quad	.LBB15_106
	.quad	.LBB15_180
	.quad	.LBB15_36
                                        # -- End function
	.text
	.globl	decode_one_mb.6         # -- Begin function decode_one_mb.6
	.p2align	4, 0x90
	.type	decode_one_mb.6,@function
decode_one_mb.6:                        # @decode_one_mb.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$817921173, -4(%rbp)    # imm = 0x30C07C95
	movl	%edi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpl	$817921173, -4(%rbp)    # imm = 0x30C07C95
	jne	.LBB16_2
.LBB16_1:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB16_1
.Lfunc_end16:
	.size	decode_one_mb.6, .Lfunc_end16-decode_one_mb.6
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.7        # -- Begin function DecOneForthPix.7
	.p2align	4, 0x90
	.type	DecOneForthPix.7,@function
DecOneForthPix.7:                       # @DecOneForthPix.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1053030448, -12(%rbp)  # imm = 0x3EC3F830
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB17_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB17_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB17_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_1
.LBB17_4:                               # %for.end
	cmpl	$1053030448, -12(%rbp)  # imm = 0x3EC3F830
	jne	.LBB17_6
.LBB17_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB17_5
.Lfunc_end17:
	.size	DecOneForthPix.7, .Lfunc_end17-DecOneForthPix.7
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.8        # -- Begin function DecOneForthPix.8
	.p2align	4, 0x90
	.type	DecOneForthPix.8,@function
DecOneForthPix.8:                       # @DecOneForthPix.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1626271912, -12(%rbp)  # imm = 0x60EEF0A8
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB18_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB18_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_1
.LBB18_4:                               # %for.end
	cmpl	$1626271912, -12(%rbp)  # imm = 0x60EEF0A8
	jne	.LBB18_6
.LBB18_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB18_5
.Lfunc_end18:
	.size	DecOneForthPix.8, .Lfunc_end18-DecOneForthPix.8
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.9     # -- Begin function Error_Concealment.9
	.p2align	4, 0x90
	.type	Error_Concealment.9,@function
Error_Concealment.9:                    # @Error_Concealment.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1519560536, -20(%rbp)  # imm = 0x5A92A758
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB19_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB19_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	$0, -4(%rbp)
.LBB19_3:                               # %for.cond2
                                        #   Parent Loop BB19_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB19_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB19_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB19_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB19_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB19_6:                               # %if.end
                                        #   in Loop: Header=BB19_3 Depth=2
	jmp	.LBB19_7
.LBB19_7:                               # %for.inc
                                        #   in Loop: Header=BB19_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_3
.LBB19_8:                               # %for.end
                                        #   in Loop: Header=BB19_1 Depth=1
	jmp	.LBB19_9
.LBB19_9:                               # %for.inc7
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_1
.LBB19_10:                              # %for.end9
	cmpl	$1519560536, -20(%rbp)  # imm = 0x5A92A758
	jne	.LBB19_12
.LBB19_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB19_11
.Lfunc_end19:
	.size	Error_Concealment.9, .Lfunc_end19-Error_Concealment.9
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.10    # -- Begin function Error_Concealment.10
	.p2align	4, 0x90
	.type	Error_Concealment.10,@function
Error_Concealment.10:                   # @Error_Concealment.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$102494763, -20(%rbp)   # imm = 0x61BF22B
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB20_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB20_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB20_1 Depth=1
	movl	$0, -8(%rbp)
.LBB20_3:                               # %for.cond2
                                        #   Parent Loop BB20_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB20_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB20_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB20_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB20_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB20_6:                               # %if.end
                                        #   in Loop: Header=BB20_3 Depth=2
	jmp	.LBB20_7
.LBB20_7:                               # %for.inc
                                        #   in Loop: Header=BB20_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_3
.LBB20_8:                               # %for.end
                                        #   in Loop: Header=BB20_1 Depth=1
	jmp	.LBB20_9
.LBB20_9:                               # %for.inc7
                                        #   in Loop: Header=BB20_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_1
.LBB20_10:                              # %for.end9
	cmpl	$102494763, -20(%rbp)   # imm = 0x61BF22B
	jne	.LBB20_12
.LBB20_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB20_11
.Lfunc_end20:
	.size	Error_Concealment.10, .Lfunc_end20-Error_Concealment.10
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.11
.LCPI21_0:
	.quad	4636737291354636288     # double 100
.LCPI21_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.11
	.p2align	4, 0x90
	.type	Build_Status_Map.11,@function
Build_Status_Map.11:                    # @Build_Status_Map.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$688293112, -44(%rbp)   # imm = 0x290684F8
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB21_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB21_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -12(%rbp)
.LBB21_3:                               # %for.cond2
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB21_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB21_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB21_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB21_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB21_13
.LBB21_6:                               # %if.then
                                        #   in Loop: Header=BB21_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI21_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI21_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB21_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB21_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB21_8:                               # %if.end
                                        #   in Loop: Header=BB21_3 Depth=2
	callq	rand
	vmovsd	.LCPI21_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI21_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB21_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB21_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB21_10:                              # %if.end20
                                        #   in Loop: Header=BB21_3 Depth=2
	callq	rand
	vmovsd	.LCPI21_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI21_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB21_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB21_3 Depth=2
	movl	$1, -4(%rbp)
.LBB21_12:                              # %if.end29
                                        #   in Loop: Header=BB21_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB21_13:                              # %if.end30
                                        #   in Loop: Header=BB21_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB21_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB21_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB21_18
.LBB21_15:                              # %if.else
                                        #   in Loop: Header=BB21_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB21_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB21_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB21_17:                              # %if.end49
                                        #   in Loop: Header=BB21_3 Depth=2
	jmp	.LBB21_18
.LBB21_18:                              # %if.end50
                                        #   in Loop: Header=BB21_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB21_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_3
.LBB21_20:                              # %for.end
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_21
.LBB21_21:                              # %for.inc53
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_1
.LBB21_22:                              # %for.end55
	cmpl	$688293112, -44(%rbp)   # imm = 0x290684F8
	jne	.LBB21_24
.LBB21_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB21_23
.Lfunc_end21:
	.size	Build_Status_Map.11, .Lfunc_end21-Build_Status_Map.11
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.12        # -- Begin function Conceal_Error.12
	.p2align	4, 0x90
	.type	Conceal_Error.12,@function
Conceal_Error.12:                       # @Conceal_Error.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1509385441, -68(%rbp)  # imm = 0x59F764E1
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB22_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB22_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB22_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB22_4:                               # %land.end
.LBB22_5:                               # %lor.end
.LBB22_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB22_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB22_9
.LBB22_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB22_14
.LBB22_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB22_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB22_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB22_12:                              # %land.end51
.LBB22_13:                              # %lor.end53
.LBB22_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB22_180
# %bb.15:                               # %land.end54
	movq	.LJTI22_0(,%rax,8), %rax
	jmpq	*%rax
.LBB22_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB22_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB22_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB22_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB22_18 Depth=1
	movl	$0, -4(%rbp)
.LBB22_20:                              # %for.cond68
                                        #   Parent Loop BB22_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB22_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB22_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB22_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_20
.LBB22_23:                              # %for.end
                                        #   in Loop: Header=BB22_18 Depth=1
	jmp	.LBB22_24
.LBB22_24:                              # %for.inc85
                                        #   in Loop: Header=BB22_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_18
.LBB22_25:                              # %for.end87
	jmp	.LBB22_35
.LBB22_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB22_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB22_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB22_27 Depth=1
	movl	$0, -4(%rbp)
.LBB22_29:                              # %for.cond92
                                        #   Parent Loop BB22_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB22_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB22_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB22_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_29
.LBB22_32:                              # %for.end104
                                        #   in Loop: Header=BB22_27 Depth=1
	jmp	.LBB22_33
.LBB22_33:                              # %for.inc105
                                        #   in Loop: Header=BB22_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_27
.LBB22_34:                              # %for.end107
	jmp	.LBB22_35
.LBB22_35:                              # %if.end
	jmp	.LBB22_180
.LBB22_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB22_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_39 Depth 2
                                        #       Child Loop BB22_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB22_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB22_37 Depth=1
	movl	$0, -16(%rbp)
.LBB22_39:                              # %for.cond113
                                        #   Parent Loop BB22_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB22_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB22_39 Depth=2
	movl	$0, -4(%rbp)
.LBB22_41:                              # %for.cond117
                                        #   Parent Loop BB22_37 Depth=1
                                        #     Parent Loop BB22_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB22_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB22_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB22_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_41
.LBB22_44:                              # %for.end141
                                        #   in Loop: Header=BB22_39 Depth=2
	jmp	.LBB22_45
.LBB22_45:                              # %for.inc142
                                        #   in Loop: Header=BB22_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_39
.LBB22_46:                              # %for.end144
                                        #   in Loop: Header=BB22_37 Depth=1
	jmp	.LBB22_47
.LBB22_47:                              # %for.inc145
                                        #   in Loop: Header=BB22_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_37
.LBB22_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB22_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB22_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB22_49 Depth=1
	movl	$0, -8(%rbp)
.LBB22_51:                              # %for.cond152
                                        #   Parent Loop BB22_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB22_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB22_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB22_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_51
.LBB22_54:                              # %for.end162
                                        #   in Loop: Header=BB22_49 Depth=1
	jmp	.LBB22_55
.LBB22_55:                              # %for.inc163
                                        #   in Loop: Header=BB22_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_49
.LBB22_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB22_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB22_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB22_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB22_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB22_59 Depth=1
	movl	$0, -4(%rbp)
.LBB22_61:                              # %for.cond175
                                        #   Parent Loop BB22_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB22_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB22_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB22_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_61
.LBB22_64:                              # %for.end195
                                        #   in Loop: Header=BB22_59 Depth=1
	jmp	.LBB22_65
.LBB22_65:                              # %for.inc196
                                        #   in Loop: Header=BB22_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_59
.LBB22_66:                              # %for.end198
	jmp	.LBB22_95
.LBB22_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB22_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB22_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_71 Depth 2
                                        #       Child Loop BB22_73 Depth 3
                                        #         Child Loop BB22_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB22_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB22_71:                              # %for.cond210
                                        #   Parent Loop BB22_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_73 Depth 3
                                        #         Child Loop BB22_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB22_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB22_73:                              # %for.cond236
                                        #   Parent Loop BB22_69 Depth=1
                                        #     Parent Loop BB22_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB22_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB22_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB22_73 Depth=3
	movl	$0, -4(%rbp)
.LBB22_75:                              # %for.cond240
                                        #   Parent Loop BB22_69 Depth=1
                                        #     Parent Loop BB22_71 Depth=2
                                        #       Parent Loop BB22_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB22_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB22_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB22_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_75
.LBB22_78:                              # %for.end259
                                        #   in Loop: Header=BB22_73 Depth=3
	jmp	.LBB22_79
.LBB22_79:                              # %for.inc260
                                        #   in Loop: Header=BB22_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_73
.LBB22_80:                              # %for.end262
                                        #   in Loop: Header=BB22_71 Depth=2
	jmp	.LBB22_81
.LBB22_81:                              # %for.inc263
                                        #   in Loop: Header=BB22_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_71
.LBB22_82:                              # %for.end265
                                        #   in Loop: Header=BB22_69 Depth=1
	jmp	.LBB22_83
.LBB22_83:                              # %for.inc266
                                        #   in Loop: Header=BB22_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_69
.LBB22_84:                              # %for.end268
	jmp	.LBB22_94
.LBB22_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB22_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB22_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB22_86 Depth=1
	movl	$0, -4(%rbp)
.LBB22_88:                              # %for.cond274
                                        #   Parent Loop BB22_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB22_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB22_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB22_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_88
.LBB22_91:                              # %for.end294
                                        #   in Loop: Header=BB22_86 Depth=1
	jmp	.LBB22_92
.LBB22_92:                              # %for.inc295
                                        #   in Loop: Header=BB22_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_86
.LBB22_93:                              # %for.end297
	jmp	.LBB22_94
.LBB22_94:                              # %if.end298
	jmp	.LBB22_95
.LBB22_95:                              # %if.end299
	jmp	.LBB22_105
.LBB22_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB22_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB22_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB22_97 Depth=1
	movl	$0, -4(%rbp)
.LBB22_99:                              # %for.cond305
                                        #   Parent Loop BB22_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB22_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB22_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB22_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_99
.LBB22_102:                             # %for.end317
                                        #   in Loop: Header=BB22_97 Depth=1
	jmp	.LBB22_103
.LBB22_103:                             # %for.inc318
                                        #   in Loop: Header=BB22_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_97
.LBB22_104:                             # %for.end320
	jmp	.LBB22_105
.LBB22_105:                             # %if.end321
	jmp	.LBB22_180
.LBB22_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB22_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB22_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_110 Depth 2
                                        #       Child Loop BB22_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB22_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB22_108 Depth=1
	movl	$0, -16(%rbp)
.LBB22_110:                             # %for.cond331
                                        #   Parent Loop BB22_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB22_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB22_110 Depth=2
	movl	$0, -4(%rbp)
.LBB22_112:                             # %for.cond335
                                        #   Parent Loop BB22_108 Depth=1
                                        #     Parent Loop BB22_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB22_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB22_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB22_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_112
.LBB22_115:                             # %for.end359
                                        #   in Loop: Header=BB22_110 Depth=2
	jmp	.LBB22_116
.LBB22_116:                             # %for.inc360
                                        #   in Loop: Header=BB22_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_110
.LBB22_117:                             # %for.end362
                                        #   in Loop: Header=BB22_108 Depth=1
	jmp	.LBB22_118
.LBB22_118:                             # %for.inc363
                                        #   in Loop: Header=BB22_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_108
.LBB22_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB22_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB22_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB22_120 Depth=1
	movl	$0, -8(%rbp)
.LBB22_122:                             # %for.cond370
                                        #   Parent Loop BB22_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB22_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB22_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB22_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_122
.LBB22_125:                             # %for.end380
                                        #   in Loop: Header=BB22_120 Depth=1
	jmp	.LBB22_126
.LBB22_126:                             # %for.inc381
                                        #   in Loop: Header=BB22_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_120
.LBB22_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB22_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB22_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB22_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB22_129 Depth=1
	movl	$0, -4(%rbp)
.LBB22_131:                             # %for.cond390
                                        #   Parent Loop BB22_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB22_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB22_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB22_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_131
.LBB22_134:                             # %for.end410
                                        #   in Loop: Header=BB22_129 Depth=1
	jmp	.LBB22_135
.LBB22_135:                             # %for.inc411
                                        #   in Loop: Header=BB22_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_129
.LBB22_136:                             # %for.end413
	jmp	.LBB22_156
.LBB22_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB22_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB22_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_141 Depth 2
                                        #       Child Loop BB22_143 Depth 3
                                        #         Child Loop BB22_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB22_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB22_141:                             # %for.cond425
                                        #   Parent Loop BB22_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_143 Depth 3
                                        #         Child Loop BB22_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB22_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB22_143:                             # %for.cond452
                                        #   Parent Loop BB22_139 Depth=1
                                        #     Parent Loop BB22_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB22_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB22_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB22_143 Depth=3
	movl	$0, -4(%rbp)
.LBB22_145:                             # %for.cond456
                                        #   Parent Loop BB22_139 Depth=1
                                        #     Parent Loop BB22_141 Depth=2
                                        #       Parent Loop BB22_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB22_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB22_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB22_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_145
.LBB22_148:                             # %for.end475
                                        #   in Loop: Header=BB22_143 Depth=3
	jmp	.LBB22_149
.LBB22_149:                             # %for.inc476
                                        #   in Loop: Header=BB22_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_143
.LBB22_150:                             # %for.end478
                                        #   in Loop: Header=BB22_141 Depth=2
	jmp	.LBB22_151
.LBB22_151:                             # %for.inc479
                                        #   in Loop: Header=BB22_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_141
.LBB22_152:                             # %for.end481
                                        #   in Loop: Header=BB22_139 Depth=1
	jmp	.LBB22_153
.LBB22_153:                             # %for.inc482
                                        #   in Loop: Header=BB22_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_139
.LBB22_154:                             # %for.end484
	jmp	.LBB22_155
.LBB22_155:                             # %if.end485
	jmp	.LBB22_156
.LBB22_156:                             # %if.end486
	jmp	.LBB22_157
.LBB22_157:                             # %if.end487
	jmp	.LBB22_180
.LBB22_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB22_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB22_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB22_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB22_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB22_161 Depth=1
	movl	$0, -4(%rbp)
.LBB22_163:                             # %for.cond499
                                        #   Parent Loop BB22_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB22_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB22_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB22_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_163
.LBB22_166:                             # %for.end519
                                        #   in Loop: Header=BB22_161 Depth=1
	jmp	.LBB22_167
.LBB22_167:                             # %for.inc520
                                        #   in Loop: Header=BB22_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_161
.LBB22_168:                             # %for.end522
	jmp	.LBB22_169
.LBB22_169:                             # %if.end523
	jmp	.LBB22_179
.LBB22_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB22_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB22_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB22_171 Depth=1
	movl	$0, -4(%rbp)
.LBB22_173:                             # %for.cond529
                                        #   Parent Loop BB22_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB22_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB22_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB22_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_173
.LBB22_176:                             # %for.end541
                                        #   in Loop: Header=BB22_171 Depth=1
	jmp	.LBB22_177
.LBB22_177:                             # %for.inc542
                                        #   in Loop: Header=BB22_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_171
.LBB22_178:                             # %for.end544
	jmp	.LBB22_179
.LBB22_179:                             # %if.end545
	jmp	.LBB22_180
.LBB22_180:                             # %sw.epilog
	cmpl	$1509385441, -68(%rbp)  # imm = 0x59F764E1
	jne	.LBB22_182
.LBB22_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB22_181
.Lfunc_end22:
	.size	Conceal_Error.12, .Lfunc_end22-Conceal_Error.12
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI22_0:
	.quad	.LBB22_16
	.quad	.LBB22_158
	.quad	.LBB22_106
	.quad	.LBB22_180
	.quad	.LBB22_36
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.13
.LCPI23_0:
	.quad	4636737291354636288     # double 100
.LCPI23_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.13
	.p2align	4, 0x90
	.type	Build_Status_Map.13,@function
Build_Status_Map.13:                    # @Build_Status_Map.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$774529557, -36(%rbp)   # imm = 0x2E2A6215
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB23_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB23_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB23_1 Depth=1
	movl	$0, -12(%rbp)
.LBB23_3:                               # %for.cond2
                                        #   Parent Loop BB23_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB23_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB23_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB23_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB23_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB23_13
.LBB23_6:                               # %if.then
                                        #   in Loop: Header=BB23_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI23_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI23_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB23_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB23_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB23_8:                               # %if.end
                                        #   in Loop: Header=BB23_3 Depth=2
	callq	rand
	vmovsd	.LCPI23_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI23_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB23_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB23_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB23_10:                              # %if.end20
                                        #   in Loop: Header=BB23_3 Depth=2
	callq	rand
	vmovsd	.LCPI23_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI23_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB23_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB23_3 Depth=2
	movl	$1, -4(%rbp)
.LBB23_12:                              # %if.end29
                                        #   in Loop: Header=BB23_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB23_13:                              # %if.end30
                                        #   in Loop: Header=BB23_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB23_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB23_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB23_18
.LBB23_15:                              # %if.else
                                        #   in Loop: Header=BB23_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB23_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB23_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB23_17:                              # %if.end49
                                        #   in Loop: Header=BB23_3 Depth=2
	jmp	.LBB23_18
.LBB23_18:                              # %if.end50
                                        #   in Loop: Header=BB23_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB23_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_3
.LBB23_20:                              # %for.end
                                        #   in Loop: Header=BB23_1 Depth=1
	jmp	.LBB23_21
.LBB23_21:                              # %for.inc53
                                        #   in Loop: Header=BB23_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_1
.LBB23_22:                              # %for.end55
	cmpl	$774529557, -36(%rbp)   # imm = 0x2E2A6215
	jne	.LBB23_24
.LBB23_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB23_23
.Lfunc_end23:
	.size	Build_Status_Map.13, .Lfunc_end23-Build_Status_Map.13
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.14  # -- Begin function Get_Reference_Block.14
	.p2align	4, 0x90
	.type	Get_Reference_Block.14,@function
Get_Reference_Block.14:                 # @Get_Reference_Block.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1885239093, -32(%rbp)  # imm = 0x705E7735
	movq	%rdi, -48(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -28(%rbp)
	movq	%r9, -56(%rbp)
	movl	-36(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB24_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB24_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	$0, -8(%rbp)
.LBB24_3:                               # %for.cond5
                                        #   Parent Loop BB24_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB24_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB24_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB24_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_3
.LBB24_6:                               # %for.end
                                        #   in Loop: Header=BB24_1 Depth=1
	jmp	.LBB24_7
.LBB24_7:                               # %for.inc14
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_1
.LBB24_8:                               # %for.end16
	cmpl	$1885239093, -32(%rbp)  # imm = 0x705E7735
	jne	.LBB24_10
.LBB24_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB24_9
.Lfunc_end24:
	.size	Get_Reference_Block.14, .Lfunc_end24-Get_Reference_Block.14
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.15  # -- Begin function Get_Reference_Block.15
	.p2align	4, 0x90
	.type	Get_Reference_Block.15,@function
Get_Reference_Block.15:                 # @Get_Reference_Block.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$473742644, -24(%rbp)   # imm = 0x1C3CBD34
	movq	%rdi, -56(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -20(%rbp)
	movq	%r9, -48(%rbp)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-36(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB25_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB25_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB25_1 Depth=1
	movl	$0, -8(%rbp)
.LBB25_3:                               # %for.cond5
                                        #   Parent Loop BB25_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB25_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB25_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-28(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-32(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB25_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_3
.LBB25_6:                               # %for.end
                                        #   in Loop: Header=BB25_1 Depth=1
	jmp	.LBB25_7
.LBB25_7:                               # %for.inc14
                                        #   in Loop: Header=BB25_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_1
.LBB25_8:                               # %for.end16
	cmpl	$473742644, -24(%rbp)   # imm = 0x1C3CBD34
	jne	.LBB25_10
.LBB25_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB25_9
.Lfunc_end25:
	.size	Get_Reference_Block.15, .Lfunc_end25-Get_Reference_Block.15
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.16 # -- Begin function compute_residue_b8block.16
	.p2align	4, 0x90
	.type	compute_residue_b8block.16,@function
compute_residue_b8block.16:             # @compute_residue_b8block.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2142906612, -36(%rbp)  # imm = 0x7FBA28F4
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB26_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB26_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB26_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB26_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB26_4:                               # %for.cond4
                                        #   Parent Loop BB26_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB26_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB26_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-20(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB26_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_4
.LBB26_7:                               # %for.end
                                        #   in Loop: Header=BB26_2 Depth=1
	jmp	.LBB26_8
.LBB26_8:                               # %for.inc22
                                        #   in Loop: Header=BB26_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_2
.LBB26_9:                               # %for.end24
	jmp	.LBB26_19
.LBB26_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB26_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB26_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB26_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB26_13:                              # %for.cond29
                                        #   Parent Loop BB26_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB26_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB26_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB26_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_13
.LBB26_16:                              # %for.end56
                                        #   in Loop: Header=BB26_11 Depth=1
	jmp	.LBB26_17
.LBB26_17:                              # %for.inc57
                                        #   in Loop: Header=BB26_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_11
.LBB26_18:                              # %for.end59
	jmp	.LBB26_19
.LBB26_19:                              # %if.end
	cmpl	$2142906612, -36(%rbp)  # imm = 0x7FBA28F4
	jne	.LBB26_21
.LBB26_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB26_20
.Lfunc_end26:
	.size	compute_residue_b8block.16, .Lfunc_end26-compute_residue_b8block.16
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.17  # -- Begin function Get_Reference_Pixel.17
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.17,@function
Get_Reference_Pixel.17:                 # @Get_Reference_Pixel.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$461206553, -104(%rbp)  # imm = 0x1B7D7419
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB27_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB27_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB27_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB27_5
.LBB27_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB27_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB27_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB27_11
.LBB27_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB27_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB27_10
.LBB27_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB27_10:                              # %cond.end14
.LBB27_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB27_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB27_14
.LBB27_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB27_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB27_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB27_20
.LBB27_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB27_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB27_19
.LBB27_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB27_19:                              # %cond.end29
.LBB27_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_332
.LBB27_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB27_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB27_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB27_25
.LBB27_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB27_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB27_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB27_31
.LBB27_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB27_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB27_30
.LBB27_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB27_30:                              # %cond.end52
.LBB27_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB27_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB27_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB27_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB27_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB27_36
.LBB27_35:                              # %cond.false61
                                        #   in Loop: Header=BB27_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB27_36:                              # %cond.end63
                                        #   in Loop: Header=BB27_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB27_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB27_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB27_42
.LBB27_38:                              # %cond.false68
                                        #   in Loop: Header=BB27_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB27_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB27_41
.LBB27_40:                              # %cond.false73
                                        #   in Loop: Header=BB27_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB27_41:                              # %cond.end75
                                        #   in Loop: Header=BB27_32 Depth=1
.LBB27_42:                              # %cond.end77
                                        #   in Loop: Header=BB27_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB27_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_32
.LBB27_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB27_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB27_47
.LBB27_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB27_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB27_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB27_53
.LBB27_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB27_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB27_52
.LBB27_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB27_52:                              # %cond.end113
.LBB27_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB27_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB27_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB27_57
.LBB27_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB27_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB27_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB27_63
.LBB27_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB27_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB27_62
.LBB27_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB27_62:                              # %cond.end136
.LBB27_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB27_76
.LBB27_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB27_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB27_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB27_68
.LBB27_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB27_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB27_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB27_74
.LBB27_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB27_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB27_73
.LBB27_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB27_73:                              # %cond.end169
.LBB27_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB27_75:                              # %if.end
	jmp	.LBB27_76
.LBB27_76:                              # %if.end178
	jmp	.LBB27_331
.LBB27_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB27_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB27_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB27_81
.LBB27_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB27_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB27_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB27_87
.LBB27_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB27_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB27_86
.LBB27_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB27_86:                              # %cond.end197
.LBB27_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB27_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB27_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB27_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB27_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB27_92
.LBB27_91:                              # %cond.false209
                                        #   in Loop: Header=BB27_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB27_92:                              # %cond.end211
                                        #   in Loop: Header=BB27_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB27_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB27_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB27_98
.LBB27_94:                              # %cond.false216
                                        #   in Loop: Header=BB27_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB27_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB27_97
.LBB27_96:                              # %cond.false221
                                        #   in Loop: Header=BB27_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB27_97:                              # %cond.end223
                                        #   in Loop: Header=BB27_88 Depth=1
.LBB27_98:                              # %cond.end225
                                        #   in Loop: Header=BB27_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB27_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB27_88
.LBB27_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB27_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB27_103
.LBB27_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB27_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB27_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB27_109
.LBB27_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB27_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB27_108
.LBB27_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB27_108:                             # %cond.end266
.LBB27_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB27_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB27_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB27_113
.LBB27_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB27_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB27_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB27_119
.LBB27_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB27_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB27_118
.LBB27_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB27_118:                             # %cond.end287
.LBB27_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB27_132
.LBB27_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB27_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB27_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB27_124
.LBB27_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB27_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB27_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB27_130
.LBB27_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB27_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB27_129
.LBB27_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB27_129:                             # %cond.end320
.LBB27_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB27_131:                             # %if.end331
	jmp	.LBB27_132
.LBB27_132:                             # %if.end332
	jmp	.LBB27_330
.LBB27_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB27_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB27_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB27_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB27_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB27_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB27_139
.LBB27_138:                             # %cond.false345
                                        #   in Loop: Header=BB27_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB27_139:                             # %cond.end347
                                        #   in Loop: Header=BB27_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB27_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB27_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB27_145
.LBB27_141:                             # %cond.false352
                                        #   in Loop: Header=BB27_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB27_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB27_144
.LBB27_143:                             # %cond.false357
                                        #   in Loop: Header=BB27_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB27_144:                             # %cond.end359
                                        #   in Loop: Header=BB27_135 Depth=1
.LBB27_145:                             # %cond.end361
                                        #   in Loop: Header=BB27_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB27_146:                             # %for.cond363
                                        #   Parent Loop BB27_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB27_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB27_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB27_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB27_150
.LBB27_149:                             # %cond.false371
                                        #   in Loop: Header=BB27_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB27_150:                             # %cond.end373
                                        #   in Loop: Header=BB27_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB27_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB27_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB27_156
.LBB27_152:                             # %cond.false378
                                        #   in Loop: Header=BB27_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB27_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB27_155
.LBB27_154:                             # %cond.false383
                                        #   in Loop: Header=BB27_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB27_155:                             # %cond.end385
                                        #   in Loop: Header=BB27_146 Depth=2
.LBB27_156:                             # %cond.end387
                                        #   in Loop: Header=BB27_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB27_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_146
.LBB27_158:                             # %for.end401
                                        #   in Loop: Header=BB27_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB27_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB27_135
.LBB27_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB27_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB27_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB27_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB27_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB27_161
.LBB27_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB27_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB27_167
.LBB27_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB27_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB27_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB27_173
.LBB27_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB27_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB27_172
.LBB27_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB27_172:                             # %cond.end449
.LBB27_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB27_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB27_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB27_177
.LBB27_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB27_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB27_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB27_183
.LBB27_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB27_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB27_182
.LBB27_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB27_182:                             # %cond.end486
.LBB27_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB27_196
.LBB27_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB27_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB27_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB27_188
.LBB27_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB27_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB27_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB27_194
.LBB27_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB27_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB27_193
.LBB27_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB27_193:                             # %cond.end526
.LBB27_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB27_195:                             # %if.end532
	jmp	.LBB27_196
.LBB27_196:                             # %if.end533
	jmp	.LBB27_329
.LBB27_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB27_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB27_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB27_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB27_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB27_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB27_203
.LBB27_202:                             # %cond.false546
                                        #   in Loop: Header=BB27_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB27_203:                             # %cond.end548
                                        #   in Loop: Header=BB27_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB27_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB27_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB27_209
.LBB27_205:                             # %cond.false553
                                        #   in Loop: Header=BB27_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB27_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB27_208
.LBB27_207:                             # %cond.false558
                                        #   in Loop: Header=BB27_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB27_208:                             # %cond.end560
                                        #   in Loop: Header=BB27_199 Depth=1
.LBB27_209:                             # %cond.end562
                                        #   in Loop: Header=BB27_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB27_210:                             # %for.cond564
                                        #   Parent Loop BB27_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB27_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB27_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB27_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB27_214
.LBB27_213:                             # %cond.false572
                                        #   in Loop: Header=BB27_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB27_214:                             # %cond.end574
                                        #   in Loop: Header=BB27_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB27_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB27_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB27_220
.LBB27_216:                             # %cond.false579
                                        #   in Loop: Header=BB27_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB27_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB27_219
.LBB27_218:                             # %cond.false584
                                        #   in Loop: Header=BB27_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB27_219:                             # %cond.end586
                                        #   in Loop: Header=BB27_210 Depth=2
.LBB27_220:                             # %cond.end588
                                        #   in Loop: Header=BB27_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB27_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB27_210
.LBB27_222:                             # %for.end602
                                        #   in Loop: Header=BB27_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB27_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_199
.LBB27_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB27_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB27_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB27_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB27_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_225
.LBB27_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB27_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB27_231
.LBB27_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB27_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB27_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB27_237
.LBB27_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB27_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB27_236
.LBB27_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB27_236:                             # %cond.end650
.LBB27_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB27_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB27_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB27_241
.LBB27_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB27_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB27_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB27_247
.LBB27_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB27_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB27_246
.LBB27_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB27_246:                             # %cond.end687
.LBB27_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB27_258
.LBB27_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB27_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB27_251
.LBB27_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB27_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB27_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB27_257
.LBB27_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB27_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB27_256
.LBB27_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB27_256:                             # %cond.end724
.LBB27_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB27_258:                             # %if.end730
	jmp	.LBB27_328
.LBB27_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB27_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB27_262
.LBB27_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB27_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB27_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB27_265
.LBB27_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB27_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB27_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB27_271
.LBB27_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB27_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB27_270
.LBB27_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB27_270:                             # %cond.end753
.LBB27_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB27_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB27_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB27_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB27_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB27_276
.LBB27_275:                             # %cond.false765
                                        #   in Loop: Header=BB27_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB27_276:                             # %cond.end767
                                        #   in Loop: Header=BB27_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB27_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB27_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB27_282
.LBB27_278:                             # %cond.false772
                                        #   in Loop: Header=BB27_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB27_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB27_281
.LBB27_280:                             # %cond.false777
                                        #   in Loop: Header=BB27_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB27_281:                             # %cond.end779
                                        #   in Loop: Header=BB27_272 Depth=1
.LBB27_282:                             # %cond.end781
                                        #   in Loop: Header=BB27_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB27_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_272
.LBB27_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB27_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB27_287
.LBB27_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB27_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB27_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB27_293
.LBB27_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB27_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB27_292
.LBB27_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB27_292:                             # %cond.end822
.LBB27_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB27_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB27_296
.LBB27_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB27_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB27_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB27_299
.LBB27_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB27_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB27_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB27_305
.LBB27_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB27_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB27_304
.LBB27_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB27_304:                             # %cond.end847
.LBB27_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB27_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB27_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB27_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB27_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB27_310
.LBB27_309:                             # %cond.false859
                                        #   in Loop: Header=BB27_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB27_310:                             # %cond.end861
                                        #   in Loop: Header=BB27_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB27_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB27_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB27_316
.LBB27_312:                             # %cond.false866
                                        #   in Loop: Header=BB27_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB27_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB27_315
.LBB27_314:                             # %cond.false871
                                        #   in Loop: Header=BB27_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB27_315:                             # %cond.end873
                                        #   in Loop: Header=BB27_306 Depth=1
.LBB27_316:                             # %cond.end875
                                        #   in Loop: Header=BB27_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB27_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB27_306
.LBB27_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB27_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB27_321
.LBB27_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB27_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB27_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB27_327
.LBB27_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB27_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB27_326
.LBB27_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB27_326:                             # %cond.end916
.LBB27_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-100(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB27_328:                             # %if.end922
	jmp	.LBB27_329
.LBB27_329:                             # %if.end923
	jmp	.LBB27_330
.LBB27_330:                             # %if.end924
	jmp	.LBB27_331
.LBB27_331:                             # %if.end925
	jmp	.LBB27_332
.LBB27_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$461206553, -104(%rbp)  # imm = 0x1B7D7419
	jne	.LBB27_334
.LBB27_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB27_333
.Lfunc_end27:
	.size	Get_Reference_Pixel.17, .Lfunc_end27-Get_Reference_Pixel.17
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.18  # -- Begin function Get_Reference_Pixel.18
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.18,@function
Get_Reference_Pixel.18:                 # @Get_Reference_Pixel.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1097785518, -104(%rbp) # imm = 0x416EE0AE
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB28_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB28_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB28_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB28_5
.LBB28_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB28_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB28_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB28_11
.LBB28_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB28_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB28_10
.LBB28_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB28_10:                              # %cond.end14
.LBB28_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB28_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB28_14
.LBB28_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB28_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB28_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB28_20
.LBB28_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB28_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB28_19
.LBB28_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB28_19:                              # %cond.end29
.LBB28_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_332
.LBB28_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB28_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB28_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB28_25
.LBB28_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB28_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB28_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB28_31
.LBB28_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB28_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB28_30
.LBB28_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB28_30:                              # %cond.end52
.LBB28_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB28_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB28_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB28_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB28_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB28_36
.LBB28_35:                              # %cond.false61
                                        #   in Loop: Header=BB28_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB28_36:                              # %cond.end63
                                        #   in Loop: Header=BB28_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB28_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB28_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB28_42
.LBB28_38:                              # %cond.false68
                                        #   in Loop: Header=BB28_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB28_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB28_41
.LBB28_40:                              # %cond.false73
                                        #   in Loop: Header=BB28_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB28_41:                              # %cond.end75
                                        #   in Loop: Header=BB28_32 Depth=1
.LBB28_42:                              # %cond.end77
                                        #   in Loop: Header=BB28_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB28_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_32
.LBB28_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB28_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB28_47
.LBB28_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB28_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB28_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB28_53
.LBB28_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB28_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB28_52
.LBB28_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB28_52:                              # %cond.end113
.LBB28_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB28_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB28_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB28_57
.LBB28_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB28_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB28_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB28_63
.LBB28_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB28_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB28_62
.LBB28_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB28_62:                              # %cond.end136
.LBB28_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB28_76
.LBB28_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB28_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB28_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB28_68
.LBB28_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB28_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB28_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB28_74
.LBB28_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB28_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB28_73
.LBB28_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB28_73:                              # %cond.end169
.LBB28_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB28_75:                              # %if.end
	jmp	.LBB28_76
.LBB28_76:                              # %if.end178
	jmp	.LBB28_331
.LBB28_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB28_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB28_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB28_81
.LBB28_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB28_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB28_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB28_87
.LBB28_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB28_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB28_86
.LBB28_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB28_86:                              # %cond.end197
.LBB28_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB28_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB28_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB28_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB28_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB28_92
.LBB28_91:                              # %cond.false209
                                        #   in Loop: Header=BB28_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB28_92:                              # %cond.end211
                                        #   in Loop: Header=BB28_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB28_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB28_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB28_98
.LBB28_94:                              # %cond.false216
                                        #   in Loop: Header=BB28_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB28_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB28_97
.LBB28_96:                              # %cond.false221
                                        #   in Loop: Header=BB28_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB28_97:                              # %cond.end223
                                        #   in Loop: Header=BB28_88 Depth=1
.LBB28_98:                              # %cond.end225
                                        #   in Loop: Header=BB28_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB28_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB28_88
.LBB28_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB28_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB28_103
.LBB28_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB28_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB28_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB28_109
.LBB28_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB28_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB28_108
.LBB28_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB28_108:                             # %cond.end266
.LBB28_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB28_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB28_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB28_113
.LBB28_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB28_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB28_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB28_119
.LBB28_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB28_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB28_118
.LBB28_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB28_118:                             # %cond.end287
.LBB28_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB28_132
.LBB28_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB28_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB28_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB28_124
.LBB28_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB28_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB28_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB28_130
.LBB28_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB28_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB28_129
.LBB28_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB28_129:                             # %cond.end320
.LBB28_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB28_131:                             # %if.end331
	jmp	.LBB28_132
.LBB28_132:                             # %if.end332
	jmp	.LBB28_330
.LBB28_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB28_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB28_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB28_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB28_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB28_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB28_139
.LBB28_138:                             # %cond.false345
                                        #   in Loop: Header=BB28_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB28_139:                             # %cond.end347
                                        #   in Loop: Header=BB28_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB28_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB28_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB28_145
.LBB28_141:                             # %cond.false352
                                        #   in Loop: Header=BB28_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB28_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB28_144
.LBB28_143:                             # %cond.false357
                                        #   in Loop: Header=BB28_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB28_144:                             # %cond.end359
                                        #   in Loop: Header=BB28_135 Depth=1
.LBB28_145:                             # %cond.end361
                                        #   in Loop: Header=BB28_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB28_146:                             # %for.cond363
                                        #   Parent Loop BB28_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB28_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB28_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB28_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB28_150
.LBB28_149:                             # %cond.false371
                                        #   in Loop: Header=BB28_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB28_150:                             # %cond.end373
                                        #   in Loop: Header=BB28_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB28_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB28_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB28_156
.LBB28_152:                             # %cond.false378
                                        #   in Loop: Header=BB28_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB28_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB28_155
.LBB28_154:                             # %cond.false383
                                        #   in Loop: Header=BB28_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB28_155:                             # %cond.end385
                                        #   in Loop: Header=BB28_146 Depth=2
.LBB28_156:                             # %cond.end387
                                        #   in Loop: Header=BB28_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB28_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_146
.LBB28_158:                             # %for.end401
                                        #   in Loop: Header=BB28_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB28_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB28_135
.LBB28_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB28_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB28_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB28_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB28_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB28_161
.LBB28_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB28_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB28_167
.LBB28_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB28_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB28_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB28_173
.LBB28_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB28_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB28_172
.LBB28_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB28_172:                             # %cond.end449
.LBB28_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB28_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB28_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB28_177
.LBB28_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB28_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB28_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB28_183
.LBB28_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB28_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB28_182
.LBB28_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB28_182:                             # %cond.end486
.LBB28_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB28_196
.LBB28_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB28_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB28_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB28_188
.LBB28_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB28_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB28_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB28_194
.LBB28_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB28_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB28_193
.LBB28_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB28_193:                             # %cond.end526
.LBB28_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB28_195:                             # %if.end532
	jmp	.LBB28_196
.LBB28_196:                             # %if.end533
	jmp	.LBB28_329
.LBB28_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB28_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB28_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB28_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB28_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB28_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB28_203
.LBB28_202:                             # %cond.false546
                                        #   in Loop: Header=BB28_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB28_203:                             # %cond.end548
                                        #   in Loop: Header=BB28_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB28_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB28_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB28_209
.LBB28_205:                             # %cond.false553
                                        #   in Loop: Header=BB28_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB28_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB28_208
.LBB28_207:                             # %cond.false558
                                        #   in Loop: Header=BB28_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB28_208:                             # %cond.end560
                                        #   in Loop: Header=BB28_199 Depth=1
.LBB28_209:                             # %cond.end562
                                        #   in Loop: Header=BB28_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB28_210:                             # %for.cond564
                                        #   Parent Loop BB28_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB28_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB28_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB28_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB28_214
.LBB28_213:                             # %cond.false572
                                        #   in Loop: Header=BB28_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB28_214:                             # %cond.end574
                                        #   in Loop: Header=BB28_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB28_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB28_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB28_220
.LBB28_216:                             # %cond.false579
                                        #   in Loop: Header=BB28_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB28_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB28_219
.LBB28_218:                             # %cond.false584
                                        #   in Loop: Header=BB28_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB28_219:                             # %cond.end586
                                        #   in Loop: Header=BB28_210 Depth=2
.LBB28_220:                             # %cond.end588
                                        #   in Loop: Header=BB28_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB28_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB28_210
.LBB28_222:                             # %for.end602
                                        #   in Loop: Header=BB28_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB28_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_199
.LBB28_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB28_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB28_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB28_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB28_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_225
.LBB28_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB28_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB28_231
.LBB28_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB28_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB28_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB28_237
.LBB28_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB28_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB28_236
.LBB28_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB28_236:                             # %cond.end650
.LBB28_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB28_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB28_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB28_241
.LBB28_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB28_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB28_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB28_247
.LBB28_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB28_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB28_246
.LBB28_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB28_246:                             # %cond.end687
.LBB28_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB28_258
.LBB28_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB28_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB28_251
.LBB28_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB28_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB28_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB28_257
.LBB28_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB28_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB28_256
.LBB28_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB28_256:                             # %cond.end724
.LBB28_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB28_258:                             # %if.end730
	jmp	.LBB28_328
.LBB28_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB28_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB28_262
.LBB28_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB28_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB28_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB28_265
.LBB28_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB28_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB28_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB28_271
.LBB28_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB28_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB28_270
.LBB28_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB28_270:                             # %cond.end753
.LBB28_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB28_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB28_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB28_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB28_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB28_276
.LBB28_275:                             # %cond.false765
                                        #   in Loop: Header=BB28_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB28_276:                             # %cond.end767
                                        #   in Loop: Header=BB28_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB28_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB28_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB28_282
.LBB28_278:                             # %cond.false772
                                        #   in Loop: Header=BB28_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB28_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB28_281
.LBB28_280:                             # %cond.false777
                                        #   in Loop: Header=BB28_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB28_281:                             # %cond.end779
                                        #   in Loop: Header=BB28_272 Depth=1
.LBB28_282:                             # %cond.end781
                                        #   in Loop: Header=BB28_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB28_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_272
.LBB28_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB28_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB28_287
.LBB28_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB28_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB28_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB28_293
.LBB28_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB28_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB28_292
.LBB28_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB28_292:                             # %cond.end822
.LBB28_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB28_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB28_296
.LBB28_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB28_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB28_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB28_299
.LBB28_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB28_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB28_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB28_305
.LBB28_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB28_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB28_304
.LBB28_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB28_304:                             # %cond.end847
.LBB28_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB28_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB28_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB28_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB28_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB28_310
.LBB28_309:                             # %cond.false859
                                        #   in Loop: Header=BB28_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB28_310:                             # %cond.end861
                                        #   in Loop: Header=BB28_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB28_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB28_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB28_316
.LBB28_312:                             # %cond.false866
                                        #   in Loop: Header=BB28_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB28_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB28_315
.LBB28_314:                             # %cond.false871
                                        #   in Loop: Header=BB28_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB28_315:                             # %cond.end873
                                        #   in Loop: Header=BB28_306 Depth=1
.LBB28_316:                             # %cond.end875
                                        #   in Loop: Header=BB28_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB28_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB28_306
.LBB28_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB28_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB28_321
.LBB28_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB28_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB28_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB28_327
.LBB28_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB28_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB28_326
.LBB28_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB28_326:                             # %cond.end916
.LBB28_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-100(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB28_328:                             # %if.end922
	jmp	.LBB28_329
.LBB28_329:                             # %if.end923
	jmp	.LBB28_330
.LBB28_330:                             # %if.end924
	jmp	.LBB28_331
.LBB28_331:                             # %if.end925
	jmp	.LBB28_332
.LBB28_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1097785518, -104(%rbp) # imm = 0x416EE0AE
	jne	.LBB28_334
.LBB28_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB28_333
.Lfunc_end28:
	.size	Get_Reference_Pixel.18, .Lfunc_end28-Get_Reference_Pixel.18
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.19  # -- Begin function Get_Reference_Pixel.19
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.19,@function
Get_Reference_Pixel.19:                 # @Get_Reference_Pixel.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$882327377, -100(%rbp)  # imm = 0x34973F51
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB29_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB29_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB29_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB29_5
.LBB29_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB29_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB29_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB29_11
.LBB29_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB29_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB29_10
.LBB29_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB29_10:                              # %cond.end14
.LBB29_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB29_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB29_14
.LBB29_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB29_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB29_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB29_20
.LBB29_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB29_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB29_19
.LBB29_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB29_19:                              # %cond.end29
.LBB29_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_332
.LBB29_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB29_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB29_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB29_25
.LBB29_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB29_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB29_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB29_31
.LBB29_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB29_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB29_30
.LBB29_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB29_30:                              # %cond.end52
.LBB29_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB29_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB29_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB29_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB29_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB29_36
.LBB29_35:                              # %cond.false61
                                        #   in Loop: Header=BB29_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB29_36:                              # %cond.end63
                                        #   in Loop: Header=BB29_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB29_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB29_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB29_42
.LBB29_38:                              # %cond.false68
                                        #   in Loop: Header=BB29_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB29_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB29_41
.LBB29_40:                              # %cond.false73
                                        #   in Loop: Header=BB29_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB29_41:                              # %cond.end75
                                        #   in Loop: Header=BB29_32 Depth=1
.LBB29_42:                              # %cond.end77
                                        #   in Loop: Header=BB29_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB29_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB29_32
.LBB29_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB29_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB29_47
.LBB29_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB29_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB29_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB29_53
.LBB29_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB29_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB29_52
.LBB29_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB29_52:                              # %cond.end113
.LBB29_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB29_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB29_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB29_57
.LBB29_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB29_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB29_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB29_63
.LBB29_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB29_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB29_62
.LBB29_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB29_62:                              # %cond.end136
.LBB29_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB29_76
.LBB29_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB29_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB29_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB29_68
.LBB29_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB29_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB29_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB29_74
.LBB29_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB29_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB29_73
.LBB29_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB29_73:                              # %cond.end169
.LBB29_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB29_75:                              # %if.end
	jmp	.LBB29_76
.LBB29_76:                              # %if.end178
	jmp	.LBB29_331
.LBB29_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB29_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB29_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB29_81
.LBB29_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB29_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB29_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB29_87
.LBB29_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB29_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB29_86
.LBB29_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB29_86:                              # %cond.end197
.LBB29_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB29_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB29_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB29_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB29_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB29_92
.LBB29_91:                              # %cond.false209
                                        #   in Loop: Header=BB29_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB29_92:                              # %cond.end211
                                        #   in Loop: Header=BB29_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB29_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB29_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB29_98
.LBB29_94:                              # %cond.false216
                                        #   in Loop: Header=BB29_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB29_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB29_97
.LBB29_96:                              # %cond.false221
                                        #   in Loop: Header=BB29_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB29_97:                              # %cond.end223
                                        #   in Loop: Header=BB29_88 Depth=1
.LBB29_98:                              # %cond.end225
                                        #   in Loop: Header=BB29_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB29_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_88
.LBB29_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB29_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB29_103
.LBB29_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB29_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB29_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB29_109
.LBB29_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB29_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB29_108
.LBB29_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB29_108:                             # %cond.end266
.LBB29_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB29_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB29_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB29_113
.LBB29_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB29_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB29_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB29_119
.LBB29_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB29_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB29_118
.LBB29_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB29_118:                             # %cond.end287
.LBB29_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB29_132
.LBB29_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB29_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB29_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB29_124
.LBB29_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB29_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB29_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB29_130
.LBB29_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB29_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB29_129
.LBB29_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB29_129:                             # %cond.end320
.LBB29_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB29_131:                             # %if.end331
	jmp	.LBB29_132
.LBB29_132:                             # %if.end332
	jmp	.LBB29_330
.LBB29_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB29_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB29_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB29_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB29_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB29_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB29_139
.LBB29_138:                             # %cond.false345
                                        #   in Loop: Header=BB29_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB29_139:                             # %cond.end347
                                        #   in Loop: Header=BB29_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB29_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB29_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB29_145
.LBB29_141:                             # %cond.false352
                                        #   in Loop: Header=BB29_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB29_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB29_144
.LBB29_143:                             # %cond.false357
                                        #   in Loop: Header=BB29_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB29_144:                             # %cond.end359
                                        #   in Loop: Header=BB29_135 Depth=1
.LBB29_145:                             # %cond.end361
                                        #   in Loop: Header=BB29_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB29_146:                             # %for.cond363
                                        #   Parent Loop BB29_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB29_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB29_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB29_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB29_150
.LBB29_149:                             # %cond.false371
                                        #   in Loop: Header=BB29_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB29_150:                             # %cond.end373
                                        #   in Loop: Header=BB29_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB29_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB29_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB29_156
.LBB29_152:                             # %cond.false378
                                        #   in Loop: Header=BB29_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB29_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB29_155
.LBB29_154:                             # %cond.false383
                                        #   in Loop: Header=BB29_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB29_155:                             # %cond.end385
                                        #   in Loop: Header=BB29_146 Depth=2
.LBB29_156:                             # %cond.end387
                                        #   in Loop: Header=BB29_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB29_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB29_146
.LBB29_158:                             # %for.end401
                                        #   in Loop: Header=BB29_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB29_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_135
.LBB29_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB29_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB29_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB29_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB29_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_161
.LBB29_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB29_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB29_167
.LBB29_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB29_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB29_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB29_173
.LBB29_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB29_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB29_172
.LBB29_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB29_172:                             # %cond.end449
.LBB29_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB29_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB29_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB29_177
.LBB29_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB29_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB29_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB29_183
.LBB29_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB29_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB29_182
.LBB29_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB29_182:                             # %cond.end486
.LBB29_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB29_196
.LBB29_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB29_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB29_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB29_188
.LBB29_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB29_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB29_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB29_194
.LBB29_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB29_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB29_193
.LBB29_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB29_193:                             # %cond.end526
.LBB29_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB29_195:                             # %if.end532
	jmp	.LBB29_196
.LBB29_196:                             # %if.end533
	jmp	.LBB29_329
.LBB29_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB29_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB29_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB29_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB29_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB29_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB29_203
.LBB29_202:                             # %cond.false546
                                        #   in Loop: Header=BB29_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB29_203:                             # %cond.end548
                                        #   in Loop: Header=BB29_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB29_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB29_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB29_209
.LBB29_205:                             # %cond.false553
                                        #   in Loop: Header=BB29_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB29_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB29_208
.LBB29_207:                             # %cond.false558
                                        #   in Loop: Header=BB29_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB29_208:                             # %cond.end560
                                        #   in Loop: Header=BB29_199 Depth=1
.LBB29_209:                             # %cond.end562
                                        #   in Loop: Header=BB29_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB29_210:                             # %for.cond564
                                        #   Parent Loop BB29_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB29_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB29_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB29_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB29_214
.LBB29_213:                             # %cond.false572
                                        #   in Loop: Header=BB29_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB29_214:                             # %cond.end574
                                        #   in Loop: Header=BB29_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB29_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB29_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB29_220
.LBB29_216:                             # %cond.false579
                                        #   in Loop: Header=BB29_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB29_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB29_219
.LBB29_218:                             # %cond.false584
                                        #   in Loop: Header=BB29_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB29_219:                             # %cond.end586
                                        #   in Loop: Header=BB29_210 Depth=2
.LBB29_220:                             # %cond.end588
                                        #   in Loop: Header=BB29_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB29_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_210
.LBB29_222:                             # %for.end602
                                        #   in Loop: Header=BB29_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB29_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB29_199
.LBB29_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB29_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB29_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB29_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB29_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB29_225
.LBB29_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB29_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB29_231
.LBB29_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB29_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB29_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB29_237
.LBB29_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB29_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB29_236
.LBB29_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB29_236:                             # %cond.end650
.LBB29_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB29_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB29_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB29_241
.LBB29_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB29_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB29_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB29_247
.LBB29_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB29_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB29_246
.LBB29_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB29_246:                             # %cond.end687
.LBB29_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB29_258
.LBB29_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB29_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB29_251
.LBB29_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB29_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB29_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB29_257
.LBB29_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB29_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB29_256
.LBB29_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB29_256:                             # %cond.end724
.LBB29_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB29_258:                             # %if.end730
	jmp	.LBB29_328
.LBB29_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB29_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB29_262
.LBB29_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB29_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB29_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB29_265
.LBB29_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB29_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB29_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB29_271
.LBB29_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB29_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB29_270
.LBB29_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB29_270:                             # %cond.end753
.LBB29_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB29_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB29_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB29_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB29_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB29_276
.LBB29_275:                             # %cond.false765
                                        #   in Loop: Header=BB29_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB29_276:                             # %cond.end767
                                        #   in Loop: Header=BB29_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB29_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB29_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB29_282
.LBB29_278:                             # %cond.false772
                                        #   in Loop: Header=BB29_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB29_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB29_281
.LBB29_280:                             # %cond.false777
                                        #   in Loop: Header=BB29_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB29_281:                             # %cond.end779
                                        #   in Loop: Header=BB29_272 Depth=1
.LBB29_282:                             # %cond.end781
                                        #   in Loop: Header=BB29_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB29_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB29_272
.LBB29_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB29_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB29_287
.LBB29_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB29_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB29_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB29_293
.LBB29_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB29_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB29_292
.LBB29_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB29_292:                             # %cond.end822
.LBB29_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB29_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB29_296
.LBB29_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB29_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB29_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB29_299
.LBB29_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB29_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB29_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB29_305
.LBB29_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB29_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB29_304
.LBB29_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB29_304:                             # %cond.end847
.LBB29_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB29_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB29_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB29_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB29_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB29_310
.LBB29_309:                             # %cond.false859
                                        #   in Loop: Header=BB29_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB29_310:                             # %cond.end861
                                        #   in Loop: Header=BB29_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB29_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB29_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB29_316
.LBB29_312:                             # %cond.false866
                                        #   in Loop: Header=BB29_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB29_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB29_315
.LBB29_314:                             # %cond.false871
                                        #   in Loop: Header=BB29_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB29_315:                             # %cond.end873
                                        #   in Loop: Header=BB29_306 Depth=1
.LBB29_316:                             # %cond.end875
                                        #   in Loop: Header=BB29_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB29_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_306
.LBB29_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB29_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB29_321
.LBB29_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB29_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB29_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB29_327
.LBB29_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB29_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB29_326
.LBB29_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB29_326:                             # %cond.end916
.LBB29_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-104(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB29_328:                             # %if.end922
	jmp	.LBB29_329
.LBB29_329:                             # %if.end923
	jmp	.LBB29_330
.LBB29_330:                             # %if.end924
	jmp	.LBB29_331
.LBB29_331:                             # %if.end925
	jmp	.LBB29_332
.LBB29_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$882327377, -100(%rbp)  # imm = 0x34973F51
	jne	.LBB29_334
.LBB29_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB29_333
.Lfunc_end29:
	.size	Get_Reference_Pixel.19, .Lfunc_end29-Get_Reference_Pixel.19
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.20   # -- Begin function decode_one_b8block.20
	.p2align	4, 0x90
	.type	decode_one_b8block.20,@function
decode_one_b8block.20:                  # @decode_one_b8block.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1876307277, -84(%rbp)  # imm = 0x6FD62D4D
	movl	%edi, -52(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB30_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB30_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB30_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB30_4:                               # %for.cond9
                                        #   Parent Loop BB30_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB30_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB30_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB30_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_4
.LBB30_7:                               # %for.end
                                        #   in Loop: Header=BB30_2 Depth=1
	jmp	.LBB30_8
.LBB30_8:                               # %for.inc26
                                        #   in Loop: Header=BB30_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_2
.LBB30_9:                               # %for.end28
	jmp	.LBB30_96
.LBB30_10:                              # %if.else
	cmpl	$0, -80(%rbp)
	jne	.LBB30_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB30_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB30_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB30_31
.LBB30_14:                              # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB30_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB30_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB30_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB30_17:                              # %for.cond40
                                        #   Parent Loop BB30_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB30_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB30_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB30_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_17
.LBB30_20:                              # %for.end49
                                        #   in Loop: Header=BB30_15 Depth=1
	jmp	.LBB30_21
.LBB30_21:                              # %for.inc50
                                        #   in Loop: Header=BB30_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_15
.LBB30_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB30_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB30_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB30_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB30_25:                              # %for.cond56
                                        #   Parent Loop BB30_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB30_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB30_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB30_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_25
.LBB30_28:                              # %for.end71
                                        #   in Loop: Header=BB30_23 Depth=1
	jmp	.LBB30_29
.LBB30_29:                              # %for.inc72
                                        #   in Loop: Header=BB30_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_23
.LBB30_30:                              # %for.end74
	jmp	.LBB30_60
.LBB30_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB30_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB30_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB30_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB30_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB30_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB30_36:                              # %for.cond83
                                        #   Parent Loop BB30_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB30_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB30_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB30_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_36
.LBB30_39:                              # %for.end120
                                        #   in Loop: Header=BB30_34 Depth=1
	jmp	.LBB30_40
.LBB30_40:                              # %for.inc121
                                        #   in Loop: Header=BB30_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_34
.LBB30_41:                              # %for.end123
	jmp	.LBB30_51
.LBB30_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB30_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB30_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB30_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB30_45:                              # %for.cond129
                                        #   Parent Loop BB30_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB30_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB30_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB30_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_45
.LBB30_48:                              # %for.end145
                                        #   in Loop: Header=BB30_43 Depth=1
	jmp	.LBB30_49
.LBB30_49:                              # %for.inc146
                                        #   in Loop: Header=BB30_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_43
.LBB30_50:                              # %for.end148
	jmp	.LBB30_51
.LBB30_51:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB30_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB30_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB30_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB30_54:                              # %for.cond153
                                        #   Parent Loop BB30_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB30_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB30_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB30_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_54
.LBB30_57:                              # %for.end167
                                        #   in Loop: Header=BB30_52 Depth=1
	jmp	.LBB30_58
.LBB30_58:                              # %for.inc168
                                        #   in Loop: Header=BB30_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_52
.LBB30_59:                              # %for.end170
	jmp	.LBB30_60
.LBB30_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB30_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB30_66
.LBB30_62:                              # %lor.lhs.false177
	cmpl	$0, -80(%rbp)
	jne	.LBB30_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB30_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB30_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB30_86
.LBB30_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB30_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_69 Depth 2
                                        #       Child Loop BB30_74 Depth 3
                                        #         Child Loop BB30_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB30_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB30_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB30_69:                              # %for.cond197
                                        #   Parent Loop BB30_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_74 Depth 3
                                        #         Child Loop BB30_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB30_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB30_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB30_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB30_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB30_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB30_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
.LBB30_73:                              # %if.end218
                                        #   in Loop: Header=BB30_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-68(%rbp), %esi
	movl	-64(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB30_74:                              # %for.cond233
                                        #   Parent Loop BB30_67 Depth=1
                                        #     Parent Loop BB30_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB30_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB30_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB30_74 Depth=3
	movl	$0, -4(%rbp)
.LBB30_76:                              # %for.cond237
                                        #   Parent Loop BB30_67 Depth=1
                                        #     Parent Loop BB30_69 Depth=2
                                        #       Parent Loop BB30_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB30_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB30_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB30_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_76
.LBB30_79:                              # %for.end269
                                        #   in Loop: Header=BB30_74 Depth=3
	jmp	.LBB30_80
.LBB30_80:                              # %for.inc270
                                        #   in Loop: Header=BB30_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_74
.LBB30_81:                              # %for.end272
                                        #   in Loop: Header=BB30_69 Depth=2
	jmp	.LBB30_82
.LBB30_82:                              # %for.inc273
                                        #   in Loop: Header=BB30_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_69
.LBB30_83:                              # %for.end275
                                        #   in Loop: Header=BB30_67 Depth=1
	jmp	.LBB30_84
.LBB30_84:                              # %for.inc276
                                        #   in Loop: Header=BB30_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_67
.LBB30_85:                              # %for.end278
	jmp	.LBB30_95
.LBB30_86:                              # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB30_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB30_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB30_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB30_89:                              # %for.cond284
                                        #   Parent Loop BB30_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB30_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB30_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB30_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_89
.LBB30_92:                              # %for.end310
                                        #   in Loop: Header=BB30_87 Depth=1
	jmp	.LBB30_93
.LBB30_93:                              # %for.inc311
                                        #   in Loop: Header=BB30_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_87
.LBB30_94:                              # %for.end313
	jmp	.LBB30_95
.LBB30_95:                              # %if.end314
	jmp	.LBB30_96
.LBB30_96:                              # %if.end315
	cmpl	$1876307277, -84(%rbp)  # imm = 0x6FD62D4D
	jne	.LBB30_98
.LBB30_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_97
.Lfunc_end30:
	.size	decode_one_b8block.20, .Lfunc_end30-decode_one_b8block.20
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.21   # -- Begin function decode_one_b8block.21
	.p2align	4, 0x90
	.type	decode_one_b8block.21,@function
decode_one_b8block.21:                  # @decode_one_b8block.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$2115202759, -84(%rbp)  # imm = 0x7E136EC7
	movl	%edi, -52(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB31_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB31_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB31_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB31_4:                               # %for.cond9
                                        #   Parent Loop BB31_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB31_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB31_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB31_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_4
.LBB31_7:                               # %for.end
                                        #   in Loop: Header=BB31_2 Depth=1
	jmp	.LBB31_8
.LBB31_8:                               # %for.inc26
                                        #   in Loop: Header=BB31_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_2
.LBB31_9:                               # %for.end28
	jmp	.LBB31_96
.LBB31_10:                              # %if.else
	cmpl	$0, -68(%rbp)
	jne	.LBB31_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB31_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB31_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB31_31
.LBB31_14:                              # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB31_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB31_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB31_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB31_17:                              # %for.cond40
                                        #   Parent Loop BB31_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB31_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB31_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB31_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_17
.LBB31_20:                              # %for.end49
                                        #   in Loop: Header=BB31_15 Depth=1
	jmp	.LBB31_21
.LBB31_21:                              # %for.inc50
                                        #   in Loop: Header=BB31_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_15
.LBB31_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB31_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB31_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB31_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB31_25:                              # %for.cond56
                                        #   Parent Loop BB31_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB31_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB31_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB31_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_25
.LBB31_28:                              # %for.end71
                                        #   in Loop: Header=BB31_23 Depth=1
	jmp	.LBB31_29
.LBB31_29:                              # %for.inc72
                                        #   in Loop: Header=BB31_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_23
.LBB31_30:                              # %for.end74
	jmp	.LBB31_60
.LBB31_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB31_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB31_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB31_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB31_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB31_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB31_36:                              # %for.cond83
                                        #   Parent Loop BB31_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB31_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB31_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB31_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_36
.LBB31_39:                              # %for.end120
                                        #   in Loop: Header=BB31_34 Depth=1
	jmp	.LBB31_40
.LBB31_40:                              # %for.inc121
                                        #   in Loop: Header=BB31_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_34
.LBB31_41:                              # %for.end123
	jmp	.LBB31_51
.LBB31_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB31_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB31_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB31_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB31_45:                              # %for.cond129
                                        #   Parent Loop BB31_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB31_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB31_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB31_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_45
.LBB31_48:                              # %for.end145
                                        #   in Loop: Header=BB31_43 Depth=1
	jmp	.LBB31_49
.LBB31_49:                              # %for.inc146
                                        #   in Loop: Header=BB31_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_43
.LBB31_50:                              # %for.end148
	jmp	.LBB31_51
.LBB31_51:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB31_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB31_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB31_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB31_54:                              # %for.cond153
                                        #   Parent Loop BB31_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB31_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB31_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB31_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_54
.LBB31_57:                              # %for.end167
                                        #   in Loop: Header=BB31_52 Depth=1
	jmp	.LBB31_58
.LBB31_58:                              # %for.inc168
                                        #   in Loop: Header=BB31_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_52
.LBB31_59:                              # %for.end170
	jmp	.LBB31_60
.LBB31_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB31_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB31_66
.LBB31_62:                              # %lor.lhs.false177
	cmpl	$0, -68(%rbp)
	jne	.LBB31_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB31_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB31_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB31_86
.LBB31_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB31_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_69 Depth 2
                                        #       Child Loop BB31_74 Depth 3
                                        #         Child Loop BB31_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB31_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB31_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB31_69:                              # %for.cond197
                                        #   Parent Loop BB31_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_74 Depth 3
                                        #         Child Loop BB31_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB31_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB31_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB31_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB31_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB31_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB31_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
.LBB31_73:                              # %if.end218
                                        #   in Loop: Header=BB31_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-64(%rbp), %esi
	movl	-76(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB31_74:                              # %for.cond233
                                        #   Parent Loop BB31_67 Depth=1
                                        #     Parent Loop BB31_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB31_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB31_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB31_74 Depth=3
	movl	$0, -8(%rbp)
.LBB31_76:                              # %for.cond237
                                        #   Parent Loop BB31_67 Depth=1
                                        #     Parent Loop BB31_69 Depth=2
                                        #       Parent Loop BB31_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB31_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB31_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB31_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_76
.LBB31_79:                              # %for.end269
                                        #   in Loop: Header=BB31_74 Depth=3
	jmp	.LBB31_80
.LBB31_80:                              # %for.inc270
                                        #   in Loop: Header=BB31_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_74
.LBB31_81:                              # %for.end272
                                        #   in Loop: Header=BB31_69 Depth=2
	jmp	.LBB31_82
.LBB31_82:                              # %for.inc273
                                        #   in Loop: Header=BB31_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_69
.LBB31_83:                              # %for.end275
                                        #   in Loop: Header=BB31_67 Depth=1
	jmp	.LBB31_84
.LBB31_84:                              # %for.inc276
                                        #   in Loop: Header=BB31_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_67
.LBB31_85:                              # %for.end278
	jmp	.LBB31_95
.LBB31_86:                              # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB31_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB31_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB31_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB31_89:                              # %for.cond284
                                        #   Parent Loop BB31_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB31_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB31_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB31_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_89
.LBB31_92:                              # %for.end310
                                        #   in Loop: Header=BB31_87 Depth=1
	jmp	.LBB31_93
.LBB31_93:                              # %for.inc311
                                        #   in Loop: Header=BB31_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_87
.LBB31_94:                              # %for.end313
	jmp	.LBB31_95
.LBB31_95:                              # %if.end314
	jmp	.LBB31_96
.LBB31_96:                              # %if.end315
	cmpl	$2115202759, -84(%rbp)  # imm = 0x7E136EC7
	jne	.LBB31_98
.LBB31_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_97
.Lfunc_end31:
	.size	decode_one_b8block.21, .Lfunc_end31-decode_one_b8block.21
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.22        # -- Begin function Conceal_Error.22
	.p2align	4, 0x90
	.type	Conceal_Error.22,@function
Conceal_Error.22:                       # @Conceal_Error.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$891475826, -68(%rbp)   # imm = 0x3522D772
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB32_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB32_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB32_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB32_4:                               # %land.end
.LBB32_5:                               # %lor.end
.LBB32_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB32_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB32_9
.LBB32_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB32_14
.LBB32_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB32_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB32_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB32_12:                              # %land.end51
.LBB32_13:                              # %lor.end53
.LBB32_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB32_180
# %bb.15:                               # %land.end54
	movq	.LJTI32_0(,%rax,8), %rax
	jmpq	*%rax
.LBB32_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB32_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB32_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB32_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB32_18 Depth=1
	movl	$0, -4(%rbp)
.LBB32_20:                              # %for.cond68
                                        #   Parent Loop BB32_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB32_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB32_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB32_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_20
.LBB32_23:                              # %for.end
                                        #   in Loop: Header=BB32_18 Depth=1
	jmp	.LBB32_24
.LBB32_24:                              # %for.inc85
                                        #   in Loop: Header=BB32_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_18
.LBB32_25:                              # %for.end87
	jmp	.LBB32_35
.LBB32_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB32_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB32_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB32_27 Depth=1
	movl	$0, -4(%rbp)
.LBB32_29:                              # %for.cond92
                                        #   Parent Loop BB32_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB32_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB32_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB32_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_29
.LBB32_32:                              # %for.end104
                                        #   in Loop: Header=BB32_27 Depth=1
	jmp	.LBB32_33
.LBB32_33:                              # %for.inc105
                                        #   in Loop: Header=BB32_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_27
.LBB32_34:                              # %for.end107
	jmp	.LBB32_35
.LBB32_35:                              # %if.end
	jmp	.LBB32_180
.LBB32_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB32_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_39 Depth 2
                                        #       Child Loop BB32_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB32_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB32_37 Depth=1
	movl	$0, -12(%rbp)
.LBB32_39:                              # %for.cond113
                                        #   Parent Loop BB32_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB32_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB32_39 Depth=2
	movl	$0, -4(%rbp)
.LBB32_41:                              # %for.cond117
                                        #   Parent Loop BB32_37 Depth=1
                                        #     Parent Loop BB32_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB32_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB32_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB32_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_41
.LBB32_44:                              # %for.end141
                                        #   in Loop: Header=BB32_39 Depth=2
	jmp	.LBB32_45
.LBB32_45:                              # %for.inc142
                                        #   in Loop: Header=BB32_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_39
.LBB32_46:                              # %for.end144
                                        #   in Loop: Header=BB32_37 Depth=1
	jmp	.LBB32_47
.LBB32_47:                              # %for.inc145
                                        #   in Loop: Header=BB32_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_37
.LBB32_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB32_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB32_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB32_49 Depth=1
	movl	$0, -8(%rbp)
.LBB32_51:                              # %for.cond152
                                        #   Parent Loop BB32_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB32_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB32_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB32_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_51
.LBB32_54:                              # %for.end162
                                        #   in Loop: Header=BB32_49 Depth=1
	jmp	.LBB32_55
.LBB32_55:                              # %for.inc163
                                        #   in Loop: Header=BB32_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_49
.LBB32_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB32_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB32_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB32_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB32_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB32_59 Depth=1
	movl	$0, -4(%rbp)
.LBB32_61:                              # %for.cond175
                                        #   Parent Loop BB32_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB32_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB32_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB32_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_61
.LBB32_64:                              # %for.end195
                                        #   in Loop: Header=BB32_59 Depth=1
	jmp	.LBB32_65
.LBB32_65:                              # %for.inc196
                                        #   in Loop: Header=BB32_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_59
.LBB32_66:                              # %for.end198
	jmp	.LBB32_95
.LBB32_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB32_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB32_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_71 Depth 2
                                        #       Child Loop BB32_73 Depth 3
                                        #         Child Loop BB32_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB32_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB32_71:                              # %for.cond210
                                        #   Parent Loop BB32_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_73 Depth 3
                                        #         Child Loop BB32_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB32_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB32_73:                              # %for.cond236
                                        #   Parent Loop BB32_69 Depth=1
                                        #     Parent Loop BB32_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB32_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB32_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB32_73 Depth=3
	movl	$0, -4(%rbp)
.LBB32_75:                              # %for.cond240
                                        #   Parent Loop BB32_69 Depth=1
                                        #     Parent Loop BB32_71 Depth=2
                                        #       Parent Loop BB32_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB32_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB32_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB32_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_75
.LBB32_78:                              # %for.end259
                                        #   in Loop: Header=BB32_73 Depth=3
	jmp	.LBB32_79
.LBB32_79:                              # %for.inc260
                                        #   in Loop: Header=BB32_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_73
.LBB32_80:                              # %for.end262
                                        #   in Loop: Header=BB32_71 Depth=2
	jmp	.LBB32_81
.LBB32_81:                              # %for.inc263
                                        #   in Loop: Header=BB32_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_71
.LBB32_82:                              # %for.end265
                                        #   in Loop: Header=BB32_69 Depth=1
	jmp	.LBB32_83
.LBB32_83:                              # %for.inc266
                                        #   in Loop: Header=BB32_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_69
.LBB32_84:                              # %for.end268
	jmp	.LBB32_94
.LBB32_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB32_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB32_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB32_86 Depth=1
	movl	$0, -4(%rbp)
.LBB32_88:                              # %for.cond274
                                        #   Parent Loop BB32_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB32_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB32_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB32_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_88
.LBB32_91:                              # %for.end294
                                        #   in Loop: Header=BB32_86 Depth=1
	jmp	.LBB32_92
.LBB32_92:                              # %for.inc295
                                        #   in Loop: Header=BB32_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_86
.LBB32_93:                              # %for.end297
	jmp	.LBB32_94
.LBB32_94:                              # %if.end298
	jmp	.LBB32_95
.LBB32_95:                              # %if.end299
	jmp	.LBB32_105
.LBB32_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB32_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB32_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB32_97 Depth=1
	movl	$0, -4(%rbp)
.LBB32_99:                              # %for.cond305
                                        #   Parent Loop BB32_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB32_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB32_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB32_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_99
.LBB32_102:                             # %for.end317
                                        #   in Loop: Header=BB32_97 Depth=1
	jmp	.LBB32_103
.LBB32_103:                             # %for.inc318
                                        #   in Loop: Header=BB32_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_97
.LBB32_104:                             # %for.end320
	jmp	.LBB32_105
.LBB32_105:                             # %if.end321
	jmp	.LBB32_180
.LBB32_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB32_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB32_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_110 Depth 2
                                        #       Child Loop BB32_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB32_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB32_108 Depth=1
	movl	$0, -12(%rbp)
.LBB32_110:                             # %for.cond331
                                        #   Parent Loop BB32_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB32_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB32_110 Depth=2
	movl	$0, -4(%rbp)
.LBB32_112:                             # %for.cond335
                                        #   Parent Loop BB32_108 Depth=1
                                        #     Parent Loop BB32_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB32_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB32_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB32_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_112
.LBB32_115:                             # %for.end359
                                        #   in Loop: Header=BB32_110 Depth=2
	jmp	.LBB32_116
.LBB32_116:                             # %for.inc360
                                        #   in Loop: Header=BB32_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_110
.LBB32_117:                             # %for.end362
                                        #   in Loop: Header=BB32_108 Depth=1
	jmp	.LBB32_118
.LBB32_118:                             # %for.inc363
                                        #   in Loop: Header=BB32_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_108
.LBB32_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB32_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB32_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB32_120 Depth=1
	movl	$0, -8(%rbp)
.LBB32_122:                             # %for.cond370
                                        #   Parent Loop BB32_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB32_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB32_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB32_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_122
.LBB32_125:                             # %for.end380
                                        #   in Loop: Header=BB32_120 Depth=1
	jmp	.LBB32_126
.LBB32_126:                             # %for.inc381
                                        #   in Loop: Header=BB32_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_120
.LBB32_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB32_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB32_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB32_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB32_129 Depth=1
	movl	$0, -4(%rbp)
.LBB32_131:                             # %for.cond390
                                        #   Parent Loop BB32_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB32_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB32_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB32_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_131
.LBB32_134:                             # %for.end410
                                        #   in Loop: Header=BB32_129 Depth=1
	jmp	.LBB32_135
.LBB32_135:                             # %for.inc411
                                        #   in Loop: Header=BB32_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_129
.LBB32_136:                             # %for.end413
	jmp	.LBB32_156
.LBB32_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB32_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB32_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_141 Depth 2
                                        #       Child Loop BB32_143 Depth 3
                                        #         Child Loop BB32_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB32_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB32_141:                             # %for.cond425
                                        #   Parent Loop BB32_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_143 Depth 3
                                        #         Child Loop BB32_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB32_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB32_143:                             # %for.cond452
                                        #   Parent Loop BB32_139 Depth=1
                                        #     Parent Loop BB32_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB32_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB32_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB32_143 Depth=3
	movl	$0, -4(%rbp)
.LBB32_145:                             # %for.cond456
                                        #   Parent Loop BB32_139 Depth=1
                                        #     Parent Loop BB32_141 Depth=2
                                        #       Parent Loop BB32_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB32_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB32_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB32_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_145
.LBB32_148:                             # %for.end475
                                        #   in Loop: Header=BB32_143 Depth=3
	jmp	.LBB32_149
.LBB32_149:                             # %for.inc476
                                        #   in Loop: Header=BB32_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_143
.LBB32_150:                             # %for.end478
                                        #   in Loop: Header=BB32_141 Depth=2
	jmp	.LBB32_151
.LBB32_151:                             # %for.inc479
                                        #   in Loop: Header=BB32_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_141
.LBB32_152:                             # %for.end481
                                        #   in Loop: Header=BB32_139 Depth=1
	jmp	.LBB32_153
.LBB32_153:                             # %for.inc482
                                        #   in Loop: Header=BB32_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_139
.LBB32_154:                             # %for.end484
	jmp	.LBB32_155
.LBB32_155:                             # %if.end485
	jmp	.LBB32_156
.LBB32_156:                             # %if.end486
	jmp	.LBB32_157
.LBB32_157:                             # %if.end487
	jmp	.LBB32_180
.LBB32_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB32_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB32_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB32_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB32_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB32_161 Depth=1
	movl	$0, -4(%rbp)
.LBB32_163:                             # %for.cond499
                                        #   Parent Loop BB32_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB32_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB32_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB32_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_163
.LBB32_166:                             # %for.end519
                                        #   in Loop: Header=BB32_161 Depth=1
	jmp	.LBB32_167
.LBB32_167:                             # %for.inc520
                                        #   in Loop: Header=BB32_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_161
.LBB32_168:                             # %for.end522
	jmp	.LBB32_169
.LBB32_169:                             # %if.end523
	jmp	.LBB32_179
.LBB32_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB32_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB32_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	$0, -4(%rbp)
.LBB32_173:                             # %for.cond529
                                        #   Parent Loop BB32_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB32_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB32_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB32_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_173
.LBB32_176:                             # %for.end541
                                        #   in Loop: Header=BB32_171 Depth=1
	jmp	.LBB32_177
.LBB32_177:                             # %for.inc542
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_171
.LBB32_178:                             # %for.end544
	jmp	.LBB32_179
.LBB32_179:                             # %if.end545
	jmp	.LBB32_180
.LBB32_180:                             # %sw.epilog
	cmpl	$891475826, -68(%rbp)   # imm = 0x3522D772
	jne	.LBB32_182
.LBB32_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_181
.Lfunc_end32:
	.size	Conceal_Error.22, .Lfunc_end32-Conceal_Error.22
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI32_0:
	.quad	.LBB32_16
	.quad	.LBB32_158
	.quad	.LBB32_106
	.quad	.LBB32_180
	.quad	.LBB32_36
                                        # -- End function
	.text
	.globl	Error_Concealment.23    # -- Begin function Error_Concealment.23
	.p2align	4, 0x90
	.type	Error_Concealment.23,@function
Error_Concealment.23:                   # @Error_Concealment.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1830021791, -16(%rbp)  # imm = 0x6D13EA9F
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB33_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB33_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	$0, -4(%rbp)
.LBB33_3:                               # %for.cond2
                                        #   Parent Loop BB33_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB33_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB33_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB33_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB33_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB33_6:                               # %if.end
                                        #   in Loop: Header=BB33_3 Depth=2
	jmp	.LBB33_7
.LBB33_7:                               # %for.inc
                                        #   in Loop: Header=BB33_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_3
.LBB33_8:                               # %for.end
                                        #   in Loop: Header=BB33_1 Depth=1
	jmp	.LBB33_9
.LBB33_9:                               # %for.inc7
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_1
.LBB33_10:                              # %for.end9
	cmpl	$1830021791, -16(%rbp)  # imm = 0x6D13EA9F
	jne	.LBB33_12
.LBB33_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_11
.Lfunc_end33:
	.size	Error_Concealment.23, .Lfunc_end33-Error_Concealment.23
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.24  # -- Begin function Get_Reference_Pixel.24
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.24,@function
Get_Reference_Pixel.24:                 # @Get_Reference_Pixel.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$718186852, -104(%rbp)  # imm = 0x2ACEA964
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB34_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB34_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB34_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB34_5
.LBB34_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB34_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB34_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB34_11
.LBB34_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB34_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB34_10
.LBB34_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB34_10:                              # %cond.end14
.LBB34_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB34_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB34_14
.LBB34_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB34_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB34_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB34_20
.LBB34_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB34_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB34_19
.LBB34_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB34_19:                              # %cond.end29
.LBB34_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_332
.LBB34_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB34_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB34_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB34_25
.LBB34_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB34_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB34_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB34_31
.LBB34_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB34_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB34_30
.LBB34_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB34_30:                              # %cond.end52
.LBB34_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB34_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB34_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB34_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB34_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB34_36
.LBB34_35:                              # %cond.false61
                                        #   in Loop: Header=BB34_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB34_36:                              # %cond.end63
                                        #   in Loop: Header=BB34_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB34_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB34_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB34_42
.LBB34_38:                              # %cond.false68
                                        #   in Loop: Header=BB34_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB34_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB34_41
.LBB34_40:                              # %cond.false73
                                        #   in Loop: Header=BB34_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB34_41:                              # %cond.end75
                                        #   in Loop: Header=BB34_32 Depth=1
.LBB34_42:                              # %cond.end77
                                        #   in Loop: Header=BB34_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB34_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_32
.LBB34_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB34_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB34_47
.LBB34_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB34_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB34_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB34_53
.LBB34_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB34_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB34_52
.LBB34_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB34_52:                              # %cond.end113
.LBB34_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB34_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB34_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB34_57
.LBB34_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB34_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB34_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB34_63
.LBB34_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB34_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB34_62
.LBB34_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB34_62:                              # %cond.end136
.LBB34_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB34_76
.LBB34_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB34_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB34_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB34_68
.LBB34_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB34_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB34_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB34_74
.LBB34_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB34_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB34_73
.LBB34_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB34_73:                              # %cond.end169
.LBB34_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB34_75:                              # %if.end
	jmp	.LBB34_76
.LBB34_76:                              # %if.end178
	jmp	.LBB34_331
.LBB34_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB34_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB34_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB34_81
.LBB34_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB34_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB34_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB34_87
.LBB34_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB34_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB34_86
.LBB34_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB34_86:                              # %cond.end197
.LBB34_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB34_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB34_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB34_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB34_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB34_92
.LBB34_91:                              # %cond.false209
                                        #   in Loop: Header=BB34_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB34_92:                              # %cond.end211
                                        #   in Loop: Header=BB34_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB34_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB34_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB34_98
.LBB34_94:                              # %cond.false216
                                        #   in Loop: Header=BB34_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB34_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB34_97
.LBB34_96:                              # %cond.false221
                                        #   in Loop: Header=BB34_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB34_97:                              # %cond.end223
                                        #   in Loop: Header=BB34_88 Depth=1
.LBB34_98:                              # %cond.end225
                                        #   in Loop: Header=BB34_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB34_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB34_88
.LBB34_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB34_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB34_103
.LBB34_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB34_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB34_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB34_109
.LBB34_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB34_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB34_108
.LBB34_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB34_108:                             # %cond.end266
.LBB34_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB34_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB34_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB34_113
.LBB34_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB34_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB34_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB34_119
.LBB34_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB34_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB34_118
.LBB34_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB34_118:                             # %cond.end287
.LBB34_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB34_132
.LBB34_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB34_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB34_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB34_124
.LBB34_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB34_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB34_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB34_130
.LBB34_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB34_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB34_129
.LBB34_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB34_129:                             # %cond.end320
.LBB34_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB34_131:                             # %if.end331
	jmp	.LBB34_132
.LBB34_132:                             # %if.end332
	jmp	.LBB34_330
.LBB34_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB34_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB34_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB34_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB34_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB34_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB34_139
.LBB34_138:                             # %cond.false345
                                        #   in Loop: Header=BB34_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB34_139:                             # %cond.end347
                                        #   in Loop: Header=BB34_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB34_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB34_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB34_145
.LBB34_141:                             # %cond.false352
                                        #   in Loop: Header=BB34_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB34_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB34_144
.LBB34_143:                             # %cond.false357
                                        #   in Loop: Header=BB34_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB34_144:                             # %cond.end359
                                        #   in Loop: Header=BB34_135 Depth=1
.LBB34_145:                             # %cond.end361
                                        #   in Loop: Header=BB34_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB34_146:                             # %for.cond363
                                        #   Parent Loop BB34_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB34_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB34_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB34_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB34_150
.LBB34_149:                             # %cond.false371
                                        #   in Loop: Header=BB34_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB34_150:                             # %cond.end373
                                        #   in Loop: Header=BB34_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB34_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB34_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB34_156
.LBB34_152:                             # %cond.false378
                                        #   in Loop: Header=BB34_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB34_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB34_155
.LBB34_154:                             # %cond.false383
                                        #   in Loop: Header=BB34_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB34_155:                             # %cond.end385
                                        #   in Loop: Header=BB34_146 Depth=2
.LBB34_156:                             # %cond.end387
                                        #   in Loop: Header=BB34_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB34_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_146
.LBB34_158:                             # %for.end401
                                        #   in Loop: Header=BB34_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB34_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB34_135
.LBB34_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB34_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB34_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB34_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB34_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB34_161
.LBB34_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB34_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB34_167
.LBB34_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB34_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB34_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB34_173
.LBB34_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB34_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB34_172
.LBB34_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB34_172:                             # %cond.end449
.LBB34_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB34_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB34_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB34_177
.LBB34_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB34_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB34_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB34_183
.LBB34_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB34_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB34_182
.LBB34_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB34_182:                             # %cond.end486
.LBB34_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB34_196
.LBB34_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB34_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB34_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB34_188
.LBB34_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB34_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB34_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB34_194
.LBB34_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB34_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB34_193
.LBB34_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB34_193:                             # %cond.end526
.LBB34_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB34_195:                             # %if.end532
	jmp	.LBB34_196
.LBB34_196:                             # %if.end533
	jmp	.LBB34_329
.LBB34_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB34_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB34_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB34_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB34_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB34_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB34_203
.LBB34_202:                             # %cond.false546
                                        #   in Loop: Header=BB34_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB34_203:                             # %cond.end548
                                        #   in Loop: Header=BB34_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB34_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB34_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB34_209
.LBB34_205:                             # %cond.false553
                                        #   in Loop: Header=BB34_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB34_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB34_208
.LBB34_207:                             # %cond.false558
                                        #   in Loop: Header=BB34_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB34_208:                             # %cond.end560
                                        #   in Loop: Header=BB34_199 Depth=1
.LBB34_209:                             # %cond.end562
                                        #   in Loop: Header=BB34_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB34_210:                             # %for.cond564
                                        #   Parent Loop BB34_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB34_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB34_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB34_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB34_214
.LBB34_213:                             # %cond.false572
                                        #   in Loop: Header=BB34_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB34_214:                             # %cond.end574
                                        #   in Loop: Header=BB34_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB34_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB34_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB34_220
.LBB34_216:                             # %cond.false579
                                        #   in Loop: Header=BB34_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB34_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB34_219
.LBB34_218:                             # %cond.false584
                                        #   in Loop: Header=BB34_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB34_219:                             # %cond.end586
                                        #   in Loop: Header=BB34_210 Depth=2
.LBB34_220:                             # %cond.end588
                                        #   in Loop: Header=BB34_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB34_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB34_210
.LBB34_222:                             # %for.end602
                                        #   in Loop: Header=BB34_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB34_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_199
.LBB34_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB34_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB34_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB34_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB34_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_225
.LBB34_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB34_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB34_231
.LBB34_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB34_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB34_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB34_237
.LBB34_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB34_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB34_236
.LBB34_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB34_236:                             # %cond.end650
.LBB34_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB34_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB34_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB34_241
.LBB34_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB34_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB34_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB34_247
.LBB34_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB34_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB34_246
.LBB34_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB34_246:                             # %cond.end687
.LBB34_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB34_258
.LBB34_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB34_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB34_251
.LBB34_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB34_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB34_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB34_257
.LBB34_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB34_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB34_256
.LBB34_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB34_256:                             # %cond.end724
.LBB34_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB34_258:                             # %if.end730
	jmp	.LBB34_328
.LBB34_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB34_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB34_262
.LBB34_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB34_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB34_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB34_265
.LBB34_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB34_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB34_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB34_271
.LBB34_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB34_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB34_270
.LBB34_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB34_270:                             # %cond.end753
.LBB34_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB34_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB34_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB34_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB34_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB34_276
.LBB34_275:                             # %cond.false765
                                        #   in Loop: Header=BB34_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB34_276:                             # %cond.end767
                                        #   in Loop: Header=BB34_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB34_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB34_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB34_282
.LBB34_278:                             # %cond.false772
                                        #   in Loop: Header=BB34_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB34_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB34_281
.LBB34_280:                             # %cond.false777
                                        #   in Loop: Header=BB34_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB34_281:                             # %cond.end779
                                        #   in Loop: Header=BB34_272 Depth=1
.LBB34_282:                             # %cond.end781
                                        #   in Loop: Header=BB34_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB34_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_272
.LBB34_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB34_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB34_287
.LBB34_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB34_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB34_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB34_293
.LBB34_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB34_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB34_292
.LBB34_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB34_292:                             # %cond.end822
.LBB34_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB34_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB34_296
.LBB34_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB34_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB34_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB34_299
.LBB34_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB34_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB34_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB34_305
.LBB34_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB34_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB34_304
.LBB34_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB34_304:                             # %cond.end847
.LBB34_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB34_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB34_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB34_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB34_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB34_310
.LBB34_309:                             # %cond.false859
                                        #   in Loop: Header=BB34_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB34_310:                             # %cond.end861
                                        #   in Loop: Header=BB34_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB34_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB34_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB34_316
.LBB34_312:                             # %cond.false866
                                        #   in Loop: Header=BB34_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB34_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB34_315
.LBB34_314:                             # %cond.false871
                                        #   in Loop: Header=BB34_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB34_315:                             # %cond.end873
                                        #   in Loop: Header=BB34_306 Depth=1
.LBB34_316:                             # %cond.end875
                                        #   in Loop: Header=BB34_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB34_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB34_306
.LBB34_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB34_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB34_321
.LBB34_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB34_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB34_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB34_327
.LBB34_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB34_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB34_326
.LBB34_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB34_326:                             # %cond.end916
.LBB34_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-100(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB34_328:                             # %if.end922
	jmp	.LBB34_329
.LBB34_329:                             # %if.end923
	jmp	.LBB34_330
.LBB34_330:                             # %if.end924
	jmp	.LBB34_331
.LBB34_331:                             # %if.end925
	jmp	.LBB34_332
.LBB34_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$718186852, -104(%rbp)  # imm = 0x2ACEA964
	jne	.LBB34_334
.LBB34_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_333
.Lfunc_end34:
	.size	Get_Reference_Pixel.24, .Lfunc_end34-Get_Reference_Pixel.24
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.25
.LCPI35_0:
	.quad	4636737291354636288     # double 100
.LCPI35_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.25
	.p2align	4, 0x90
	.type	Build_Status_Map.25,@function
Build_Status_Map.25:                    # @Build_Status_Map.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1256631312, -40(%rbp)  # imm = 0x4AE6AC10
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB35_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB35_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -8(%rbp)
.LBB35_3:                               # %for.cond2
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB35_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB35_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB35_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB35_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB35_13
.LBB35_6:                               # %if.then
                                        #   in Loop: Header=BB35_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI35_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI35_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB35_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB35_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB35_8:                               # %if.end
                                        #   in Loop: Header=BB35_3 Depth=2
	callq	rand
	vmovsd	.LCPI35_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI35_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB35_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB35_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB35_10:                              # %if.end20
                                        #   in Loop: Header=BB35_3 Depth=2
	callq	rand
	vmovsd	.LCPI35_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI35_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB35_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB35_3 Depth=2
	movl	$1, -4(%rbp)
.LBB35_12:                              # %if.end29
                                        #   in Loop: Header=BB35_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB35_13:                              # %if.end30
                                        #   in Loop: Header=BB35_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB35_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB35_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB35_18
.LBB35_15:                              # %if.else
                                        #   in Loop: Header=BB35_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB35_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB35_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB35_17:                              # %if.end49
                                        #   in Loop: Header=BB35_3 Depth=2
	jmp	.LBB35_18
.LBB35_18:                              # %if.end50
                                        #   in Loop: Header=BB35_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB35_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_3
.LBB35_20:                              # %for.end
                                        #   in Loop: Header=BB35_1 Depth=1
	jmp	.LBB35_21
.LBB35_21:                              # %for.inc53
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_1
.LBB35_22:                              # %for.end55
	cmpl	$1256631312, -40(%rbp)  # imm = 0x4AE6AC10
	jne	.LBB35_24
.LBB35_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_23
.Lfunc_end35:
	.size	Build_Status_Map.25, .Lfunc_end35-Build_Status_Map.25
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.26  # -- Begin function Get_Reference_Block.26
	.p2align	4, 0x90
	.type	Get_Reference_Block.26,@function
Get_Reference_Block.26:                 # @Get_Reference_Block.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$639903988, -24(%rbp)   # imm = 0x262428F4
	movq	%rdi, -56(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -12(%rbp)
	movq	%r9, -48(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-36(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB36_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB36_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_3:                               # %for.cond5
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB36_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-32(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-28(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB36_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_3
.LBB36_6:                               # %for.end
                                        #   in Loop: Header=BB36_1 Depth=1
	jmp	.LBB36_7
.LBB36_7:                               # %for.inc14
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_1
.LBB36_8:                               # %for.end16
	cmpl	$639903988, -24(%rbp)   # imm = 0x262428F4
	jne	.LBB36_10
.LBB36_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB36_9
.Lfunc_end36:
	.size	Get_Reference_Block.26, .Lfunc_end36-Get_Reference_Block.26
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.27 # -- Begin function compute_residue_b8block.27
	.p2align	4, 0x90
	.type	compute_residue_b8block.27,@function
compute_residue_b8block.27:             # @compute_residue_b8block.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1433126429, -36(%rbp)  # imm = 0x556BC61D
	movl	%edi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB37_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB37_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB37_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB37_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB37_4:                               # %for.cond4
                                        #   Parent Loop BB37_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB37_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB37_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB37_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_4
.LBB37_7:                               # %for.end
                                        #   in Loop: Header=BB37_2 Depth=1
	jmp	.LBB37_8
.LBB37_8:                               # %for.inc22
                                        #   in Loop: Header=BB37_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_2
.LBB37_9:                               # %for.end24
	jmp	.LBB37_19
.LBB37_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB37_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB37_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB37_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB37_13:                              # %for.cond29
                                        #   Parent Loop BB37_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB37_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB37_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB37_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_13
.LBB37_16:                              # %for.end56
                                        #   in Loop: Header=BB37_11 Depth=1
	jmp	.LBB37_17
.LBB37_17:                              # %for.inc57
                                        #   in Loop: Header=BB37_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_11
.LBB37_18:                              # %for.end59
	jmp	.LBB37_19
.LBB37_19:                              # %if.end
	cmpl	$1433126429, -36(%rbp)  # imm = 0x556BC61D
	jne	.LBB37_21
.LBB37_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_20
.Lfunc_end37:
	.size	compute_residue_b8block.27, .Lfunc_end37-compute_residue_b8block.27
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.28   # -- Begin function decode_one_b8block.28
	.p2align	4, 0x90
	.type	decode_one_b8block.28,@function
decode_one_b8block.28:                  # @decode_one_b8block.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$654733714, -84(%rbp)   # imm = 0x27067192
	movl	%edi, -40(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB38_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB38_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB38_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB38_4:                               # %for.cond9
                                        #   Parent Loop BB38_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB38_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB38_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB38_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_4
.LBB38_7:                               # %for.end
                                        #   in Loop: Header=BB38_2 Depth=1
	jmp	.LBB38_8
.LBB38_8:                               # %for.inc26
                                        #   in Loop: Header=BB38_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_2
.LBB38_9:                               # %for.end28
	jmp	.LBB38_96
.LBB38_10:                              # %if.else
	cmpl	$0, -68(%rbp)
	jne	.LBB38_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB38_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB38_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB38_31
.LBB38_14:                              # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB38_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB38_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB38_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB38_17:                              # %for.cond40
                                        #   Parent Loop BB38_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB38_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB38_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB38_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_17
.LBB38_20:                              # %for.end49
                                        #   in Loop: Header=BB38_15 Depth=1
	jmp	.LBB38_21
.LBB38_21:                              # %for.inc50
                                        #   in Loop: Header=BB38_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_15
.LBB38_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB38_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB38_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB38_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB38_25:                              # %for.cond56
                                        #   Parent Loop BB38_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB38_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB38_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB38_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_25
.LBB38_28:                              # %for.end71
                                        #   in Loop: Header=BB38_23 Depth=1
	jmp	.LBB38_29
.LBB38_29:                              # %for.inc72
                                        #   in Loop: Header=BB38_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_23
.LBB38_30:                              # %for.end74
	jmp	.LBB38_60
.LBB38_31:                              # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB38_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB38_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB38_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB38_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB38_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB38_36:                              # %for.cond83
                                        #   Parent Loop BB38_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB38_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB38_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB38_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_36
.LBB38_39:                              # %for.end120
                                        #   in Loop: Header=BB38_34 Depth=1
	jmp	.LBB38_40
.LBB38_40:                              # %for.inc121
                                        #   in Loop: Header=BB38_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_34
.LBB38_41:                              # %for.end123
	jmp	.LBB38_51
.LBB38_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB38_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB38_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB38_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB38_45:                              # %for.cond129
                                        #   Parent Loop BB38_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB38_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB38_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB38_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_45
.LBB38_48:                              # %for.end145
                                        #   in Loop: Header=BB38_43 Depth=1
	jmp	.LBB38_49
.LBB38_49:                              # %for.inc146
                                        #   in Loop: Header=BB38_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_43
.LBB38_50:                              # %for.end148
	jmp	.LBB38_51
.LBB38_51:                              # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB38_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB38_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB38_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB38_54:                              # %for.cond153
                                        #   Parent Loop BB38_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB38_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB38_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB38_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_54
.LBB38_57:                              # %for.end167
                                        #   in Loop: Header=BB38_52 Depth=1
	jmp	.LBB38_58
.LBB38_58:                              # %for.inc168
                                        #   in Loop: Header=BB38_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_52
.LBB38_59:                              # %for.end170
	jmp	.LBB38_60
.LBB38_60:                              # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB38_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB38_66
.LBB38_62:                              # %lor.lhs.false177
	cmpl	$0, -68(%rbp)
	jne	.LBB38_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB38_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB38_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB38_86
.LBB38_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB38_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_69 Depth 2
                                        #       Child Loop BB38_74 Depth 3
                                        #         Child Loop BB38_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB38_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB38_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB38_69:                              # %for.cond197
                                        #   Parent Loop BB38_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_74 Depth 3
                                        #         Child Loop BB38_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB38_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB38_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB38_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB38_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB38_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB38_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
.LBB38_73:                              # %if.end218
                                        #   in Loop: Header=BB38_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-72(%rbp), %esi
	movl	-64(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB38_74:                              # %for.cond233
                                        #   Parent Loop BB38_67 Depth=1
                                        #     Parent Loop BB38_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB38_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB38_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB38_74 Depth=3
	movl	$0, -8(%rbp)
.LBB38_76:                              # %for.cond237
                                        #   Parent Loop BB38_67 Depth=1
                                        #     Parent Loop BB38_69 Depth=2
                                        #       Parent Loop BB38_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB38_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB38_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB38_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_76
.LBB38_79:                              # %for.end269
                                        #   in Loop: Header=BB38_74 Depth=3
	jmp	.LBB38_80
.LBB38_80:                              # %for.inc270
                                        #   in Loop: Header=BB38_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_74
.LBB38_81:                              # %for.end272
                                        #   in Loop: Header=BB38_69 Depth=2
	jmp	.LBB38_82
.LBB38_82:                              # %for.inc273
                                        #   in Loop: Header=BB38_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_69
.LBB38_83:                              # %for.end275
                                        #   in Loop: Header=BB38_67 Depth=1
	jmp	.LBB38_84
.LBB38_84:                              # %for.inc276
                                        #   in Loop: Header=BB38_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_67
.LBB38_85:                              # %for.end278
	jmp	.LBB38_95
.LBB38_86:                              # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB38_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB38_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB38_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB38_89:                              # %for.cond284
                                        #   Parent Loop BB38_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB38_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB38_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB38_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_89
.LBB38_92:                              # %for.end310
                                        #   in Loop: Header=BB38_87 Depth=1
	jmp	.LBB38_93
.LBB38_93:                              # %for.inc311
                                        #   in Loop: Header=BB38_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_87
.LBB38_94:                              # %for.end313
	jmp	.LBB38_95
.LBB38_95:                              # %if.end314
	jmp	.LBB38_96
.LBB38_96:                              # %if.end315
	cmpl	$654733714, -84(%rbp)   # imm = 0x27067192
	jne	.LBB38_98
.LBB38_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_97
.Lfunc_end38:
	.size	decode_one_b8block.28, .Lfunc_end38-decode_one_b8block.28
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.29  # -- Begin function Get_Reference_Block.29
	.p2align	4, 0x90
	.type	Get_Reference_Block.29,@function
Get_Reference_Block.29:                 # @Get_Reference_Block.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1731056432, -16(%rbp)  # imm = 0x672DD330
	movq	%rdi, -48(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -20(%rbp)
	movq	%r9, -56(%rbp)
	movl	-36(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB39_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB39_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	$0, -4(%rbp)
.LBB39_3:                               # %for.cond5
                                        #   Parent Loop BB39_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB39_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB39_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-12(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-24(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB39_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_3
.LBB39_6:                               # %for.end
                                        #   in Loop: Header=BB39_1 Depth=1
	jmp	.LBB39_7
.LBB39_7:                               # %for.inc14
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_1
.LBB39_8:                               # %for.end16
	cmpl	$1731056432, -16(%rbp)  # imm = 0x672DD330
	jne	.LBB39_10
.LBB39_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_9
.Lfunc_end39:
	.size	Get_Reference_Block.29, .Lfunc_end39-Get_Reference_Block.29
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.30  # -- Begin function Get_Reference_Block.30
	.p2align	4, 0x90
	.type	Get_Reference_Block.30,@function
Get_Reference_Block.30:                 # @Get_Reference_Block.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$252377849, -36(%rbp)   # imm = 0xF0AFAF9
	movq	%rdi, -56(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -24(%rbp)
	movq	%r9, -48(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB40_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB40_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	$0, -8(%rbp)
.LBB40_3:                               # %for.cond5
                                        #   Parent Loop BB40_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB40_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB40_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-32(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB40_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_3
.LBB40_6:                               # %for.end
                                        #   in Loop: Header=BB40_1 Depth=1
	jmp	.LBB40_7
.LBB40_7:                               # %for.inc14
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_1
.LBB40_8:                               # %for.end16
	cmpl	$252377849, -36(%rbp)   # imm = 0xF0AFAF9
	jne	.LBB40_10
.LBB40_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_9
.Lfunc_end40:
	.size	Get_Reference_Block.30, .Lfunc_end40-Get_Reference_Block.30
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.31  # -- Begin function Get_Reference_Block.31
	.p2align	4, 0x90
	.type	Get_Reference_Block.31,@function
Get_Reference_Block.31:                 # @Get_Reference_Block.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1908964010, -28(%rbp)  # imm = 0x71C87AAA
	movq	%rdi, -48(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movq	%r9, -56(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB41_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB41_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB41_1 Depth=1
	movl	$0, -8(%rbp)
.LBB41_3:                               # %for.cond5
                                        #   Parent Loop BB41_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB41_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB41_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-36(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB41_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_3
.LBB41_6:                               # %for.end
                                        #   in Loop: Header=BB41_1 Depth=1
	jmp	.LBB41_7
.LBB41_7:                               # %for.inc14
                                        #   in Loop: Header=BB41_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_1
.LBB41_8:                               # %for.end16
	cmpl	$1908964010, -28(%rbp)  # imm = 0x71C87AAA
	jne	.LBB41_10
.LBB41_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_9
.Lfunc_end41:
	.size	Get_Reference_Block.31, .Lfunc_end41-Get_Reference_Block.31
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.32   # -- Begin function decode_one_b8block.32
	.p2align	4, 0x90
	.type	decode_one_b8block.32,@function
decode_one_b8block.32:                  # @decode_one_b8block.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$805940614, -84(%rbp)   # imm = 0x3009AD86
	movl	%edi, -56(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB42_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB42_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB42_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB42_4:                               # %for.cond9
                                        #   Parent Loop BB42_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB42_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB42_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB42_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_4
.LBB42_7:                               # %for.end
                                        #   in Loop: Header=BB42_2 Depth=1
	jmp	.LBB42_8
.LBB42_8:                               # %for.inc26
                                        #   in Loop: Header=BB42_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_2
.LBB42_9:                               # %for.end28
	jmp	.LBB42_96
.LBB42_10:                              # %if.else
	cmpl	$0, -68(%rbp)
	jne	.LBB42_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB42_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB42_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB42_31
.LBB42_14:                              # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB42_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB42_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB42_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB42_17:                              # %for.cond40
                                        #   Parent Loop BB42_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB42_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB42_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB42_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_17
.LBB42_20:                              # %for.end49
                                        #   in Loop: Header=BB42_15 Depth=1
	jmp	.LBB42_21
.LBB42_21:                              # %for.inc50
                                        #   in Loop: Header=BB42_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_15
.LBB42_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB42_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB42_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB42_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB42_25:                              # %for.cond56
                                        #   Parent Loop BB42_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB42_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB42_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB42_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_25
.LBB42_28:                              # %for.end71
                                        #   in Loop: Header=BB42_23 Depth=1
	jmp	.LBB42_29
.LBB42_29:                              # %for.inc72
                                        #   in Loop: Header=BB42_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_23
.LBB42_30:                              # %for.end74
	jmp	.LBB42_60
.LBB42_31:                              # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB42_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB42_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB42_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB42_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB42_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB42_36:                              # %for.cond83
                                        #   Parent Loop BB42_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB42_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB42_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB42_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_36
.LBB42_39:                              # %for.end120
                                        #   in Loop: Header=BB42_34 Depth=1
	jmp	.LBB42_40
.LBB42_40:                              # %for.inc121
                                        #   in Loop: Header=BB42_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_34
.LBB42_41:                              # %for.end123
	jmp	.LBB42_51
.LBB42_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB42_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB42_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB42_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB42_45:                              # %for.cond129
                                        #   Parent Loop BB42_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB42_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB42_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB42_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_45
.LBB42_48:                              # %for.end145
                                        #   in Loop: Header=BB42_43 Depth=1
	jmp	.LBB42_49
.LBB42_49:                              # %for.inc146
                                        #   in Loop: Header=BB42_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_43
.LBB42_50:                              # %for.end148
	jmp	.LBB42_51
.LBB42_51:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB42_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB42_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB42_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB42_54:                              # %for.cond153
                                        #   Parent Loop BB42_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB42_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB42_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB42_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_54
.LBB42_57:                              # %for.end167
                                        #   in Loop: Header=BB42_52 Depth=1
	jmp	.LBB42_58
.LBB42_58:                              # %for.inc168
                                        #   in Loop: Header=BB42_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_52
.LBB42_59:                              # %for.end170
	jmp	.LBB42_60
.LBB42_60:                              # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB42_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB42_66
.LBB42_62:                              # %lor.lhs.false177
	cmpl	$0, -68(%rbp)
	jne	.LBB42_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB42_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB42_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB42_86
.LBB42_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB42_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_69 Depth 2
                                        #       Child Loop BB42_74 Depth 3
                                        #         Child Loop BB42_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB42_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB42_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB42_69:                              # %for.cond197
                                        #   Parent Loop BB42_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_74 Depth 3
                                        #         Child Loop BB42_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB42_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB42_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB42_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB42_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB42_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB42_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
.LBB42_73:                              # %if.end218
                                        #   in Loop: Header=BB42_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-80(%rbp), %esi
	movl	-76(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB42_74:                              # %for.cond233
                                        #   Parent Loop BB42_67 Depth=1
                                        #     Parent Loop BB42_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB42_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB42_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB42_74 Depth=3
	movl	$0, -4(%rbp)
.LBB42_76:                              # %for.cond237
                                        #   Parent Loop BB42_67 Depth=1
                                        #     Parent Loop BB42_69 Depth=2
                                        #       Parent Loop BB42_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB42_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB42_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB42_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_76
.LBB42_79:                              # %for.end269
                                        #   in Loop: Header=BB42_74 Depth=3
	jmp	.LBB42_80
.LBB42_80:                              # %for.inc270
                                        #   in Loop: Header=BB42_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_74
.LBB42_81:                              # %for.end272
                                        #   in Loop: Header=BB42_69 Depth=2
	jmp	.LBB42_82
.LBB42_82:                              # %for.inc273
                                        #   in Loop: Header=BB42_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_69
.LBB42_83:                              # %for.end275
                                        #   in Loop: Header=BB42_67 Depth=1
	jmp	.LBB42_84
.LBB42_84:                              # %for.inc276
                                        #   in Loop: Header=BB42_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_67
.LBB42_85:                              # %for.end278
	jmp	.LBB42_95
.LBB42_86:                              # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB42_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB42_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB42_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB42_89:                              # %for.cond284
                                        #   Parent Loop BB42_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB42_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB42_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB42_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_89
.LBB42_92:                              # %for.end310
                                        #   in Loop: Header=BB42_87 Depth=1
	jmp	.LBB42_93
.LBB42_93:                              # %for.inc311
                                        #   in Loop: Header=BB42_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_87
.LBB42_94:                              # %for.end313
	jmp	.LBB42_95
.LBB42_95:                              # %if.end314
	jmp	.LBB42_96
.LBB42_96:                              # %if.end315
	cmpl	$805940614, -84(%rbp)   # imm = 0x3009AD86
	jne	.LBB42_98
.LBB42_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_97
.Lfunc_end42:
	.size	decode_one_b8block.32, .Lfunc_end42-decode_one_b8block.32
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.33  # -- Begin function Get_Reference_Block.33
	.p2align	4, 0x90
	.type	Get_Reference_Block.33,@function
Get_Reference_Block.33:                 # @Get_Reference_Block.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1267287529, -16(%rbp)  # imm = 0x4B8945E9
	movq	%rdi, -56(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -24(%rbp)
	movq	%r9, -48(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-36(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB43_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB43_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -8(%rbp)
.LBB43_3:                               # %for.cond5
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB43_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB43_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-28(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-12(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB43_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_3
.LBB43_6:                               # %for.end
                                        #   in Loop: Header=BB43_1 Depth=1
	jmp	.LBB43_7
.LBB43_7:                               # %for.inc14
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_1
.LBB43_8:                               # %for.end16
	cmpl	$1267287529, -16(%rbp)  # imm = 0x4B8945E9
	jne	.LBB43_10
.LBB43_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_9
.Lfunc_end43:
	.size	Get_Reference_Block.33, .Lfunc_end43-Get_Reference_Block.33
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.34   # -- Begin function decode_one_b8block.34
	.p2align	4, 0x90
	.type	decode_one_b8block.34,@function
decode_one_b8block.34:                  # @decode_one_b8block.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$493102151, -84(%rbp)   # imm = 0x1D642447
	movl	%edi, -48(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -68(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB44_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB44_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB44_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB44_4:                               # %for.cond9
                                        #   Parent Loop BB44_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB44_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB44_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB44_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_4
.LBB44_7:                               # %for.end
                                        #   in Loop: Header=BB44_2 Depth=1
	jmp	.LBB44_8
.LBB44_8:                               # %for.inc26
                                        #   in Loop: Header=BB44_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_2
.LBB44_9:                               # %for.end28
	jmp	.LBB44_96
.LBB44_10:                              # %if.else
	cmpl	$0, -76(%rbp)
	jne	.LBB44_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB44_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB44_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB44_31
.LBB44_14:                              # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB44_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB44_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB44_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB44_17:                              # %for.cond40
                                        #   Parent Loop BB44_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB44_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB44_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB44_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_17
.LBB44_20:                              # %for.end49
                                        #   in Loop: Header=BB44_15 Depth=1
	jmp	.LBB44_21
.LBB44_21:                              # %for.inc50
                                        #   in Loop: Header=BB44_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_15
.LBB44_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB44_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB44_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB44_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB44_25:                              # %for.cond56
                                        #   Parent Loop BB44_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB44_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB44_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB44_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_25
.LBB44_28:                              # %for.end71
                                        #   in Loop: Header=BB44_23 Depth=1
	jmp	.LBB44_29
.LBB44_29:                              # %for.inc72
                                        #   in Loop: Header=BB44_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_23
.LBB44_30:                              # %for.end74
	jmp	.LBB44_60
.LBB44_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB44_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB44_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB44_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB44_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB44_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB44_36:                              # %for.cond83
                                        #   Parent Loop BB44_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB44_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB44_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB44_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_36
.LBB44_39:                              # %for.end120
                                        #   in Loop: Header=BB44_34 Depth=1
	jmp	.LBB44_40
.LBB44_40:                              # %for.inc121
                                        #   in Loop: Header=BB44_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_34
.LBB44_41:                              # %for.end123
	jmp	.LBB44_51
.LBB44_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB44_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB44_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB44_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB44_45:                              # %for.cond129
                                        #   Parent Loop BB44_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB44_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB44_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB44_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_45
.LBB44_48:                              # %for.end145
                                        #   in Loop: Header=BB44_43 Depth=1
	jmp	.LBB44_49
.LBB44_49:                              # %for.inc146
                                        #   in Loop: Header=BB44_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_43
.LBB44_50:                              # %for.end148
	jmp	.LBB44_51
.LBB44_51:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB44_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB44_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB44_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB44_54:                              # %for.cond153
                                        #   Parent Loop BB44_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB44_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB44_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB44_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_54
.LBB44_57:                              # %for.end167
                                        #   in Loop: Header=BB44_52 Depth=1
	jmp	.LBB44_58
.LBB44_58:                              # %for.inc168
                                        #   in Loop: Header=BB44_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_52
.LBB44_59:                              # %for.end170
	jmp	.LBB44_60
.LBB44_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB44_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB44_66
.LBB44_62:                              # %lor.lhs.false177
	cmpl	$0, -76(%rbp)
	jne	.LBB44_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB44_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB44_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB44_86
.LBB44_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB44_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_69 Depth 2
                                        #       Child Loop BB44_74 Depth 3
                                        #         Child Loop BB44_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB44_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB44_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB44_69:                              # %for.cond197
                                        #   Parent Loop BB44_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_74 Depth 3
                                        #         Child Loop BB44_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB44_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB44_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB44_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB44_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB44_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB44_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
.LBB44_73:                              # %if.end218
                                        #   in Loop: Header=BB44_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-72(%rbp), %esi
	movl	-64(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB44_74:                              # %for.cond233
                                        #   Parent Loop BB44_67 Depth=1
                                        #     Parent Loop BB44_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB44_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB44_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB44_74 Depth=3
	movl	$0, -8(%rbp)
.LBB44_76:                              # %for.cond237
                                        #   Parent Loop BB44_67 Depth=1
                                        #     Parent Loop BB44_69 Depth=2
                                        #       Parent Loop BB44_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB44_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB44_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB44_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_76
.LBB44_79:                              # %for.end269
                                        #   in Loop: Header=BB44_74 Depth=3
	jmp	.LBB44_80
.LBB44_80:                              # %for.inc270
                                        #   in Loop: Header=BB44_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_74
.LBB44_81:                              # %for.end272
                                        #   in Loop: Header=BB44_69 Depth=2
	jmp	.LBB44_82
.LBB44_82:                              # %for.inc273
                                        #   in Loop: Header=BB44_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_69
.LBB44_83:                              # %for.end275
                                        #   in Loop: Header=BB44_67 Depth=1
	jmp	.LBB44_84
.LBB44_84:                              # %for.inc276
                                        #   in Loop: Header=BB44_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_67
.LBB44_85:                              # %for.end278
	jmp	.LBB44_95
.LBB44_86:                              # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB44_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB44_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB44_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB44_89:                              # %for.cond284
                                        #   Parent Loop BB44_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB44_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB44_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB44_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_89
.LBB44_92:                              # %for.end310
                                        #   in Loop: Header=BB44_87 Depth=1
	jmp	.LBB44_93
.LBB44_93:                              # %for.inc311
                                        #   in Loop: Header=BB44_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_87
.LBB44_94:                              # %for.end313
	jmp	.LBB44_95
.LBB44_95:                              # %if.end314
	jmp	.LBB44_96
.LBB44_96:                              # %if.end315
	cmpl	$493102151, -84(%rbp)   # imm = 0x1D642447
	jne	.LBB44_98
.LBB44_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_97
.Lfunc_end44:
	.size	decode_one_b8block.34, .Lfunc_end44-decode_one_b8block.34
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.35  # -- Begin function Get_Reference_Block.35
	.p2align	4, 0x90
	.type	Get_Reference_Block.35,@function
Get_Reference_Block.35:                 # @Get_Reference_Block.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1693551683, -20(%rbp)  # imm = 0x64F18C43
	movq	%rdi, -56(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -32(%rbp)
	movq	%r9, -48(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB45_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB45_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	$0, -4(%rbp)
.LBB45_3:                               # %for.cond5
                                        #   Parent Loop BB45_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB45_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB45_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-36(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-12(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB45_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_3
.LBB45_6:                               # %for.end
                                        #   in Loop: Header=BB45_1 Depth=1
	jmp	.LBB45_7
.LBB45_7:                               # %for.inc14
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_1
.LBB45_8:                               # %for.end16
	cmpl	$1693551683, -20(%rbp)  # imm = 0x64F18C43
	jne	.LBB45_10
.LBB45_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_9
.Lfunc_end45:
	.size	Get_Reference_Block.35, .Lfunc_end45-Get_Reference_Block.35
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.36 # -- Begin function compute_residue_b8block.36
	.p2align	4, 0x90
	.type	compute_residue_b8block.36,@function
compute_residue_b8block.36:             # @compute_residue_b8block.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1515073147, -36(%rbp)  # imm = 0x5A4E2E7B
	movl	%edi, -28(%rbp)
	movl	%esi, -20(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB46_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB46_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB46_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB46_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB46_4:                               # %for.cond4
                                        #   Parent Loop BB46_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB46_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB46_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-20(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB46_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_4
.LBB46_7:                               # %for.end
                                        #   in Loop: Header=BB46_2 Depth=1
	jmp	.LBB46_8
.LBB46_8:                               # %for.inc22
                                        #   in Loop: Header=BB46_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_2
.LBB46_9:                               # %for.end24
	jmp	.LBB46_19
.LBB46_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB46_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB46_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB46_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB46_13:                              # %for.cond29
                                        #   Parent Loop BB46_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB46_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB46_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB46_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_13
.LBB46_16:                              # %for.end56
                                        #   in Loop: Header=BB46_11 Depth=1
	jmp	.LBB46_17
.LBB46_17:                              # %for.inc57
                                        #   in Loop: Header=BB46_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_11
.LBB46_18:                              # %for.end59
	jmp	.LBB46_19
.LBB46_19:                              # %if.end
	cmpl	$1515073147, -36(%rbp)  # imm = 0x5A4E2E7B
	jne	.LBB46_21
.LBB46_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_20
.Lfunc_end46:
	.size	compute_residue_b8block.36, .Lfunc_end46-compute_residue_b8block.36
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.37 # -- Begin function compute_residue_b8block.37
	.p2align	4, 0x90
	.type	compute_residue_b8block.37,@function
compute_residue_b8block.37:             # @compute_residue_b8block.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$561117510, -36(%rbp)   # imm = 0x2171F946
	movl	%edi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB47_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB47_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB47_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB47_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB47_4:                               # %for.cond4
                                        #   Parent Loop BB47_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB47_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB47_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB47_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_4
.LBB47_7:                               # %for.end
                                        #   in Loop: Header=BB47_2 Depth=1
	jmp	.LBB47_8
.LBB47_8:                               # %for.inc22
                                        #   in Loop: Header=BB47_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_2
.LBB47_9:                               # %for.end24
	jmp	.LBB47_19
.LBB47_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB47_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB47_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB47_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB47_13:                              # %for.cond29
                                        #   Parent Loop BB47_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB47_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB47_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB47_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_13
.LBB47_16:                              # %for.end56
                                        #   in Loop: Header=BB47_11 Depth=1
	jmp	.LBB47_17
.LBB47_17:                              # %for.inc57
                                        #   in Loop: Header=BB47_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_11
.LBB47_18:                              # %for.end59
	jmp	.LBB47_19
.LBB47_19:                              # %if.end
	cmpl	$561117510, -36(%rbp)   # imm = 0x2171F946
	jne	.LBB47_21
.LBB47_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_20
.Lfunc_end47:
	.size	compute_residue_b8block.37, .Lfunc_end47-compute_residue_b8block.37
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.38       # -- Begin function DecOneForthPix.38
	.p2align	4, 0x90
	.type	DecOneForthPix.38,@function
DecOneForthPix.38:                      # @DecOneForthPix.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$52591266, -8(%rbp)     # imm = 0x3227AA2
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB48_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB48_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB48_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_1
.LBB48_4:                               # %for.end
	cmpl	$52591266, -8(%rbp)     # imm = 0x3227AA2
	jne	.LBB48_6
.LBB48_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_5
.Lfunc_end48:
	.size	DecOneForthPix.38, .Lfunc_end48-DecOneForthPix.38
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.39  # -- Begin function Get_Reference_Block.39
	.p2align	4, 0x90
	.type	Get_Reference_Block.39,@function
Get_Reference_Block.39:                 # @Get_Reference_Block.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1096983756, -28(%rbp)  # imm = 0x4162A4CC
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -36(%rbp)
	movq	%r9, -56(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB49_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB49_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	$0, -8(%rbp)
.LBB49_3:                               # %for.cond5
                                        #   Parent Loop BB49_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB49_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB49_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-32(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-12(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB49_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_3
.LBB49_6:                               # %for.end
                                        #   in Loop: Header=BB49_1 Depth=1
	jmp	.LBB49_7
.LBB49_7:                               # %for.inc14
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_1
.LBB49_8:                               # %for.end16
	cmpl	$1096983756, -28(%rbp)  # imm = 0x4162A4CC
	jne	.LBB49_10
.LBB49_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_9
.Lfunc_end49:
	.size	Get_Reference_Block.39, .Lfunc_end49-Get_Reference_Block.39
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.40  # -- Begin function Get_Reference_Pixel.40
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.40,@function
Get_Reference_Pixel.40:                 # @Get_Reference_Pixel.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$523372284, -104(%rbp)  # imm = 0x1F3206FC
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB50_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB50_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB50_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB50_5
.LBB50_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB50_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB50_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB50_11
.LBB50_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB50_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB50_10
.LBB50_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB50_10:                              # %cond.end14
.LBB50_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB50_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB50_14
.LBB50_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB50_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB50_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB50_20
.LBB50_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB50_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB50_19
.LBB50_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB50_19:                              # %cond.end29
.LBB50_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_332
.LBB50_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB50_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB50_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB50_25
.LBB50_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB50_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB50_31
.LBB50_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB50_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB50_30
.LBB50_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB50_30:                              # %cond.end52
.LBB50_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB50_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB50_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB50_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB50_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB50_36
.LBB50_35:                              # %cond.false61
                                        #   in Loop: Header=BB50_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB50_36:                              # %cond.end63
                                        #   in Loop: Header=BB50_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB50_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB50_42
.LBB50_38:                              # %cond.false68
                                        #   in Loop: Header=BB50_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB50_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB50_41
.LBB50_40:                              # %cond.false73
                                        #   in Loop: Header=BB50_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB50_41:                              # %cond.end75
                                        #   in Loop: Header=BB50_32 Depth=1
.LBB50_42:                              # %cond.end77
                                        #   in Loop: Header=BB50_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB50_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_32
.LBB50_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB50_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_47
.LBB50_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB50_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB50_53
.LBB50_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB50_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_52
.LBB50_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB50_52:                              # %cond.end113
.LBB50_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB50_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB50_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB50_57
.LBB50_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB50_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB50_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB50_63
.LBB50_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB50_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB50_62
.LBB50_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB50_62:                              # %cond.end136
.LBB50_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB50_76
.LBB50_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB50_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB50_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB50_68
.LBB50_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB50_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB50_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB50_74
.LBB50_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB50_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB50_73
.LBB50_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB50_73:                              # %cond.end169
.LBB50_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB50_75:                              # %if.end
	jmp	.LBB50_76
.LBB50_76:                              # %if.end178
	jmp	.LBB50_331
.LBB50_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB50_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB50_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB50_81
.LBB50_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB50_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB50_87
.LBB50_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB50_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB50_86
.LBB50_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB50_86:                              # %cond.end197
.LBB50_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB50_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB50_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB50_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB50_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB50_92
.LBB50_91:                              # %cond.false209
                                        #   in Loop: Header=BB50_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB50_92:                              # %cond.end211
                                        #   in Loop: Header=BB50_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB50_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB50_98
.LBB50_94:                              # %cond.false216
                                        #   in Loop: Header=BB50_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB50_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB50_97
.LBB50_96:                              # %cond.false221
                                        #   in Loop: Header=BB50_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB50_97:                              # %cond.end223
                                        #   in Loop: Header=BB50_88 Depth=1
.LBB50_98:                              # %cond.end225
                                        #   in Loop: Header=BB50_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB50_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB50_88
.LBB50_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB50_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_103
.LBB50_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB50_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB50_109
.LBB50_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB50_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_108
.LBB50_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB50_108:                             # %cond.end266
.LBB50_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB50_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB50_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB50_113
.LBB50_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB50_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB50_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB50_119
.LBB50_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB50_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB50_118
.LBB50_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB50_118:                             # %cond.end287
.LBB50_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB50_132
.LBB50_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB50_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB50_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB50_124
.LBB50_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB50_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB50_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB50_130
.LBB50_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB50_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB50_129
.LBB50_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB50_129:                             # %cond.end320
.LBB50_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB50_131:                             # %if.end331
	jmp	.LBB50_132
.LBB50_132:                             # %if.end332
	jmp	.LBB50_330
.LBB50_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB50_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB50_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB50_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB50_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB50_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB50_139
.LBB50_138:                             # %cond.false345
                                        #   in Loop: Header=BB50_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB50_139:                             # %cond.end347
                                        #   in Loop: Header=BB50_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB50_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB50_145
.LBB50_141:                             # %cond.false352
                                        #   in Loop: Header=BB50_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB50_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB50_144
.LBB50_143:                             # %cond.false357
                                        #   in Loop: Header=BB50_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB50_144:                             # %cond.end359
                                        #   in Loop: Header=BB50_135 Depth=1
.LBB50_145:                             # %cond.end361
                                        #   in Loop: Header=BB50_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB50_146:                             # %for.cond363
                                        #   Parent Loop BB50_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB50_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB50_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB50_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB50_150
.LBB50_149:                             # %cond.false371
                                        #   in Loop: Header=BB50_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB50_150:                             # %cond.end373
                                        #   in Loop: Header=BB50_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB50_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB50_156
.LBB50_152:                             # %cond.false378
                                        #   in Loop: Header=BB50_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB50_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB50_155
.LBB50_154:                             # %cond.false383
                                        #   in Loop: Header=BB50_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB50_155:                             # %cond.end385
                                        #   in Loop: Header=BB50_146 Depth=2
.LBB50_156:                             # %cond.end387
                                        #   in Loop: Header=BB50_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB50_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_146
.LBB50_158:                             # %for.end401
                                        #   in Loop: Header=BB50_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB50_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB50_135
.LBB50_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB50_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB50_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB50_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB50_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB50_161
.LBB50_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB50_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_167
.LBB50_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB50_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB50_173
.LBB50_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB50_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_172
.LBB50_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB50_172:                             # %cond.end449
.LBB50_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB50_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB50_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_177
.LBB50_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB50_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB50_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB50_183
.LBB50_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB50_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_182
.LBB50_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB50_182:                             # %cond.end486
.LBB50_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB50_196
.LBB50_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB50_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB50_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_188
.LBB50_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB50_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB50_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB50_194
.LBB50_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB50_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_193
.LBB50_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB50_193:                             # %cond.end526
.LBB50_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB50_195:                             # %if.end532
	jmp	.LBB50_196
.LBB50_196:                             # %if.end533
	jmp	.LBB50_329
.LBB50_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB50_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB50_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB50_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB50_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB50_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB50_203
.LBB50_202:                             # %cond.false546
                                        #   in Loop: Header=BB50_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB50_203:                             # %cond.end548
                                        #   in Loop: Header=BB50_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB50_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB50_209
.LBB50_205:                             # %cond.false553
                                        #   in Loop: Header=BB50_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB50_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB50_208
.LBB50_207:                             # %cond.false558
                                        #   in Loop: Header=BB50_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB50_208:                             # %cond.end560
                                        #   in Loop: Header=BB50_199 Depth=1
.LBB50_209:                             # %cond.end562
                                        #   in Loop: Header=BB50_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB50_210:                             # %for.cond564
                                        #   Parent Loop BB50_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB50_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB50_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB50_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB50_214
.LBB50_213:                             # %cond.false572
                                        #   in Loop: Header=BB50_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB50_214:                             # %cond.end574
                                        #   in Loop: Header=BB50_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB50_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB50_220
.LBB50_216:                             # %cond.false579
                                        #   in Loop: Header=BB50_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB50_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB50_219
.LBB50_218:                             # %cond.false584
                                        #   in Loop: Header=BB50_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB50_219:                             # %cond.end586
                                        #   in Loop: Header=BB50_210 Depth=2
.LBB50_220:                             # %cond.end588
                                        #   in Loop: Header=BB50_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB50_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB50_210
.LBB50_222:                             # %for.end602
                                        #   in Loop: Header=BB50_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB50_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_199
.LBB50_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB50_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB50_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB50_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB50_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_225
.LBB50_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB50_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_231
.LBB50_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB50_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB50_237
.LBB50_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB50_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_236
.LBB50_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB50_236:                             # %cond.end650
.LBB50_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB50_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB50_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_241
.LBB50_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB50_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB50_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB50_247
.LBB50_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB50_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_246
.LBB50_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB50_246:                             # %cond.end687
.LBB50_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB50_258
.LBB50_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB50_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_251
.LBB50_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB50_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB50_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB50_257
.LBB50_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB50_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_256
.LBB50_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB50_256:                             # %cond.end724
.LBB50_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB50_258:                             # %if.end730
	jmp	.LBB50_328
.LBB50_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB50_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB50_262
.LBB50_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB50_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB50_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB50_265
.LBB50_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB50_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB50_271
.LBB50_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB50_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB50_270
.LBB50_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB50_270:                             # %cond.end753
.LBB50_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB50_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB50_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB50_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB50_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB50_276
.LBB50_275:                             # %cond.false765
                                        #   in Loop: Header=BB50_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB50_276:                             # %cond.end767
                                        #   in Loop: Header=BB50_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB50_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB50_282
.LBB50_278:                             # %cond.false772
                                        #   in Loop: Header=BB50_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB50_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB50_281
.LBB50_280:                             # %cond.false777
                                        #   in Loop: Header=BB50_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB50_281:                             # %cond.end779
                                        #   in Loop: Header=BB50_272 Depth=1
.LBB50_282:                             # %cond.end781
                                        #   in Loop: Header=BB50_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB50_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_272
.LBB50_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB50_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_287
.LBB50_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB50_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB50_293
.LBB50_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB50_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_292
.LBB50_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB50_292:                             # %cond.end822
.LBB50_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB50_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB50_296
.LBB50_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB50_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB50_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB50_299
.LBB50_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB50_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB50_305
.LBB50_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB50_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB50_304
.LBB50_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB50_304:                             # %cond.end847
.LBB50_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB50_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB50_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB50_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB50_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB50_310
.LBB50_309:                             # %cond.false859
                                        #   in Loop: Header=BB50_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB50_310:                             # %cond.end861
                                        #   in Loop: Header=BB50_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB50_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB50_316
.LBB50_312:                             # %cond.false866
                                        #   in Loop: Header=BB50_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB50_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB50_315
.LBB50_314:                             # %cond.false871
                                        #   in Loop: Header=BB50_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB50_315:                             # %cond.end873
                                        #   in Loop: Header=BB50_306 Depth=1
.LBB50_316:                             # %cond.end875
                                        #   in Loop: Header=BB50_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB50_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB50_306
.LBB50_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB50_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_321
.LBB50_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB50_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB50_327
.LBB50_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB50_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_326
.LBB50_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB50_326:                             # %cond.end916
.LBB50_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-100(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB50_328:                             # %if.end922
	jmp	.LBB50_329
.LBB50_329:                             # %if.end923
	jmp	.LBB50_330
.LBB50_330:                             # %if.end924
	jmp	.LBB50_331
.LBB50_331:                             # %if.end925
	jmp	.LBB50_332
.LBB50_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$523372284, -104(%rbp)  # imm = 0x1F3206FC
	jne	.LBB50_334
.LBB50_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_333
.Lfunc_end50:
	.size	Get_Reference_Pixel.40, .Lfunc_end50-Get_Reference_Pixel.40
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.41    # -- Begin function Error_Concealment.41
	.p2align	4, 0x90
	.type	Error_Concealment.41,@function
Error_Concealment.41:                   # @Error_Concealment.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1844259808, -12(%rbp)  # imm = 0x6DED2BE0
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB51_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB51_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_3:                               # %for.cond2
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB51_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB51_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB51_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB51_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB51_6:                               # %if.end
                                        #   in Loop: Header=BB51_3 Depth=2
	jmp	.LBB51_7
.LBB51_7:                               # %for.inc
                                        #   in Loop: Header=BB51_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_3
.LBB51_8:                               # %for.end
                                        #   in Loop: Header=BB51_1 Depth=1
	jmp	.LBB51_9
.LBB51_9:                               # %for.inc7
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_1
.LBB51_10:                              # %for.end9
	cmpl	$1844259808, -12(%rbp)  # imm = 0x6DED2BE0
	jne	.LBB51_12
.LBB51_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_11
.Lfunc_end51:
	.size	Error_Concealment.41, .Lfunc_end51-Error_Concealment.41
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.42  # -- Begin function Get_Reference_Block.42
	.p2align	4, 0x90
	.type	Get_Reference_Block.42,@function
Get_Reference_Block.42:                 # @Get_Reference_Block.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1837125055, -32(%rbp)  # imm = 0x6D804DBF
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -28(%rbp)
	movq	%r9, -56(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB52_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB52_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -4(%rbp)
.LBB52_3:                               # %for.cond5
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB52_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB52_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-36(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-12(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB52_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_3
.LBB52_6:                               # %for.end
                                        #   in Loop: Header=BB52_1 Depth=1
	jmp	.LBB52_7
.LBB52_7:                               # %for.inc14
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_1
.LBB52_8:                               # %for.end16
	cmpl	$1837125055, -32(%rbp)  # imm = 0x6D804DBF
	jne	.LBB52_10
.LBB52_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_9
.Lfunc_end52:
	.size	Get_Reference_Block.42, .Lfunc_end52-Get_Reference_Block.42
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.43       # -- Begin function DecOneForthPix.43
	.p2align	4, 0x90
	.type	DecOneForthPix.43,@function
DecOneForthPix.43:                      # @DecOneForthPix.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1285474666, -8(%rbp)   # imm = 0x4C9EC96A
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB53_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB53_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_1
.LBB53_4:                               # %for.end
	cmpl	$1285474666, -8(%rbp)   # imm = 0x4C9EC96A
	jne	.LBB53_6
.LBB53_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_5
.Lfunc_end53:
	.size	DecOneForthPix.43, .Lfunc_end53-DecOneForthPix.43
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.44       # -- Begin function DecOneForthPix.44
	.p2align	4, 0x90
	.type	DecOneForthPix.44,@function
DecOneForthPix.44:                      # @DecOneForthPix.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$199565714, -12(%rbp)   # imm = 0xBE52192
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB54_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB54_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_1
.LBB54_4:                               # %for.end
	cmpl	$199565714, -12(%rbp)   # imm = 0xBE52192
	jne	.LBB54_6
.LBB54_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_5
.Lfunc_end54:
	.size	DecOneForthPix.44, .Lfunc_end54-DecOneForthPix.44
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.45        # -- Begin function Conceal_Error.45
	.p2align	4, 0x90
	.type	Conceal_Error.45,@function
Conceal_Error.45:                       # @Conceal_Error.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1553715144, -68(%rbp)  # imm = 0x5C9BCFC8
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB55_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB55_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB55_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB55_4:                               # %land.end
.LBB55_5:                               # %lor.end
.LBB55_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB55_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB55_9
.LBB55_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB55_14
.LBB55_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB55_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB55_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB55_12:                              # %land.end51
.LBB55_13:                              # %lor.end53
.LBB55_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB55_180
# %bb.15:                               # %land.end54
	movq	.LJTI55_0(,%rax,8), %rax
	jmpq	*%rax
.LBB55_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB55_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB55_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB55_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB55_18 Depth=1
	movl	$0, -4(%rbp)
.LBB55_20:                              # %for.cond68
                                        #   Parent Loop BB55_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB55_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB55_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB55_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_20
.LBB55_23:                              # %for.end
                                        #   in Loop: Header=BB55_18 Depth=1
	jmp	.LBB55_24
.LBB55_24:                              # %for.inc85
                                        #   in Loop: Header=BB55_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_18
.LBB55_25:                              # %for.end87
	jmp	.LBB55_35
.LBB55_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB55_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB55_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB55_27 Depth=1
	movl	$0, -4(%rbp)
.LBB55_29:                              # %for.cond92
                                        #   Parent Loop BB55_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB55_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB55_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB55_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_29
.LBB55_32:                              # %for.end104
                                        #   in Loop: Header=BB55_27 Depth=1
	jmp	.LBB55_33
.LBB55_33:                              # %for.inc105
                                        #   in Loop: Header=BB55_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_27
.LBB55_34:                              # %for.end107
	jmp	.LBB55_35
.LBB55_35:                              # %if.end
	jmp	.LBB55_180
.LBB55_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB55_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_39 Depth 2
                                        #       Child Loop BB55_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB55_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB55_37 Depth=1
	movl	$0, -16(%rbp)
.LBB55_39:                              # %for.cond113
                                        #   Parent Loop BB55_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB55_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB55_39 Depth=2
	movl	$0, -4(%rbp)
.LBB55_41:                              # %for.cond117
                                        #   Parent Loop BB55_37 Depth=1
                                        #     Parent Loop BB55_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB55_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB55_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB55_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_41
.LBB55_44:                              # %for.end141
                                        #   in Loop: Header=BB55_39 Depth=2
	jmp	.LBB55_45
.LBB55_45:                              # %for.inc142
                                        #   in Loop: Header=BB55_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_39
.LBB55_46:                              # %for.end144
                                        #   in Loop: Header=BB55_37 Depth=1
	jmp	.LBB55_47
.LBB55_47:                              # %for.inc145
                                        #   in Loop: Header=BB55_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_37
.LBB55_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB55_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB55_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB55_49 Depth=1
	movl	$0, -8(%rbp)
.LBB55_51:                              # %for.cond152
                                        #   Parent Loop BB55_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB55_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB55_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB55_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_51
.LBB55_54:                              # %for.end162
                                        #   in Loop: Header=BB55_49 Depth=1
	jmp	.LBB55_55
.LBB55_55:                              # %for.inc163
                                        #   in Loop: Header=BB55_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_49
.LBB55_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB55_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB55_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB55_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB55_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB55_59 Depth=1
	movl	$0, -4(%rbp)
.LBB55_61:                              # %for.cond175
                                        #   Parent Loop BB55_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB55_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB55_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB55_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_61
.LBB55_64:                              # %for.end195
                                        #   in Loop: Header=BB55_59 Depth=1
	jmp	.LBB55_65
.LBB55_65:                              # %for.inc196
                                        #   in Loop: Header=BB55_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_59
.LBB55_66:                              # %for.end198
	jmp	.LBB55_95
.LBB55_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB55_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB55_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_71 Depth 2
                                        #       Child Loop BB55_73 Depth 3
                                        #         Child Loop BB55_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB55_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB55_71:                              # %for.cond210
                                        #   Parent Loop BB55_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_73 Depth 3
                                        #         Child Loop BB55_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB55_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB55_73:                              # %for.cond236
                                        #   Parent Loop BB55_69 Depth=1
                                        #     Parent Loop BB55_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB55_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB55_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB55_73 Depth=3
	movl	$0, -4(%rbp)
.LBB55_75:                              # %for.cond240
                                        #   Parent Loop BB55_69 Depth=1
                                        #     Parent Loop BB55_71 Depth=2
                                        #       Parent Loop BB55_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB55_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB55_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB55_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_75
.LBB55_78:                              # %for.end259
                                        #   in Loop: Header=BB55_73 Depth=3
	jmp	.LBB55_79
.LBB55_79:                              # %for.inc260
                                        #   in Loop: Header=BB55_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_73
.LBB55_80:                              # %for.end262
                                        #   in Loop: Header=BB55_71 Depth=2
	jmp	.LBB55_81
.LBB55_81:                              # %for.inc263
                                        #   in Loop: Header=BB55_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_71
.LBB55_82:                              # %for.end265
                                        #   in Loop: Header=BB55_69 Depth=1
	jmp	.LBB55_83
.LBB55_83:                              # %for.inc266
                                        #   in Loop: Header=BB55_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_69
.LBB55_84:                              # %for.end268
	jmp	.LBB55_94
.LBB55_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB55_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB55_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB55_86 Depth=1
	movl	$0, -4(%rbp)
.LBB55_88:                              # %for.cond274
                                        #   Parent Loop BB55_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB55_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB55_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB55_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_88
.LBB55_91:                              # %for.end294
                                        #   in Loop: Header=BB55_86 Depth=1
	jmp	.LBB55_92
.LBB55_92:                              # %for.inc295
                                        #   in Loop: Header=BB55_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_86
.LBB55_93:                              # %for.end297
	jmp	.LBB55_94
.LBB55_94:                              # %if.end298
	jmp	.LBB55_95
.LBB55_95:                              # %if.end299
	jmp	.LBB55_105
.LBB55_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB55_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB55_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB55_97 Depth=1
	movl	$0, -4(%rbp)
.LBB55_99:                              # %for.cond305
                                        #   Parent Loop BB55_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB55_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB55_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB55_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_99
.LBB55_102:                             # %for.end317
                                        #   in Loop: Header=BB55_97 Depth=1
	jmp	.LBB55_103
.LBB55_103:                             # %for.inc318
                                        #   in Loop: Header=BB55_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_97
.LBB55_104:                             # %for.end320
	jmp	.LBB55_105
.LBB55_105:                             # %if.end321
	jmp	.LBB55_180
.LBB55_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB55_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB55_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_110 Depth 2
                                        #       Child Loop BB55_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB55_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB55_108 Depth=1
	movl	$0, -16(%rbp)
.LBB55_110:                             # %for.cond331
                                        #   Parent Loop BB55_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB55_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB55_110 Depth=2
	movl	$0, -4(%rbp)
.LBB55_112:                             # %for.cond335
                                        #   Parent Loop BB55_108 Depth=1
                                        #     Parent Loop BB55_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB55_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB55_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB55_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_112
.LBB55_115:                             # %for.end359
                                        #   in Loop: Header=BB55_110 Depth=2
	jmp	.LBB55_116
.LBB55_116:                             # %for.inc360
                                        #   in Loop: Header=BB55_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_110
.LBB55_117:                             # %for.end362
                                        #   in Loop: Header=BB55_108 Depth=1
	jmp	.LBB55_118
.LBB55_118:                             # %for.inc363
                                        #   in Loop: Header=BB55_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_108
.LBB55_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB55_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB55_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB55_120 Depth=1
	movl	$0, -8(%rbp)
.LBB55_122:                             # %for.cond370
                                        #   Parent Loop BB55_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB55_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB55_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB55_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_122
.LBB55_125:                             # %for.end380
                                        #   in Loop: Header=BB55_120 Depth=1
	jmp	.LBB55_126
.LBB55_126:                             # %for.inc381
                                        #   in Loop: Header=BB55_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_120
.LBB55_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB55_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB55_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB55_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB55_129 Depth=1
	movl	$0, -4(%rbp)
.LBB55_131:                             # %for.cond390
                                        #   Parent Loop BB55_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB55_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB55_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB55_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_131
.LBB55_134:                             # %for.end410
                                        #   in Loop: Header=BB55_129 Depth=1
	jmp	.LBB55_135
.LBB55_135:                             # %for.inc411
                                        #   in Loop: Header=BB55_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_129
.LBB55_136:                             # %for.end413
	jmp	.LBB55_156
.LBB55_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB55_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB55_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_141 Depth 2
                                        #       Child Loop BB55_143 Depth 3
                                        #         Child Loop BB55_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB55_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB55_141:                             # %for.cond425
                                        #   Parent Loop BB55_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_143 Depth 3
                                        #         Child Loop BB55_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB55_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB55_143:                             # %for.cond452
                                        #   Parent Loop BB55_139 Depth=1
                                        #     Parent Loop BB55_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB55_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB55_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB55_143 Depth=3
	movl	$0, -4(%rbp)
.LBB55_145:                             # %for.cond456
                                        #   Parent Loop BB55_139 Depth=1
                                        #     Parent Loop BB55_141 Depth=2
                                        #       Parent Loop BB55_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB55_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB55_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB55_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_145
.LBB55_148:                             # %for.end475
                                        #   in Loop: Header=BB55_143 Depth=3
	jmp	.LBB55_149
.LBB55_149:                             # %for.inc476
                                        #   in Loop: Header=BB55_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_143
.LBB55_150:                             # %for.end478
                                        #   in Loop: Header=BB55_141 Depth=2
	jmp	.LBB55_151
.LBB55_151:                             # %for.inc479
                                        #   in Loop: Header=BB55_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_141
.LBB55_152:                             # %for.end481
                                        #   in Loop: Header=BB55_139 Depth=1
	jmp	.LBB55_153
.LBB55_153:                             # %for.inc482
                                        #   in Loop: Header=BB55_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_139
.LBB55_154:                             # %for.end484
	jmp	.LBB55_155
.LBB55_155:                             # %if.end485
	jmp	.LBB55_156
.LBB55_156:                             # %if.end486
	jmp	.LBB55_157
.LBB55_157:                             # %if.end487
	jmp	.LBB55_180
.LBB55_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB55_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB55_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB55_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB55_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB55_161 Depth=1
	movl	$0, -4(%rbp)
.LBB55_163:                             # %for.cond499
                                        #   Parent Loop BB55_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB55_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB55_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB55_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_163
.LBB55_166:                             # %for.end519
                                        #   in Loop: Header=BB55_161 Depth=1
	jmp	.LBB55_167
.LBB55_167:                             # %for.inc520
                                        #   in Loop: Header=BB55_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_161
.LBB55_168:                             # %for.end522
	jmp	.LBB55_169
.LBB55_169:                             # %if.end523
	jmp	.LBB55_179
.LBB55_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB55_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB55_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB55_171 Depth=1
	movl	$0, -4(%rbp)
.LBB55_173:                             # %for.cond529
                                        #   Parent Loop BB55_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB55_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB55_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB55_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_173
.LBB55_176:                             # %for.end541
                                        #   in Loop: Header=BB55_171 Depth=1
	jmp	.LBB55_177
.LBB55_177:                             # %for.inc542
                                        #   in Loop: Header=BB55_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_171
.LBB55_178:                             # %for.end544
	jmp	.LBB55_179
.LBB55_179:                             # %if.end545
	jmp	.LBB55_180
.LBB55_180:                             # %sw.epilog
	cmpl	$1553715144, -68(%rbp)  # imm = 0x5C9BCFC8
	jne	.LBB55_182
.LBB55_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_181
.Lfunc_end55:
	.size	Conceal_Error.45, .Lfunc_end55-Conceal_Error.45
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI55_0:
	.quad	.LBB55_16
	.quad	.LBB55_158
	.quad	.LBB55_106
	.quad	.LBB55_180
	.quad	.LBB55_36
                                        # -- End function
	.text
	.globl	compute_residue_b8block.46 # -- Begin function compute_residue_b8block.46
	.p2align	4, 0x90
	.type	compute_residue_b8block.46,@function
compute_residue_b8block.46:             # @compute_residue_b8block.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1498934916, -36(%rbp)  # imm = 0x5957EE84
	movl	%edi, -20(%rbp)
	movl	%esi, -32(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB56_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB56_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB56_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB56_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB56_4:                               # %for.cond4
                                        #   Parent Loop BB56_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB56_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB56_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB56_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_4
.LBB56_7:                               # %for.end
                                        #   in Loop: Header=BB56_2 Depth=1
	jmp	.LBB56_8
.LBB56_8:                               # %for.inc22
                                        #   in Loop: Header=BB56_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_2
.LBB56_9:                               # %for.end24
	jmp	.LBB56_19
.LBB56_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB56_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB56_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB56_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB56_13:                              # %for.cond29
                                        #   Parent Loop BB56_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB56_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB56_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB56_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_13
.LBB56_16:                              # %for.end56
                                        #   in Loop: Header=BB56_11 Depth=1
	jmp	.LBB56_17
.LBB56_17:                              # %for.inc57
                                        #   in Loop: Header=BB56_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_11
.LBB56_18:                              # %for.end59
	jmp	.LBB56_19
.LBB56_19:                              # %if.end
	cmpl	$1498934916, -36(%rbp)  # imm = 0x5957EE84
	jne	.LBB56_21
.LBB56_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_20
.Lfunc_end56:
	.size	compute_residue_b8block.46, .Lfunc_end56-compute_residue_b8block.46
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.47 # -- Begin function compute_residue_b8block.47
	.p2align	4, 0x90
	.type	compute_residue_b8block.47,@function
compute_residue_b8block.47:             # @compute_residue_b8block.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$360236911, -36(%rbp)   # imm = 0x1578C76F
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB57_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB57_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB57_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB57_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB57_4:                               # %for.cond4
                                        #   Parent Loop BB57_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB57_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB57_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-24(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB57_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_4
.LBB57_7:                               # %for.end
                                        #   in Loop: Header=BB57_2 Depth=1
	jmp	.LBB57_8
.LBB57_8:                               # %for.inc22
                                        #   in Loop: Header=BB57_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_2
.LBB57_9:                               # %for.end24
	jmp	.LBB57_19
.LBB57_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB57_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB57_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB57_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB57_13:                              # %for.cond29
                                        #   Parent Loop BB57_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB57_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB57_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB57_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_13
.LBB57_16:                              # %for.end56
                                        #   in Loop: Header=BB57_11 Depth=1
	jmp	.LBB57_17
.LBB57_17:                              # %for.inc57
                                        #   in Loop: Header=BB57_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_11
.LBB57_18:                              # %for.end59
	jmp	.LBB57_19
.LBB57_19:                              # %if.end
	cmpl	$360236911, -36(%rbp)   # imm = 0x1578C76F
	jne	.LBB57_21
.LBB57_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_20
.Lfunc_end57:
	.size	compute_residue_b8block.47, .Lfunc_end57-compute_residue_b8block.47
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.48  # -- Begin function Get_Reference_Pixel.48
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.48,@function
Get_Reference_Pixel.48:                 # @Get_Reference_Pixel.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$202066376, -108(%rbp)  # imm = 0xC0B49C8
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB58_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB58_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB58_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB58_5
.LBB58_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB58_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB58_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB58_11
.LBB58_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB58_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB58_10
.LBB58_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB58_10:                              # %cond.end14
.LBB58_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB58_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB58_14
.LBB58_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB58_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB58_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB58_20
.LBB58_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB58_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB58_19
.LBB58_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB58_19:                              # %cond.end29
.LBB58_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_332
.LBB58_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB58_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB58_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB58_25
.LBB58_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB58_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB58_31
.LBB58_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB58_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB58_30
.LBB58_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB58_30:                              # %cond.end52
.LBB58_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB58_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB58_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB58_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB58_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB58_36
.LBB58_35:                              # %cond.false61
                                        #   in Loop: Header=BB58_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB58_36:                              # %cond.end63
                                        #   in Loop: Header=BB58_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB58_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB58_42
.LBB58_38:                              # %cond.false68
                                        #   in Loop: Header=BB58_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB58_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB58_41
.LBB58_40:                              # %cond.false73
                                        #   in Loop: Header=BB58_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB58_41:                              # %cond.end75
                                        #   in Loop: Header=BB58_32 Depth=1
.LBB58_42:                              # %cond.end77
                                        #   in Loop: Header=BB58_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB58_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_32
.LBB58_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_47
.LBB58_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB58_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB58_53
.LBB58_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_52
.LBB58_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB58_52:                              # %cond.end113
.LBB58_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB58_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB58_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB58_57
.LBB58_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB58_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB58_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB58_63
.LBB58_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB58_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB58_62
.LBB58_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB58_62:                              # %cond.end136
.LBB58_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB58_76
.LBB58_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB58_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB58_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB58_68
.LBB58_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB58_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB58_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB58_74
.LBB58_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB58_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB58_73
.LBB58_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB58_73:                              # %cond.end169
.LBB58_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB58_75:                              # %if.end
	jmp	.LBB58_76
.LBB58_76:                              # %if.end178
	jmp	.LBB58_331
.LBB58_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB58_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB58_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB58_81
.LBB58_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB58_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB58_87
.LBB58_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB58_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB58_86
.LBB58_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB58_86:                              # %cond.end197
.LBB58_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB58_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB58_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB58_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB58_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB58_92
.LBB58_91:                              # %cond.false209
                                        #   in Loop: Header=BB58_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB58_92:                              # %cond.end211
                                        #   in Loop: Header=BB58_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB58_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB58_98
.LBB58_94:                              # %cond.false216
                                        #   in Loop: Header=BB58_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB58_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB58_97
.LBB58_96:                              # %cond.false221
                                        #   in Loop: Header=BB58_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB58_97:                              # %cond.end223
                                        #   in Loop: Header=BB58_88 Depth=1
.LBB58_98:                              # %cond.end225
                                        #   in Loop: Header=BB58_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB58_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_88
.LBB58_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_103
.LBB58_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB58_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB58_109
.LBB58_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_108
.LBB58_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB58_108:                             # %cond.end266
.LBB58_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB58_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB58_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB58_113
.LBB58_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB58_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB58_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB58_119
.LBB58_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB58_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB58_118
.LBB58_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB58_118:                             # %cond.end287
.LBB58_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB58_132
.LBB58_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB58_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB58_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB58_124
.LBB58_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB58_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB58_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB58_130
.LBB58_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB58_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB58_129
.LBB58_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB58_129:                             # %cond.end320
.LBB58_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB58_131:                             # %if.end331
	jmp	.LBB58_132
.LBB58_132:                             # %if.end332
	jmp	.LBB58_330
.LBB58_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB58_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB58_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB58_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB58_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB58_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB58_139
.LBB58_138:                             # %cond.false345
                                        #   in Loop: Header=BB58_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB58_139:                             # %cond.end347
                                        #   in Loop: Header=BB58_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB58_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB58_145
.LBB58_141:                             # %cond.false352
                                        #   in Loop: Header=BB58_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB58_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB58_144
.LBB58_143:                             # %cond.false357
                                        #   in Loop: Header=BB58_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB58_144:                             # %cond.end359
                                        #   in Loop: Header=BB58_135 Depth=1
.LBB58_145:                             # %cond.end361
                                        #   in Loop: Header=BB58_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB58_146:                             # %for.cond363
                                        #   Parent Loop BB58_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB58_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB58_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB58_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB58_150
.LBB58_149:                             # %cond.false371
                                        #   in Loop: Header=BB58_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB58_150:                             # %cond.end373
                                        #   in Loop: Header=BB58_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB58_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB58_156
.LBB58_152:                             # %cond.false378
                                        #   in Loop: Header=BB58_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB58_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB58_155
.LBB58_154:                             # %cond.false383
                                        #   in Loop: Header=BB58_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB58_155:                             # %cond.end385
                                        #   in Loop: Header=BB58_146 Depth=2
.LBB58_156:                             # %cond.end387
                                        #   in Loop: Header=BB58_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB58_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_146
.LBB58_158:                             # %for.end401
                                        #   in Loop: Header=BB58_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB58_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_135
.LBB58_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB58_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB58_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB58_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB58_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_161
.LBB58_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_167
.LBB58_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB58_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB58_173
.LBB58_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_172
.LBB58_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB58_172:                             # %cond.end449
.LBB58_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB58_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB58_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_177
.LBB58_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB58_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB58_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB58_183
.LBB58_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB58_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_182
.LBB58_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB58_182:                             # %cond.end486
.LBB58_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB58_196
.LBB58_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB58_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB58_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_188
.LBB58_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB58_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB58_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB58_194
.LBB58_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB58_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_193
.LBB58_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB58_193:                             # %cond.end526
.LBB58_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB58_195:                             # %if.end532
	jmp	.LBB58_196
.LBB58_196:                             # %if.end533
	jmp	.LBB58_329
.LBB58_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB58_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB58_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB58_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB58_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB58_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB58_203
.LBB58_202:                             # %cond.false546
                                        #   in Loop: Header=BB58_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB58_203:                             # %cond.end548
                                        #   in Loop: Header=BB58_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB58_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB58_209
.LBB58_205:                             # %cond.false553
                                        #   in Loop: Header=BB58_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB58_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB58_208
.LBB58_207:                             # %cond.false558
                                        #   in Loop: Header=BB58_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB58_208:                             # %cond.end560
                                        #   in Loop: Header=BB58_199 Depth=1
.LBB58_209:                             # %cond.end562
                                        #   in Loop: Header=BB58_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB58_210:                             # %for.cond564
                                        #   Parent Loop BB58_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB58_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB58_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB58_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB58_214
.LBB58_213:                             # %cond.false572
                                        #   in Loop: Header=BB58_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB58_214:                             # %cond.end574
                                        #   in Loop: Header=BB58_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB58_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB58_220
.LBB58_216:                             # %cond.false579
                                        #   in Loop: Header=BB58_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB58_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB58_219
.LBB58_218:                             # %cond.false584
                                        #   in Loop: Header=BB58_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB58_219:                             # %cond.end586
                                        #   in Loop: Header=BB58_210 Depth=2
.LBB58_220:                             # %cond.end588
                                        #   in Loop: Header=BB58_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB58_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_210
.LBB58_222:                             # %for.end602
                                        #   in Loop: Header=BB58_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB58_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_199
.LBB58_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB58_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB58_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB58_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB58_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_225
.LBB58_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_231
.LBB58_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB58_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB58_237
.LBB58_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_236
.LBB58_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB58_236:                             # %cond.end650
.LBB58_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB58_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB58_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_241
.LBB58_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB58_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB58_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB58_247
.LBB58_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB58_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_246
.LBB58_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB58_246:                             # %cond.end687
.LBB58_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB58_258
.LBB58_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB58_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_251
.LBB58_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB58_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB58_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB58_257
.LBB58_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB58_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_256
.LBB58_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB58_256:                             # %cond.end724
.LBB58_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB58_258:                             # %if.end730
	jmp	.LBB58_328
.LBB58_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB58_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB58_262
.LBB58_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB58_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB58_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB58_265
.LBB58_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB58_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB58_271
.LBB58_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB58_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB58_270
.LBB58_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB58_270:                             # %cond.end753
.LBB58_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB58_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB58_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB58_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB58_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB58_276
.LBB58_275:                             # %cond.false765
                                        #   in Loop: Header=BB58_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB58_276:                             # %cond.end767
                                        #   in Loop: Header=BB58_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB58_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB58_282
.LBB58_278:                             # %cond.false772
                                        #   in Loop: Header=BB58_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB58_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB58_281
.LBB58_280:                             # %cond.false777
                                        #   in Loop: Header=BB58_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB58_281:                             # %cond.end779
                                        #   in Loop: Header=BB58_272 Depth=1
.LBB58_282:                             # %cond.end781
                                        #   in Loop: Header=BB58_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB58_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_272
.LBB58_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_287
.LBB58_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB58_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB58_293
.LBB58_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_292
.LBB58_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB58_292:                             # %cond.end822
.LBB58_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB58_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB58_296
.LBB58_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB58_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB58_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB58_299
.LBB58_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB58_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB58_305
.LBB58_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB58_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB58_304
.LBB58_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB58_304:                             # %cond.end847
.LBB58_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB58_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB58_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB58_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB58_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB58_310
.LBB58_309:                             # %cond.false859
                                        #   in Loop: Header=BB58_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB58_310:                             # %cond.end861
                                        #   in Loop: Header=BB58_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB58_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB58_316
.LBB58_312:                             # %cond.false866
                                        #   in Loop: Header=BB58_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB58_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB58_315
.LBB58_314:                             # %cond.false871
                                        #   in Loop: Header=BB58_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB58_315:                             # %cond.end873
                                        #   in Loop: Header=BB58_306 Depth=1
.LBB58_316:                             # %cond.end875
                                        #   in Loop: Header=BB58_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB58_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_306
.LBB58_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_321
.LBB58_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB58_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB58_327
.LBB58_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_326
.LBB58_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB58_326:                             # %cond.end916
.LBB58_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-104(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB58_328:                             # %if.end922
	jmp	.LBB58_329
.LBB58_329:                             # %if.end923
	jmp	.LBB58_330
.LBB58_330:                             # %if.end924
	jmp	.LBB58_331
.LBB58_331:                             # %if.end925
	jmp	.LBB58_332
.LBB58_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$202066376, -108(%rbp)  # imm = 0xC0B49C8
	jne	.LBB58_334
.LBB58_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_333
.Lfunc_end58:
	.size	Get_Reference_Pixel.48, .Lfunc_end58-Get_Reference_Pixel.48
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.49        # -- Begin function Conceal_Error.49
	.p2align	4, 0x90
	.type	Conceal_Error.49,@function
Conceal_Error.49:                       # @Conceal_Error.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$221979521, -68(%rbp)   # imm = 0xD3B2381
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB59_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB59_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB59_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB59_4:                               # %land.end
.LBB59_5:                               # %lor.end
.LBB59_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB59_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB59_9
.LBB59_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB59_14
.LBB59_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB59_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB59_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB59_12:                              # %land.end51
.LBB59_13:                              # %lor.end53
.LBB59_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB59_180
# %bb.15:                               # %land.end54
	movq	.LJTI59_0(,%rax,8), %rax
	jmpq	*%rax
.LBB59_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB59_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB59_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB59_18 Depth=1
	movl	$0, -4(%rbp)
.LBB59_20:                              # %for.cond68
                                        #   Parent Loop BB59_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB59_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB59_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_20
.LBB59_23:                              # %for.end
                                        #   in Loop: Header=BB59_18 Depth=1
	jmp	.LBB59_24
.LBB59_24:                              # %for.inc85
                                        #   in Loop: Header=BB59_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_18
.LBB59_25:                              # %for.end87
	jmp	.LBB59_35
.LBB59_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB59_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB59_27 Depth=1
	movl	$0, -4(%rbp)
.LBB59_29:                              # %for.cond92
                                        #   Parent Loop BB59_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB59_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB59_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_29
.LBB59_32:                              # %for.end104
                                        #   in Loop: Header=BB59_27 Depth=1
	jmp	.LBB59_33
.LBB59_33:                              # %for.inc105
                                        #   in Loop: Header=BB59_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_27
.LBB59_34:                              # %for.end107
	jmp	.LBB59_35
.LBB59_35:                              # %if.end
	jmp	.LBB59_180
.LBB59_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB59_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_39 Depth 2
                                        #       Child Loop BB59_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB59_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB59_37 Depth=1
	movl	$0, -16(%rbp)
.LBB59_39:                              # %for.cond113
                                        #   Parent Loop BB59_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB59_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB59_39 Depth=2
	movl	$0, -4(%rbp)
.LBB59_41:                              # %for.cond117
                                        #   Parent Loop BB59_37 Depth=1
                                        #     Parent Loop BB59_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB59_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB59_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB59_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_41
.LBB59_44:                              # %for.end141
                                        #   in Loop: Header=BB59_39 Depth=2
	jmp	.LBB59_45
.LBB59_45:                              # %for.inc142
                                        #   in Loop: Header=BB59_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_39
.LBB59_46:                              # %for.end144
                                        #   in Loop: Header=BB59_37 Depth=1
	jmp	.LBB59_47
.LBB59_47:                              # %for.inc145
                                        #   in Loop: Header=BB59_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_37
.LBB59_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB59_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB59_49 Depth=1
	movl	$0, -8(%rbp)
.LBB59_51:                              # %for.cond152
                                        #   Parent Loop BB59_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB59_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB59_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_51
.LBB59_54:                              # %for.end162
                                        #   in Loop: Header=BB59_49 Depth=1
	jmp	.LBB59_55
.LBB59_55:                              # %for.inc163
                                        #   in Loop: Header=BB59_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_49
.LBB59_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB59_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB59_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB59_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB59_59 Depth=1
	movl	$0, -4(%rbp)
.LBB59_61:                              # %for.cond175
                                        #   Parent Loop BB59_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB59_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB59_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_61
.LBB59_64:                              # %for.end195
                                        #   in Loop: Header=BB59_59 Depth=1
	jmp	.LBB59_65
.LBB59_65:                              # %for.inc196
                                        #   in Loop: Header=BB59_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_59
.LBB59_66:                              # %for.end198
	jmp	.LBB59_95
.LBB59_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB59_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB59_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_71 Depth 2
                                        #       Child Loop BB59_73 Depth 3
                                        #         Child Loop BB59_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB59_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB59_71:                              # %for.cond210
                                        #   Parent Loop BB59_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_73 Depth 3
                                        #         Child Loop BB59_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB59_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB59_73:                              # %for.cond236
                                        #   Parent Loop BB59_69 Depth=1
                                        #     Parent Loop BB59_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB59_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB59_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB59_73 Depth=3
	movl	$0, -4(%rbp)
.LBB59_75:                              # %for.cond240
                                        #   Parent Loop BB59_69 Depth=1
                                        #     Parent Loop BB59_71 Depth=2
                                        #       Parent Loop BB59_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB59_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB59_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB59_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_75
.LBB59_78:                              # %for.end259
                                        #   in Loop: Header=BB59_73 Depth=3
	jmp	.LBB59_79
.LBB59_79:                              # %for.inc260
                                        #   in Loop: Header=BB59_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_73
.LBB59_80:                              # %for.end262
                                        #   in Loop: Header=BB59_71 Depth=2
	jmp	.LBB59_81
.LBB59_81:                              # %for.inc263
                                        #   in Loop: Header=BB59_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_71
.LBB59_82:                              # %for.end265
                                        #   in Loop: Header=BB59_69 Depth=1
	jmp	.LBB59_83
.LBB59_83:                              # %for.inc266
                                        #   in Loop: Header=BB59_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_69
.LBB59_84:                              # %for.end268
	jmp	.LBB59_94
.LBB59_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB59_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB59_86 Depth=1
	movl	$0, -4(%rbp)
.LBB59_88:                              # %for.cond274
                                        #   Parent Loop BB59_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB59_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB59_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_88
.LBB59_91:                              # %for.end294
                                        #   in Loop: Header=BB59_86 Depth=1
	jmp	.LBB59_92
.LBB59_92:                              # %for.inc295
                                        #   in Loop: Header=BB59_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_86
.LBB59_93:                              # %for.end297
	jmp	.LBB59_94
.LBB59_94:                              # %if.end298
	jmp	.LBB59_95
.LBB59_95:                              # %if.end299
	jmp	.LBB59_105
.LBB59_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB59_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB59_97 Depth=1
	movl	$0, -4(%rbp)
.LBB59_99:                              # %for.cond305
                                        #   Parent Loop BB59_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB59_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB59_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_99
.LBB59_102:                             # %for.end317
                                        #   in Loop: Header=BB59_97 Depth=1
	jmp	.LBB59_103
.LBB59_103:                             # %for.inc318
                                        #   in Loop: Header=BB59_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_97
.LBB59_104:                             # %for.end320
	jmp	.LBB59_105
.LBB59_105:                             # %if.end321
	jmp	.LBB59_180
.LBB59_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB59_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB59_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_110 Depth 2
                                        #       Child Loop BB59_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB59_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB59_108 Depth=1
	movl	$0, -16(%rbp)
.LBB59_110:                             # %for.cond331
                                        #   Parent Loop BB59_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB59_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB59_110 Depth=2
	movl	$0, -4(%rbp)
.LBB59_112:                             # %for.cond335
                                        #   Parent Loop BB59_108 Depth=1
                                        #     Parent Loop BB59_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB59_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB59_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB59_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_112
.LBB59_115:                             # %for.end359
                                        #   in Loop: Header=BB59_110 Depth=2
	jmp	.LBB59_116
.LBB59_116:                             # %for.inc360
                                        #   in Loop: Header=BB59_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_110
.LBB59_117:                             # %for.end362
                                        #   in Loop: Header=BB59_108 Depth=1
	jmp	.LBB59_118
.LBB59_118:                             # %for.inc363
                                        #   in Loop: Header=BB59_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_108
.LBB59_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB59_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB59_120 Depth=1
	movl	$0, -8(%rbp)
.LBB59_122:                             # %for.cond370
                                        #   Parent Loop BB59_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB59_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB59_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_122
.LBB59_125:                             # %for.end380
                                        #   in Loop: Header=BB59_120 Depth=1
	jmp	.LBB59_126
.LBB59_126:                             # %for.inc381
                                        #   in Loop: Header=BB59_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_120
.LBB59_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB59_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB59_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB59_129 Depth=1
	movl	$0, -4(%rbp)
.LBB59_131:                             # %for.cond390
                                        #   Parent Loop BB59_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB59_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB59_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_131
.LBB59_134:                             # %for.end410
                                        #   in Loop: Header=BB59_129 Depth=1
	jmp	.LBB59_135
.LBB59_135:                             # %for.inc411
                                        #   in Loop: Header=BB59_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_129
.LBB59_136:                             # %for.end413
	jmp	.LBB59_156
.LBB59_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB59_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB59_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_141 Depth 2
                                        #       Child Loop BB59_143 Depth 3
                                        #         Child Loop BB59_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB59_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB59_141:                             # %for.cond425
                                        #   Parent Loop BB59_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_143 Depth 3
                                        #         Child Loop BB59_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB59_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB59_143:                             # %for.cond452
                                        #   Parent Loop BB59_139 Depth=1
                                        #     Parent Loop BB59_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB59_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB59_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB59_143 Depth=3
	movl	$0, -4(%rbp)
.LBB59_145:                             # %for.cond456
                                        #   Parent Loop BB59_139 Depth=1
                                        #     Parent Loop BB59_141 Depth=2
                                        #       Parent Loop BB59_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB59_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB59_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB59_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_145
.LBB59_148:                             # %for.end475
                                        #   in Loop: Header=BB59_143 Depth=3
	jmp	.LBB59_149
.LBB59_149:                             # %for.inc476
                                        #   in Loop: Header=BB59_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_143
.LBB59_150:                             # %for.end478
                                        #   in Loop: Header=BB59_141 Depth=2
	jmp	.LBB59_151
.LBB59_151:                             # %for.inc479
                                        #   in Loop: Header=BB59_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_141
.LBB59_152:                             # %for.end481
                                        #   in Loop: Header=BB59_139 Depth=1
	jmp	.LBB59_153
.LBB59_153:                             # %for.inc482
                                        #   in Loop: Header=BB59_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_139
.LBB59_154:                             # %for.end484
	jmp	.LBB59_155
.LBB59_155:                             # %if.end485
	jmp	.LBB59_156
.LBB59_156:                             # %if.end486
	jmp	.LBB59_157
.LBB59_157:                             # %if.end487
	jmp	.LBB59_180
.LBB59_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB59_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB59_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB59_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB59_161 Depth=1
	movl	$0, -4(%rbp)
.LBB59_163:                             # %for.cond499
                                        #   Parent Loop BB59_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB59_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB59_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_163
.LBB59_166:                             # %for.end519
                                        #   in Loop: Header=BB59_161 Depth=1
	jmp	.LBB59_167
.LBB59_167:                             # %for.inc520
                                        #   in Loop: Header=BB59_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_161
.LBB59_168:                             # %for.end522
	jmp	.LBB59_169
.LBB59_169:                             # %if.end523
	jmp	.LBB59_179
.LBB59_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB59_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB59_171 Depth=1
	movl	$0, -4(%rbp)
.LBB59_173:                             # %for.cond529
                                        #   Parent Loop BB59_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB59_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB59_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_173
.LBB59_176:                             # %for.end541
                                        #   in Loop: Header=BB59_171 Depth=1
	jmp	.LBB59_177
.LBB59_177:                             # %for.inc542
                                        #   in Loop: Header=BB59_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_171
.LBB59_178:                             # %for.end544
	jmp	.LBB59_179
.LBB59_179:                             # %if.end545
	jmp	.LBB59_180
.LBB59_180:                             # %sw.epilog
	cmpl	$221979521, -68(%rbp)   # imm = 0xD3B2381
	jne	.LBB59_182
.LBB59_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_181
.Lfunc_end59:
	.size	Conceal_Error.49, .Lfunc_end59-Conceal_Error.49
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI59_0:
	.quad	.LBB59_16
	.quad	.LBB59_158
	.quad	.LBB59_106
	.quad	.LBB59_180
	.quad	.LBB59_36
                                        # -- End function
	.text
	.globl	Conceal_Error.50        # -- Begin function Conceal_Error.50
	.p2align	4, 0x90
	.type	Conceal_Error.50,@function
Conceal_Error.50:                       # @Conceal_Error.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1001913078, -68(%rbp)  # imm = 0x3BB7FAF6
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB60_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB60_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB60_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB60_4:                               # %land.end
.LBB60_5:                               # %lor.end
.LBB60_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB60_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB60_9
.LBB60_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB60_14
.LBB60_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB60_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB60_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB60_12:                              # %land.end51
.LBB60_13:                              # %lor.end53
.LBB60_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB60_180
# %bb.15:                               # %land.end54
	movq	.LJTI60_0(,%rax,8), %rax
	jmpq	*%rax
.LBB60_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB60_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB60_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB60_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB60_18 Depth=1
	movl	$0, -4(%rbp)
.LBB60_20:                              # %for.cond68
                                        #   Parent Loop BB60_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB60_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB60_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB60_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_20
.LBB60_23:                              # %for.end
                                        #   in Loop: Header=BB60_18 Depth=1
	jmp	.LBB60_24
.LBB60_24:                              # %for.inc85
                                        #   in Loop: Header=BB60_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_18
.LBB60_25:                              # %for.end87
	jmp	.LBB60_35
.LBB60_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB60_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB60_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB60_27 Depth=1
	movl	$0, -4(%rbp)
.LBB60_29:                              # %for.cond92
                                        #   Parent Loop BB60_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB60_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB60_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB60_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_29
.LBB60_32:                              # %for.end104
                                        #   in Loop: Header=BB60_27 Depth=1
	jmp	.LBB60_33
.LBB60_33:                              # %for.inc105
                                        #   in Loop: Header=BB60_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_27
.LBB60_34:                              # %for.end107
	jmp	.LBB60_35
.LBB60_35:                              # %if.end
	jmp	.LBB60_180
.LBB60_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB60_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_39 Depth 2
                                        #       Child Loop BB60_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB60_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB60_37 Depth=1
	movl	$0, -12(%rbp)
.LBB60_39:                              # %for.cond113
                                        #   Parent Loop BB60_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB60_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB60_39 Depth=2
	movl	$0, -4(%rbp)
.LBB60_41:                              # %for.cond117
                                        #   Parent Loop BB60_37 Depth=1
                                        #     Parent Loop BB60_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB60_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB60_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB60_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_41
.LBB60_44:                              # %for.end141
                                        #   in Loop: Header=BB60_39 Depth=2
	jmp	.LBB60_45
.LBB60_45:                              # %for.inc142
                                        #   in Loop: Header=BB60_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_39
.LBB60_46:                              # %for.end144
                                        #   in Loop: Header=BB60_37 Depth=1
	jmp	.LBB60_47
.LBB60_47:                              # %for.inc145
                                        #   in Loop: Header=BB60_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_37
.LBB60_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB60_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB60_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB60_49 Depth=1
	movl	$0, -8(%rbp)
.LBB60_51:                              # %for.cond152
                                        #   Parent Loop BB60_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB60_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB60_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB60_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_51
.LBB60_54:                              # %for.end162
                                        #   in Loop: Header=BB60_49 Depth=1
	jmp	.LBB60_55
.LBB60_55:                              # %for.inc163
                                        #   in Loop: Header=BB60_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_49
.LBB60_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB60_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB60_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB60_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB60_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB60_59 Depth=1
	movl	$0, -4(%rbp)
.LBB60_61:                              # %for.cond175
                                        #   Parent Loop BB60_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB60_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB60_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB60_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_61
.LBB60_64:                              # %for.end195
                                        #   in Loop: Header=BB60_59 Depth=1
	jmp	.LBB60_65
.LBB60_65:                              # %for.inc196
                                        #   in Loop: Header=BB60_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_59
.LBB60_66:                              # %for.end198
	jmp	.LBB60_95
.LBB60_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB60_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB60_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_71 Depth 2
                                        #       Child Loop BB60_73 Depth 3
                                        #         Child Loop BB60_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB60_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB60_71:                              # %for.cond210
                                        #   Parent Loop BB60_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_73 Depth 3
                                        #         Child Loop BB60_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB60_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB60_73:                              # %for.cond236
                                        #   Parent Loop BB60_69 Depth=1
                                        #     Parent Loop BB60_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB60_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB60_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB60_73 Depth=3
	movl	$0, -4(%rbp)
.LBB60_75:                              # %for.cond240
                                        #   Parent Loop BB60_69 Depth=1
                                        #     Parent Loop BB60_71 Depth=2
                                        #       Parent Loop BB60_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB60_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB60_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB60_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_75
.LBB60_78:                              # %for.end259
                                        #   in Loop: Header=BB60_73 Depth=3
	jmp	.LBB60_79
.LBB60_79:                              # %for.inc260
                                        #   in Loop: Header=BB60_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_73
.LBB60_80:                              # %for.end262
                                        #   in Loop: Header=BB60_71 Depth=2
	jmp	.LBB60_81
.LBB60_81:                              # %for.inc263
                                        #   in Loop: Header=BB60_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_71
.LBB60_82:                              # %for.end265
                                        #   in Loop: Header=BB60_69 Depth=1
	jmp	.LBB60_83
.LBB60_83:                              # %for.inc266
                                        #   in Loop: Header=BB60_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_69
.LBB60_84:                              # %for.end268
	jmp	.LBB60_94
.LBB60_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB60_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB60_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB60_86 Depth=1
	movl	$0, -4(%rbp)
.LBB60_88:                              # %for.cond274
                                        #   Parent Loop BB60_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB60_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB60_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB60_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_88
.LBB60_91:                              # %for.end294
                                        #   in Loop: Header=BB60_86 Depth=1
	jmp	.LBB60_92
.LBB60_92:                              # %for.inc295
                                        #   in Loop: Header=BB60_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_86
.LBB60_93:                              # %for.end297
	jmp	.LBB60_94
.LBB60_94:                              # %if.end298
	jmp	.LBB60_95
.LBB60_95:                              # %if.end299
	jmp	.LBB60_105
.LBB60_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB60_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB60_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB60_97 Depth=1
	movl	$0, -4(%rbp)
.LBB60_99:                              # %for.cond305
                                        #   Parent Loop BB60_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB60_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB60_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB60_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_99
.LBB60_102:                             # %for.end317
                                        #   in Loop: Header=BB60_97 Depth=1
	jmp	.LBB60_103
.LBB60_103:                             # %for.inc318
                                        #   in Loop: Header=BB60_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_97
.LBB60_104:                             # %for.end320
	jmp	.LBB60_105
.LBB60_105:                             # %if.end321
	jmp	.LBB60_180
.LBB60_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB60_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB60_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_110 Depth 2
                                        #       Child Loop BB60_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB60_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB60_108 Depth=1
	movl	$0, -12(%rbp)
.LBB60_110:                             # %for.cond331
                                        #   Parent Loop BB60_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB60_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB60_110 Depth=2
	movl	$0, -4(%rbp)
.LBB60_112:                             # %for.cond335
                                        #   Parent Loop BB60_108 Depth=1
                                        #     Parent Loop BB60_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB60_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB60_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB60_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_112
.LBB60_115:                             # %for.end359
                                        #   in Loop: Header=BB60_110 Depth=2
	jmp	.LBB60_116
.LBB60_116:                             # %for.inc360
                                        #   in Loop: Header=BB60_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_110
.LBB60_117:                             # %for.end362
                                        #   in Loop: Header=BB60_108 Depth=1
	jmp	.LBB60_118
.LBB60_118:                             # %for.inc363
                                        #   in Loop: Header=BB60_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_108
.LBB60_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB60_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB60_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB60_120 Depth=1
	movl	$0, -8(%rbp)
.LBB60_122:                             # %for.cond370
                                        #   Parent Loop BB60_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB60_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB60_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB60_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_122
.LBB60_125:                             # %for.end380
                                        #   in Loop: Header=BB60_120 Depth=1
	jmp	.LBB60_126
.LBB60_126:                             # %for.inc381
                                        #   in Loop: Header=BB60_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_120
.LBB60_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB60_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB60_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB60_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB60_129 Depth=1
	movl	$0, -4(%rbp)
.LBB60_131:                             # %for.cond390
                                        #   Parent Loop BB60_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB60_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB60_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB60_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_131
.LBB60_134:                             # %for.end410
                                        #   in Loop: Header=BB60_129 Depth=1
	jmp	.LBB60_135
.LBB60_135:                             # %for.inc411
                                        #   in Loop: Header=BB60_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_129
.LBB60_136:                             # %for.end413
	jmp	.LBB60_156
.LBB60_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB60_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB60_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_141 Depth 2
                                        #       Child Loop BB60_143 Depth 3
                                        #         Child Loop BB60_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB60_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB60_141:                             # %for.cond425
                                        #   Parent Loop BB60_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_143 Depth 3
                                        #         Child Loop BB60_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB60_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB60_143:                             # %for.cond452
                                        #   Parent Loop BB60_139 Depth=1
                                        #     Parent Loop BB60_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB60_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB60_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB60_143 Depth=3
	movl	$0, -4(%rbp)
.LBB60_145:                             # %for.cond456
                                        #   Parent Loop BB60_139 Depth=1
                                        #     Parent Loop BB60_141 Depth=2
                                        #       Parent Loop BB60_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB60_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB60_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB60_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_145
.LBB60_148:                             # %for.end475
                                        #   in Loop: Header=BB60_143 Depth=3
	jmp	.LBB60_149
.LBB60_149:                             # %for.inc476
                                        #   in Loop: Header=BB60_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_143
.LBB60_150:                             # %for.end478
                                        #   in Loop: Header=BB60_141 Depth=2
	jmp	.LBB60_151
.LBB60_151:                             # %for.inc479
                                        #   in Loop: Header=BB60_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_141
.LBB60_152:                             # %for.end481
                                        #   in Loop: Header=BB60_139 Depth=1
	jmp	.LBB60_153
.LBB60_153:                             # %for.inc482
                                        #   in Loop: Header=BB60_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_139
.LBB60_154:                             # %for.end484
	jmp	.LBB60_155
.LBB60_155:                             # %if.end485
	jmp	.LBB60_156
.LBB60_156:                             # %if.end486
	jmp	.LBB60_157
.LBB60_157:                             # %if.end487
	jmp	.LBB60_180
.LBB60_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB60_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB60_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB60_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB60_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB60_161 Depth=1
	movl	$0, -4(%rbp)
.LBB60_163:                             # %for.cond499
                                        #   Parent Loop BB60_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB60_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB60_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB60_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_163
.LBB60_166:                             # %for.end519
                                        #   in Loop: Header=BB60_161 Depth=1
	jmp	.LBB60_167
.LBB60_167:                             # %for.inc520
                                        #   in Loop: Header=BB60_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_161
.LBB60_168:                             # %for.end522
	jmp	.LBB60_169
.LBB60_169:                             # %if.end523
	jmp	.LBB60_179
.LBB60_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB60_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB60_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB60_171 Depth=1
	movl	$0, -4(%rbp)
.LBB60_173:                             # %for.cond529
                                        #   Parent Loop BB60_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB60_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB60_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB60_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_173
.LBB60_176:                             # %for.end541
                                        #   in Loop: Header=BB60_171 Depth=1
	jmp	.LBB60_177
.LBB60_177:                             # %for.inc542
                                        #   in Loop: Header=BB60_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_171
.LBB60_178:                             # %for.end544
	jmp	.LBB60_179
.LBB60_179:                             # %if.end545
	jmp	.LBB60_180
.LBB60_180:                             # %sw.epilog
	cmpl	$1001913078, -68(%rbp)  # imm = 0x3BB7FAF6
	jne	.LBB60_182
.LBB60_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_181
.Lfunc_end60:
	.size	Conceal_Error.50, .Lfunc_end60-Conceal_Error.50
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI60_0:
	.quad	.LBB60_16
	.quad	.LBB60_158
	.quad	.LBB60_106
	.quad	.LBB60_180
	.quad	.LBB60_36
                                        # -- End function
	.text
	.globl	decode_one_b8block.51   # -- Begin function decode_one_b8block.51
	.p2align	4, 0x90
	.type	decode_one_b8block.51,@function
decode_one_b8block.51:                  # @decode_one_b8block.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$969200415, -84(%rbp)   # imm = 0x39C4D31F
	movl	%edi, -52(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB61_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB61_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB61_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB61_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB61_4:                               # %for.cond9
                                        #   Parent Loop BB61_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB61_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB61_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB61_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_4
.LBB61_7:                               # %for.end
                                        #   in Loop: Header=BB61_2 Depth=1
	jmp	.LBB61_8
.LBB61_8:                               # %for.inc26
                                        #   in Loop: Header=BB61_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_2
.LBB61_9:                               # %for.end28
	jmp	.LBB61_96
.LBB61_10:                              # %if.else
	cmpl	$0, -80(%rbp)
	jne	.LBB61_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB61_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB61_31
.LBB61_14:                              # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB61_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB61_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB61_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB61_17:                              # %for.cond40
                                        #   Parent Loop BB61_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB61_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB61_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB61_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_17
.LBB61_20:                              # %for.end49
                                        #   in Loop: Header=BB61_15 Depth=1
	jmp	.LBB61_21
.LBB61_21:                              # %for.inc50
                                        #   in Loop: Header=BB61_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_15
.LBB61_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB61_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB61_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB61_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB61_25:                              # %for.cond56
                                        #   Parent Loop BB61_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB61_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB61_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB61_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_25
.LBB61_28:                              # %for.end71
                                        #   in Loop: Header=BB61_23 Depth=1
	jmp	.LBB61_29
.LBB61_29:                              # %for.inc72
                                        #   in Loop: Header=BB61_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_23
.LBB61_30:                              # %for.end74
	jmp	.LBB61_60
.LBB61_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB61_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB61_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB61_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB61_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB61_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB61_36:                              # %for.cond83
                                        #   Parent Loop BB61_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB61_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB61_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB61_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_36
.LBB61_39:                              # %for.end120
                                        #   in Loop: Header=BB61_34 Depth=1
	jmp	.LBB61_40
.LBB61_40:                              # %for.inc121
                                        #   in Loop: Header=BB61_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_34
.LBB61_41:                              # %for.end123
	jmp	.LBB61_51
.LBB61_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB61_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB61_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB61_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB61_45:                              # %for.cond129
                                        #   Parent Loop BB61_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB61_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB61_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB61_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_45
.LBB61_48:                              # %for.end145
                                        #   in Loop: Header=BB61_43 Depth=1
	jmp	.LBB61_49
.LBB61_49:                              # %for.inc146
                                        #   in Loop: Header=BB61_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_43
.LBB61_50:                              # %for.end148
	jmp	.LBB61_51
.LBB61_51:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB61_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB61_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB61_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB61_54:                              # %for.cond153
                                        #   Parent Loop BB61_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB61_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB61_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB61_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_54
.LBB61_57:                              # %for.end167
                                        #   in Loop: Header=BB61_52 Depth=1
	jmp	.LBB61_58
.LBB61_58:                              # %for.inc168
                                        #   in Loop: Header=BB61_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_52
.LBB61_59:                              # %for.end170
	jmp	.LBB61_60
.LBB61_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB61_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB61_66
.LBB61_62:                              # %lor.lhs.false177
	cmpl	$0, -80(%rbp)
	jne	.LBB61_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB61_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB61_86
.LBB61_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB61_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_69 Depth 2
                                        #       Child Loop BB61_74 Depth 3
                                        #         Child Loop BB61_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB61_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB61_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB61_69:                              # %for.cond197
                                        #   Parent Loop BB61_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_74 Depth 3
                                        #         Child Loop BB61_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB61_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB61_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB61_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB61_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB61_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
.LBB61_73:                              # %if.end218
                                        #   in Loop: Header=BB61_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-76(%rbp), %esi
	movl	-68(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB61_74:                              # %for.cond233
                                        #   Parent Loop BB61_67 Depth=1
                                        #     Parent Loop BB61_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB61_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB61_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB61_74 Depth=3
	movl	$0, -8(%rbp)
.LBB61_76:                              # %for.cond237
                                        #   Parent Loop BB61_67 Depth=1
                                        #     Parent Loop BB61_69 Depth=2
                                        #       Parent Loop BB61_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB61_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB61_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB61_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_76
.LBB61_79:                              # %for.end269
                                        #   in Loop: Header=BB61_74 Depth=3
	jmp	.LBB61_80
.LBB61_80:                              # %for.inc270
                                        #   in Loop: Header=BB61_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_74
.LBB61_81:                              # %for.end272
                                        #   in Loop: Header=BB61_69 Depth=2
	jmp	.LBB61_82
.LBB61_82:                              # %for.inc273
                                        #   in Loop: Header=BB61_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_69
.LBB61_83:                              # %for.end275
                                        #   in Loop: Header=BB61_67 Depth=1
	jmp	.LBB61_84
.LBB61_84:                              # %for.inc276
                                        #   in Loop: Header=BB61_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_67
.LBB61_85:                              # %for.end278
	jmp	.LBB61_95
.LBB61_86:                              # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB61_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB61_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB61_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB61_89:                              # %for.cond284
                                        #   Parent Loop BB61_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB61_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB61_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB61_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_89
.LBB61_92:                              # %for.end310
                                        #   in Loop: Header=BB61_87 Depth=1
	jmp	.LBB61_93
.LBB61_93:                              # %for.inc311
                                        #   in Loop: Header=BB61_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_87
.LBB61_94:                              # %for.end313
	jmp	.LBB61_95
.LBB61_95:                              # %if.end314
	jmp	.LBB61_96
.LBB61_96:                              # %if.end315
	cmpl	$969200415, -84(%rbp)   # imm = 0x39C4D31F
	jne	.LBB61_98
.LBB61_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_97
.Lfunc_end61:
	.size	decode_one_b8block.51, .Lfunc_end61-decode_one_b8block.51
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.52   # -- Begin function decode_one_b8block.52
	.p2align	4, 0x90
	.type	decode_one_b8block.52,@function
decode_one_b8block.52:                  # @decode_one_b8block.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1253731442, -84(%rbp)  # imm = 0x4ABA6C72
	movl	%edi, -48(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB62_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB62_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB62_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB62_4:                               # %for.cond9
                                        #   Parent Loop BB62_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB62_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB62_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB62_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_4
.LBB62_7:                               # %for.end
                                        #   in Loop: Header=BB62_2 Depth=1
	jmp	.LBB62_8
.LBB62_8:                               # %for.inc26
                                        #   in Loop: Header=BB62_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_2
.LBB62_9:                               # %for.end28
	jmp	.LBB62_96
.LBB62_10:                              # %if.else
	cmpl	$0, -64(%rbp)
	jne	.LBB62_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB62_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB62_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB62_31
.LBB62_14:                              # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB62_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB62_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB62_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB62_17:                              # %for.cond40
                                        #   Parent Loop BB62_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB62_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB62_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB62_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_17
.LBB62_20:                              # %for.end49
                                        #   in Loop: Header=BB62_15 Depth=1
	jmp	.LBB62_21
.LBB62_21:                              # %for.inc50
                                        #   in Loop: Header=BB62_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_15
.LBB62_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB62_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB62_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB62_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB62_25:                              # %for.cond56
                                        #   Parent Loop BB62_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB62_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB62_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB62_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_25
.LBB62_28:                              # %for.end71
                                        #   in Loop: Header=BB62_23 Depth=1
	jmp	.LBB62_29
.LBB62_29:                              # %for.inc72
                                        #   in Loop: Header=BB62_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_23
.LBB62_30:                              # %for.end74
	jmp	.LBB62_60
.LBB62_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB62_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB62_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB62_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB62_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB62_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB62_36:                              # %for.cond83
                                        #   Parent Loop BB62_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB62_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB62_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB62_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_36
.LBB62_39:                              # %for.end120
                                        #   in Loop: Header=BB62_34 Depth=1
	jmp	.LBB62_40
.LBB62_40:                              # %for.inc121
                                        #   in Loop: Header=BB62_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_34
.LBB62_41:                              # %for.end123
	jmp	.LBB62_51
.LBB62_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB62_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB62_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB62_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB62_45:                              # %for.cond129
                                        #   Parent Loop BB62_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB62_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB62_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB62_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_45
.LBB62_48:                              # %for.end145
                                        #   in Loop: Header=BB62_43 Depth=1
	jmp	.LBB62_49
.LBB62_49:                              # %for.inc146
                                        #   in Loop: Header=BB62_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_43
.LBB62_50:                              # %for.end148
	jmp	.LBB62_51
.LBB62_51:                              # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB62_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB62_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB62_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB62_54:                              # %for.cond153
                                        #   Parent Loop BB62_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB62_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB62_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB62_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_54
.LBB62_57:                              # %for.end167
                                        #   in Loop: Header=BB62_52 Depth=1
	jmp	.LBB62_58
.LBB62_58:                              # %for.inc168
                                        #   in Loop: Header=BB62_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_52
.LBB62_59:                              # %for.end170
	jmp	.LBB62_60
.LBB62_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB62_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB62_66
.LBB62_62:                              # %lor.lhs.false177
	cmpl	$0, -64(%rbp)
	jne	.LBB62_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB62_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB62_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB62_86
.LBB62_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB62_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_69 Depth 2
                                        #       Child Loop BB62_74 Depth 3
                                        #         Child Loop BB62_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB62_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB62_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB62_69:                              # %for.cond197
                                        #   Parent Loop BB62_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_74 Depth 3
                                        #         Child Loop BB62_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB62_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB62_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB62_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB62_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB62_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB62_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
.LBB62_73:                              # %if.end218
                                        #   in Loop: Header=BB62_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-76(%rbp), %esi
	movl	-68(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB62_74:                              # %for.cond233
                                        #   Parent Loop BB62_67 Depth=1
                                        #     Parent Loop BB62_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB62_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB62_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB62_74 Depth=3
	movl	$0, -4(%rbp)
.LBB62_76:                              # %for.cond237
                                        #   Parent Loop BB62_67 Depth=1
                                        #     Parent Loop BB62_69 Depth=2
                                        #       Parent Loop BB62_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB62_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB62_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB62_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_76
.LBB62_79:                              # %for.end269
                                        #   in Loop: Header=BB62_74 Depth=3
	jmp	.LBB62_80
.LBB62_80:                              # %for.inc270
                                        #   in Loop: Header=BB62_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_74
.LBB62_81:                              # %for.end272
                                        #   in Loop: Header=BB62_69 Depth=2
	jmp	.LBB62_82
.LBB62_82:                              # %for.inc273
                                        #   in Loop: Header=BB62_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_69
.LBB62_83:                              # %for.end275
                                        #   in Loop: Header=BB62_67 Depth=1
	jmp	.LBB62_84
.LBB62_84:                              # %for.inc276
                                        #   in Loop: Header=BB62_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_67
.LBB62_85:                              # %for.end278
	jmp	.LBB62_95
.LBB62_86:                              # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB62_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB62_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB62_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB62_89:                              # %for.cond284
                                        #   Parent Loop BB62_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB62_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB62_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB62_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_89
.LBB62_92:                              # %for.end310
                                        #   in Loop: Header=BB62_87 Depth=1
	jmp	.LBB62_93
.LBB62_93:                              # %for.inc311
                                        #   in Loop: Header=BB62_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_87
.LBB62_94:                              # %for.end313
	jmp	.LBB62_95
.LBB62_95:                              # %if.end314
	jmp	.LBB62_96
.LBB62_96:                              # %if.end315
	cmpl	$1253731442, -84(%rbp)  # imm = 0x4ABA6C72
	jne	.LBB62_98
.LBB62_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_97
.Lfunc_end62:
	.size	decode_one_b8block.52, .Lfunc_end62-decode_one_b8block.52
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.53  # -- Begin function Get_Reference_Pixel.53
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.53,@function
Get_Reference_Pixel.53:                 # @Get_Reference_Pixel.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$115630755, -104(%rbp)  # imm = 0x6E462A3
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB63_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB63_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB63_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB63_5
.LBB63_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB63_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB63_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB63_11
.LBB63_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB63_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB63_10
.LBB63_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB63_10:                              # %cond.end14
.LBB63_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB63_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB63_14
.LBB63_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB63_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB63_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB63_20
.LBB63_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB63_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB63_19
.LBB63_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB63_19:                              # %cond.end29
.LBB63_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_332
.LBB63_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB63_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB63_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB63_25
.LBB63_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB63_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB63_31
.LBB63_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB63_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB63_30
.LBB63_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB63_30:                              # %cond.end52
.LBB63_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB63_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB63_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB63_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB63_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB63_36
.LBB63_35:                              # %cond.false61
                                        #   in Loop: Header=BB63_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB63_36:                              # %cond.end63
                                        #   in Loop: Header=BB63_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB63_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB63_42
.LBB63_38:                              # %cond.false68
                                        #   in Loop: Header=BB63_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB63_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB63_41
.LBB63_40:                              # %cond.false73
                                        #   in Loop: Header=BB63_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB63_41:                              # %cond.end75
                                        #   in Loop: Header=BB63_32 Depth=1
.LBB63_42:                              # %cond.end77
                                        #   in Loop: Header=BB63_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB63_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_32
.LBB63_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_47
.LBB63_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB63_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB63_53
.LBB63_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_52
.LBB63_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB63_52:                              # %cond.end113
.LBB63_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB63_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB63_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB63_57
.LBB63_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB63_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB63_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB63_63
.LBB63_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB63_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB63_62
.LBB63_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB63_62:                              # %cond.end136
.LBB63_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB63_76
.LBB63_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB63_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB63_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB63_68
.LBB63_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB63_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB63_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB63_74
.LBB63_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB63_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB63_73
.LBB63_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB63_73:                              # %cond.end169
.LBB63_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB63_75:                              # %if.end
	jmp	.LBB63_76
.LBB63_76:                              # %if.end178
	jmp	.LBB63_331
.LBB63_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB63_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB63_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB63_81
.LBB63_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB63_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB63_87
.LBB63_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB63_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB63_86
.LBB63_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB63_86:                              # %cond.end197
.LBB63_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB63_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB63_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB63_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB63_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB63_92
.LBB63_91:                              # %cond.false209
                                        #   in Loop: Header=BB63_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB63_92:                              # %cond.end211
                                        #   in Loop: Header=BB63_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB63_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB63_98
.LBB63_94:                              # %cond.false216
                                        #   in Loop: Header=BB63_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB63_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB63_97
.LBB63_96:                              # %cond.false221
                                        #   in Loop: Header=BB63_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB63_97:                              # %cond.end223
                                        #   in Loop: Header=BB63_88 Depth=1
.LBB63_98:                              # %cond.end225
                                        #   in Loop: Header=BB63_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB63_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_88
.LBB63_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_103
.LBB63_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB63_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB63_109
.LBB63_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_108
.LBB63_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB63_108:                             # %cond.end266
.LBB63_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB63_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB63_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB63_113
.LBB63_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB63_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB63_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB63_119
.LBB63_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB63_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB63_118
.LBB63_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB63_118:                             # %cond.end287
.LBB63_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB63_132
.LBB63_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB63_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB63_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB63_124
.LBB63_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB63_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB63_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB63_130
.LBB63_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB63_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB63_129
.LBB63_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB63_129:                             # %cond.end320
.LBB63_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB63_131:                             # %if.end331
	jmp	.LBB63_132
.LBB63_132:                             # %if.end332
	jmp	.LBB63_330
.LBB63_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB63_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB63_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB63_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB63_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB63_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB63_139
.LBB63_138:                             # %cond.false345
                                        #   in Loop: Header=BB63_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB63_139:                             # %cond.end347
                                        #   in Loop: Header=BB63_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB63_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB63_145
.LBB63_141:                             # %cond.false352
                                        #   in Loop: Header=BB63_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB63_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB63_144
.LBB63_143:                             # %cond.false357
                                        #   in Loop: Header=BB63_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB63_144:                             # %cond.end359
                                        #   in Loop: Header=BB63_135 Depth=1
.LBB63_145:                             # %cond.end361
                                        #   in Loop: Header=BB63_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB63_146:                             # %for.cond363
                                        #   Parent Loop BB63_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB63_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB63_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB63_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB63_150
.LBB63_149:                             # %cond.false371
                                        #   in Loop: Header=BB63_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB63_150:                             # %cond.end373
                                        #   in Loop: Header=BB63_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB63_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB63_156
.LBB63_152:                             # %cond.false378
                                        #   in Loop: Header=BB63_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB63_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB63_155
.LBB63_154:                             # %cond.false383
                                        #   in Loop: Header=BB63_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB63_155:                             # %cond.end385
                                        #   in Loop: Header=BB63_146 Depth=2
.LBB63_156:                             # %cond.end387
                                        #   in Loop: Header=BB63_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB63_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_146
.LBB63_158:                             # %for.end401
                                        #   in Loop: Header=BB63_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB63_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_135
.LBB63_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB63_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB63_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB63_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB63_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_161
.LBB63_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_167
.LBB63_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB63_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB63_173
.LBB63_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_172
.LBB63_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB63_172:                             # %cond.end449
.LBB63_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB63_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB63_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_177
.LBB63_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB63_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB63_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB63_183
.LBB63_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB63_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_182
.LBB63_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB63_182:                             # %cond.end486
.LBB63_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB63_196
.LBB63_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB63_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB63_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_188
.LBB63_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB63_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB63_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB63_194
.LBB63_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB63_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_193
.LBB63_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB63_193:                             # %cond.end526
.LBB63_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB63_195:                             # %if.end532
	jmp	.LBB63_196
.LBB63_196:                             # %if.end533
	jmp	.LBB63_329
.LBB63_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB63_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB63_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB63_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB63_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB63_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB63_203
.LBB63_202:                             # %cond.false546
                                        #   in Loop: Header=BB63_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB63_203:                             # %cond.end548
                                        #   in Loop: Header=BB63_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB63_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB63_209
.LBB63_205:                             # %cond.false553
                                        #   in Loop: Header=BB63_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB63_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB63_208
.LBB63_207:                             # %cond.false558
                                        #   in Loop: Header=BB63_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB63_208:                             # %cond.end560
                                        #   in Loop: Header=BB63_199 Depth=1
.LBB63_209:                             # %cond.end562
                                        #   in Loop: Header=BB63_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB63_210:                             # %for.cond564
                                        #   Parent Loop BB63_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB63_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB63_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB63_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB63_214
.LBB63_213:                             # %cond.false572
                                        #   in Loop: Header=BB63_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB63_214:                             # %cond.end574
                                        #   in Loop: Header=BB63_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB63_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB63_220
.LBB63_216:                             # %cond.false579
                                        #   in Loop: Header=BB63_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB63_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB63_219
.LBB63_218:                             # %cond.false584
                                        #   in Loop: Header=BB63_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB63_219:                             # %cond.end586
                                        #   in Loop: Header=BB63_210 Depth=2
.LBB63_220:                             # %cond.end588
                                        #   in Loop: Header=BB63_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB63_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_210
.LBB63_222:                             # %for.end602
                                        #   in Loop: Header=BB63_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB63_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_199
.LBB63_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB63_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB63_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB63_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB63_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_225
.LBB63_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_231
.LBB63_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB63_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB63_237
.LBB63_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_236
.LBB63_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB63_236:                             # %cond.end650
.LBB63_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB63_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB63_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_241
.LBB63_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB63_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB63_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB63_247
.LBB63_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB63_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_246
.LBB63_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB63_246:                             # %cond.end687
.LBB63_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB63_258
.LBB63_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB63_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_251
.LBB63_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB63_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB63_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB63_257
.LBB63_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB63_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_256
.LBB63_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB63_256:                             # %cond.end724
.LBB63_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB63_258:                             # %if.end730
	jmp	.LBB63_328
.LBB63_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB63_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB63_262
.LBB63_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB63_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB63_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB63_265
.LBB63_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB63_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB63_271
.LBB63_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB63_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB63_270
.LBB63_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB63_270:                             # %cond.end753
.LBB63_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB63_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB63_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB63_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB63_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB63_276
.LBB63_275:                             # %cond.false765
                                        #   in Loop: Header=BB63_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB63_276:                             # %cond.end767
                                        #   in Loop: Header=BB63_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB63_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB63_282
.LBB63_278:                             # %cond.false772
                                        #   in Loop: Header=BB63_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB63_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB63_281
.LBB63_280:                             # %cond.false777
                                        #   in Loop: Header=BB63_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB63_281:                             # %cond.end779
                                        #   in Loop: Header=BB63_272 Depth=1
.LBB63_282:                             # %cond.end781
                                        #   in Loop: Header=BB63_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB63_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_272
.LBB63_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_287
.LBB63_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB63_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB63_293
.LBB63_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_292
.LBB63_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB63_292:                             # %cond.end822
.LBB63_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB63_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB63_296
.LBB63_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB63_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB63_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB63_299
.LBB63_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB63_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB63_305
.LBB63_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB63_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB63_304
.LBB63_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB63_304:                             # %cond.end847
.LBB63_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB63_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB63_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB63_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB63_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB63_310
.LBB63_309:                             # %cond.false859
                                        #   in Loop: Header=BB63_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB63_310:                             # %cond.end861
                                        #   in Loop: Header=BB63_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB63_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB63_316
.LBB63_312:                             # %cond.false866
                                        #   in Loop: Header=BB63_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB63_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB63_315
.LBB63_314:                             # %cond.false871
                                        #   in Loop: Header=BB63_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB63_315:                             # %cond.end873
                                        #   in Loop: Header=BB63_306 Depth=1
.LBB63_316:                             # %cond.end875
                                        #   in Loop: Header=BB63_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB63_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_306
.LBB63_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_321
.LBB63_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB63_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB63_327
.LBB63_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_326
.LBB63_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB63_326:                             # %cond.end916
.LBB63_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB63_328:                             # %if.end922
	jmp	.LBB63_329
.LBB63_329:                             # %if.end923
	jmp	.LBB63_330
.LBB63_330:                             # %if.end924
	jmp	.LBB63_331
.LBB63_331:                             # %if.end925
	jmp	.LBB63_332
.LBB63_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$115630755, -104(%rbp)  # imm = 0x6E462A3
	jne	.LBB63_334
.LBB63_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_333
.Lfunc_end63:
	.size	Get_Reference_Pixel.53, .Lfunc_end63-Get_Reference_Pixel.53
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.54        # -- Begin function Conceal_Error.54
	.p2align	4, 0x90
	.type	Conceal_Error.54,@function
Conceal_Error.54:                       # @Conceal_Error.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$379341740, -68(%rbp)   # imm = 0x169C4BAC
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB64_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB64_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB64_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB64_4:                               # %land.end
.LBB64_5:                               # %lor.end
.LBB64_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB64_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB64_9
.LBB64_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB64_14
.LBB64_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB64_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB64_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB64_12:                              # %land.end51
.LBB64_13:                              # %lor.end53
.LBB64_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB64_180
# %bb.15:                               # %land.end54
	movq	.LJTI64_0(,%rax,8), %rax
	jmpq	*%rax
.LBB64_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB64_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB64_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB64_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB64_18 Depth=1
	movl	$0, -4(%rbp)
.LBB64_20:                              # %for.cond68
                                        #   Parent Loop BB64_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB64_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB64_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB64_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_20
.LBB64_23:                              # %for.end
                                        #   in Loop: Header=BB64_18 Depth=1
	jmp	.LBB64_24
.LBB64_24:                              # %for.inc85
                                        #   in Loop: Header=BB64_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_18
.LBB64_25:                              # %for.end87
	jmp	.LBB64_35
.LBB64_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB64_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB64_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB64_27 Depth=1
	movl	$0, -4(%rbp)
.LBB64_29:                              # %for.cond92
                                        #   Parent Loop BB64_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB64_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB64_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB64_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_29
.LBB64_32:                              # %for.end104
                                        #   in Loop: Header=BB64_27 Depth=1
	jmp	.LBB64_33
.LBB64_33:                              # %for.inc105
                                        #   in Loop: Header=BB64_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_27
.LBB64_34:                              # %for.end107
	jmp	.LBB64_35
.LBB64_35:                              # %if.end
	jmp	.LBB64_180
.LBB64_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB64_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_39 Depth 2
                                        #       Child Loop BB64_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB64_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB64_37 Depth=1
	movl	$0, -16(%rbp)
.LBB64_39:                              # %for.cond113
                                        #   Parent Loop BB64_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB64_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB64_39 Depth=2
	movl	$0, -4(%rbp)
.LBB64_41:                              # %for.cond117
                                        #   Parent Loop BB64_37 Depth=1
                                        #     Parent Loop BB64_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB64_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB64_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB64_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_41
.LBB64_44:                              # %for.end141
                                        #   in Loop: Header=BB64_39 Depth=2
	jmp	.LBB64_45
.LBB64_45:                              # %for.inc142
                                        #   in Loop: Header=BB64_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_39
.LBB64_46:                              # %for.end144
                                        #   in Loop: Header=BB64_37 Depth=1
	jmp	.LBB64_47
.LBB64_47:                              # %for.inc145
                                        #   in Loop: Header=BB64_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_37
.LBB64_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB64_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB64_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB64_49 Depth=1
	movl	$0, -8(%rbp)
.LBB64_51:                              # %for.cond152
                                        #   Parent Loop BB64_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB64_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB64_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB64_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_51
.LBB64_54:                              # %for.end162
                                        #   in Loop: Header=BB64_49 Depth=1
	jmp	.LBB64_55
.LBB64_55:                              # %for.inc163
                                        #   in Loop: Header=BB64_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_49
.LBB64_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB64_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB64_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB64_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB64_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB64_59 Depth=1
	movl	$0, -4(%rbp)
.LBB64_61:                              # %for.cond175
                                        #   Parent Loop BB64_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB64_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB64_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB64_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_61
.LBB64_64:                              # %for.end195
                                        #   in Loop: Header=BB64_59 Depth=1
	jmp	.LBB64_65
.LBB64_65:                              # %for.inc196
                                        #   in Loop: Header=BB64_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_59
.LBB64_66:                              # %for.end198
	jmp	.LBB64_95
.LBB64_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB64_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB64_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_71 Depth 2
                                        #       Child Loop BB64_73 Depth 3
                                        #         Child Loop BB64_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB64_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB64_71:                              # %for.cond210
                                        #   Parent Loop BB64_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_73 Depth 3
                                        #         Child Loop BB64_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB64_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB64_73:                              # %for.cond236
                                        #   Parent Loop BB64_69 Depth=1
                                        #     Parent Loop BB64_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB64_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB64_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB64_73 Depth=3
	movl	$0, -4(%rbp)
.LBB64_75:                              # %for.cond240
                                        #   Parent Loop BB64_69 Depth=1
                                        #     Parent Loop BB64_71 Depth=2
                                        #       Parent Loop BB64_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB64_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB64_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB64_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_75
.LBB64_78:                              # %for.end259
                                        #   in Loop: Header=BB64_73 Depth=3
	jmp	.LBB64_79
.LBB64_79:                              # %for.inc260
                                        #   in Loop: Header=BB64_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_73
.LBB64_80:                              # %for.end262
                                        #   in Loop: Header=BB64_71 Depth=2
	jmp	.LBB64_81
.LBB64_81:                              # %for.inc263
                                        #   in Loop: Header=BB64_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_71
.LBB64_82:                              # %for.end265
                                        #   in Loop: Header=BB64_69 Depth=1
	jmp	.LBB64_83
.LBB64_83:                              # %for.inc266
                                        #   in Loop: Header=BB64_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_69
.LBB64_84:                              # %for.end268
	jmp	.LBB64_94
.LBB64_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB64_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB64_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB64_86 Depth=1
	movl	$0, -4(%rbp)
.LBB64_88:                              # %for.cond274
                                        #   Parent Loop BB64_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB64_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB64_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB64_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_88
.LBB64_91:                              # %for.end294
                                        #   in Loop: Header=BB64_86 Depth=1
	jmp	.LBB64_92
.LBB64_92:                              # %for.inc295
                                        #   in Loop: Header=BB64_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_86
.LBB64_93:                              # %for.end297
	jmp	.LBB64_94
.LBB64_94:                              # %if.end298
	jmp	.LBB64_95
.LBB64_95:                              # %if.end299
	jmp	.LBB64_105
.LBB64_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB64_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB64_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB64_97 Depth=1
	movl	$0, -4(%rbp)
.LBB64_99:                              # %for.cond305
                                        #   Parent Loop BB64_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB64_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB64_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB64_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_99
.LBB64_102:                             # %for.end317
                                        #   in Loop: Header=BB64_97 Depth=1
	jmp	.LBB64_103
.LBB64_103:                             # %for.inc318
                                        #   in Loop: Header=BB64_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_97
.LBB64_104:                             # %for.end320
	jmp	.LBB64_105
.LBB64_105:                             # %if.end321
	jmp	.LBB64_180
.LBB64_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB64_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB64_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_110 Depth 2
                                        #       Child Loop BB64_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB64_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB64_108 Depth=1
	movl	$0, -16(%rbp)
.LBB64_110:                             # %for.cond331
                                        #   Parent Loop BB64_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB64_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB64_110 Depth=2
	movl	$0, -4(%rbp)
.LBB64_112:                             # %for.cond335
                                        #   Parent Loop BB64_108 Depth=1
                                        #     Parent Loop BB64_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB64_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB64_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB64_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_112
.LBB64_115:                             # %for.end359
                                        #   in Loop: Header=BB64_110 Depth=2
	jmp	.LBB64_116
.LBB64_116:                             # %for.inc360
                                        #   in Loop: Header=BB64_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_110
.LBB64_117:                             # %for.end362
                                        #   in Loop: Header=BB64_108 Depth=1
	jmp	.LBB64_118
.LBB64_118:                             # %for.inc363
                                        #   in Loop: Header=BB64_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_108
.LBB64_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB64_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB64_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB64_120 Depth=1
	movl	$0, -8(%rbp)
.LBB64_122:                             # %for.cond370
                                        #   Parent Loop BB64_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB64_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB64_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB64_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_122
.LBB64_125:                             # %for.end380
                                        #   in Loop: Header=BB64_120 Depth=1
	jmp	.LBB64_126
.LBB64_126:                             # %for.inc381
                                        #   in Loop: Header=BB64_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_120
.LBB64_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB64_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB64_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB64_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB64_129 Depth=1
	movl	$0, -4(%rbp)
.LBB64_131:                             # %for.cond390
                                        #   Parent Loop BB64_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB64_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB64_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB64_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_131
.LBB64_134:                             # %for.end410
                                        #   in Loop: Header=BB64_129 Depth=1
	jmp	.LBB64_135
.LBB64_135:                             # %for.inc411
                                        #   in Loop: Header=BB64_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_129
.LBB64_136:                             # %for.end413
	jmp	.LBB64_156
.LBB64_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB64_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB64_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_141 Depth 2
                                        #       Child Loop BB64_143 Depth 3
                                        #         Child Loop BB64_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB64_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB64_141:                             # %for.cond425
                                        #   Parent Loop BB64_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_143 Depth 3
                                        #         Child Loop BB64_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB64_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB64_143:                             # %for.cond452
                                        #   Parent Loop BB64_139 Depth=1
                                        #     Parent Loop BB64_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB64_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB64_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB64_143 Depth=3
	movl	$0, -4(%rbp)
.LBB64_145:                             # %for.cond456
                                        #   Parent Loop BB64_139 Depth=1
                                        #     Parent Loop BB64_141 Depth=2
                                        #       Parent Loop BB64_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB64_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB64_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB64_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_145
.LBB64_148:                             # %for.end475
                                        #   in Loop: Header=BB64_143 Depth=3
	jmp	.LBB64_149
.LBB64_149:                             # %for.inc476
                                        #   in Loop: Header=BB64_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_143
.LBB64_150:                             # %for.end478
                                        #   in Loop: Header=BB64_141 Depth=2
	jmp	.LBB64_151
.LBB64_151:                             # %for.inc479
                                        #   in Loop: Header=BB64_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_141
.LBB64_152:                             # %for.end481
                                        #   in Loop: Header=BB64_139 Depth=1
	jmp	.LBB64_153
.LBB64_153:                             # %for.inc482
                                        #   in Loop: Header=BB64_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_139
.LBB64_154:                             # %for.end484
	jmp	.LBB64_155
.LBB64_155:                             # %if.end485
	jmp	.LBB64_156
.LBB64_156:                             # %if.end486
	jmp	.LBB64_157
.LBB64_157:                             # %if.end487
	jmp	.LBB64_180
.LBB64_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB64_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB64_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB64_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB64_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB64_161 Depth=1
	movl	$0, -4(%rbp)
.LBB64_163:                             # %for.cond499
                                        #   Parent Loop BB64_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB64_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB64_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB64_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_163
.LBB64_166:                             # %for.end519
                                        #   in Loop: Header=BB64_161 Depth=1
	jmp	.LBB64_167
.LBB64_167:                             # %for.inc520
                                        #   in Loop: Header=BB64_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_161
.LBB64_168:                             # %for.end522
	jmp	.LBB64_169
.LBB64_169:                             # %if.end523
	jmp	.LBB64_179
.LBB64_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB64_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB64_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB64_171 Depth=1
	movl	$0, -4(%rbp)
.LBB64_173:                             # %for.cond529
                                        #   Parent Loop BB64_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB64_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB64_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB64_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_173
.LBB64_176:                             # %for.end541
                                        #   in Loop: Header=BB64_171 Depth=1
	jmp	.LBB64_177
.LBB64_177:                             # %for.inc542
                                        #   in Loop: Header=BB64_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_171
.LBB64_178:                             # %for.end544
	jmp	.LBB64_179
.LBB64_179:                             # %if.end545
	jmp	.LBB64_180
.LBB64_180:                             # %sw.epilog
	cmpl	$379341740, -68(%rbp)   # imm = 0x169C4BAC
	jne	.LBB64_182
.LBB64_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_181
.Lfunc_end64:
	.size	Conceal_Error.54, .Lfunc_end64-Conceal_Error.54
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI64_0:
	.quad	.LBB64_16
	.quad	.LBB64_158
	.quad	.LBB64_106
	.quad	.LBB64_180
	.quad	.LBB64_36
                                        # -- End function
	.text
	.globl	decode_one_b8block.55   # -- Begin function decode_one_b8block.55
	.p2align	4, 0x90
	.type	decode_one_b8block.55,@function
decode_one_b8block.55:                  # @decode_one_b8block.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1188129898, -84(%rbp)  # imm = 0x46D16C6A
	movl	%edi, -52(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
	movl	-76(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-76(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB65_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB65_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB65_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB65_4:                               # %for.cond9
                                        #   Parent Loop BB65_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB65_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB65_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB65_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_4
.LBB65_7:                               # %for.end
                                        #   in Loop: Header=BB65_2 Depth=1
	jmp	.LBB65_8
.LBB65_8:                               # %for.inc26
                                        #   in Loop: Header=BB65_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_2
.LBB65_9:                               # %for.end28
	jmp	.LBB65_96
.LBB65_10:                              # %if.else
	cmpl	$0, -80(%rbp)
	jne	.LBB65_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB65_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB65_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB65_31
.LBB65_14:                              # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB65_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB65_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB65_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB65_17:                              # %for.cond40
                                        #   Parent Loop BB65_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB65_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB65_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB65_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_17
.LBB65_20:                              # %for.end49
                                        #   in Loop: Header=BB65_15 Depth=1
	jmp	.LBB65_21
.LBB65_21:                              # %for.inc50
                                        #   in Loop: Header=BB65_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_15
.LBB65_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB65_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB65_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB65_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB65_25:                              # %for.cond56
                                        #   Parent Loop BB65_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB65_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB65_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB65_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_25
.LBB65_28:                              # %for.end71
                                        #   in Loop: Header=BB65_23 Depth=1
	jmp	.LBB65_29
.LBB65_29:                              # %for.inc72
                                        #   in Loop: Header=BB65_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_23
.LBB65_30:                              # %for.end74
	jmp	.LBB65_60
.LBB65_31:                              # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB65_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB65_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB65_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB65_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB65_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB65_36:                              # %for.cond83
                                        #   Parent Loop BB65_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB65_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB65_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB65_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_36
.LBB65_39:                              # %for.end120
                                        #   in Loop: Header=BB65_34 Depth=1
	jmp	.LBB65_40
.LBB65_40:                              # %for.inc121
                                        #   in Loop: Header=BB65_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_34
.LBB65_41:                              # %for.end123
	jmp	.LBB65_51
.LBB65_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB65_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB65_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB65_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB65_45:                              # %for.cond129
                                        #   Parent Loop BB65_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB65_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB65_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB65_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_45
.LBB65_48:                              # %for.end145
                                        #   in Loop: Header=BB65_43 Depth=1
	jmp	.LBB65_49
.LBB65_49:                              # %for.inc146
                                        #   in Loop: Header=BB65_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_43
.LBB65_50:                              # %for.end148
	jmp	.LBB65_51
.LBB65_51:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB65_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB65_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB65_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB65_54:                              # %for.cond153
                                        #   Parent Loop BB65_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB65_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB65_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB65_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_54
.LBB65_57:                              # %for.end167
                                        #   in Loop: Header=BB65_52 Depth=1
	jmp	.LBB65_58
.LBB65_58:                              # %for.inc168
                                        #   in Loop: Header=BB65_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_52
.LBB65_59:                              # %for.end170
	jmp	.LBB65_60
.LBB65_60:                              # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB65_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB65_66
.LBB65_62:                              # %lor.lhs.false177
	cmpl	$0, -80(%rbp)
	jne	.LBB65_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB65_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB65_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB65_86
.LBB65_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB65_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_69 Depth 2
                                        #       Child Loop BB65_74 Depth 3
                                        #         Child Loop BB65_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB65_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB65_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB65_69:                              # %for.cond197
                                        #   Parent Loop BB65_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_74 Depth 3
                                        #         Child Loop BB65_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB65_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB65_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB65_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB65_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB65_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB65_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
.LBB65_73:                              # %if.end218
                                        #   in Loop: Header=BB65_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-64(%rbp), %esi
	movl	-72(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB65_74:                              # %for.cond233
                                        #   Parent Loop BB65_67 Depth=1
                                        #     Parent Loop BB65_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB65_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB65_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB65_74 Depth=3
	movl	$0, -4(%rbp)
.LBB65_76:                              # %for.cond237
                                        #   Parent Loop BB65_67 Depth=1
                                        #     Parent Loop BB65_69 Depth=2
                                        #       Parent Loop BB65_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB65_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB65_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB65_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_76
.LBB65_79:                              # %for.end269
                                        #   in Loop: Header=BB65_74 Depth=3
	jmp	.LBB65_80
.LBB65_80:                              # %for.inc270
                                        #   in Loop: Header=BB65_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_74
.LBB65_81:                              # %for.end272
                                        #   in Loop: Header=BB65_69 Depth=2
	jmp	.LBB65_82
.LBB65_82:                              # %for.inc273
                                        #   in Loop: Header=BB65_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_69
.LBB65_83:                              # %for.end275
                                        #   in Loop: Header=BB65_67 Depth=1
	jmp	.LBB65_84
.LBB65_84:                              # %for.inc276
                                        #   in Loop: Header=BB65_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_67
.LBB65_85:                              # %for.end278
	jmp	.LBB65_95
.LBB65_86:                              # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB65_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB65_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB65_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB65_89:                              # %for.cond284
                                        #   Parent Loop BB65_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB65_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB65_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB65_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_89
.LBB65_92:                              # %for.end310
                                        #   in Loop: Header=BB65_87 Depth=1
	jmp	.LBB65_93
.LBB65_93:                              # %for.inc311
                                        #   in Loop: Header=BB65_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_87
.LBB65_94:                              # %for.end313
	jmp	.LBB65_95
.LBB65_95:                              # %if.end314
	jmp	.LBB65_96
.LBB65_96:                              # %if.end315
	cmpl	$1188129898, -84(%rbp)  # imm = 0x46D16C6A
	jne	.LBB65_98
.LBB65_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_97
.Lfunc_end65:
	.size	decode_one_b8block.55, .Lfunc_end65-decode_one_b8block.55
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.56  # -- Begin function Get_Reference_Pixel.56
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.56,@function
Get_Reference_Pixel.56:                 # @Get_Reference_Pixel.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$908173528, -100(%rbp)  # imm = 0x3621A0D8
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB66_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB66_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB66_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB66_5
.LBB66_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB66_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB66_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB66_11
.LBB66_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB66_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB66_10
.LBB66_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB66_10:                              # %cond.end14
.LBB66_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB66_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB66_14
.LBB66_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB66_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB66_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB66_20
.LBB66_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB66_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB66_19
.LBB66_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB66_19:                              # %cond.end29
.LBB66_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_332
.LBB66_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB66_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB66_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB66_25
.LBB66_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB66_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB66_31
.LBB66_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB66_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB66_30
.LBB66_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB66_30:                              # %cond.end52
.LBB66_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB66_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB66_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB66_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB66_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB66_36
.LBB66_35:                              # %cond.false61
                                        #   in Loop: Header=BB66_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB66_36:                              # %cond.end63
                                        #   in Loop: Header=BB66_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB66_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB66_42
.LBB66_38:                              # %cond.false68
                                        #   in Loop: Header=BB66_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB66_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB66_41
.LBB66_40:                              # %cond.false73
                                        #   in Loop: Header=BB66_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB66_41:                              # %cond.end75
                                        #   in Loop: Header=BB66_32 Depth=1
.LBB66_42:                              # %cond.end77
                                        #   in Loop: Header=BB66_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB66_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_32
.LBB66_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_47
.LBB66_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB66_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB66_53
.LBB66_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_52
.LBB66_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB66_52:                              # %cond.end113
.LBB66_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB66_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB66_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB66_57
.LBB66_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB66_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB66_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB66_63
.LBB66_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB66_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB66_62
.LBB66_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB66_62:                              # %cond.end136
.LBB66_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB66_76
.LBB66_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB66_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB66_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB66_68
.LBB66_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB66_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB66_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB66_74
.LBB66_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB66_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB66_73
.LBB66_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB66_73:                              # %cond.end169
.LBB66_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB66_75:                              # %if.end
	jmp	.LBB66_76
.LBB66_76:                              # %if.end178
	jmp	.LBB66_331
.LBB66_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB66_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB66_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB66_81
.LBB66_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB66_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB66_87
.LBB66_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB66_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB66_86
.LBB66_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB66_86:                              # %cond.end197
.LBB66_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB66_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB66_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB66_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB66_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB66_92
.LBB66_91:                              # %cond.false209
                                        #   in Loop: Header=BB66_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB66_92:                              # %cond.end211
                                        #   in Loop: Header=BB66_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB66_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB66_98
.LBB66_94:                              # %cond.false216
                                        #   in Loop: Header=BB66_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB66_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB66_97
.LBB66_96:                              # %cond.false221
                                        #   in Loop: Header=BB66_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB66_97:                              # %cond.end223
                                        #   in Loop: Header=BB66_88 Depth=1
.LBB66_98:                              # %cond.end225
                                        #   in Loop: Header=BB66_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB66_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_88
.LBB66_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_103
.LBB66_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB66_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB66_109
.LBB66_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_108
.LBB66_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB66_108:                             # %cond.end266
.LBB66_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB66_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB66_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB66_113
.LBB66_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB66_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB66_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB66_119
.LBB66_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB66_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB66_118
.LBB66_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB66_118:                             # %cond.end287
.LBB66_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB66_132
.LBB66_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB66_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB66_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB66_124
.LBB66_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB66_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB66_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB66_130
.LBB66_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB66_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB66_129
.LBB66_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB66_129:                             # %cond.end320
.LBB66_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB66_131:                             # %if.end331
	jmp	.LBB66_132
.LBB66_132:                             # %if.end332
	jmp	.LBB66_330
.LBB66_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB66_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB66_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB66_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB66_139
.LBB66_138:                             # %cond.false345
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB66_139:                             # %cond.end347
                                        #   in Loop: Header=BB66_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB66_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB66_145
.LBB66_141:                             # %cond.false352
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB66_144
.LBB66_143:                             # %cond.false357
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB66_144:                             # %cond.end359
                                        #   in Loop: Header=BB66_135 Depth=1
.LBB66_145:                             # %cond.end361
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB66_146:                             # %for.cond363
                                        #   Parent Loop BB66_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB66_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB66_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB66_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB66_150
.LBB66_149:                             # %cond.false371
                                        #   in Loop: Header=BB66_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB66_150:                             # %cond.end373
                                        #   in Loop: Header=BB66_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB66_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB66_156
.LBB66_152:                             # %cond.false378
                                        #   in Loop: Header=BB66_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB66_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB66_155
.LBB66_154:                             # %cond.false383
                                        #   in Loop: Header=BB66_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB66_155:                             # %cond.end385
                                        #   in Loop: Header=BB66_146 Depth=2
.LBB66_156:                             # %cond.end387
                                        #   in Loop: Header=BB66_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB66_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_146
.LBB66_158:                             # %for.end401
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_135
.LBB66_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB66_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB66_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB66_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB66_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_161
.LBB66_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_167
.LBB66_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB66_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB66_173
.LBB66_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_172
.LBB66_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB66_172:                             # %cond.end449
.LBB66_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB66_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB66_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_177
.LBB66_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB66_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB66_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB66_183
.LBB66_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB66_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_182
.LBB66_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB66_182:                             # %cond.end486
.LBB66_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB66_196
.LBB66_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB66_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB66_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_188
.LBB66_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB66_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB66_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB66_194
.LBB66_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB66_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_193
.LBB66_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB66_193:                             # %cond.end526
.LBB66_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB66_195:                             # %if.end532
	jmp	.LBB66_196
.LBB66_196:                             # %if.end533
	jmp	.LBB66_329
.LBB66_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB66_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB66_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB66_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB66_203
.LBB66_202:                             # %cond.false546
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB66_203:                             # %cond.end548
                                        #   in Loop: Header=BB66_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB66_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB66_209
.LBB66_205:                             # %cond.false553
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB66_208
.LBB66_207:                             # %cond.false558
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB66_208:                             # %cond.end560
                                        #   in Loop: Header=BB66_199 Depth=1
.LBB66_209:                             # %cond.end562
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB66_210:                             # %for.cond564
                                        #   Parent Loop BB66_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB66_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB66_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB66_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB66_214
.LBB66_213:                             # %cond.false572
                                        #   in Loop: Header=BB66_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB66_214:                             # %cond.end574
                                        #   in Loop: Header=BB66_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB66_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB66_220
.LBB66_216:                             # %cond.false579
                                        #   in Loop: Header=BB66_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB66_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB66_219
.LBB66_218:                             # %cond.false584
                                        #   in Loop: Header=BB66_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB66_219:                             # %cond.end586
                                        #   in Loop: Header=BB66_210 Depth=2
.LBB66_220:                             # %cond.end588
                                        #   in Loop: Header=BB66_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB66_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_210
.LBB66_222:                             # %for.end602
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_199
.LBB66_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB66_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB66_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB66_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB66_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_225
.LBB66_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_231
.LBB66_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB66_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB66_237
.LBB66_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_236
.LBB66_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB66_236:                             # %cond.end650
.LBB66_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB66_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB66_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_241
.LBB66_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB66_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB66_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB66_247
.LBB66_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB66_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_246
.LBB66_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB66_246:                             # %cond.end687
.LBB66_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB66_258
.LBB66_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB66_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_251
.LBB66_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB66_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB66_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB66_257
.LBB66_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB66_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_256
.LBB66_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB66_256:                             # %cond.end724
.LBB66_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB66_258:                             # %if.end730
	jmp	.LBB66_328
.LBB66_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB66_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB66_262
.LBB66_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB66_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB66_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB66_265
.LBB66_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB66_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB66_271
.LBB66_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB66_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB66_270
.LBB66_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB66_270:                             # %cond.end753
.LBB66_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB66_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB66_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB66_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB66_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB66_276
.LBB66_275:                             # %cond.false765
                                        #   in Loop: Header=BB66_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB66_276:                             # %cond.end767
                                        #   in Loop: Header=BB66_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB66_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB66_282
.LBB66_278:                             # %cond.false772
                                        #   in Loop: Header=BB66_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB66_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB66_281
.LBB66_280:                             # %cond.false777
                                        #   in Loop: Header=BB66_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB66_281:                             # %cond.end779
                                        #   in Loop: Header=BB66_272 Depth=1
.LBB66_282:                             # %cond.end781
                                        #   in Loop: Header=BB66_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB66_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_272
.LBB66_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_287
.LBB66_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB66_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB66_293
.LBB66_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_292
.LBB66_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB66_292:                             # %cond.end822
.LBB66_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB66_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB66_296
.LBB66_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB66_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB66_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB66_299
.LBB66_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB66_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB66_305
.LBB66_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB66_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB66_304
.LBB66_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB66_304:                             # %cond.end847
.LBB66_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB66_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB66_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB66_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB66_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB66_310
.LBB66_309:                             # %cond.false859
                                        #   in Loop: Header=BB66_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB66_310:                             # %cond.end861
                                        #   in Loop: Header=BB66_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB66_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB66_316
.LBB66_312:                             # %cond.false866
                                        #   in Loop: Header=BB66_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB66_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB66_315
.LBB66_314:                             # %cond.false871
                                        #   in Loop: Header=BB66_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB66_315:                             # %cond.end873
                                        #   in Loop: Header=BB66_306 Depth=1
.LBB66_316:                             # %cond.end875
                                        #   in Loop: Header=BB66_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB66_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_306
.LBB66_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_321
.LBB66_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB66_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB66_327
.LBB66_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_326
.LBB66_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB66_326:                             # %cond.end916
.LBB66_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-108(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB66_328:                             # %if.end922
	jmp	.LBB66_329
.LBB66_329:                             # %if.end923
	jmp	.LBB66_330
.LBB66_330:                             # %if.end924
	jmp	.LBB66_331
.LBB66_331:                             # %if.end925
	jmp	.LBB66_332
.LBB66_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$908173528, -100(%rbp)  # imm = 0x3621A0D8
	jne	.LBB66_334
.LBB66_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_333
.Lfunc_end66:
	.size	Get_Reference_Pixel.56, .Lfunc_end66-Get_Reference_Pixel.56
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.57 # -- Begin function compute_residue_b8block.57
	.p2align	4, 0x90
	.type	compute_residue_b8block.57,@function
compute_residue_b8block.57:             # @compute_residue_b8block.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1265078438, -36(%rbp)  # imm = 0x4B6790A6
	movl	%edi, -20(%rbp)
	movl	%esi, -28(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB67_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB67_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB67_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB67_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB67_4:                               # %for.cond4
                                        #   Parent Loop BB67_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB67_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB67_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB67_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_4
.LBB67_7:                               # %for.end
                                        #   in Loop: Header=BB67_2 Depth=1
	jmp	.LBB67_8
.LBB67_8:                               # %for.inc22
                                        #   in Loop: Header=BB67_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_2
.LBB67_9:                               # %for.end24
	jmp	.LBB67_19
.LBB67_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB67_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB67_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB67_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB67_13:                              # %for.cond29
                                        #   Parent Loop BB67_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB67_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB67_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB67_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_13
.LBB67_16:                              # %for.end56
                                        #   in Loop: Header=BB67_11 Depth=1
	jmp	.LBB67_17
.LBB67_17:                              # %for.inc57
                                        #   in Loop: Header=BB67_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_11
.LBB67_18:                              # %for.end59
	jmp	.LBB67_19
.LBB67_19:                              # %if.end
	cmpl	$1265078438, -36(%rbp)  # imm = 0x4B6790A6
	jne	.LBB67_21
.LBB67_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_20
.Lfunc_end67:
	.size	compute_residue_b8block.57, .Lfunc_end67-compute_residue_b8block.57
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.58  # -- Begin function Get_Reference_Pixel.58
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.58,@function
Get_Reference_Pixel.58:                 # @Get_Reference_Pixel.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1963839630, -100(%rbp) # imm = 0x750DD08E
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB68_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB68_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB68_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB68_5
.LBB68_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB68_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB68_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB68_11
.LBB68_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB68_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB68_10
.LBB68_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB68_10:                              # %cond.end14
.LBB68_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB68_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB68_14
.LBB68_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB68_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB68_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB68_20
.LBB68_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB68_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB68_19
.LBB68_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB68_19:                              # %cond.end29
.LBB68_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_332
.LBB68_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB68_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB68_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB68_25
.LBB68_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB68_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB68_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB68_31
.LBB68_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB68_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB68_30
.LBB68_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB68_30:                              # %cond.end52
.LBB68_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB68_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB68_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB68_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB68_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB68_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB68_36
.LBB68_35:                              # %cond.false61
                                        #   in Loop: Header=BB68_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB68_36:                              # %cond.end63
                                        #   in Loop: Header=BB68_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB68_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB68_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB68_42
.LBB68_38:                              # %cond.false68
                                        #   in Loop: Header=BB68_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB68_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB68_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB68_41
.LBB68_40:                              # %cond.false73
                                        #   in Loop: Header=BB68_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB68_41:                              # %cond.end75
                                        #   in Loop: Header=BB68_32 Depth=1
.LBB68_42:                              # %cond.end77
                                        #   in Loop: Header=BB68_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB68_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_32
.LBB68_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB68_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB68_47
.LBB68_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB68_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB68_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB68_53
.LBB68_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB68_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB68_52
.LBB68_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB68_52:                              # %cond.end113
.LBB68_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB68_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB68_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB68_57
.LBB68_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB68_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB68_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB68_63
.LBB68_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB68_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB68_62
.LBB68_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB68_62:                              # %cond.end136
.LBB68_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB68_76
.LBB68_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB68_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB68_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB68_68
.LBB68_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB68_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB68_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB68_74
.LBB68_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB68_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB68_73
.LBB68_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB68_73:                              # %cond.end169
.LBB68_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB68_75:                              # %if.end
	jmp	.LBB68_76
.LBB68_76:                              # %if.end178
	jmp	.LBB68_331
.LBB68_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB68_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB68_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB68_81
.LBB68_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB68_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB68_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB68_87
.LBB68_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB68_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB68_86
.LBB68_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB68_86:                              # %cond.end197
.LBB68_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB68_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB68_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB68_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB68_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB68_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB68_92
.LBB68_91:                              # %cond.false209
                                        #   in Loop: Header=BB68_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB68_92:                              # %cond.end211
                                        #   in Loop: Header=BB68_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB68_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB68_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB68_98
.LBB68_94:                              # %cond.false216
                                        #   in Loop: Header=BB68_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB68_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB68_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB68_97
.LBB68_96:                              # %cond.false221
                                        #   in Loop: Header=BB68_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB68_97:                              # %cond.end223
                                        #   in Loop: Header=BB68_88 Depth=1
.LBB68_98:                              # %cond.end225
                                        #   in Loop: Header=BB68_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB68_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB68_88
.LBB68_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB68_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB68_103
.LBB68_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB68_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB68_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB68_109
.LBB68_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB68_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB68_108
.LBB68_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB68_108:                             # %cond.end266
.LBB68_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB68_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB68_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB68_113
.LBB68_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB68_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB68_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB68_119
.LBB68_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB68_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB68_118
.LBB68_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB68_118:                             # %cond.end287
.LBB68_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB68_132
.LBB68_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB68_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB68_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB68_124
.LBB68_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB68_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB68_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB68_130
.LBB68_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB68_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB68_129
.LBB68_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB68_129:                             # %cond.end320
.LBB68_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB68_131:                             # %if.end331
	jmp	.LBB68_132
.LBB68_132:                             # %if.end332
	jmp	.LBB68_330
.LBB68_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB68_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB68_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB68_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB68_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB68_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB68_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB68_139
.LBB68_138:                             # %cond.false345
                                        #   in Loop: Header=BB68_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB68_139:                             # %cond.end347
                                        #   in Loop: Header=BB68_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB68_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB68_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB68_145
.LBB68_141:                             # %cond.false352
                                        #   in Loop: Header=BB68_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB68_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB68_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB68_144
.LBB68_143:                             # %cond.false357
                                        #   in Loop: Header=BB68_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB68_144:                             # %cond.end359
                                        #   in Loop: Header=BB68_135 Depth=1
.LBB68_145:                             # %cond.end361
                                        #   in Loop: Header=BB68_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB68_146:                             # %for.cond363
                                        #   Parent Loop BB68_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB68_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB68_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB68_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB68_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB68_150
.LBB68_149:                             # %cond.false371
                                        #   in Loop: Header=BB68_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB68_150:                             # %cond.end373
                                        #   in Loop: Header=BB68_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB68_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB68_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB68_156
.LBB68_152:                             # %cond.false378
                                        #   in Loop: Header=BB68_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB68_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB68_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB68_155
.LBB68_154:                             # %cond.false383
                                        #   in Loop: Header=BB68_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB68_155:                             # %cond.end385
                                        #   in Loop: Header=BB68_146 Depth=2
.LBB68_156:                             # %cond.end387
                                        #   in Loop: Header=BB68_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB68_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_146
.LBB68_158:                             # %for.end401
                                        #   in Loop: Header=BB68_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB68_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB68_135
.LBB68_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB68_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB68_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB68_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB68_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB68_161
.LBB68_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB68_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB68_167
.LBB68_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB68_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB68_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB68_173
.LBB68_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB68_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB68_172
.LBB68_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB68_172:                             # %cond.end449
.LBB68_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB68_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB68_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB68_177
.LBB68_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB68_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB68_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB68_183
.LBB68_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB68_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB68_182
.LBB68_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB68_182:                             # %cond.end486
.LBB68_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB68_196
.LBB68_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB68_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB68_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB68_188
.LBB68_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB68_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB68_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB68_194
.LBB68_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB68_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB68_193
.LBB68_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB68_193:                             # %cond.end526
.LBB68_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB68_195:                             # %if.end532
	jmp	.LBB68_196
.LBB68_196:                             # %if.end533
	jmp	.LBB68_329
.LBB68_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB68_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB68_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB68_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB68_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB68_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB68_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB68_203
.LBB68_202:                             # %cond.false546
                                        #   in Loop: Header=BB68_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB68_203:                             # %cond.end548
                                        #   in Loop: Header=BB68_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB68_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB68_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB68_209
.LBB68_205:                             # %cond.false553
                                        #   in Loop: Header=BB68_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB68_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB68_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB68_208
.LBB68_207:                             # %cond.false558
                                        #   in Loop: Header=BB68_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB68_208:                             # %cond.end560
                                        #   in Loop: Header=BB68_199 Depth=1
.LBB68_209:                             # %cond.end562
                                        #   in Loop: Header=BB68_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB68_210:                             # %for.cond564
                                        #   Parent Loop BB68_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB68_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB68_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB68_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB68_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB68_214
.LBB68_213:                             # %cond.false572
                                        #   in Loop: Header=BB68_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB68_214:                             # %cond.end574
                                        #   in Loop: Header=BB68_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB68_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB68_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB68_220
.LBB68_216:                             # %cond.false579
                                        #   in Loop: Header=BB68_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB68_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB68_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB68_219
.LBB68_218:                             # %cond.false584
                                        #   in Loop: Header=BB68_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB68_219:                             # %cond.end586
                                        #   in Loop: Header=BB68_210 Depth=2
.LBB68_220:                             # %cond.end588
                                        #   in Loop: Header=BB68_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB68_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB68_210
.LBB68_222:                             # %for.end602
                                        #   in Loop: Header=BB68_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB68_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_199
.LBB68_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB68_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB68_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB68_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB68_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_225
.LBB68_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB68_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB68_231
.LBB68_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB68_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB68_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB68_237
.LBB68_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB68_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB68_236
.LBB68_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB68_236:                             # %cond.end650
.LBB68_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB68_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB68_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB68_241
.LBB68_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB68_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB68_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB68_247
.LBB68_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB68_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB68_246
.LBB68_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB68_246:                             # %cond.end687
.LBB68_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB68_258
.LBB68_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB68_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB68_251
.LBB68_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB68_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB68_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB68_257
.LBB68_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB68_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB68_256
.LBB68_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB68_256:                             # %cond.end724
.LBB68_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB68_258:                             # %if.end730
	jmp	.LBB68_328
.LBB68_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB68_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB68_262
.LBB68_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB68_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB68_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB68_265
.LBB68_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB68_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB68_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB68_271
.LBB68_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB68_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB68_270
.LBB68_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB68_270:                             # %cond.end753
.LBB68_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB68_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB68_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB68_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB68_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB68_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB68_276
.LBB68_275:                             # %cond.false765
                                        #   in Loop: Header=BB68_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB68_276:                             # %cond.end767
                                        #   in Loop: Header=BB68_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB68_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB68_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB68_282
.LBB68_278:                             # %cond.false772
                                        #   in Loop: Header=BB68_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB68_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB68_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB68_281
.LBB68_280:                             # %cond.false777
                                        #   in Loop: Header=BB68_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB68_281:                             # %cond.end779
                                        #   in Loop: Header=BB68_272 Depth=1
.LBB68_282:                             # %cond.end781
                                        #   in Loop: Header=BB68_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB68_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_272
.LBB68_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB68_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB68_287
.LBB68_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB68_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB68_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB68_293
.LBB68_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB68_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB68_292
.LBB68_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB68_292:                             # %cond.end822
.LBB68_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB68_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB68_296
.LBB68_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB68_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB68_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB68_299
.LBB68_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB68_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB68_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB68_305
.LBB68_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB68_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB68_304
.LBB68_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB68_304:                             # %cond.end847
.LBB68_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB68_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB68_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB68_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB68_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB68_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB68_310
.LBB68_309:                             # %cond.false859
                                        #   in Loop: Header=BB68_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB68_310:                             # %cond.end861
                                        #   in Loop: Header=BB68_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB68_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB68_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB68_316
.LBB68_312:                             # %cond.false866
                                        #   in Loop: Header=BB68_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB68_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB68_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB68_315
.LBB68_314:                             # %cond.false871
                                        #   in Loop: Header=BB68_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB68_315:                             # %cond.end873
                                        #   in Loop: Header=BB68_306 Depth=1
.LBB68_316:                             # %cond.end875
                                        #   in Loop: Header=BB68_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB68_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB68_306
.LBB68_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB68_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB68_321
.LBB68_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB68_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB68_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB68_327
.LBB68_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB68_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB68_326
.LBB68_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB68_326:                             # %cond.end916
.LBB68_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-104(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB68_328:                             # %if.end922
	jmp	.LBB68_329
.LBB68_329:                             # %if.end923
	jmp	.LBB68_330
.LBB68_330:                             # %if.end924
	jmp	.LBB68_331
.LBB68_331:                             # %if.end925
	jmp	.LBB68_332
.LBB68_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1963839630, -100(%rbp) # imm = 0x750DD08E
	jne	.LBB68_334
.LBB68_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_333
.Lfunc_end68:
	.size	Get_Reference_Pixel.58, .Lfunc_end68-Get_Reference_Pixel.58
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.59        # -- Begin function Conceal_Error.59
	.p2align	4, 0x90
	.type	Conceal_Error.59,@function
Conceal_Error.59:                       # @Conceal_Error.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1270528006, -68(%rbp)  # imm = 0x4BBAB806
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB69_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB69_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB69_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB69_4:                               # %land.end
.LBB69_5:                               # %lor.end
.LBB69_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB69_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB69_9
.LBB69_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB69_14
.LBB69_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB69_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB69_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB69_12:                              # %land.end51
.LBB69_13:                              # %lor.end53
.LBB69_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB69_180
# %bb.15:                               # %land.end54
	movq	.LJTI69_0(,%rax,8), %rax
	jmpq	*%rax
.LBB69_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB69_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB69_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB69_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB69_18 Depth=1
	movl	$0, -4(%rbp)
.LBB69_20:                              # %for.cond68
                                        #   Parent Loop BB69_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB69_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB69_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB69_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_20
.LBB69_23:                              # %for.end
                                        #   in Loop: Header=BB69_18 Depth=1
	jmp	.LBB69_24
.LBB69_24:                              # %for.inc85
                                        #   in Loop: Header=BB69_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_18
.LBB69_25:                              # %for.end87
	jmp	.LBB69_35
.LBB69_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB69_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB69_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB69_27 Depth=1
	movl	$0, -4(%rbp)
.LBB69_29:                              # %for.cond92
                                        #   Parent Loop BB69_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB69_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB69_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB69_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_29
.LBB69_32:                              # %for.end104
                                        #   in Loop: Header=BB69_27 Depth=1
	jmp	.LBB69_33
.LBB69_33:                              # %for.inc105
                                        #   in Loop: Header=BB69_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_27
.LBB69_34:                              # %for.end107
	jmp	.LBB69_35
.LBB69_35:                              # %if.end
	jmp	.LBB69_180
.LBB69_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB69_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_39 Depth 2
                                        #       Child Loop BB69_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB69_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB69_37 Depth=1
	movl	$0, -16(%rbp)
.LBB69_39:                              # %for.cond113
                                        #   Parent Loop BB69_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB69_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB69_39 Depth=2
	movl	$0, -4(%rbp)
.LBB69_41:                              # %for.cond117
                                        #   Parent Loop BB69_37 Depth=1
                                        #     Parent Loop BB69_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB69_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB69_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB69_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_41
.LBB69_44:                              # %for.end141
                                        #   in Loop: Header=BB69_39 Depth=2
	jmp	.LBB69_45
.LBB69_45:                              # %for.inc142
                                        #   in Loop: Header=BB69_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_39
.LBB69_46:                              # %for.end144
                                        #   in Loop: Header=BB69_37 Depth=1
	jmp	.LBB69_47
.LBB69_47:                              # %for.inc145
                                        #   in Loop: Header=BB69_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_37
.LBB69_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB69_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB69_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB69_49 Depth=1
	movl	$0, -8(%rbp)
.LBB69_51:                              # %for.cond152
                                        #   Parent Loop BB69_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB69_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB69_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB69_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_51
.LBB69_54:                              # %for.end162
                                        #   in Loop: Header=BB69_49 Depth=1
	jmp	.LBB69_55
.LBB69_55:                              # %for.inc163
                                        #   in Loop: Header=BB69_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_49
.LBB69_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB69_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB69_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB69_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB69_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB69_59 Depth=1
	movl	$0, -4(%rbp)
.LBB69_61:                              # %for.cond175
                                        #   Parent Loop BB69_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB69_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB69_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB69_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_61
.LBB69_64:                              # %for.end195
                                        #   in Loop: Header=BB69_59 Depth=1
	jmp	.LBB69_65
.LBB69_65:                              # %for.inc196
                                        #   in Loop: Header=BB69_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_59
.LBB69_66:                              # %for.end198
	jmp	.LBB69_95
.LBB69_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB69_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB69_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_71 Depth 2
                                        #       Child Loop BB69_73 Depth 3
                                        #         Child Loop BB69_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB69_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB69_71:                              # %for.cond210
                                        #   Parent Loop BB69_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_73 Depth 3
                                        #         Child Loop BB69_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB69_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB69_73:                              # %for.cond236
                                        #   Parent Loop BB69_69 Depth=1
                                        #     Parent Loop BB69_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB69_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB69_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB69_73 Depth=3
	movl	$0, -4(%rbp)
.LBB69_75:                              # %for.cond240
                                        #   Parent Loop BB69_69 Depth=1
                                        #     Parent Loop BB69_71 Depth=2
                                        #       Parent Loop BB69_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB69_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB69_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB69_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_75
.LBB69_78:                              # %for.end259
                                        #   in Loop: Header=BB69_73 Depth=3
	jmp	.LBB69_79
.LBB69_79:                              # %for.inc260
                                        #   in Loop: Header=BB69_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_73
.LBB69_80:                              # %for.end262
                                        #   in Loop: Header=BB69_71 Depth=2
	jmp	.LBB69_81
.LBB69_81:                              # %for.inc263
                                        #   in Loop: Header=BB69_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_71
.LBB69_82:                              # %for.end265
                                        #   in Loop: Header=BB69_69 Depth=1
	jmp	.LBB69_83
.LBB69_83:                              # %for.inc266
                                        #   in Loop: Header=BB69_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_69
.LBB69_84:                              # %for.end268
	jmp	.LBB69_94
.LBB69_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB69_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB69_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB69_86 Depth=1
	movl	$0, -4(%rbp)
.LBB69_88:                              # %for.cond274
                                        #   Parent Loop BB69_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB69_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB69_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB69_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_88
.LBB69_91:                              # %for.end294
                                        #   in Loop: Header=BB69_86 Depth=1
	jmp	.LBB69_92
.LBB69_92:                              # %for.inc295
                                        #   in Loop: Header=BB69_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_86
.LBB69_93:                              # %for.end297
	jmp	.LBB69_94
.LBB69_94:                              # %if.end298
	jmp	.LBB69_95
.LBB69_95:                              # %if.end299
	jmp	.LBB69_105
.LBB69_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB69_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB69_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB69_97 Depth=1
	movl	$0, -4(%rbp)
.LBB69_99:                              # %for.cond305
                                        #   Parent Loop BB69_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB69_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB69_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB69_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_99
.LBB69_102:                             # %for.end317
                                        #   in Loop: Header=BB69_97 Depth=1
	jmp	.LBB69_103
.LBB69_103:                             # %for.inc318
                                        #   in Loop: Header=BB69_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_97
.LBB69_104:                             # %for.end320
	jmp	.LBB69_105
.LBB69_105:                             # %if.end321
	jmp	.LBB69_180
.LBB69_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB69_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB69_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_110 Depth 2
                                        #       Child Loop BB69_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB69_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB69_108 Depth=1
	movl	$0, -16(%rbp)
.LBB69_110:                             # %for.cond331
                                        #   Parent Loop BB69_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB69_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB69_110 Depth=2
	movl	$0, -4(%rbp)
.LBB69_112:                             # %for.cond335
                                        #   Parent Loop BB69_108 Depth=1
                                        #     Parent Loop BB69_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB69_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB69_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB69_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_112
.LBB69_115:                             # %for.end359
                                        #   in Loop: Header=BB69_110 Depth=2
	jmp	.LBB69_116
.LBB69_116:                             # %for.inc360
                                        #   in Loop: Header=BB69_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_110
.LBB69_117:                             # %for.end362
                                        #   in Loop: Header=BB69_108 Depth=1
	jmp	.LBB69_118
.LBB69_118:                             # %for.inc363
                                        #   in Loop: Header=BB69_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_108
.LBB69_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB69_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB69_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB69_120 Depth=1
	movl	$0, -8(%rbp)
.LBB69_122:                             # %for.cond370
                                        #   Parent Loop BB69_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB69_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB69_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB69_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_122
.LBB69_125:                             # %for.end380
                                        #   in Loop: Header=BB69_120 Depth=1
	jmp	.LBB69_126
.LBB69_126:                             # %for.inc381
                                        #   in Loop: Header=BB69_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_120
.LBB69_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB69_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB69_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB69_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB69_129 Depth=1
	movl	$0, -4(%rbp)
.LBB69_131:                             # %for.cond390
                                        #   Parent Loop BB69_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB69_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB69_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB69_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_131
.LBB69_134:                             # %for.end410
                                        #   in Loop: Header=BB69_129 Depth=1
	jmp	.LBB69_135
.LBB69_135:                             # %for.inc411
                                        #   in Loop: Header=BB69_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_129
.LBB69_136:                             # %for.end413
	jmp	.LBB69_156
.LBB69_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB69_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB69_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_141 Depth 2
                                        #       Child Loop BB69_143 Depth 3
                                        #         Child Loop BB69_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB69_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB69_141:                             # %for.cond425
                                        #   Parent Loop BB69_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_143 Depth 3
                                        #         Child Loop BB69_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB69_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB69_143:                             # %for.cond452
                                        #   Parent Loop BB69_139 Depth=1
                                        #     Parent Loop BB69_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB69_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB69_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB69_143 Depth=3
	movl	$0, -4(%rbp)
.LBB69_145:                             # %for.cond456
                                        #   Parent Loop BB69_139 Depth=1
                                        #     Parent Loop BB69_141 Depth=2
                                        #       Parent Loop BB69_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB69_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB69_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB69_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_145
.LBB69_148:                             # %for.end475
                                        #   in Loop: Header=BB69_143 Depth=3
	jmp	.LBB69_149
.LBB69_149:                             # %for.inc476
                                        #   in Loop: Header=BB69_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_143
.LBB69_150:                             # %for.end478
                                        #   in Loop: Header=BB69_141 Depth=2
	jmp	.LBB69_151
.LBB69_151:                             # %for.inc479
                                        #   in Loop: Header=BB69_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_141
.LBB69_152:                             # %for.end481
                                        #   in Loop: Header=BB69_139 Depth=1
	jmp	.LBB69_153
.LBB69_153:                             # %for.inc482
                                        #   in Loop: Header=BB69_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_139
.LBB69_154:                             # %for.end484
	jmp	.LBB69_155
.LBB69_155:                             # %if.end485
	jmp	.LBB69_156
.LBB69_156:                             # %if.end486
	jmp	.LBB69_157
.LBB69_157:                             # %if.end487
	jmp	.LBB69_180
.LBB69_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB69_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB69_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB69_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB69_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB69_161 Depth=1
	movl	$0, -4(%rbp)
.LBB69_163:                             # %for.cond499
                                        #   Parent Loop BB69_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB69_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB69_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB69_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_163
.LBB69_166:                             # %for.end519
                                        #   in Loop: Header=BB69_161 Depth=1
	jmp	.LBB69_167
.LBB69_167:                             # %for.inc520
                                        #   in Loop: Header=BB69_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_161
.LBB69_168:                             # %for.end522
	jmp	.LBB69_169
.LBB69_169:                             # %if.end523
	jmp	.LBB69_179
.LBB69_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB69_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB69_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB69_171 Depth=1
	movl	$0, -4(%rbp)
.LBB69_173:                             # %for.cond529
                                        #   Parent Loop BB69_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB69_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB69_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB69_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_173
.LBB69_176:                             # %for.end541
                                        #   in Loop: Header=BB69_171 Depth=1
	jmp	.LBB69_177
.LBB69_177:                             # %for.inc542
                                        #   in Loop: Header=BB69_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_171
.LBB69_178:                             # %for.end544
	jmp	.LBB69_179
.LBB69_179:                             # %if.end545
	jmp	.LBB69_180
.LBB69_180:                             # %sw.epilog
	cmpl	$1270528006, -68(%rbp)  # imm = 0x4BBAB806
	jne	.LBB69_182
.LBB69_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_181
.Lfunc_end69:
	.size	Conceal_Error.59, .Lfunc_end69-Conceal_Error.59
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI69_0:
	.quad	.LBB69_16
	.quad	.LBB69_158
	.quad	.LBB69_106
	.quad	.LBB69_180
	.quad	.LBB69_36
                                        # -- End function
	.text
	.globl	Error_Concealment.60    # -- Begin function Error_Concealment.60
	.p2align	4, 0x90
	.type	Error_Concealment.60,@function
Error_Concealment.60:                   # @Error_Concealment.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1959590110, -20(%rbp)  # imm = 0x74CCF8DE
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB70_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB70_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB70_1 Depth=1
	movl	$0, -8(%rbp)
.LBB70_3:                               # %for.cond2
                                        #   Parent Loop BB70_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB70_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB70_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB70_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB70_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB70_6:                               # %if.end
                                        #   in Loop: Header=BB70_3 Depth=2
	jmp	.LBB70_7
.LBB70_7:                               # %for.inc
                                        #   in Loop: Header=BB70_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_3
.LBB70_8:                               # %for.end
                                        #   in Loop: Header=BB70_1 Depth=1
	jmp	.LBB70_9
.LBB70_9:                               # %for.inc7
                                        #   in Loop: Header=BB70_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_1
.LBB70_10:                              # %for.end9
	cmpl	$1959590110, -20(%rbp)  # imm = 0x74CCF8DE
	jne	.LBB70_12
.LBB70_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_11
.Lfunc_end70:
	.size	Error_Concealment.60, .Lfunc_end70-Error_Concealment.60
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.61  # -- Begin function Get_Reference_Block.61
	.p2align	4, 0x90
	.type	Get_Reference_Block.61,@function
Get_Reference_Block.61:                 # @Get_Reference_Block.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1840952600, -12(%rbp)  # imm = 0x6DBAB518
	movq	%rdi, -56(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -28(%rbp)
	movq	%r9, -48(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB71_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB71_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -4(%rbp)
.LBB71_3:                               # %for.cond5
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB71_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB71_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-36(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB71_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_3
.LBB71_6:                               # %for.end
                                        #   in Loop: Header=BB71_1 Depth=1
	jmp	.LBB71_7
.LBB71_7:                               # %for.inc14
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_1
.LBB71_8:                               # %for.end16
	cmpl	$1840952600, -12(%rbp)  # imm = 0x6DBAB518
	jne	.LBB71_10
.LBB71_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_9
.Lfunc_end71:
	.size	Get_Reference_Block.61, .Lfunc_end71-Get_Reference_Block.61
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.62 # -- Begin function compute_residue_b8block.62
	.p2align	4, 0x90
	.type	compute_residue_b8block.62,@function
compute_residue_b8block.62:             # @compute_residue_b8block.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2058587249, -36(%rbp)  # imm = 0x7AB38C71
	movl	%edi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB72_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB72_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB72_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB72_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB72_4:                               # %for.cond4
                                        #   Parent Loop BB72_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB72_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB72_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB72_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_4
.LBB72_7:                               # %for.end
                                        #   in Loop: Header=BB72_2 Depth=1
	jmp	.LBB72_8
.LBB72_8:                               # %for.inc22
                                        #   in Loop: Header=BB72_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_2
.LBB72_9:                               # %for.end24
	jmp	.LBB72_19
.LBB72_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB72_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB72_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB72_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB72_13:                              # %for.cond29
                                        #   Parent Loop BB72_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB72_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB72_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB72_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_13
.LBB72_16:                              # %for.end56
                                        #   in Loop: Header=BB72_11 Depth=1
	jmp	.LBB72_17
.LBB72_17:                              # %for.inc57
                                        #   in Loop: Header=BB72_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_11
.LBB72_18:                              # %for.end59
	jmp	.LBB72_19
.LBB72_19:                              # %if.end
	cmpl	$2058587249, -36(%rbp)  # imm = 0x7AB38C71
	jne	.LBB72_21
.LBB72_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_20
.Lfunc_end72:
	.size	compute_residue_b8block.62, .Lfunc_end72-compute_residue_b8block.62
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.63  # -- Begin function Get_Reference_Pixel.63
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.63,@function
Get_Reference_Pixel.63:                 # @Get_Reference_Pixel.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$2076805409, -100(%rbp) # imm = 0x7BC98921
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB73_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB73_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB73_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB73_5
.LBB73_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB73_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB73_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB73_11
.LBB73_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB73_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB73_10
.LBB73_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB73_10:                              # %cond.end14
.LBB73_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB73_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB73_14
.LBB73_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB73_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB73_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB73_20
.LBB73_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB73_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB73_19
.LBB73_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB73_19:                              # %cond.end29
.LBB73_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_332
.LBB73_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB73_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB73_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB73_25
.LBB73_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB73_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB73_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB73_31
.LBB73_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB73_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB73_30
.LBB73_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB73_30:                              # %cond.end52
.LBB73_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB73_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB73_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB73_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB73_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB73_36
.LBB73_35:                              # %cond.false61
                                        #   in Loop: Header=BB73_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB73_36:                              # %cond.end63
                                        #   in Loop: Header=BB73_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB73_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB73_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB73_42
.LBB73_38:                              # %cond.false68
                                        #   in Loop: Header=BB73_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB73_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB73_41
.LBB73_40:                              # %cond.false73
                                        #   in Loop: Header=BB73_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB73_41:                              # %cond.end75
                                        #   in Loop: Header=BB73_32 Depth=1
.LBB73_42:                              # %cond.end77
                                        #   in Loop: Header=BB73_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB73_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_32
.LBB73_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB73_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB73_47
.LBB73_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB73_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB73_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB73_53
.LBB73_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB73_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB73_52
.LBB73_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB73_52:                              # %cond.end113
.LBB73_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB73_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB73_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB73_57
.LBB73_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB73_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB73_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB73_63
.LBB73_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB73_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB73_62
.LBB73_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB73_62:                              # %cond.end136
.LBB73_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB73_76
.LBB73_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB73_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB73_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB73_68
.LBB73_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB73_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB73_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB73_74
.LBB73_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB73_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB73_73
.LBB73_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB73_73:                              # %cond.end169
.LBB73_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB73_75:                              # %if.end
	jmp	.LBB73_76
.LBB73_76:                              # %if.end178
	jmp	.LBB73_331
.LBB73_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB73_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB73_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB73_81
.LBB73_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB73_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB73_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB73_87
.LBB73_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB73_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB73_86
.LBB73_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB73_86:                              # %cond.end197
.LBB73_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB73_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB73_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB73_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB73_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB73_92
.LBB73_91:                              # %cond.false209
                                        #   in Loop: Header=BB73_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB73_92:                              # %cond.end211
                                        #   in Loop: Header=BB73_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB73_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB73_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB73_98
.LBB73_94:                              # %cond.false216
                                        #   in Loop: Header=BB73_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB73_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB73_97
.LBB73_96:                              # %cond.false221
                                        #   in Loop: Header=BB73_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB73_97:                              # %cond.end223
                                        #   in Loop: Header=BB73_88 Depth=1
.LBB73_98:                              # %cond.end225
                                        #   in Loop: Header=BB73_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB73_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB73_88
.LBB73_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB73_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB73_103
.LBB73_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB73_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB73_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB73_109
.LBB73_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB73_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB73_108
.LBB73_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB73_108:                             # %cond.end266
.LBB73_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB73_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB73_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB73_113
.LBB73_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB73_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB73_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB73_119
.LBB73_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB73_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB73_118
.LBB73_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB73_118:                             # %cond.end287
.LBB73_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB73_132
.LBB73_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB73_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB73_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB73_124
.LBB73_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB73_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB73_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB73_130
.LBB73_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB73_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB73_129
.LBB73_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB73_129:                             # %cond.end320
.LBB73_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB73_131:                             # %if.end331
	jmp	.LBB73_132
.LBB73_132:                             # %if.end332
	jmp	.LBB73_330
.LBB73_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB73_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB73_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB73_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB73_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB73_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB73_139
.LBB73_138:                             # %cond.false345
                                        #   in Loop: Header=BB73_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB73_139:                             # %cond.end347
                                        #   in Loop: Header=BB73_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB73_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB73_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB73_145
.LBB73_141:                             # %cond.false352
                                        #   in Loop: Header=BB73_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB73_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB73_144
.LBB73_143:                             # %cond.false357
                                        #   in Loop: Header=BB73_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB73_144:                             # %cond.end359
                                        #   in Loop: Header=BB73_135 Depth=1
.LBB73_145:                             # %cond.end361
                                        #   in Loop: Header=BB73_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB73_146:                             # %for.cond363
                                        #   Parent Loop BB73_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB73_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB73_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB73_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB73_150
.LBB73_149:                             # %cond.false371
                                        #   in Loop: Header=BB73_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB73_150:                             # %cond.end373
                                        #   in Loop: Header=BB73_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB73_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB73_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB73_156
.LBB73_152:                             # %cond.false378
                                        #   in Loop: Header=BB73_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB73_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB73_155
.LBB73_154:                             # %cond.false383
                                        #   in Loop: Header=BB73_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB73_155:                             # %cond.end385
                                        #   in Loop: Header=BB73_146 Depth=2
.LBB73_156:                             # %cond.end387
                                        #   in Loop: Header=BB73_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB73_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_146
.LBB73_158:                             # %for.end401
                                        #   in Loop: Header=BB73_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB73_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB73_135
.LBB73_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB73_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB73_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB73_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB73_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB73_161
.LBB73_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB73_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB73_167
.LBB73_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB73_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB73_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB73_173
.LBB73_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB73_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB73_172
.LBB73_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB73_172:                             # %cond.end449
.LBB73_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB73_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB73_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB73_177
.LBB73_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB73_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB73_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB73_183
.LBB73_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB73_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB73_182
.LBB73_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB73_182:                             # %cond.end486
.LBB73_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB73_196
.LBB73_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB73_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB73_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB73_188
.LBB73_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB73_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB73_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB73_194
.LBB73_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB73_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB73_193
.LBB73_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB73_193:                             # %cond.end526
.LBB73_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB73_195:                             # %if.end532
	jmp	.LBB73_196
.LBB73_196:                             # %if.end533
	jmp	.LBB73_329
.LBB73_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB73_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB73_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB73_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB73_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB73_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB73_203
.LBB73_202:                             # %cond.false546
                                        #   in Loop: Header=BB73_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB73_203:                             # %cond.end548
                                        #   in Loop: Header=BB73_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB73_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB73_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB73_209
.LBB73_205:                             # %cond.false553
                                        #   in Loop: Header=BB73_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB73_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB73_208
.LBB73_207:                             # %cond.false558
                                        #   in Loop: Header=BB73_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB73_208:                             # %cond.end560
                                        #   in Loop: Header=BB73_199 Depth=1
.LBB73_209:                             # %cond.end562
                                        #   in Loop: Header=BB73_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB73_210:                             # %for.cond564
                                        #   Parent Loop BB73_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB73_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB73_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB73_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB73_214
.LBB73_213:                             # %cond.false572
                                        #   in Loop: Header=BB73_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB73_214:                             # %cond.end574
                                        #   in Loop: Header=BB73_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB73_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB73_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB73_220
.LBB73_216:                             # %cond.false579
                                        #   in Loop: Header=BB73_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB73_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB73_219
.LBB73_218:                             # %cond.false584
                                        #   in Loop: Header=BB73_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB73_219:                             # %cond.end586
                                        #   in Loop: Header=BB73_210 Depth=2
.LBB73_220:                             # %cond.end588
                                        #   in Loop: Header=BB73_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB73_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB73_210
.LBB73_222:                             # %for.end602
                                        #   in Loop: Header=BB73_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB73_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_199
.LBB73_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB73_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB73_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB73_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB73_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_225
.LBB73_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB73_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB73_231
.LBB73_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB73_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB73_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB73_237
.LBB73_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB73_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB73_236
.LBB73_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB73_236:                             # %cond.end650
.LBB73_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB73_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB73_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB73_241
.LBB73_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB73_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB73_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB73_247
.LBB73_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB73_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB73_246
.LBB73_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB73_246:                             # %cond.end687
.LBB73_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB73_258
.LBB73_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB73_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB73_251
.LBB73_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB73_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB73_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB73_257
.LBB73_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB73_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB73_256
.LBB73_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB73_256:                             # %cond.end724
.LBB73_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB73_258:                             # %if.end730
	jmp	.LBB73_328
.LBB73_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB73_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB73_262
.LBB73_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB73_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB73_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB73_265
.LBB73_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB73_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB73_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB73_271
.LBB73_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB73_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB73_270
.LBB73_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB73_270:                             # %cond.end753
.LBB73_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB73_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB73_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB73_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB73_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB73_276
.LBB73_275:                             # %cond.false765
                                        #   in Loop: Header=BB73_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB73_276:                             # %cond.end767
                                        #   in Loop: Header=BB73_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB73_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB73_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB73_282
.LBB73_278:                             # %cond.false772
                                        #   in Loop: Header=BB73_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB73_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB73_281
.LBB73_280:                             # %cond.false777
                                        #   in Loop: Header=BB73_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB73_281:                             # %cond.end779
                                        #   in Loop: Header=BB73_272 Depth=1
.LBB73_282:                             # %cond.end781
                                        #   in Loop: Header=BB73_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB73_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_272
.LBB73_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB73_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB73_287
.LBB73_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB73_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB73_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB73_293
.LBB73_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB73_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB73_292
.LBB73_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB73_292:                             # %cond.end822
.LBB73_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB73_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB73_296
.LBB73_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB73_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB73_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB73_299
.LBB73_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB73_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB73_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB73_305
.LBB73_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB73_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB73_304
.LBB73_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB73_304:                             # %cond.end847
.LBB73_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB73_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB73_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB73_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB73_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB73_310
.LBB73_309:                             # %cond.false859
                                        #   in Loop: Header=BB73_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB73_310:                             # %cond.end861
                                        #   in Loop: Header=BB73_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB73_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB73_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB73_316
.LBB73_312:                             # %cond.false866
                                        #   in Loop: Header=BB73_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB73_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB73_315
.LBB73_314:                             # %cond.false871
                                        #   in Loop: Header=BB73_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB73_315:                             # %cond.end873
                                        #   in Loop: Header=BB73_306 Depth=1
.LBB73_316:                             # %cond.end875
                                        #   in Loop: Header=BB73_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB73_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB73_306
.LBB73_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB73_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB73_321
.LBB73_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB73_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB73_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB73_327
.LBB73_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB73_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB73_326
.LBB73_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB73_326:                             # %cond.end916
.LBB73_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-108(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB73_328:                             # %if.end922
	jmp	.LBB73_329
.LBB73_329:                             # %if.end923
	jmp	.LBB73_330
.LBB73_330:                             # %if.end924
	jmp	.LBB73_331
.LBB73_331:                             # %if.end925
	jmp	.LBB73_332
.LBB73_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$2076805409, -100(%rbp) # imm = 0x7BC98921
	jne	.LBB73_334
.LBB73_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_333
.Lfunc_end73:
	.size	Get_Reference_Pixel.63, .Lfunc_end73-Get_Reference_Pixel.63
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.64    # -- Begin function Error_Concealment.64
	.p2align	4, 0x90
	.type	Error_Concealment.64,@function
Error_Concealment.64:                   # @Error_Concealment.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$858408345, -20(%rbp)   # imm = 0x332A4599
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB74_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB74_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -4(%rbp)
.LBB74_3:                               # %for.cond2
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB74_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB74_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB74_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB74_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB74_6:                               # %if.end
                                        #   in Loop: Header=BB74_3 Depth=2
	jmp	.LBB74_7
.LBB74_7:                               # %for.inc
                                        #   in Loop: Header=BB74_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_3
.LBB74_8:                               # %for.end
                                        #   in Loop: Header=BB74_1 Depth=1
	jmp	.LBB74_9
.LBB74_9:                               # %for.inc7
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_1
.LBB74_10:                              # %for.end9
	cmpl	$858408345, -20(%rbp)   # imm = 0x332A4599
	jne	.LBB74_12
.LBB74_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_11
.Lfunc_end74:
	.size	Error_Concealment.64, .Lfunc_end74-Error_Concealment.64
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.65        # -- Begin function Conceal_Error.65
	.p2align	4, 0x90
	.type	Conceal_Error.65,@function
Conceal_Error.65:                       # @Conceal_Error.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$832774135, -68(%rbp)   # imm = 0x31A31FF7
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB75_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB75_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB75_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB75_4:                               # %land.end
.LBB75_5:                               # %lor.end
.LBB75_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB75_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB75_9
.LBB75_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB75_14
.LBB75_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB75_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB75_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB75_12:                              # %land.end51
.LBB75_13:                              # %lor.end53
.LBB75_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB75_180
# %bb.15:                               # %land.end54
	movq	.LJTI75_0(,%rax,8), %rax
	jmpq	*%rax
.LBB75_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB75_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB75_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB75_18 Depth=1
	movl	$0, -4(%rbp)
.LBB75_20:                              # %for.cond68
                                        #   Parent Loop BB75_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB75_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB75_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_20
.LBB75_23:                              # %for.end
                                        #   in Loop: Header=BB75_18 Depth=1
	jmp	.LBB75_24
.LBB75_24:                              # %for.inc85
                                        #   in Loop: Header=BB75_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_18
.LBB75_25:                              # %for.end87
	jmp	.LBB75_35
.LBB75_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB75_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB75_27 Depth=1
	movl	$0, -4(%rbp)
.LBB75_29:                              # %for.cond92
                                        #   Parent Loop BB75_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB75_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB75_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_29
.LBB75_32:                              # %for.end104
                                        #   in Loop: Header=BB75_27 Depth=1
	jmp	.LBB75_33
.LBB75_33:                              # %for.inc105
                                        #   in Loop: Header=BB75_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_27
.LBB75_34:                              # %for.end107
	jmp	.LBB75_35
.LBB75_35:                              # %if.end
	jmp	.LBB75_180
.LBB75_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB75_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_39 Depth 2
                                        #       Child Loop BB75_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB75_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB75_37 Depth=1
	movl	$0, -16(%rbp)
.LBB75_39:                              # %for.cond113
                                        #   Parent Loop BB75_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB75_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB75_39 Depth=2
	movl	$0, -4(%rbp)
.LBB75_41:                              # %for.cond117
                                        #   Parent Loop BB75_37 Depth=1
                                        #     Parent Loop BB75_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB75_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB75_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB75_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_41
.LBB75_44:                              # %for.end141
                                        #   in Loop: Header=BB75_39 Depth=2
	jmp	.LBB75_45
.LBB75_45:                              # %for.inc142
                                        #   in Loop: Header=BB75_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_39
.LBB75_46:                              # %for.end144
                                        #   in Loop: Header=BB75_37 Depth=1
	jmp	.LBB75_47
.LBB75_47:                              # %for.inc145
                                        #   in Loop: Header=BB75_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_37
.LBB75_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB75_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB75_49 Depth=1
	movl	$0, -8(%rbp)
.LBB75_51:                              # %for.cond152
                                        #   Parent Loop BB75_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB75_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB75_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_51
.LBB75_54:                              # %for.end162
                                        #   in Loop: Header=BB75_49 Depth=1
	jmp	.LBB75_55
.LBB75_55:                              # %for.inc163
                                        #   in Loop: Header=BB75_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_49
.LBB75_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB75_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB75_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB75_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB75_59 Depth=1
	movl	$0, -4(%rbp)
.LBB75_61:                              # %for.cond175
                                        #   Parent Loop BB75_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB75_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB75_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_61
.LBB75_64:                              # %for.end195
                                        #   in Loop: Header=BB75_59 Depth=1
	jmp	.LBB75_65
.LBB75_65:                              # %for.inc196
                                        #   in Loop: Header=BB75_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_59
.LBB75_66:                              # %for.end198
	jmp	.LBB75_95
.LBB75_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB75_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB75_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_71 Depth 2
                                        #       Child Loop BB75_73 Depth 3
                                        #         Child Loop BB75_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB75_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB75_71:                              # %for.cond210
                                        #   Parent Loop BB75_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_73 Depth 3
                                        #         Child Loop BB75_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB75_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB75_73:                              # %for.cond236
                                        #   Parent Loop BB75_69 Depth=1
                                        #     Parent Loop BB75_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB75_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB75_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB75_73 Depth=3
	movl	$0, -4(%rbp)
.LBB75_75:                              # %for.cond240
                                        #   Parent Loop BB75_69 Depth=1
                                        #     Parent Loop BB75_71 Depth=2
                                        #       Parent Loop BB75_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB75_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB75_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB75_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_75
.LBB75_78:                              # %for.end259
                                        #   in Loop: Header=BB75_73 Depth=3
	jmp	.LBB75_79
.LBB75_79:                              # %for.inc260
                                        #   in Loop: Header=BB75_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_73
.LBB75_80:                              # %for.end262
                                        #   in Loop: Header=BB75_71 Depth=2
	jmp	.LBB75_81
.LBB75_81:                              # %for.inc263
                                        #   in Loop: Header=BB75_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_71
.LBB75_82:                              # %for.end265
                                        #   in Loop: Header=BB75_69 Depth=1
	jmp	.LBB75_83
.LBB75_83:                              # %for.inc266
                                        #   in Loop: Header=BB75_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_69
.LBB75_84:                              # %for.end268
	jmp	.LBB75_94
.LBB75_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB75_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB75_86 Depth=1
	movl	$0, -4(%rbp)
.LBB75_88:                              # %for.cond274
                                        #   Parent Loop BB75_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB75_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB75_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_88
.LBB75_91:                              # %for.end294
                                        #   in Loop: Header=BB75_86 Depth=1
	jmp	.LBB75_92
.LBB75_92:                              # %for.inc295
                                        #   in Loop: Header=BB75_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_86
.LBB75_93:                              # %for.end297
	jmp	.LBB75_94
.LBB75_94:                              # %if.end298
	jmp	.LBB75_95
.LBB75_95:                              # %if.end299
	jmp	.LBB75_105
.LBB75_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB75_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB75_97 Depth=1
	movl	$0, -4(%rbp)
.LBB75_99:                              # %for.cond305
                                        #   Parent Loop BB75_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB75_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB75_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_99
.LBB75_102:                             # %for.end317
                                        #   in Loop: Header=BB75_97 Depth=1
	jmp	.LBB75_103
.LBB75_103:                             # %for.inc318
                                        #   in Loop: Header=BB75_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_97
.LBB75_104:                             # %for.end320
	jmp	.LBB75_105
.LBB75_105:                             # %if.end321
	jmp	.LBB75_180
.LBB75_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB75_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB75_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_110 Depth 2
                                        #       Child Loop BB75_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB75_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB75_108 Depth=1
	movl	$0, -16(%rbp)
.LBB75_110:                             # %for.cond331
                                        #   Parent Loop BB75_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB75_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB75_110 Depth=2
	movl	$0, -4(%rbp)
.LBB75_112:                             # %for.cond335
                                        #   Parent Loop BB75_108 Depth=1
                                        #     Parent Loop BB75_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB75_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB75_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB75_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_112
.LBB75_115:                             # %for.end359
                                        #   in Loop: Header=BB75_110 Depth=2
	jmp	.LBB75_116
.LBB75_116:                             # %for.inc360
                                        #   in Loop: Header=BB75_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_110
.LBB75_117:                             # %for.end362
                                        #   in Loop: Header=BB75_108 Depth=1
	jmp	.LBB75_118
.LBB75_118:                             # %for.inc363
                                        #   in Loop: Header=BB75_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_108
.LBB75_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB75_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB75_120 Depth=1
	movl	$0, -8(%rbp)
.LBB75_122:                             # %for.cond370
                                        #   Parent Loop BB75_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB75_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB75_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_122
.LBB75_125:                             # %for.end380
                                        #   in Loop: Header=BB75_120 Depth=1
	jmp	.LBB75_126
.LBB75_126:                             # %for.inc381
                                        #   in Loop: Header=BB75_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_120
.LBB75_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB75_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB75_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB75_129 Depth=1
	movl	$0, -4(%rbp)
.LBB75_131:                             # %for.cond390
                                        #   Parent Loop BB75_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB75_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB75_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_131
.LBB75_134:                             # %for.end410
                                        #   in Loop: Header=BB75_129 Depth=1
	jmp	.LBB75_135
.LBB75_135:                             # %for.inc411
                                        #   in Loop: Header=BB75_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_129
.LBB75_136:                             # %for.end413
	jmp	.LBB75_156
.LBB75_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB75_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB75_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_141 Depth 2
                                        #       Child Loop BB75_143 Depth 3
                                        #         Child Loop BB75_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB75_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB75_141:                             # %for.cond425
                                        #   Parent Loop BB75_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_143 Depth 3
                                        #         Child Loop BB75_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB75_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB75_143:                             # %for.cond452
                                        #   Parent Loop BB75_139 Depth=1
                                        #     Parent Loop BB75_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB75_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB75_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB75_143 Depth=3
	movl	$0, -4(%rbp)
.LBB75_145:                             # %for.cond456
                                        #   Parent Loop BB75_139 Depth=1
                                        #     Parent Loop BB75_141 Depth=2
                                        #       Parent Loop BB75_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB75_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB75_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB75_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_145
.LBB75_148:                             # %for.end475
                                        #   in Loop: Header=BB75_143 Depth=3
	jmp	.LBB75_149
.LBB75_149:                             # %for.inc476
                                        #   in Loop: Header=BB75_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_143
.LBB75_150:                             # %for.end478
                                        #   in Loop: Header=BB75_141 Depth=2
	jmp	.LBB75_151
.LBB75_151:                             # %for.inc479
                                        #   in Loop: Header=BB75_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_141
.LBB75_152:                             # %for.end481
                                        #   in Loop: Header=BB75_139 Depth=1
	jmp	.LBB75_153
.LBB75_153:                             # %for.inc482
                                        #   in Loop: Header=BB75_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_139
.LBB75_154:                             # %for.end484
	jmp	.LBB75_155
.LBB75_155:                             # %if.end485
	jmp	.LBB75_156
.LBB75_156:                             # %if.end486
	jmp	.LBB75_157
.LBB75_157:                             # %if.end487
	jmp	.LBB75_180
.LBB75_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB75_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB75_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB75_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB75_161 Depth=1
	movl	$0, -4(%rbp)
.LBB75_163:                             # %for.cond499
                                        #   Parent Loop BB75_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB75_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB75_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_163
.LBB75_166:                             # %for.end519
                                        #   in Loop: Header=BB75_161 Depth=1
	jmp	.LBB75_167
.LBB75_167:                             # %for.inc520
                                        #   in Loop: Header=BB75_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_161
.LBB75_168:                             # %for.end522
	jmp	.LBB75_169
.LBB75_169:                             # %if.end523
	jmp	.LBB75_179
.LBB75_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB75_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB75_171 Depth=1
	movl	$0, -4(%rbp)
.LBB75_173:                             # %for.cond529
                                        #   Parent Loop BB75_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB75_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB75_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_173
.LBB75_176:                             # %for.end541
                                        #   in Loop: Header=BB75_171 Depth=1
	jmp	.LBB75_177
.LBB75_177:                             # %for.inc542
                                        #   in Loop: Header=BB75_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_171
.LBB75_178:                             # %for.end544
	jmp	.LBB75_179
.LBB75_179:                             # %if.end545
	jmp	.LBB75_180
.LBB75_180:                             # %sw.epilog
	cmpl	$832774135, -68(%rbp)   # imm = 0x31A31FF7
	jne	.LBB75_182
.LBB75_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_181
.Lfunc_end75:
	.size	Conceal_Error.65, .Lfunc_end75-Conceal_Error.65
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI75_0:
	.quad	.LBB75_16
	.quad	.LBB75_158
	.quad	.LBB75_106
	.quad	.LBB75_180
	.quad	.LBB75_36
                                        # -- End function
	.text
	.globl	Get_Reference_Pixel.66  # -- Begin function Get_Reference_Pixel.66
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.66,@function
Get_Reference_Pixel.66:                 # @Get_Reference_Pixel.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1276980181, -108(%rbp) # imm = 0x4C1D2BD5
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB76_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB76_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB76_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB76_5
.LBB76_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB76_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB76_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB76_11
.LBB76_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB76_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB76_10
.LBB76_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB76_10:                              # %cond.end14
.LBB76_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB76_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB76_14
.LBB76_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB76_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB76_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB76_20
.LBB76_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB76_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB76_19
.LBB76_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB76_19:                              # %cond.end29
.LBB76_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_332
.LBB76_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB76_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB76_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB76_25
.LBB76_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB76_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB76_31
.LBB76_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB76_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB76_30
.LBB76_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB76_30:                              # %cond.end52
.LBB76_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB76_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB76_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB76_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB76_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB76_36
.LBB76_35:                              # %cond.false61
                                        #   in Loop: Header=BB76_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB76_36:                              # %cond.end63
                                        #   in Loop: Header=BB76_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB76_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB76_42
.LBB76_38:                              # %cond.false68
                                        #   in Loop: Header=BB76_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB76_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB76_41
.LBB76_40:                              # %cond.false73
                                        #   in Loop: Header=BB76_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB76_41:                              # %cond.end75
                                        #   in Loop: Header=BB76_32 Depth=1
.LBB76_42:                              # %cond.end77
                                        #   in Loop: Header=BB76_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB76_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB76_32
.LBB76_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB76_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_47
.LBB76_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB76_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB76_53
.LBB76_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB76_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_52
.LBB76_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB76_52:                              # %cond.end113
.LBB76_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB76_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB76_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB76_57
.LBB76_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB76_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB76_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB76_63
.LBB76_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB76_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB76_62
.LBB76_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB76_62:                              # %cond.end136
.LBB76_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB76_76
.LBB76_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB76_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB76_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB76_68
.LBB76_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB76_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB76_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB76_74
.LBB76_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB76_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB76_73
.LBB76_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB76_73:                              # %cond.end169
.LBB76_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB76_75:                              # %if.end
	jmp	.LBB76_76
.LBB76_76:                              # %if.end178
	jmp	.LBB76_331
.LBB76_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB76_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB76_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB76_81
.LBB76_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB76_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB76_87
.LBB76_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB76_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB76_86
.LBB76_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB76_86:                              # %cond.end197
.LBB76_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB76_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB76_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB76_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB76_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB76_92
.LBB76_91:                              # %cond.false209
                                        #   in Loop: Header=BB76_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB76_92:                              # %cond.end211
                                        #   in Loop: Header=BB76_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB76_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB76_98
.LBB76_94:                              # %cond.false216
                                        #   in Loop: Header=BB76_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB76_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB76_97
.LBB76_96:                              # %cond.false221
                                        #   in Loop: Header=BB76_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB76_97:                              # %cond.end223
                                        #   in Loop: Header=BB76_88 Depth=1
.LBB76_98:                              # %cond.end225
                                        #   in Loop: Header=BB76_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB76_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_88
.LBB76_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB76_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_103
.LBB76_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB76_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB76_109
.LBB76_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB76_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_108
.LBB76_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB76_108:                             # %cond.end266
.LBB76_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB76_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB76_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB76_113
.LBB76_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB76_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB76_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB76_119
.LBB76_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB76_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB76_118
.LBB76_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB76_118:                             # %cond.end287
.LBB76_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB76_132
.LBB76_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB76_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB76_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB76_124
.LBB76_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB76_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB76_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB76_130
.LBB76_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB76_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB76_129
.LBB76_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB76_129:                             # %cond.end320
.LBB76_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB76_131:                             # %if.end331
	jmp	.LBB76_132
.LBB76_132:                             # %if.end332
	jmp	.LBB76_330
.LBB76_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB76_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB76_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB76_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB76_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB76_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB76_139
.LBB76_138:                             # %cond.false345
                                        #   in Loop: Header=BB76_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB76_139:                             # %cond.end347
                                        #   in Loop: Header=BB76_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB76_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB76_145
.LBB76_141:                             # %cond.false352
                                        #   in Loop: Header=BB76_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB76_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB76_144
.LBB76_143:                             # %cond.false357
                                        #   in Loop: Header=BB76_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB76_144:                             # %cond.end359
                                        #   in Loop: Header=BB76_135 Depth=1
.LBB76_145:                             # %cond.end361
                                        #   in Loop: Header=BB76_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB76_146:                             # %for.cond363
                                        #   Parent Loop BB76_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB76_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB76_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB76_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB76_150
.LBB76_149:                             # %cond.false371
                                        #   in Loop: Header=BB76_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB76_150:                             # %cond.end373
                                        #   in Loop: Header=BB76_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB76_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB76_156
.LBB76_152:                             # %cond.false378
                                        #   in Loop: Header=BB76_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB76_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB76_155
.LBB76_154:                             # %cond.false383
                                        #   in Loop: Header=BB76_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB76_155:                             # %cond.end385
                                        #   in Loop: Header=BB76_146 Depth=2
.LBB76_156:                             # %cond.end387
                                        #   in Loop: Header=BB76_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB76_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB76_146
.LBB76_158:                             # %for.end401
                                        #   in Loop: Header=BB76_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB76_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_135
.LBB76_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB76_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB76_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB76_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB76_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_161
.LBB76_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB76_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_167
.LBB76_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB76_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB76_173
.LBB76_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB76_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_172
.LBB76_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB76_172:                             # %cond.end449
.LBB76_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB76_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB76_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_177
.LBB76_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB76_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB76_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB76_183
.LBB76_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB76_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_182
.LBB76_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB76_182:                             # %cond.end486
.LBB76_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB76_196
.LBB76_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB76_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB76_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_188
.LBB76_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB76_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB76_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB76_194
.LBB76_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB76_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_193
.LBB76_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB76_193:                             # %cond.end526
.LBB76_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB76_195:                             # %if.end532
	jmp	.LBB76_196
.LBB76_196:                             # %if.end533
	jmp	.LBB76_329
.LBB76_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB76_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB76_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB76_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB76_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB76_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB76_203
.LBB76_202:                             # %cond.false546
                                        #   in Loop: Header=BB76_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB76_203:                             # %cond.end548
                                        #   in Loop: Header=BB76_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB76_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB76_209
.LBB76_205:                             # %cond.false553
                                        #   in Loop: Header=BB76_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB76_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB76_208
.LBB76_207:                             # %cond.false558
                                        #   in Loop: Header=BB76_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB76_208:                             # %cond.end560
                                        #   in Loop: Header=BB76_199 Depth=1
.LBB76_209:                             # %cond.end562
                                        #   in Loop: Header=BB76_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB76_210:                             # %for.cond564
                                        #   Parent Loop BB76_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB76_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB76_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB76_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB76_214
.LBB76_213:                             # %cond.false572
                                        #   in Loop: Header=BB76_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB76_214:                             # %cond.end574
                                        #   in Loop: Header=BB76_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB76_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB76_220
.LBB76_216:                             # %cond.false579
                                        #   in Loop: Header=BB76_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB76_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB76_219
.LBB76_218:                             # %cond.false584
                                        #   in Loop: Header=BB76_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB76_219:                             # %cond.end586
                                        #   in Loop: Header=BB76_210 Depth=2
.LBB76_220:                             # %cond.end588
                                        #   in Loop: Header=BB76_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB76_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_210
.LBB76_222:                             # %for.end602
                                        #   in Loop: Header=BB76_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB76_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB76_199
.LBB76_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB76_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB76_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB76_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB76_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB76_225
.LBB76_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB76_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_231
.LBB76_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB76_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB76_237
.LBB76_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB76_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_236
.LBB76_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB76_236:                             # %cond.end650
.LBB76_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB76_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB76_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_241
.LBB76_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB76_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB76_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB76_247
.LBB76_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB76_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_246
.LBB76_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB76_246:                             # %cond.end687
.LBB76_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB76_258
.LBB76_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB76_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_251
.LBB76_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB76_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB76_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB76_257
.LBB76_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB76_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_256
.LBB76_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB76_256:                             # %cond.end724
.LBB76_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB76_258:                             # %if.end730
	jmp	.LBB76_328
.LBB76_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB76_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB76_262
.LBB76_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB76_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB76_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB76_265
.LBB76_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB76_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB76_271
.LBB76_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB76_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB76_270
.LBB76_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB76_270:                             # %cond.end753
.LBB76_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB76_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB76_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB76_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB76_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB76_276
.LBB76_275:                             # %cond.false765
                                        #   in Loop: Header=BB76_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB76_276:                             # %cond.end767
                                        #   in Loop: Header=BB76_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB76_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB76_282
.LBB76_278:                             # %cond.false772
                                        #   in Loop: Header=BB76_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB76_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB76_281
.LBB76_280:                             # %cond.false777
                                        #   in Loop: Header=BB76_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB76_281:                             # %cond.end779
                                        #   in Loop: Header=BB76_272 Depth=1
.LBB76_282:                             # %cond.end781
                                        #   in Loop: Header=BB76_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB76_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB76_272
.LBB76_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB76_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_287
.LBB76_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB76_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB76_293
.LBB76_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB76_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_292
.LBB76_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB76_292:                             # %cond.end822
.LBB76_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB76_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB76_296
.LBB76_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB76_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB76_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB76_299
.LBB76_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB76_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB76_305
.LBB76_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB76_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB76_304
.LBB76_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB76_304:                             # %cond.end847
.LBB76_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB76_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB76_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB76_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB76_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB76_310
.LBB76_309:                             # %cond.false859
                                        #   in Loop: Header=BB76_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB76_310:                             # %cond.end861
                                        #   in Loop: Header=BB76_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB76_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB76_316
.LBB76_312:                             # %cond.false866
                                        #   in Loop: Header=BB76_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB76_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB76_315
.LBB76_314:                             # %cond.false871
                                        #   in Loop: Header=BB76_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB76_315:                             # %cond.end873
                                        #   in Loop: Header=BB76_306 Depth=1
.LBB76_316:                             # %cond.end875
                                        #   in Loop: Header=BB76_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB76_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_306
.LBB76_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB76_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_321
.LBB76_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB76_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB76_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB76_327
.LBB76_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB76_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_326
.LBB76_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB76_326:                             # %cond.end916
.LBB76_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-100(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB76_328:                             # %if.end922
	jmp	.LBB76_329
.LBB76_329:                             # %if.end923
	jmp	.LBB76_330
.LBB76_330:                             # %if.end924
	jmp	.LBB76_331
.LBB76_331:                             # %if.end925
	jmp	.LBB76_332
.LBB76_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1276980181, -108(%rbp) # imm = 0x4C1D2BD5
	jne	.LBB76_334
.LBB76_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_333
.Lfunc_end76:
	.size	Get_Reference_Pixel.66, .Lfunc_end76-Get_Reference_Pixel.66
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.67   # -- Begin function decode_one_b8block.67
	.p2align	4, 0x90
	.type	decode_one_b8block.67,@function
decode_one_b8block.67:                  # @decode_one_b8block.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$647252102, -84(%rbp)   # imm = 0x26944886
	movl	%edi, -40(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB77_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB77_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB77_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB77_4:                               # %for.cond9
                                        #   Parent Loop BB77_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB77_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB77_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB77_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_4
.LBB77_7:                               # %for.end
                                        #   in Loop: Header=BB77_2 Depth=1
	jmp	.LBB77_8
.LBB77_8:                               # %for.inc26
                                        #   in Loop: Header=BB77_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_2
.LBB77_9:                               # %for.end28
	jmp	.LBB77_96
.LBB77_10:                              # %if.else
	cmpl	$0, -80(%rbp)
	jne	.LBB77_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB77_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB77_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB77_31
.LBB77_14:                              # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB77_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB77_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB77_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB77_17:                              # %for.cond40
                                        #   Parent Loop BB77_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB77_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB77_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB77_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_17
.LBB77_20:                              # %for.end49
                                        #   in Loop: Header=BB77_15 Depth=1
	jmp	.LBB77_21
.LBB77_21:                              # %for.inc50
                                        #   in Loop: Header=BB77_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_15
.LBB77_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB77_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB77_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB77_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB77_25:                              # %for.cond56
                                        #   Parent Loop BB77_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB77_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB77_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB77_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_25
.LBB77_28:                              # %for.end71
                                        #   in Loop: Header=BB77_23 Depth=1
	jmp	.LBB77_29
.LBB77_29:                              # %for.inc72
                                        #   in Loop: Header=BB77_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_23
.LBB77_30:                              # %for.end74
	jmp	.LBB77_60
.LBB77_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB77_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB77_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB77_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB77_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB77_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB77_36:                              # %for.cond83
                                        #   Parent Loop BB77_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB77_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB77_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB77_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_36
.LBB77_39:                              # %for.end120
                                        #   in Loop: Header=BB77_34 Depth=1
	jmp	.LBB77_40
.LBB77_40:                              # %for.inc121
                                        #   in Loop: Header=BB77_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_34
.LBB77_41:                              # %for.end123
	jmp	.LBB77_51
.LBB77_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB77_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB77_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB77_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB77_45:                              # %for.cond129
                                        #   Parent Loop BB77_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB77_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB77_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB77_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_45
.LBB77_48:                              # %for.end145
                                        #   in Loop: Header=BB77_43 Depth=1
	jmp	.LBB77_49
.LBB77_49:                              # %for.inc146
                                        #   in Loop: Header=BB77_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_43
.LBB77_50:                              # %for.end148
	jmp	.LBB77_51
.LBB77_51:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB77_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB77_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB77_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB77_54:                              # %for.cond153
                                        #   Parent Loop BB77_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB77_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB77_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB77_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_54
.LBB77_57:                              # %for.end167
                                        #   in Loop: Header=BB77_52 Depth=1
	jmp	.LBB77_58
.LBB77_58:                              # %for.inc168
                                        #   in Loop: Header=BB77_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_52
.LBB77_59:                              # %for.end170
	jmp	.LBB77_60
.LBB77_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB77_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB77_66
.LBB77_62:                              # %lor.lhs.false177
	cmpl	$0, -80(%rbp)
	jne	.LBB77_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB77_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB77_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB77_86
.LBB77_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB77_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_69 Depth 2
                                        #       Child Loop BB77_74 Depth 3
                                        #         Child Loop BB77_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB77_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB77_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB77_69:                              # %for.cond197
                                        #   Parent Loop BB77_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_74 Depth 3
                                        #         Child Loop BB77_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB77_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB77_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB77_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB77_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB77_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB77_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
.LBB77_73:                              # %if.end218
                                        #   in Loop: Header=BB77_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-76(%rbp), %esi
	movl	-68(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB77_74:                              # %for.cond233
                                        #   Parent Loop BB77_67 Depth=1
                                        #     Parent Loop BB77_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB77_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB77_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB77_74 Depth=3
	movl	$0, -4(%rbp)
.LBB77_76:                              # %for.cond237
                                        #   Parent Loop BB77_67 Depth=1
                                        #     Parent Loop BB77_69 Depth=2
                                        #       Parent Loop BB77_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB77_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB77_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB77_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_76
.LBB77_79:                              # %for.end269
                                        #   in Loop: Header=BB77_74 Depth=3
	jmp	.LBB77_80
.LBB77_80:                              # %for.inc270
                                        #   in Loop: Header=BB77_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_74
.LBB77_81:                              # %for.end272
                                        #   in Loop: Header=BB77_69 Depth=2
	jmp	.LBB77_82
.LBB77_82:                              # %for.inc273
                                        #   in Loop: Header=BB77_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_69
.LBB77_83:                              # %for.end275
                                        #   in Loop: Header=BB77_67 Depth=1
	jmp	.LBB77_84
.LBB77_84:                              # %for.inc276
                                        #   in Loop: Header=BB77_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_67
.LBB77_85:                              # %for.end278
	jmp	.LBB77_95
.LBB77_86:                              # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB77_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB77_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB77_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB77_89:                              # %for.cond284
                                        #   Parent Loop BB77_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB77_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB77_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB77_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_89
.LBB77_92:                              # %for.end310
                                        #   in Loop: Header=BB77_87 Depth=1
	jmp	.LBB77_93
.LBB77_93:                              # %for.inc311
                                        #   in Loop: Header=BB77_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_87
.LBB77_94:                              # %for.end313
	jmp	.LBB77_95
.LBB77_95:                              # %if.end314
	jmp	.LBB77_96
.LBB77_96:                              # %if.end315
	cmpl	$647252102, -84(%rbp)   # imm = 0x26944886
	jne	.LBB77_98
.LBB77_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_97
.Lfunc_end77:
	.size	decode_one_b8block.67, .Lfunc_end77-decode_one_b8block.67
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.68  # -- Begin function Get_Reference_Pixel.68
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.68,@function
Get_Reference_Pixel.68:                 # @Get_Reference_Pixel.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1278907077, -100(%rbp) # imm = 0x4C3A92C5
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB78_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB78_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB78_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB78_5
.LBB78_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB78_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB78_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB78_11
.LBB78_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB78_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB78_10
.LBB78_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB78_10:                              # %cond.end14
.LBB78_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB78_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB78_14
.LBB78_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB78_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB78_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB78_20
.LBB78_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB78_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB78_19
.LBB78_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB78_19:                              # %cond.end29
.LBB78_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB78_332
.LBB78_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB78_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB78_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB78_25
.LBB78_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB78_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB78_31
.LBB78_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB78_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB78_30
.LBB78_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB78_30:                              # %cond.end52
.LBB78_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB78_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB78_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB78_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB78_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB78_36
.LBB78_35:                              # %cond.false61
                                        #   in Loop: Header=BB78_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB78_36:                              # %cond.end63
                                        #   in Loop: Header=BB78_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB78_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB78_42
.LBB78_38:                              # %cond.false68
                                        #   in Loop: Header=BB78_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB78_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB78_41
.LBB78_40:                              # %cond.false73
                                        #   in Loop: Header=BB78_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB78_41:                              # %cond.end75
                                        #   in Loop: Header=BB78_32 Depth=1
.LBB78_42:                              # %cond.end77
                                        #   in Loop: Header=BB78_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB78_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_32
.LBB78_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB78_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_47
.LBB78_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB78_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB78_53
.LBB78_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB78_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_52
.LBB78_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB78_52:                              # %cond.end113
.LBB78_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB78_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB78_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB78_57
.LBB78_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB78_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB78_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB78_63
.LBB78_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB78_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB78_62
.LBB78_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB78_62:                              # %cond.end136
.LBB78_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB78_76
.LBB78_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB78_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB78_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB78_68
.LBB78_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB78_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB78_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB78_74
.LBB78_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB78_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB78_73
.LBB78_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB78_73:                              # %cond.end169
.LBB78_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB78_75:                              # %if.end
	jmp	.LBB78_76
.LBB78_76:                              # %if.end178
	jmp	.LBB78_331
.LBB78_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB78_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB78_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB78_81
.LBB78_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB78_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB78_87
.LBB78_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB78_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB78_86
.LBB78_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB78_86:                              # %cond.end197
.LBB78_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB78_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB78_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB78_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB78_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB78_92
.LBB78_91:                              # %cond.false209
                                        #   in Loop: Header=BB78_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB78_92:                              # %cond.end211
                                        #   in Loop: Header=BB78_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB78_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB78_98
.LBB78_94:                              # %cond.false216
                                        #   in Loop: Header=BB78_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB78_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB78_97
.LBB78_96:                              # %cond.false221
                                        #   in Loop: Header=BB78_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB78_97:                              # %cond.end223
                                        #   in Loop: Header=BB78_88 Depth=1
.LBB78_98:                              # %cond.end225
                                        #   in Loop: Header=BB78_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB78_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB78_88
.LBB78_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB78_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_103
.LBB78_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB78_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB78_109
.LBB78_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB78_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_108
.LBB78_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB78_108:                             # %cond.end266
.LBB78_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB78_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB78_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB78_113
.LBB78_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB78_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB78_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB78_119
.LBB78_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB78_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB78_118
.LBB78_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB78_118:                             # %cond.end287
.LBB78_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB78_132
.LBB78_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB78_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB78_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB78_124
.LBB78_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB78_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB78_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB78_130
.LBB78_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB78_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB78_129
.LBB78_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB78_129:                             # %cond.end320
.LBB78_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB78_131:                             # %if.end331
	jmp	.LBB78_132
.LBB78_132:                             # %if.end332
	jmp	.LBB78_330
.LBB78_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB78_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB78_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB78_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB78_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB78_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB78_139
.LBB78_138:                             # %cond.false345
                                        #   in Loop: Header=BB78_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB78_139:                             # %cond.end347
                                        #   in Loop: Header=BB78_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB78_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB78_145
.LBB78_141:                             # %cond.false352
                                        #   in Loop: Header=BB78_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB78_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB78_144
.LBB78_143:                             # %cond.false357
                                        #   in Loop: Header=BB78_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB78_144:                             # %cond.end359
                                        #   in Loop: Header=BB78_135 Depth=1
.LBB78_145:                             # %cond.end361
                                        #   in Loop: Header=BB78_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB78_146:                             # %for.cond363
                                        #   Parent Loop BB78_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB78_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB78_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB78_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB78_150
.LBB78_149:                             # %cond.false371
                                        #   in Loop: Header=BB78_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB78_150:                             # %cond.end373
                                        #   in Loop: Header=BB78_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB78_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB78_156
.LBB78_152:                             # %cond.false378
                                        #   in Loop: Header=BB78_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB78_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB78_155
.LBB78_154:                             # %cond.false383
                                        #   in Loop: Header=BB78_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB78_155:                             # %cond.end385
                                        #   in Loop: Header=BB78_146 Depth=2
.LBB78_156:                             # %cond.end387
                                        #   in Loop: Header=BB78_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB78_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_146
.LBB78_158:                             # %for.end401
                                        #   in Loop: Header=BB78_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB78_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB78_135
.LBB78_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB78_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB78_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB78_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB78_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB78_161
.LBB78_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB78_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_167
.LBB78_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB78_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB78_173
.LBB78_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB78_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_172
.LBB78_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB78_172:                             # %cond.end449
.LBB78_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB78_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB78_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_177
.LBB78_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB78_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB78_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB78_183
.LBB78_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB78_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_182
.LBB78_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB78_182:                             # %cond.end486
.LBB78_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB78_196
.LBB78_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB78_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB78_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_188
.LBB78_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB78_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB78_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB78_194
.LBB78_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB78_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_193
.LBB78_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB78_193:                             # %cond.end526
.LBB78_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB78_195:                             # %if.end532
	jmp	.LBB78_196
.LBB78_196:                             # %if.end533
	jmp	.LBB78_329
.LBB78_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB78_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB78_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB78_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB78_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB78_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB78_203
.LBB78_202:                             # %cond.false546
                                        #   in Loop: Header=BB78_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB78_203:                             # %cond.end548
                                        #   in Loop: Header=BB78_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB78_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB78_209
.LBB78_205:                             # %cond.false553
                                        #   in Loop: Header=BB78_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB78_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB78_208
.LBB78_207:                             # %cond.false558
                                        #   in Loop: Header=BB78_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB78_208:                             # %cond.end560
                                        #   in Loop: Header=BB78_199 Depth=1
.LBB78_209:                             # %cond.end562
                                        #   in Loop: Header=BB78_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB78_210:                             # %for.cond564
                                        #   Parent Loop BB78_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB78_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB78_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB78_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB78_214
.LBB78_213:                             # %cond.false572
                                        #   in Loop: Header=BB78_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB78_214:                             # %cond.end574
                                        #   in Loop: Header=BB78_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB78_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB78_220
.LBB78_216:                             # %cond.false579
                                        #   in Loop: Header=BB78_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB78_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB78_219
.LBB78_218:                             # %cond.false584
                                        #   in Loop: Header=BB78_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB78_219:                             # %cond.end586
                                        #   in Loop: Header=BB78_210 Depth=2
.LBB78_220:                             # %cond.end588
                                        #   in Loop: Header=BB78_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB78_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB78_210
.LBB78_222:                             # %for.end602
                                        #   in Loop: Header=BB78_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB78_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_199
.LBB78_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB78_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB78_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB78_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB78_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_225
.LBB78_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB78_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_231
.LBB78_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB78_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB78_237
.LBB78_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB78_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_236
.LBB78_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB78_236:                             # %cond.end650
.LBB78_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB78_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB78_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_241
.LBB78_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB78_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB78_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB78_247
.LBB78_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB78_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_246
.LBB78_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB78_246:                             # %cond.end687
.LBB78_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB78_258
.LBB78_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB78_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_251
.LBB78_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB78_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB78_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB78_257
.LBB78_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB78_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_256
.LBB78_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB78_256:                             # %cond.end724
.LBB78_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB78_258:                             # %if.end730
	jmp	.LBB78_328
.LBB78_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB78_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB78_262
.LBB78_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB78_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB78_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB78_265
.LBB78_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB78_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB78_271
.LBB78_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB78_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB78_270
.LBB78_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB78_270:                             # %cond.end753
.LBB78_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB78_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB78_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB78_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB78_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB78_276
.LBB78_275:                             # %cond.false765
                                        #   in Loop: Header=BB78_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB78_276:                             # %cond.end767
                                        #   in Loop: Header=BB78_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB78_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB78_282
.LBB78_278:                             # %cond.false772
                                        #   in Loop: Header=BB78_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB78_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB78_281
.LBB78_280:                             # %cond.false777
                                        #   in Loop: Header=BB78_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB78_281:                             # %cond.end779
                                        #   in Loop: Header=BB78_272 Depth=1
.LBB78_282:                             # %cond.end781
                                        #   in Loop: Header=BB78_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB78_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_272
.LBB78_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB78_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_287
.LBB78_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB78_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB78_293
.LBB78_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB78_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_292
.LBB78_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB78_292:                             # %cond.end822
.LBB78_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB78_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB78_296
.LBB78_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB78_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB78_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB78_299
.LBB78_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB78_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB78_305
.LBB78_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB78_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB78_304
.LBB78_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB78_304:                             # %cond.end847
.LBB78_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB78_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB78_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB78_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB78_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB78_310
.LBB78_309:                             # %cond.false859
                                        #   in Loop: Header=BB78_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB78_310:                             # %cond.end861
                                        #   in Loop: Header=BB78_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB78_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB78_316
.LBB78_312:                             # %cond.false866
                                        #   in Loop: Header=BB78_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB78_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB78_315
.LBB78_314:                             # %cond.false871
                                        #   in Loop: Header=BB78_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB78_315:                             # %cond.end873
                                        #   in Loop: Header=BB78_306 Depth=1
.LBB78_316:                             # %cond.end875
                                        #   in Loop: Header=BB78_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB78_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB78_306
.LBB78_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB78_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_321
.LBB78_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB78_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB78_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB78_327
.LBB78_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB78_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_326
.LBB78_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB78_326:                             # %cond.end916
.LBB78_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-104(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB78_328:                             # %if.end922
	jmp	.LBB78_329
.LBB78_329:                             # %if.end923
	jmp	.LBB78_330
.LBB78_330:                             # %if.end924
	jmp	.LBB78_331
.LBB78_331:                             # %if.end925
	jmp	.LBB78_332
.LBB78_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1278907077, -100(%rbp) # imm = 0x4C3A92C5
	jne	.LBB78_334
.LBB78_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_333
.Lfunc_end78:
	.size	Get_Reference_Pixel.68, .Lfunc_end78-Get_Reference_Pixel.68
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.69
.LCPI79_0:
	.quad	4636737291354636288     # double 100
.LCPI79_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.69
	.p2align	4, 0x90
	.type	Build_Status_Map.69,@function
Build_Status_Map.69:                    # @Build_Status_Map.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1476910540, -36(%rbp)  # imm = 0x5807DDCC
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB79_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB79_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB79_1 Depth=1
	movl	$0, -8(%rbp)
.LBB79_3:                               # %for.cond2
                                        #   Parent Loop BB79_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB79_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB79_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB79_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB79_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB79_13
.LBB79_6:                               # %if.then
                                        #   in Loop: Header=BB79_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI79_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI79_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB79_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB79_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB79_8:                               # %if.end
                                        #   in Loop: Header=BB79_3 Depth=2
	callq	rand
	vmovsd	.LCPI79_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI79_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB79_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB79_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB79_10:                              # %if.end20
                                        #   in Loop: Header=BB79_3 Depth=2
	callq	rand
	vmovsd	.LCPI79_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI79_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB79_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB79_3 Depth=2
	movl	$1, -4(%rbp)
.LBB79_12:                              # %if.end29
                                        #   in Loop: Header=BB79_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB79_13:                              # %if.end30
                                        #   in Loop: Header=BB79_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB79_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB79_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB79_18
.LBB79_15:                              # %if.else
                                        #   in Loop: Header=BB79_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB79_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB79_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB79_17:                              # %if.end49
                                        #   in Loop: Header=BB79_3 Depth=2
	jmp	.LBB79_18
.LBB79_18:                              # %if.end50
                                        #   in Loop: Header=BB79_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB79_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_3
.LBB79_20:                              # %for.end
                                        #   in Loop: Header=BB79_1 Depth=1
	jmp	.LBB79_21
.LBB79_21:                              # %for.inc53
                                        #   in Loop: Header=BB79_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_1
.LBB79_22:                              # %for.end55
	cmpl	$1476910540, -36(%rbp)  # imm = 0x5807DDCC
	jne	.LBB79_24
.LBB79_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_23
.Lfunc_end79:
	.size	Build_Status_Map.69, .Lfunc_end79-Build_Status_Map.69
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.70
.LCPI80_0:
	.quad	4636737291354636288     # double 100
.LCPI80_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.70
	.p2align	4, 0x90
	.type	Build_Status_Map.70,@function
Build_Status_Map.70:                    # @Build_Status_Map.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$729595869, -36(%rbp)   # imm = 0x2B7CBFDD
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB80_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB80_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -12(%rbp)
.LBB80_3:                               # %for.cond2
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB80_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB80_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB80_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB80_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB80_13
.LBB80_6:                               # %if.then
                                        #   in Loop: Header=BB80_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI80_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI80_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB80_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB80_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB80_8:                               # %if.end
                                        #   in Loop: Header=BB80_3 Depth=2
	callq	rand
	vmovsd	.LCPI80_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI80_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB80_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB80_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB80_10:                              # %if.end20
                                        #   in Loop: Header=BB80_3 Depth=2
	callq	rand
	vmovsd	.LCPI80_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI80_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB80_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB80_3 Depth=2
	movl	$1, -4(%rbp)
.LBB80_12:                              # %if.end29
                                        #   in Loop: Header=BB80_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB80_13:                              # %if.end30
                                        #   in Loop: Header=BB80_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB80_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB80_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB80_18
.LBB80_15:                              # %if.else
                                        #   in Loop: Header=BB80_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB80_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB80_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB80_17:                              # %if.end49
                                        #   in Loop: Header=BB80_3 Depth=2
	jmp	.LBB80_18
.LBB80_18:                              # %if.end50
                                        #   in Loop: Header=BB80_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB80_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_3
.LBB80_20:                              # %for.end
                                        #   in Loop: Header=BB80_1 Depth=1
	jmp	.LBB80_21
.LBB80_21:                              # %for.inc53
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_1
.LBB80_22:                              # %for.end55
	cmpl	$729595869, -36(%rbp)   # imm = 0x2B7CBFDD
	jne	.LBB80_24
.LBB80_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_23
.Lfunc_end80:
	.size	Build_Status_Map.70, .Lfunc_end80-Build_Status_Map.70
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.71 # -- Begin function compute_residue_b8block.71
	.p2align	4, 0x90
	.type	compute_residue_b8block.71,@function
compute_residue_b8block.71:             # @compute_residue_b8block.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1470170641, -36(%rbp)  # imm = 0x57A10611
	movl	%edi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB81_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB81_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB81_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB81_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB81_4:                               # %for.cond4
                                        #   Parent Loop BB81_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB81_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB81_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB81_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_4
.LBB81_7:                               # %for.end
                                        #   in Loop: Header=BB81_2 Depth=1
	jmp	.LBB81_8
.LBB81_8:                               # %for.inc22
                                        #   in Loop: Header=BB81_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_2
.LBB81_9:                               # %for.end24
	jmp	.LBB81_19
.LBB81_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB81_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB81_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB81_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB81_13:                              # %for.cond29
                                        #   Parent Loop BB81_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB81_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB81_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB81_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_13
.LBB81_16:                              # %for.end56
                                        #   in Loop: Header=BB81_11 Depth=1
	jmp	.LBB81_17
.LBB81_17:                              # %for.inc57
                                        #   in Loop: Header=BB81_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_11
.LBB81_18:                              # %for.end59
	jmp	.LBB81_19
.LBB81_19:                              # %if.end
	cmpl	$1470170641, -36(%rbp)  # imm = 0x57A10611
	jne	.LBB81_21
.LBB81_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_20
.Lfunc_end81:
	.size	compute_residue_b8block.71, .Lfunc_end81-compute_residue_b8block.71
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.72       # -- Begin function DecOneForthPix.72
	.p2align	4, 0x90
	.type	DecOneForthPix.72,@function
DecOneForthPix.72:                      # @DecOneForthPix.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$307290436, -12(%rbp)   # imm = 0x1250E144
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB82_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB82_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB82_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB82_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_1
.LBB82_4:                               # %for.end
	cmpl	$307290436, -12(%rbp)   # imm = 0x1250E144
	jne	.LBB82_6
.LBB82_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_5
.Lfunc_end82:
	.size	DecOneForthPix.72, .Lfunc_end82-DecOneForthPix.72
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.73  # -- Begin function Get_Reference_Pixel.73
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.73,@function
Get_Reference_Pixel.73:                 # @Get_Reference_Pixel.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$433321958, -100(%rbp)  # imm = 0x19D3F7E6
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB83_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB83_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB83_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB83_5
.LBB83_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB83_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB83_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB83_11
.LBB83_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB83_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB83_10
.LBB83_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB83_10:                              # %cond.end14
.LBB83_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB83_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB83_14
.LBB83_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB83_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB83_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB83_20
.LBB83_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB83_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB83_19
.LBB83_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB83_19:                              # %cond.end29
.LBB83_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_332
.LBB83_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB83_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB83_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB83_25
.LBB83_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB83_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB83_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB83_31
.LBB83_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB83_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB83_30
.LBB83_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB83_30:                              # %cond.end52
.LBB83_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB83_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB83_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB83_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB83_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB83_36
.LBB83_35:                              # %cond.false61
                                        #   in Loop: Header=BB83_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB83_36:                              # %cond.end63
                                        #   in Loop: Header=BB83_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB83_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB83_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB83_42
.LBB83_38:                              # %cond.false68
                                        #   in Loop: Header=BB83_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB83_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB83_41
.LBB83_40:                              # %cond.false73
                                        #   in Loop: Header=BB83_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB83_41:                              # %cond.end75
                                        #   in Loop: Header=BB83_32 Depth=1
.LBB83_42:                              # %cond.end77
                                        #   in Loop: Header=BB83_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB83_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB83_32
.LBB83_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB83_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB83_47
.LBB83_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB83_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB83_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB83_53
.LBB83_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB83_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB83_52
.LBB83_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB83_52:                              # %cond.end113
.LBB83_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB83_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB83_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB83_57
.LBB83_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB83_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB83_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB83_63
.LBB83_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB83_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB83_62
.LBB83_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB83_62:                              # %cond.end136
.LBB83_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB83_76
.LBB83_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB83_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB83_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB83_68
.LBB83_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB83_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB83_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB83_74
.LBB83_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB83_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB83_73
.LBB83_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB83_73:                              # %cond.end169
.LBB83_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB83_75:                              # %if.end
	jmp	.LBB83_76
.LBB83_76:                              # %if.end178
	jmp	.LBB83_331
.LBB83_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB83_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB83_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB83_81
.LBB83_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB83_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB83_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB83_87
.LBB83_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB83_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB83_86
.LBB83_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB83_86:                              # %cond.end197
.LBB83_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB83_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB83_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB83_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB83_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB83_92
.LBB83_91:                              # %cond.false209
                                        #   in Loop: Header=BB83_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB83_92:                              # %cond.end211
                                        #   in Loop: Header=BB83_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB83_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB83_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB83_98
.LBB83_94:                              # %cond.false216
                                        #   in Loop: Header=BB83_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB83_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB83_97
.LBB83_96:                              # %cond.false221
                                        #   in Loop: Header=BB83_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB83_97:                              # %cond.end223
                                        #   in Loop: Header=BB83_88 Depth=1
.LBB83_98:                              # %cond.end225
                                        #   in Loop: Header=BB83_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB83_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_88
.LBB83_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB83_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB83_103
.LBB83_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB83_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB83_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB83_109
.LBB83_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB83_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB83_108
.LBB83_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB83_108:                             # %cond.end266
.LBB83_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB83_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB83_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB83_113
.LBB83_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB83_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB83_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB83_119
.LBB83_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB83_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB83_118
.LBB83_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB83_118:                             # %cond.end287
.LBB83_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB83_132
.LBB83_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB83_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB83_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB83_124
.LBB83_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB83_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB83_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB83_130
.LBB83_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB83_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB83_129
.LBB83_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB83_129:                             # %cond.end320
.LBB83_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB83_131:                             # %if.end331
	jmp	.LBB83_132
.LBB83_132:                             # %if.end332
	jmp	.LBB83_330
.LBB83_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB83_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB83_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB83_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB83_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB83_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB83_139
.LBB83_138:                             # %cond.false345
                                        #   in Loop: Header=BB83_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB83_139:                             # %cond.end347
                                        #   in Loop: Header=BB83_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB83_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB83_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB83_145
.LBB83_141:                             # %cond.false352
                                        #   in Loop: Header=BB83_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB83_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB83_144
.LBB83_143:                             # %cond.false357
                                        #   in Loop: Header=BB83_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB83_144:                             # %cond.end359
                                        #   in Loop: Header=BB83_135 Depth=1
.LBB83_145:                             # %cond.end361
                                        #   in Loop: Header=BB83_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB83_146:                             # %for.cond363
                                        #   Parent Loop BB83_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB83_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB83_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB83_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB83_150
.LBB83_149:                             # %cond.false371
                                        #   in Loop: Header=BB83_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB83_150:                             # %cond.end373
                                        #   in Loop: Header=BB83_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB83_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB83_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB83_156
.LBB83_152:                             # %cond.false378
                                        #   in Loop: Header=BB83_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB83_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB83_155
.LBB83_154:                             # %cond.false383
                                        #   in Loop: Header=BB83_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB83_155:                             # %cond.end385
                                        #   in Loop: Header=BB83_146 Depth=2
.LBB83_156:                             # %cond.end387
                                        #   in Loop: Header=BB83_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB83_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB83_146
.LBB83_158:                             # %for.end401
                                        #   in Loop: Header=BB83_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB83_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_135
.LBB83_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB83_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB83_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB83_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB83_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_161
.LBB83_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB83_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB83_167
.LBB83_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB83_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB83_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB83_173
.LBB83_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB83_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB83_172
.LBB83_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB83_172:                             # %cond.end449
.LBB83_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB83_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB83_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB83_177
.LBB83_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB83_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB83_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB83_183
.LBB83_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB83_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB83_182
.LBB83_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB83_182:                             # %cond.end486
.LBB83_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB83_196
.LBB83_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB83_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB83_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB83_188
.LBB83_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB83_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB83_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB83_194
.LBB83_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB83_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB83_193
.LBB83_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB83_193:                             # %cond.end526
.LBB83_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB83_195:                             # %if.end532
	jmp	.LBB83_196
.LBB83_196:                             # %if.end533
	jmp	.LBB83_329
.LBB83_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB83_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB83_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB83_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB83_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB83_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB83_203
.LBB83_202:                             # %cond.false546
                                        #   in Loop: Header=BB83_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB83_203:                             # %cond.end548
                                        #   in Loop: Header=BB83_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB83_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB83_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB83_209
.LBB83_205:                             # %cond.false553
                                        #   in Loop: Header=BB83_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB83_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB83_208
.LBB83_207:                             # %cond.false558
                                        #   in Loop: Header=BB83_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB83_208:                             # %cond.end560
                                        #   in Loop: Header=BB83_199 Depth=1
.LBB83_209:                             # %cond.end562
                                        #   in Loop: Header=BB83_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB83_210:                             # %for.cond564
                                        #   Parent Loop BB83_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB83_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB83_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB83_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB83_214
.LBB83_213:                             # %cond.false572
                                        #   in Loop: Header=BB83_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB83_214:                             # %cond.end574
                                        #   in Loop: Header=BB83_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB83_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB83_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB83_220
.LBB83_216:                             # %cond.false579
                                        #   in Loop: Header=BB83_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB83_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB83_219
.LBB83_218:                             # %cond.false584
                                        #   in Loop: Header=BB83_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB83_219:                             # %cond.end586
                                        #   in Loop: Header=BB83_210 Depth=2
.LBB83_220:                             # %cond.end588
                                        #   in Loop: Header=BB83_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB83_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_210
.LBB83_222:                             # %for.end602
                                        #   in Loop: Header=BB83_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB83_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB83_199
.LBB83_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB83_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB83_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB83_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB83_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB83_225
.LBB83_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB83_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB83_231
.LBB83_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB83_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB83_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB83_237
.LBB83_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB83_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB83_236
.LBB83_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB83_236:                             # %cond.end650
.LBB83_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB83_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB83_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB83_241
.LBB83_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB83_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB83_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB83_247
.LBB83_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB83_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB83_246
.LBB83_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB83_246:                             # %cond.end687
.LBB83_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB83_258
.LBB83_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB83_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB83_251
.LBB83_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB83_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB83_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB83_257
.LBB83_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB83_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB83_256
.LBB83_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB83_256:                             # %cond.end724
.LBB83_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB83_258:                             # %if.end730
	jmp	.LBB83_328
.LBB83_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB83_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB83_262
.LBB83_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB83_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB83_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB83_265
.LBB83_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB83_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB83_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB83_271
.LBB83_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB83_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB83_270
.LBB83_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB83_270:                             # %cond.end753
.LBB83_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB83_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB83_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB83_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB83_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB83_276
.LBB83_275:                             # %cond.false765
                                        #   in Loop: Header=BB83_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB83_276:                             # %cond.end767
                                        #   in Loop: Header=BB83_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB83_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB83_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB83_282
.LBB83_278:                             # %cond.false772
                                        #   in Loop: Header=BB83_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB83_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB83_281
.LBB83_280:                             # %cond.false777
                                        #   in Loop: Header=BB83_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB83_281:                             # %cond.end779
                                        #   in Loop: Header=BB83_272 Depth=1
.LBB83_282:                             # %cond.end781
                                        #   in Loop: Header=BB83_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB83_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB83_272
.LBB83_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB83_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB83_287
.LBB83_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB83_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB83_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB83_293
.LBB83_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB83_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB83_292
.LBB83_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB83_292:                             # %cond.end822
.LBB83_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB83_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB83_296
.LBB83_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB83_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB83_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB83_299
.LBB83_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB83_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB83_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB83_305
.LBB83_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB83_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB83_304
.LBB83_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB83_304:                             # %cond.end847
.LBB83_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB83_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB83_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB83_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB83_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB83_310
.LBB83_309:                             # %cond.false859
                                        #   in Loop: Header=BB83_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB83_310:                             # %cond.end861
                                        #   in Loop: Header=BB83_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB83_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB83_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB83_316
.LBB83_312:                             # %cond.false866
                                        #   in Loop: Header=BB83_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB83_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB83_315
.LBB83_314:                             # %cond.false871
                                        #   in Loop: Header=BB83_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB83_315:                             # %cond.end873
                                        #   in Loop: Header=BB83_306 Depth=1
.LBB83_316:                             # %cond.end875
                                        #   in Loop: Header=BB83_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB83_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_306
.LBB83_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB83_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB83_321
.LBB83_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB83_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB83_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB83_327
.LBB83_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB83_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB83_326
.LBB83_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB83_326:                             # %cond.end916
.LBB83_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-108(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB83_328:                             # %if.end922
	jmp	.LBB83_329
.LBB83_329:                             # %if.end923
	jmp	.LBB83_330
.LBB83_330:                             # %if.end924
	jmp	.LBB83_331
.LBB83_331:                             # %if.end925
	jmp	.LBB83_332
.LBB83_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$433321958, -100(%rbp)  # imm = 0x19D3F7E6
	jne	.LBB83_334
.LBB83_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_333
.Lfunc_end83:
	.size	Get_Reference_Pixel.73, .Lfunc_end83-Get_Reference_Pixel.73
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.74        # -- Begin function Conceal_Error.74
	.p2align	4, 0x90
	.type	Conceal_Error.74,@function
Conceal_Error.74:                       # @Conceal_Error.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$967729632, -68(%rbp)   # imm = 0x39AE61E0
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB84_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB84_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB84_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB84_4:                               # %land.end
.LBB84_5:                               # %lor.end
.LBB84_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB84_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB84_9
.LBB84_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB84_14
.LBB84_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB84_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB84_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB84_12:                              # %land.end51
.LBB84_13:                              # %lor.end53
.LBB84_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB84_180
# %bb.15:                               # %land.end54
	movq	.LJTI84_0(,%rax,8), %rax
	jmpq	*%rax
.LBB84_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB84_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB84_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB84_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB84_18 Depth=1
	movl	$0, -4(%rbp)
.LBB84_20:                              # %for.cond68
                                        #   Parent Loop BB84_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB84_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB84_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB84_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_20
.LBB84_23:                              # %for.end
                                        #   in Loop: Header=BB84_18 Depth=1
	jmp	.LBB84_24
.LBB84_24:                              # %for.inc85
                                        #   in Loop: Header=BB84_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_18
.LBB84_25:                              # %for.end87
	jmp	.LBB84_35
.LBB84_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB84_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB84_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB84_27 Depth=1
	movl	$0, -4(%rbp)
.LBB84_29:                              # %for.cond92
                                        #   Parent Loop BB84_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB84_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB84_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB84_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_29
.LBB84_32:                              # %for.end104
                                        #   in Loop: Header=BB84_27 Depth=1
	jmp	.LBB84_33
.LBB84_33:                              # %for.inc105
                                        #   in Loop: Header=BB84_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_27
.LBB84_34:                              # %for.end107
	jmp	.LBB84_35
.LBB84_35:                              # %if.end
	jmp	.LBB84_180
.LBB84_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB84_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_39 Depth 2
                                        #       Child Loop BB84_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB84_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB84_37 Depth=1
	movl	$0, -12(%rbp)
.LBB84_39:                              # %for.cond113
                                        #   Parent Loop BB84_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB84_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB84_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB84_39 Depth=2
	movl	$0, -4(%rbp)
.LBB84_41:                              # %for.cond117
                                        #   Parent Loop BB84_37 Depth=1
                                        #     Parent Loop BB84_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB84_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB84_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB84_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_41
.LBB84_44:                              # %for.end141
                                        #   in Loop: Header=BB84_39 Depth=2
	jmp	.LBB84_45
.LBB84_45:                              # %for.inc142
                                        #   in Loop: Header=BB84_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_39
.LBB84_46:                              # %for.end144
                                        #   in Loop: Header=BB84_37 Depth=1
	jmp	.LBB84_47
.LBB84_47:                              # %for.inc145
                                        #   in Loop: Header=BB84_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_37
.LBB84_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB84_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB84_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB84_49 Depth=1
	movl	$0, -8(%rbp)
.LBB84_51:                              # %for.cond152
                                        #   Parent Loop BB84_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB84_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB84_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB84_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_51
.LBB84_54:                              # %for.end162
                                        #   in Loop: Header=BB84_49 Depth=1
	jmp	.LBB84_55
.LBB84_55:                              # %for.inc163
                                        #   in Loop: Header=BB84_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_49
.LBB84_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB84_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB84_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB84_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB84_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB84_59 Depth=1
	movl	$0, -4(%rbp)
.LBB84_61:                              # %for.cond175
                                        #   Parent Loop BB84_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB84_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB84_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB84_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_61
.LBB84_64:                              # %for.end195
                                        #   in Loop: Header=BB84_59 Depth=1
	jmp	.LBB84_65
.LBB84_65:                              # %for.inc196
                                        #   in Loop: Header=BB84_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_59
.LBB84_66:                              # %for.end198
	jmp	.LBB84_95
.LBB84_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB84_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB84_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_71 Depth 2
                                        #       Child Loop BB84_73 Depth 3
                                        #         Child Loop BB84_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB84_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB84_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB84_71:                              # %for.cond210
                                        #   Parent Loop BB84_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB84_73 Depth 3
                                        #         Child Loop BB84_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB84_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB84_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB84_73:                              # %for.cond236
                                        #   Parent Loop BB84_69 Depth=1
                                        #     Parent Loop BB84_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB84_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB84_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB84_73 Depth=3
	movl	$0, -4(%rbp)
.LBB84_75:                              # %for.cond240
                                        #   Parent Loop BB84_69 Depth=1
                                        #     Parent Loop BB84_71 Depth=2
                                        #       Parent Loop BB84_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB84_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB84_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB84_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_75
.LBB84_78:                              # %for.end259
                                        #   in Loop: Header=BB84_73 Depth=3
	jmp	.LBB84_79
.LBB84_79:                              # %for.inc260
                                        #   in Loop: Header=BB84_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_73
.LBB84_80:                              # %for.end262
                                        #   in Loop: Header=BB84_71 Depth=2
	jmp	.LBB84_81
.LBB84_81:                              # %for.inc263
                                        #   in Loop: Header=BB84_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_71
.LBB84_82:                              # %for.end265
                                        #   in Loop: Header=BB84_69 Depth=1
	jmp	.LBB84_83
.LBB84_83:                              # %for.inc266
                                        #   in Loop: Header=BB84_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_69
.LBB84_84:                              # %for.end268
	jmp	.LBB84_94
.LBB84_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB84_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB84_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB84_86 Depth=1
	movl	$0, -4(%rbp)
.LBB84_88:                              # %for.cond274
                                        #   Parent Loop BB84_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB84_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB84_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB84_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_88
.LBB84_91:                              # %for.end294
                                        #   in Loop: Header=BB84_86 Depth=1
	jmp	.LBB84_92
.LBB84_92:                              # %for.inc295
                                        #   in Loop: Header=BB84_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_86
.LBB84_93:                              # %for.end297
	jmp	.LBB84_94
.LBB84_94:                              # %if.end298
	jmp	.LBB84_95
.LBB84_95:                              # %if.end299
	jmp	.LBB84_105
.LBB84_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB84_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB84_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB84_97 Depth=1
	movl	$0, -4(%rbp)
.LBB84_99:                              # %for.cond305
                                        #   Parent Loop BB84_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB84_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB84_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB84_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_99
.LBB84_102:                             # %for.end317
                                        #   in Loop: Header=BB84_97 Depth=1
	jmp	.LBB84_103
.LBB84_103:                             # %for.inc318
                                        #   in Loop: Header=BB84_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_97
.LBB84_104:                             # %for.end320
	jmp	.LBB84_105
.LBB84_105:                             # %if.end321
	jmp	.LBB84_180
.LBB84_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB84_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB84_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_110 Depth 2
                                        #       Child Loop BB84_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB84_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB84_108 Depth=1
	movl	$0, -12(%rbp)
.LBB84_110:                             # %for.cond331
                                        #   Parent Loop BB84_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB84_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB84_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB84_110 Depth=2
	movl	$0, -4(%rbp)
.LBB84_112:                             # %for.cond335
                                        #   Parent Loop BB84_108 Depth=1
                                        #     Parent Loop BB84_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB84_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB84_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB84_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_112
.LBB84_115:                             # %for.end359
                                        #   in Loop: Header=BB84_110 Depth=2
	jmp	.LBB84_116
.LBB84_116:                             # %for.inc360
                                        #   in Loop: Header=BB84_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_110
.LBB84_117:                             # %for.end362
                                        #   in Loop: Header=BB84_108 Depth=1
	jmp	.LBB84_118
.LBB84_118:                             # %for.inc363
                                        #   in Loop: Header=BB84_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_108
.LBB84_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB84_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB84_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB84_120 Depth=1
	movl	$0, -8(%rbp)
.LBB84_122:                             # %for.cond370
                                        #   Parent Loop BB84_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB84_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB84_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB84_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_122
.LBB84_125:                             # %for.end380
                                        #   in Loop: Header=BB84_120 Depth=1
	jmp	.LBB84_126
.LBB84_126:                             # %for.inc381
                                        #   in Loop: Header=BB84_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_120
.LBB84_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB84_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB84_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB84_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB84_129 Depth=1
	movl	$0, -4(%rbp)
.LBB84_131:                             # %for.cond390
                                        #   Parent Loop BB84_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB84_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB84_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB84_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_131
.LBB84_134:                             # %for.end410
                                        #   in Loop: Header=BB84_129 Depth=1
	jmp	.LBB84_135
.LBB84_135:                             # %for.inc411
                                        #   in Loop: Header=BB84_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_129
.LBB84_136:                             # %for.end413
	jmp	.LBB84_156
.LBB84_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB84_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB84_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_141 Depth 2
                                        #       Child Loop BB84_143 Depth 3
                                        #         Child Loop BB84_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB84_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB84_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB84_141:                             # %for.cond425
                                        #   Parent Loop BB84_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB84_143 Depth 3
                                        #         Child Loop BB84_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB84_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB84_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB84_143:                             # %for.cond452
                                        #   Parent Loop BB84_139 Depth=1
                                        #     Parent Loop BB84_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB84_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB84_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB84_143 Depth=3
	movl	$0, -4(%rbp)
.LBB84_145:                             # %for.cond456
                                        #   Parent Loop BB84_139 Depth=1
                                        #     Parent Loop BB84_141 Depth=2
                                        #       Parent Loop BB84_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB84_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB84_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB84_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_145
.LBB84_148:                             # %for.end475
                                        #   in Loop: Header=BB84_143 Depth=3
	jmp	.LBB84_149
.LBB84_149:                             # %for.inc476
                                        #   in Loop: Header=BB84_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_143
.LBB84_150:                             # %for.end478
                                        #   in Loop: Header=BB84_141 Depth=2
	jmp	.LBB84_151
.LBB84_151:                             # %for.inc479
                                        #   in Loop: Header=BB84_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_141
.LBB84_152:                             # %for.end481
                                        #   in Loop: Header=BB84_139 Depth=1
	jmp	.LBB84_153
.LBB84_153:                             # %for.inc482
                                        #   in Loop: Header=BB84_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_139
.LBB84_154:                             # %for.end484
	jmp	.LBB84_155
.LBB84_155:                             # %if.end485
	jmp	.LBB84_156
.LBB84_156:                             # %if.end486
	jmp	.LBB84_157
.LBB84_157:                             # %if.end487
	jmp	.LBB84_180
.LBB84_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB84_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB84_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB84_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB84_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB84_161 Depth=1
	movl	$0, -4(%rbp)
.LBB84_163:                             # %for.cond499
                                        #   Parent Loop BB84_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB84_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB84_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB84_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_163
.LBB84_166:                             # %for.end519
                                        #   in Loop: Header=BB84_161 Depth=1
	jmp	.LBB84_167
.LBB84_167:                             # %for.inc520
                                        #   in Loop: Header=BB84_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_161
.LBB84_168:                             # %for.end522
	jmp	.LBB84_169
.LBB84_169:                             # %if.end523
	jmp	.LBB84_179
.LBB84_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB84_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB84_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB84_171 Depth=1
	movl	$0, -4(%rbp)
.LBB84_173:                             # %for.cond529
                                        #   Parent Loop BB84_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB84_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB84_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB84_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_173
.LBB84_176:                             # %for.end541
                                        #   in Loop: Header=BB84_171 Depth=1
	jmp	.LBB84_177
.LBB84_177:                             # %for.inc542
                                        #   in Loop: Header=BB84_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_171
.LBB84_178:                             # %for.end544
	jmp	.LBB84_179
.LBB84_179:                             # %if.end545
	jmp	.LBB84_180
.LBB84_180:                             # %sw.epilog
	cmpl	$967729632, -68(%rbp)   # imm = 0x39AE61E0
	jne	.LBB84_182
.LBB84_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_181
.Lfunc_end84:
	.size	Conceal_Error.74, .Lfunc_end84-Conceal_Error.74
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI84_0:
	.quad	.LBB84_16
	.quad	.LBB84_158
	.quad	.LBB84_106
	.quad	.LBB84_180
	.quad	.LBB84_36
                                        # -- End function
	.text
	.globl	Get_Reference_Pixel.75  # -- Begin function Get_Reference_Pixel.75
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.75,@function
Get_Reference_Pixel.75:                 # @Get_Reference_Pixel.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1231562178, -108(%rbp) # imm = 0x496825C2
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB85_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB85_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB85_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB85_5
.LBB85_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB85_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB85_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB85_11
.LBB85_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB85_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB85_10
.LBB85_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB85_10:                              # %cond.end14
.LBB85_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB85_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB85_14
.LBB85_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB85_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB85_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB85_20
.LBB85_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB85_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB85_19
.LBB85_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB85_19:                              # %cond.end29
.LBB85_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_332
.LBB85_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB85_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB85_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB85_25
.LBB85_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB85_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB85_31
.LBB85_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB85_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB85_30
.LBB85_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB85_30:                              # %cond.end52
.LBB85_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB85_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB85_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB85_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB85_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB85_36
.LBB85_35:                              # %cond.false61
                                        #   in Loop: Header=BB85_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB85_36:                              # %cond.end63
                                        #   in Loop: Header=BB85_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB85_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB85_42
.LBB85_38:                              # %cond.false68
                                        #   in Loop: Header=BB85_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB85_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB85_41
.LBB85_40:                              # %cond.false73
                                        #   in Loop: Header=BB85_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB85_41:                              # %cond.end75
                                        #   in Loop: Header=BB85_32 Depth=1
.LBB85_42:                              # %cond.end77
                                        #   in Loop: Header=BB85_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB85_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_32
.LBB85_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB85_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_47
.LBB85_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB85_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB85_53
.LBB85_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB85_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_52
.LBB85_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB85_52:                              # %cond.end113
.LBB85_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB85_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB85_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB85_57
.LBB85_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB85_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB85_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB85_63
.LBB85_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB85_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB85_62
.LBB85_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB85_62:                              # %cond.end136
.LBB85_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB85_76
.LBB85_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB85_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB85_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB85_68
.LBB85_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB85_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB85_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB85_74
.LBB85_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB85_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB85_73
.LBB85_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB85_73:                              # %cond.end169
.LBB85_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB85_75:                              # %if.end
	jmp	.LBB85_76
.LBB85_76:                              # %if.end178
	jmp	.LBB85_331
.LBB85_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB85_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB85_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB85_81
.LBB85_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB85_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB85_87
.LBB85_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB85_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB85_86
.LBB85_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB85_86:                              # %cond.end197
.LBB85_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB85_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB85_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB85_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB85_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB85_92
.LBB85_91:                              # %cond.false209
                                        #   in Loop: Header=BB85_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB85_92:                              # %cond.end211
                                        #   in Loop: Header=BB85_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB85_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB85_98
.LBB85_94:                              # %cond.false216
                                        #   in Loop: Header=BB85_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB85_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB85_97
.LBB85_96:                              # %cond.false221
                                        #   in Loop: Header=BB85_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB85_97:                              # %cond.end223
                                        #   in Loop: Header=BB85_88 Depth=1
.LBB85_98:                              # %cond.end225
                                        #   in Loop: Header=BB85_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB85_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_88
.LBB85_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB85_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_103
.LBB85_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB85_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB85_109
.LBB85_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB85_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_108
.LBB85_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB85_108:                             # %cond.end266
.LBB85_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB85_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB85_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB85_113
.LBB85_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB85_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB85_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB85_119
.LBB85_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB85_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB85_118
.LBB85_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB85_118:                             # %cond.end287
.LBB85_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB85_132
.LBB85_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB85_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB85_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB85_124
.LBB85_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB85_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB85_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB85_130
.LBB85_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB85_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB85_129
.LBB85_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB85_129:                             # %cond.end320
.LBB85_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB85_131:                             # %if.end331
	jmp	.LBB85_132
.LBB85_132:                             # %if.end332
	jmp	.LBB85_330
.LBB85_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB85_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB85_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB85_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB85_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB85_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB85_139
.LBB85_138:                             # %cond.false345
                                        #   in Loop: Header=BB85_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB85_139:                             # %cond.end347
                                        #   in Loop: Header=BB85_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB85_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB85_145
.LBB85_141:                             # %cond.false352
                                        #   in Loop: Header=BB85_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB85_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB85_144
.LBB85_143:                             # %cond.false357
                                        #   in Loop: Header=BB85_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB85_144:                             # %cond.end359
                                        #   in Loop: Header=BB85_135 Depth=1
.LBB85_145:                             # %cond.end361
                                        #   in Loop: Header=BB85_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB85_146:                             # %for.cond363
                                        #   Parent Loop BB85_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB85_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB85_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB85_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB85_150
.LBB85_149:                             # %cond.false371
                                        #   in Loop: Header=BB85_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB85_150:                             # %cond.end373
                                        #   in Loop: Header=BB85_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB85_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB85_156
.LBB85_152:                             # %cond.false378
                                        #   in Loop: Header=BB85_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB85_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB85_155
.LBB85_154:                             # %cond.false383
                                        #   in Loop: Header=BB85_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB85_155:                             # %cond.end385
                                        #   in Loop: Header=BB85_146 Depth=2
.LBB85_156:                             # %cond.end387
                                        #   in Loop: Header=BB85_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB85_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_146
.LBB85_158:                             # %for.end401
                                        #   in Loop: Header=BB85_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB85_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_135
.LBB85_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB85_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB85_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB85_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB85_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_161
.LBB85_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB85_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_167
.LBB85_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB85_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB85_173
.LBB85_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB85_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_172
.LBB85_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB85_172:                             # %cond.end449
.LBB85_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB85_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB85_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_177
.LBB85_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB85_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB85_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB85_183
.LBB85_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB85_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_182
.LBB85_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB85_182:                             # %cond.end486
.LBB85_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB85_196
.LBB85_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB85_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB85_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_188
.LBB85_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB85_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB85_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB85_194
.LBB85_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB85_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_193
.LBB85_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB85_193:                             # %cond.end526
.LBB85_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB85_195:                             # %if.end532
	jmp	.LBB85_196
.LBB85_196:                             # %if.end533
	jmp	.LBB85_329
.LBB85_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB85_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB85_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB85_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB85_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB85_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB85_203
.LBB85_202:                             # %cond.false546
                                        #   in Loop: Header=BB85_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB85_203:                             # %cond.end548
                                        #   in Loop: Header=BB85_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB85_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB85_209
.LBB85_205:                             # %cond.false553
                                        #   in Loop: Header=BB85_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB85_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB85_208
.LBB85_207:                             # %cond.false558
                                        #   in Loop: Header=BB85_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB85_208:                             # %cond.end560
                                        #   in Loop: Header=BB85_199 Depth=1
.LBB85_209:                             # %cond.end562
                                        #   in Loop: Header=BB85_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB85_210:                             # %for.cond564
                                        #   Parent Loop BB85_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB85_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB85_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB85_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB85_214
.LBB85_213:                             # %cond.false572
                                        #   in Loop: Header=BB85_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB85_214:                             # %cond.end574
                                        #   in Loop: Header=BB85_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB85_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB85_220
.LBB85_216:                             # %cond.false579
                                        #   in Loop: Header=BB85_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB85_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB85_219
.LBB85_218:                             # %cond.false584
                                        #   in Loop: Header=BB85_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB85_219:                             # %cond.end586
                                        #   in Loop: Header=BB85_210 Depth=2
.LBB85_220:                             # %cond.end588
                                        #   in Loop: Header=BB85_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB85_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_210
.LBB85_222:                             # %for.end602
                                        #   in Loop: Header=BB85_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB85_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_199
.LBB85_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB85_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB85_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB85_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB85_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_225
.LBB85_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB85_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_231
.LBB85_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB85_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB85_237
.LBB85_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB85_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_236
.LBB85_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB85_236:                             # %cond.end650
.LBB85_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB85_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB85_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_241
.LBB85_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB85_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB85_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB85_247
.LBB85_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB85_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_246
.LBB85_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB85_246:                             # %cond.end687
.LBB85_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB85_258
.LBB85_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB85_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_251
.LBB85_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB85_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB85_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB85_257
.LBB85_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB85_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_256
.LBB85_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB85_256:                             # %cond.end724
.LBB85_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB85_258:                             # %if.end730
	jmp	.LBB85_328
.LBB85_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB85_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB85_262
.LBB85_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB85_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB85_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB85_265
.LBB85_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB85_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB85_271
.LBB85_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB85_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB85_270
.LBB85_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB85_270:                             # %cond.end753
.LBB85_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB85_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB85_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB85_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB85_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB85_276
.LBB85_275:                             # %cond.false765
                                        #   in Loop: Header=BB85_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB85_276:                             # %cond.end767
                                        #   in Loop: Header=BB85_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB85_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB85_282
.LBB85_278:                             # %cond.false772
                                        #   in Loop: Header=BB85_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB85_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB85_281
.LBB85_280:                             # %cond.false777
                                        #   in Loop: Header=BB85_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB85_281:                             # %cond.end779
                                        #   in Loop: Header=BB85_272 Depth=1
.LBB85_282:                             # %cond.end781
                                        #   in Loop: Header=BB85_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB85_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_272
.LBB85_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB85_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_287
.LBB85_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB85_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB85_293
.LBB85_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB85_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_292
.LBB85_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB85_292:                             # %cond.end822
.LBB85_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB85_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB85_296
.LBB85_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB85_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB85_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB85_299
.LBB85_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB85_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB85_305
.LBB85_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB85_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB85_304
.LBB85_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB85_304:                             # %cond.end847
.LBB85_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB85_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB85_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB85_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB85_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB85_310
.LBB85_309:                             # %cond.false859
                                        #   in Loop: Header=BB85_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB85_310:                             # %cond.end861
                                        #   in Loop: Header=BB85_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB85_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB85_316
.LBB85_312:                             # %cond.false866
                                        #   in Loop: Header=BB85_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB85_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB85_315
.LBB85_314:                             # %cond.false871
                                        #   in Loop: Header=BB85_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB85_315:                             # %cond.end873
                                        #   in Loop: Header=BB85_306 Depth=1
.LBB85_316:                             # %cond.end875
                                        #   in Loop: Header=BB85_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB85_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_306
.LBB85_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB85_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_321
.LBB85_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB85_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB85_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB85_327
.LBB85_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB85_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_326
.LBB85_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB85_326:                             # %cond.end916
.LBB85_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-104(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB85_328:                             # %if.end922
	jmp	.LBB85_329
.LBB85_329:                             # %if.end923
	jmp	.LBB85_330
.LBB85_330:                             # %if.end924
	jmp	.LBB85_331
.LBB85_331:                             # %if.end925
	jmp	.LBB85_332
.LBB85_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1231562178, -108(%rbp) # imm = 0x496825C2
	jne	.LBB85_334
.LBB85_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_333
.Lfunc_end85:
	.size	Get_Reference_Pixel.75, .Lfunc_end85-Get_Reference_Pixel.75
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.76  # -- Begin function Get_Reference_Block.76
	.p2align	4, 0x90
	.type	Get_Reference_Block.76,@function
Get_Reference_Block.76:                 # @Get_Reference_Block.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$9516649, -24(%rbp)     # imm = 0x913669
	movq	%rdi, -56(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -12(%rbp)
	movq	%r9, -48(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB86_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB86_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	$0, -8(%rbp)
.LBB86_3:                               # %for.cond5
                                        #   Parent Loop BB86_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB86_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB86_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-32(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB86_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_3
.LBB86_6:                               # %for.end
                                        #   in Loop: Header=BB86_1 Depth=1
	jmp	.LBB86_7
.LBB86_7:                               # %for.inc14
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_1
.LBB86_8:                               # %for.end16
	cmpl	$9516649, -24(%rbp)     # imm = 0x913669
	jne	.LBB86_10
.LBB86_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_9
.Lfunc_end86:
	.size	Get_Reference_Block.76, .Lfunc_end86-Get_Reference_Block.76
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.77  # -- Begin function Get_Reference_Block.77
	.p2align	4, 0x90
	.type	Get_Reference_Block.77,@function
Get_Reference_Block.77:                 # @Get_Reference_Block.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$19248383, -28(%rbp)    # imm = 0x125B4FF
	movq	%rdi, -56(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movq	%r9, -48(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB87_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB87_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -8(%rbp)
.LBB87_3:                               # %for.cond5
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB87_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB87_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-36(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-32(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB87_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_3
.LBB87_6:                               # %for.end
                                        #   in Loop: Header=BB87_1 Depth=1
	jmp	.LBB87_7
.LBB87_7:                               # %for.inc14
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_1
.LBB87_8:                               # %for.end16
	cmpl	$19248383, -28(%rbp)    # imm = 0x125B4FF
	jne	.LBB87_10
.LBB87_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_9
.Lfunc_end87:
	.size	Get_Reference_Block.77, .Lfunc_end87-Get_Reference_Block.77
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.78  # -- Begin function Get_Reference_Block.78
	.p2align	4, 0x90
	.type	Get_Reference_Block.78,@function
Get_Reference_Block.78:                 # @Get_Reference_Block.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$705570179, -16(%rbp)   # imm = 0x2A0E2583
	movq	%rdi, -56(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -20(%rbp)
	movq	%r9, -48(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB88_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB88_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB88_1 Depth=1
	movl	$0, -4(%rbp)
.LBB88_3:                               # %for.cond5
                                        #   Parent Loop BB88_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB88_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB88_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-36(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB88_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_3
.LBB88_6:                               # %for.end
                                        #   in Loop: Header=BB88_1 Depth=1
	jmp	.LBB88_7
.LBB88_7:                               # %for.inc14
                                        #   in Loop: Header=BB88_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_1
.LBB88_8:                               # %for.end16
	cmpl	$705570179, -16(%rbp)   # imm = 0x2A0E2583
	jne	.LBB88_10
.LBB88_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_9
.Lfunc_end88:
	.size	Get_Reference_Block.78, .Lfunc_end88-Get_Reference_Block.78
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.79  # -- Begin function Get_Reference_Pixel.79
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.79,@function
Get_Reference_Pixel.79:                 # @Get_Reference_Pixel.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1730443054, -108(%rbp) # imm = 0x6724772E
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB89_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB89_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB89_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB89_5
.LBB89_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB89_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB89_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB89_11
.LBB89_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB89_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB89_10
.LBB89_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB89_10:                              # %cond.end14
.LBB89_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB89_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB89_14
.LBB89_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB89_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB89_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB89_20
.LBB89_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB89_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB89_19
.LBB89_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB89_19:                              # %cond.end29
.LBB89_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_332
.LBB89_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB89_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB89_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB89_25
.LBB89_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB89_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB89_31
.LBB89_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB89_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB89_30
.LBB89_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB89_30:                              # %cond.end52
.LBB89_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB89_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB89_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB89_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB89_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB89_36
.LBB89_35:                              # %cond.false61
                                        #   in Loop: Header=BB89_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB89_36:                              # %cond.end63
                                        #   in Loop: Header=BB89_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB89_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB89_42
.LBB89_38:                              # %cond.false68
                                        #   in Loop: Header=BB89_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB89_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB89_41
.LBB89_40:                              # %cond.false73
                                        #   in Loop: Header=BB89_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB89_41:                              # %cond.end75
                                        #   in Loop: Header=BB89_32 Depth=1
.LBB89_42:                              # %cond.end77
                                        #   in Loop: Header=BB89_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB89_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_32
.LBB89_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_47
.LBB89_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB89_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB89_53
.LBB89_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_52
.LBB89_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB89_52:                              # %cond.end113
.LBB89_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB89_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB89_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB89_57
.LBB89_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB89_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB89_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB89_63
.LBB89_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB89_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB89_62
.LBB89_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB89_62:                              # %cond.end136
.LBB89_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB89_76
.LBB89_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB89_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB89_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB89_68
.LBB89_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB89_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB89_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB89_74
.LBB89_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB89_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB89_73
.LBB89_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB89_73:                              # %cond.end169
.LBB89_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB89_75:                              # %if.end
	jmp	.LBB89_76
.LBB89_76:                              # %if.end178
	jmp	.LBB89_331
.LBB89_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB89_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB89_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB89_81
.LBB89_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB89_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB89_87
.LBB89_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB89_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB89_86
.LBB89_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB89_86:                              # %cond.end197
.LBB89_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB89_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB89_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB89_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB89_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB89_92
.LBB89_91:                              # %cond.false209
                                        #   in Loop: Header=BB89_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB89_92:                              # %cond.end211
                                        #   in Loop: Header=BB89_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB89_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB89_98
.LBB89_94:                              # %cond.false216
                                        #   in Loop: Header=BB89_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB89_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB89_97
.LBB89_96:                              # %cond.false221
                                        #   in Loop: Header=BB89_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB89_97:                              # %cond.end223
                                        #   in Loop: Header=BB89_88 Depth=1
.LBB89_98:                              # %cond.end225
                                        #   in Loop: Header=BB89_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB89_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB89_88
.LBB89_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_103
.LBB89_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB89_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB89_109
.LBB89_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_108
.LBB89_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB89_108:                             # %cond.end266
.LBB89_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB89_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB89_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB89_113
.LBB89_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB89_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB89_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB89_119
.LBB89_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB89_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB89_118
.LBB89_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB89_118:                             # %cond.end287
.LBB89_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB89_132
.LBB89_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB89_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB89_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB89_124
.LBB89_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB89_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB89_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB89_130
.LBB89_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB89_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB89_129
.LBB89_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB89_129:                             # %cond.end320
.LBB89_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB89_131:                             # %if.end331
	jmp	.LBB89_132
.LBB89_132:                             # %if.end332
	jmp	.LBB89_330
.LBB89_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB89_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB89_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB89_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB89_139
.LBB89_138:                             # %cond.false345
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB89_139:                             # %cond.end347
                                        #   in Loop: Header=BB89_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB89_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB89_145
.LBB89_141:                             # %cond.false352
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB89_144
.LBB89_143:                             # %cond.false357
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB89_144:                             # %cond.end359
                                        #   in Loop: Header=BB89_135 Depth=1
.LBB89_145:                             # %cond.end361
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB89_146:                             # %for.cond363
                                        #   Parent Loop BB89_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB89_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB89_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB89_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB89_150
.LBB89_149:                             # %cond.false371
                                        #   in Loop: Header=BB89_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB89_150:                             # %cond.end373
                                        #   in Loop: Header=BB89_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB89_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB89_156
.LBB89_152:                             # %cond.false378
                                        #   in Loop: Header=BB89_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB89_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB89_155
.LBB89_154:                             # %cond.false383
                                        #   in Loop: Header=BB89_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB89_155:                             # %cond.end385
                                        #   in Loop: Header=BB89_146 Depth=2
.LBB89_156:                             # %cond.end387
                                        #   in Loop: Header=BB89_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB89_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_146
.LBB89_158:                             # %for.end401
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB89_135
.LBB89_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB89_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB89_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB89_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB89_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB89_161
.LBB89_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_167
.LBB89_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB89_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB89_173
.LBB89_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_172
.LBB89_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB89_172:                             # %cond.end449
.LBB89_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB89_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB89_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_177
.LBB89_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB89_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB89_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB89_183
.LBB89_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB89_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_182
.LBB89_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB89_182:                             # %cond.end486
.LBB89_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB89_196
.LBB89_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB89_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB89_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_188
.LBB89_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB89_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB89_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB89_194
.LBB89_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB89_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_193
.LBB89_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB89_193:                             # %cond.end526
.LBB89_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB89_195:                             # %if.end532
	jmp	.LBB89_196
.LBB89_196:                             # %if.end533
	jmp	.LBB89_329
.LBB89_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB89_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB89_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB89_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB89_203
.LBB89_202:                             # %cond.false546
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB89_203:                             # %cond.end548
                                        #   in Loop: Header=BB89_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB89_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB89_209
.LBB89_205:                             # %cond.false553
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB89_208
.LBB89_207:                             # %cond.false558
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB89_208:                             # %cond.end560
                                        #   in Loop: Header=BB89_199 Depth=1
.LBB89_209:                             # %cond.end562
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB89_210:                             # %for.cond564
                                        #   Parent Loop BB89_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB89_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB89_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB89_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB89_214
.LBB89_213:                             # %cond.false572
                                        #   in Loop: Header=BB89_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB89_214:                             # %cond.end574
                                        #   in Loop: Header=BB89_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB89_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB89_220
.LBB89_216:                             # %cond.false579
                                        #   in Loop: Header=BB89_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB89_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB89_219
.LBB89_218:                             # %cond.false584
                                        #   in Loop: Header=BB89_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB89_219:                             # %cond.end586
                                        #   in Loop: Header=BB89_210 Depth=2
.LBB89_220:                             # %cond.end588
                                        #   in Loop: Header=BB89_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB89_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB89_210
.LBB89_222:                             # %for.end602
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_199
.LBB89_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB89_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB89_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB89_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB89_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_225
.LBB89_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_231
.LBB89_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB89_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB89_237
.LBB89_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_236
.LBB89_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB89_236:                             # %cond.end650
.LBB89_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB89_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB89_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_241
.LBB89_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB89_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB89_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB89_247
.LBB89_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB89_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_246
.LBB89_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB89_246:                             # %cond.end687
.LBB89_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB89_258
.LBB89_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB89_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_251
.LBB89_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB89_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB89_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB89_257
.LBB89_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB89_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_256
.LBB89_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB89_256:                             # %cond.end724
.LBB89_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB89_258:                             # %if.end730
	jmp	.LBB89_328
.LBB89_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB89_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB89_262
.LBB89_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB89_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB89_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB89_265
.LBB89_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB89_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB89_271
.LBB89_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB89_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB89_270
.LBB89_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB89_270:                             # %cond.end753
.LBB89_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB89_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB89_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB89_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB89_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB89_276
.LBB89_275:                             # %cond.false765
                                        #   in Loop: Header=BB89_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB89_276:                             # %cond.end767
                                        #   in Loop: Header=BB89_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB89_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB89_282
.LBB89_278:                             # %cond.false772
                                        #   in Loop: Header=BB89_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB89_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB89_281
.LBB89_280:                             # %cond.false777
                                        #   in Loop: Header=BB89_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB89_281:                             # %cond.end779
                                        #   in Loop: Header=BB89_272 Depth=1
.LBB89_282:                             # %cond.end781
                                        #   in Loop: Header=BB89_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB89_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_272
.LBB89_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_287
.LBB89_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB89_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB89_293
.LBB89_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_292
.LBB89_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB89_292:                             # %cond.end822
.LBB89_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB89_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB89_296
.LBB89_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB89_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB89_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB89_299
.LBB89_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB89_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB89_305
.LBB89_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB89_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB89_304
.LBB89_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB89_304:                             # %cond.end847
.LBB89_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB89_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB89_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB89_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB89_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB89_310
.LBB89_309:                             # %cond.false859
                                        #   in Loop: Header=BB89_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB89_310:                             # %cond.end861
                                        #   in Loop: Header=BB89_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB89_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB89_316
.LBB89_312:                             # %cond.false866
                                        #   in Loop: Header=BB89_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB89_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB89_315
.LBB89_314:                             # %cond.false871
                                        #   in Loop: Header=BB89_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB89_315:                             # %cond.end873
                                        #   in Loop: Header=BB89_306 Depth=1
.LBB89_316:                             # %cond.end875
                                        #   in Loop: Header=BB89_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB89_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB89_306
.LBB89_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_321
.LBB89_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB89_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB89_327
.LBB89_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_326
.LBB89_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB89_326:                             # %cond.end916
.LBB89_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-100(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB89_328:                             # %if.end922
	jmp	.LBB89_329
.LBB89_329:                             # %if.end923
	jmp	.LBB89_330
.LBB89_330:                             # %if.end924
	jmp	.LBB89_331
.LBB89_331:                             # %if.end925
	jmp	.LBB89_332
.LBB89_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1730443054, -108(%rbp) # imm = 0x6724772E
	jne	.LBB89_334
.LBB89_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_333
.Lfunc_end89:
	.size	Get_Reference_Pixel.79, .Lfunc_end89-Get_Reference_Pixel.79
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.80 # -- Begin function compute_residue_b8block.80
	.p2align	4, 0x90
	.type	compute_residue_b8block.80,@function
compute_residue_b8block.80:             # @compute_residue_b8block.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$483784590, -36(%rbp)   # imm = 0x1CD5F78E
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB90_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB90_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB90_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB90_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB90_4:                               # %for.cond4
                                        #   Parent Loop BB90_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB90_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB90_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-20(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB90_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_4
.LBB90_7:                               # %for.end
                                        #   in Loop: Header=BB90_2 Depth=1
	jmp	.LBB90_8
.LBB90_8:                               # %for.inc22
                                        #   in Loop: Header=BB90_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_2
.LBB90_9:                               # %for.end24
	jmp	.LBB90_19
.LBB90_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB90_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB90_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB90_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB90_13:                              # %for.cond29
                                        #   Parent Loop BB90_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB90_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB90_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB90_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_13
.LBB90_16:                              # %for.end56
                                        #   in Loop: Header=BB90_11 Depth=1
	jmp	.LBB90_17
.LBB90_17:                              # %for.inc57
                                        #   in Loop: Header=BB90_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_11
.LBB90_18:                              # %for.end59
	jmp	.LBB90_19
.LBB90_19:                              # %if.end
	cmpl	$483784590, -36(%rbp)   # imm = 0x1CD5F78E
	jne	.LBB90_21
.LBB90_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_20
.Lfunc_end90:
	.size	compute_residue_b8block.80, .Lfunc_end90-compute_residue_b8block.80
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.81       # -- Begin function DecOneForthPix.81
	.p2align	4, 0x90
	.type	DecOneForthPix.81,@function
DecOneForthPix.81:                      # @DecOneForthPix.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$584251957, -12(%rbp)   # imm = 0x22D2FA35
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB91_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB91_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB91_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB91_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_1
.LBB91_4:                               # %for.end
	cmpl	$584251957, -12(%rbp)   # imm = 0x22D2FA35
	jne	.LBB91_6
.LBB91_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_5
.Lfunc_end91:
	.size	DecOneForthPix.81, .Lfunc_end91-DecOneForthPix.81
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.82    # -- Begin function Error_Concealment.82
	.p2align	4, 0x90
	.type	Error_Concealment.82,@function
Error_Concealment.82:                   # @Error_Concealment.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$744031158, -16(%rbp)   # imm = 0x2C5903B6
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
.LBB92_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB92_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB92_1 Depth=1
	movl	$0, -4(%rbp)
.LBB92_3:                               # %for.cond2
                                        #   Parent Loop BB92_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB92_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB92_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB92_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB92_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB92_6:                               # %if.end
                                        #   in Loop: Header=BB92_3 Depth=2
	jmp	.LBB92_7
.LBB92_7:                               # %for.inc
                                        #   in Loop: Header=BB92_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_3
.LBB92_8:                               # %for.end
                                        #   in Loop: Header=BB92_1 Depth=1
	jmp	.LBB92_9
.LBB92_9:                               # %for.inc7
                                        #   in Loop: Header=BB92_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_1
.LBB92_10:                              # %for.end9
	cmpl	$744031158, -16(%rbp)   # imm = 0x2C5903B6
	jne	.LBB92_12
.LBB92_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB92_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB92_11
.Lfunc_end92:
	.size	Error_Concealment.82, .Lfunc_end92-Error_Concealment.82
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.83   # -- Begin function decode_one_b8block.83
	.p2align	4, 0x90
	.type	decode_one_b8block.83,@function
decode_one_b8block.83:                  # @decode_one_b8block.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$944677880, -84(%rbp)   # imm = 0x384EA3F8
	movl	%edi, -56(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -64(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB93_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB93_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB93_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB93_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_4:                               # %for.cond9
                                        #   Parent Loop BB93_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB93_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB93_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB93_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_4
.LBB93_7:                               # %for.end
                                        #   in Loop: Header=BB93_2 Depth=1
	jmp	.LBB93_8
.LBB93_8:                               # %for.inc26
                                        #   in Loop: Header=BB93_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_2
.LBB93_9:                               # %for.end28
	jmp	.LBB93_96
.LBB93_10:                              # %if.else
	cmpl	$0, -80(%rbp)
	jne	.LBB93_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB93_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB93_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB93_31
.LBB93_14:                              # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB93_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB93_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB93_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_17:                              # %for.cond40
                                        #   Parent Loop BB93_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB93_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB93_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB93_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_17
.LBB93_20:                              # %for.end49
                                        #   in Loop: Header=BB93_15 Depth=1
	jmp	.LBB93_21
.LBB93_21:                              # %for.inc50
                                        #   in Loop: Header=BB93_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_15
.LBB93_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB93_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB93_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB93_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB93_25:                              # %for.cond56
                                        #   Parent Loop BB93_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB93_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB93_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB93_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_25
.LBB93_28:                              # %for.end71
                                        #   in Loop: Header=BB93_23 Depth=1
	jmp	.LBB93_29
.LBB93_29:                              # %for.inc72
                                        #   in Loop: Header=BB93_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_23
.LBB93_30:                              # %for.end74
	jmp	.LBB93_60
.LBB93_31:                              # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB93_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB93_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB93_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB93_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB93_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB93_36:                              # %for.cond83
                                        #   Parent Loop BB93_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB93_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB93_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB93_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_36
.LBB93_39:                              # %for.end120
                                        #   in Loop: Header=BB93_34 Depth=1
	jmp	.LBB93_40
.LBB93_40:                              # %for.inc121
                                        #   in Loop: Header=BB93_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_34
.LBB93_41:                              # %for.end123
	jmp	.LBB93_51
.LBB93_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB93_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB93_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB93_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB93_45:                              # %for.cond129
                                        #   Parent Loop BB93_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB93_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB93_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB93_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_45
.LBB93_48:                              # %for.end145
                                        #   in Loop: Header=BB93_43 Depth=1
	jmp	.LBB93_49
.LBB93_49:                              # %for.inc146
                                        #   in Loop: Header=BB93_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_43
.LBB93_50:                              # %for.end148
	jmp	.LBB93_51
.LBB93_51:                              # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB93_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB93_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB93_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_54:                              # %for.cond153
                                        #   Parent Loop BB93_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB93_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB93_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB93_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_54
.LBB93_57:                              # %for.end167
                                        #   in Loop: Header=BB93_52 Depth=1
	jmp	.LBB93_58
.LBB93_58:                              # %for.inc168
                                        #   in Loop: Header=BB93_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_52
.LBB93_59:                              # %for.end170
	jmp	.LBB93_60
.LBB93_60:                              # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB93_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB93_66
.LBB93_62:                              # %lor.lhs.false177
	cmpl	$0, -80(%rbp)
	jne	.LBB93_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB93_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB93_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB93_86
.LBB93_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB93_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_69 Depth 2
                                        #       Child Loop BB93_74 Depth 3
                                        #         Child Loop BB93_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB93_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB93_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB93_69:                              # %for.cond197
                                        #   Parent Loop BB93_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_74 Depth 3
                                        #         Child Loop BB93_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB93_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB93_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB93_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB93_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB93_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB93_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
.LBB93_73:                              # %if.end218
                                        #   in Loop: Header=BB93_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-76(%rbp), %esi
	movl	-68(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB93_74:                              # %for.cond233
                                        #   Parent Loop BB93_67 Depth=1
                                        #     Parent Loop BB93_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB93_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB93_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB93_74 Depth=3
	movl	$0, -8(%rbp)
.LBB93_76:                              # %for.cond237
                                        #   Parent Loop BB93_67 Depth=1
                                        #     Parent Loop BB93_69 Depth=2
                                        #       Parent Loop BB93_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB93_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB93_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB93_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_76
.LBB93_79:                              # %for.end269
                                        #   in Loop: Header=BB93_74 Depth=3
	jmp	.LBB93_80
.LBB93_80:                              # %for.inc270
                                        #   in Loop: Header=BB93_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_74
.LBB93_81:                              # %for.end272
                                        #   in Loop: Header=BB93_69 Depth=2
	jmp	.LBB93_82
.LBB93_82:                              # %for.inc273
                                        #   in Loop: Header=BB93_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_69
.LBB93_83:                              # %for.end275
                                        #   in Loop: Header=BB93_67 Depth=1
	jmp	.LBB93_84
.LBB93_84:                              # %for.inc276
                                        #   in Loop: Header=BB93_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_67
.LBB93_85:                              # %for.end278
	jmp	.LBB93_95
.LBB93_86:                              # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB93_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB93_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB93_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_89:                              # %for.cond284
                                        #   Parent Loop BB93_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB93_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB93_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB93_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_89
.LBB93_92:                              # %for.end310
                                        #   in Loop: Header=BB93_87 Depth=1
	jmp	.LBB93_93
.LBB93_93:                              # %for.inc311
                                        #   in Loop: Header=BB93_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_87
.LBB93_94:                              # %for.end313
	jmp	.LBB93_95
.LBB93_95:                              # %if.end314
	jmp	.LBB93_96
.LBB93_96:                              # %if.end315
	cmpl	$944677880, -84(%rbp)   # imm = 0x384EA3F8
	jne	.LBB93_98
.LBB93_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB93_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB93_97
.Lfunc_end93:
	.size	decode_one_b8block.83, .Lfunc_end93-decode_one_b8block.83
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.84
.LCPI94_0:
	.quad	4636737291354636288     # double 100
.LCPI94_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.84
	.p2align	4, 0x90
	.type	Build_Status_Map.84,@function
Build_Status_Map.84:                    # @Build_Status_Map.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1145992006, -44(%rbp)  # imm = 0x444E7346
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB94_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB94_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB94_1 Depth=1
	movl	$0, -8(%rbp)
.LBB94_3:                               # %for.cond2
                                        #   Parent Loop BB94_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB94_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB94_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB94_13
.LBB94_6:                               # %if.then
                                        #   in Loop: Header=BB94_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI94_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI94_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB94_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB94_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB94_8:                               # %if.end
                                        #   in Loop: Header=BB94_3 Depth=2
	callq	rand
	vmovsd	.LCPI94_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI94_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB94_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB94_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB94_10:                              # %if.end20
                                        #   in Loop: Header=BB94_3 Depth=2
	callq	rand
	vmovsd	.LCPI94_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI94_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB94_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB94_3 Depth=2
	movl	$1, -4(%rbp)
.LBB94_12:                              # %if.end29
                                        #   in Loop: Header=BB94_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB94_13:                              # %if.end30
                                        #   in Loop: Header=BB94_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB94_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB94_18
.LBB94_15:                              # %if.else
                                        #   in Loop: Header=BB94_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB94_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB94_17:                              # %if.end49
                                        #   in Loop: Header=BB94_3 Depth=2
	jmp	.LBB94_18
.LBB94_18:                              # %if.end50
                                        #   in Loop: Header=BB94_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB94_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_3
.LBB94_20:                              # %for.end
                                        #   in Loop: Header=BB94_1 Depth=1
	jmp	.LBB94_21
.LBB94_21:                              # %for.inc53
                                        #   in Loop: Header=BB94_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB94_1
.LBB94_22:                              # %for.end55
	cmpl	$1145992006, -44(%rbp)  # imm = 0x444E7346
	jne	.LBB94_24
.LBB94_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB94_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB94_23
.Lfunc_end94:
	.size	Build_Status_Map.84, .Lfunc_end94-Build_Status_Map.84
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.85    # -- Begin function Error_Concealment.85
	.p2align	4, 0x90
	.type	Error_Concealment.85,@function
Error_Concealment.85:                   # @Error_Concealment.85
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1502010131, -20(%rbp)  # imm = 0x5986DB13
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB95_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB95_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB95_1 Depth=1
	movl	$0, -8(%rbp)
.LBB95_3:                               # %for.cond2
                                        #   Parent Loop BB95_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB95_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB95_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB95_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB95_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB95_6:                               # %if.end
                                        #   in Loop: Header=BB95_3 Depth=2
	jmp	.LBB95_7
.LBB95_7:                               # %for.inc
                                        #   in Loop: Header=BB95_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_3
.LBB95_8:                               # %for.end
                                        #   in Loop: Header=BB95_1 Depth=1
	jmp	.LBB95_9
.LBB95_9:                               # %for.inc7
                                        #   in Loop: Header=BB95_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_1
.LBB95_10:                              # %for.end9
	cmpl	$1502010131, -20(%rbp)  # imm = 0x5986DB13
	jne	.LBB95_12
.LBB95_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB95_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB95_11
.Lfunc_end95:
	.size	Error_Concealment.85, .Lfunc_end95-Error_Concealment.85
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.86 # -- Begin function compute_residue_b8block.86
	.p2align	4, 0x90
	.type	compute_residue_b8block.86,@function
compute_residue_b8block.86:             # @compute_residue_b8block.86
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1047678914, -36(%rbp)  # imm = 0x3E724FC2
	movl	%edi, -20(%rbp)
	movl	%esi, -28(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB96_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB96_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB96_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB96_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB96_4:                               # %for.cond4
                                        #   Parent Loop BB96_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB96_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB96_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB96_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_4
.LBB96_7:                               # %for.end
                                        #   in Loop: Header=BB96_2 Depth=1
	jmp	.LBB96_8
.LBB96_8:                               # %for.inc22
                                        #   in Loop: Header=BB96_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_2
.LBB96_9:                               # %for.end24
	jmp	.LBB96_19
.LBB96_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB96_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB96_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB96_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB96_13:                              # %for.cond29
                                        #   Parent Loop BB96_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB96_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB96_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB96_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_13
.LBB96_16:                              # %for.end56
                                        #   in Loop: Header=BB96_11 Depth=1
	jmp	.LBB96_17
.LBB96_17:                              # %for.inc57
                                        #   in Loop: Header=BB96_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_11
.LBB96_18:                              # %for.end59
	jmp	.LBB96_19
.LBB96_19:                              # %if.end
	cmpl	$1047678914, -36(%rbp)  # imm = 0x3E724FC2
	jne	.LBB96_21
.LBB96_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB96_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB96_20
.Lfunc_end96:
	.size	compute_residue_b8block.86, .Lfunc_end96-compute_residue_b8block.86
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.87    # -- Begin function Error_Concealment.87
	.p2align	4, 0x90
	.type	Error_Concealment.87,@function
Error_Concealment.87:                   # @Error_Concealment.87
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$296820836, -12(%rbp)   # imm = 0x11B12064
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB97_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB97_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB97_1 Depth=1
	movl	$0, -8(%rbp)
.LBB97_3:                               # %for.cond2
                                        #   Parent Loop BB97_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB97_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB97_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB97_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB97_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB97_6:                               # %if.end
                                        #   in Loop: Header=BB97_3 Depth=2
	jmp	.LBB97_7
.LBB97_7:                               # %for.inc
                                        #   in Loop: Header=BB97_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB97_3
.LBB97_8:                               # %for.end
                                        #   in Loop: Header=BB97_1 Depth=1
	jmp	.LBB97_9
.LBB97_9:                               # %for.inc7
                                        #   in Loop: Header=BB97_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_1
.LBB97_10:                              # %for.end9
	cmpl	$296820836, -12(%rbp)   # imm = 0x11B12064
	jne	.LBB97_12
.LBB97_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB97_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB97_11
.Lfunc_end97:
	.size	Error_Concealment.87, .Lfunc_end97-Error_Concealment.87
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.88   # -- Begin function decode_one_b8block.88
	.p2align	4, 0x90
	.type	decode_one_b8block.88,@function
decode_one_b8block.88:                  # @decode_one_b8block.88
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$767971309, -84(%rbp)   # imm = 0x2DC64FED
	movl	%edi, -48(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -64(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB98_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB98_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB98_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB98_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB98_4:                               # %for.cond9
                                        #   Parent Loop BB98_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB98_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB98_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB98_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_4
.LBB98_7:                               # %for.end
                                        #   in Loop: Header=BB98_2 Depth=1
	jmp	.LBB98_8
.LBB98_8:                               # %for.inc26
                                        #   in Loop: Header=BB98_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_2
.LBB98_9:                               # %for.end28
	jmp	.LBB98_96
.LBB98_10:                              # %if.else
	cmpl	$0, -72(%rbp)
	jne	.LBB98_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB98_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB98_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB98_31
.LBB98_14:                              # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB98_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB98_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB98_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB98_17:                              # %for.cond40
                                        #   Parent Loop BB98_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB98_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB98_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB98_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_17
.LBB98_20:                              # %for.end49
                                        #   in Loop: Header=BB98_15 Depth=1
	jmp	.LBB98_21
.LBB98_21:                              # %for.inc50
                                        #   in Loop: Header=BB98_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_15
.LBB98_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB98_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB98_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB98_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB98_25:                              # %for.cond56
                                        #   Parent Loop BB98_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB98_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB98_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB98_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_25
.LBB98_28:                              # %for.end71
                                        #   in Loop: Header=BB98_23 Depth=1
	jmp	.LBB98_29
.LBB98_29:                              # %for.inc72
                                        #   in Loop: Header=BB98_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB98_23
.LBB98_30:                              # %for.end74
	jmp	.LBB98_60
.LBB98_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB98_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB98_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB98_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB98_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB98_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB98_36:                              # %for.cond83
                                        #   Parent Loop BB98_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB98_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB98_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB98_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_36
.LBB98_39:                              # %for.end120
                                        #   in Loop: Header=BB98_34 Depth=1
	jmp	.LBB98_40
.LBB98_40:                              # %for.inc121
                                        #   in Loop: Header=BB98_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB98_34
.LBB98_41:                              # %for.end123
	jmp	.LBB98_51
.LBB98_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB98_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB98_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB98_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB98_45:                              # %for.cond129
                                        #   Parent Loop BB98_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB98_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB98_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB98_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_45
.LBB98_48:                              # %for.end145
                                        #   in Loop: Header=BB98_43 Depth=1
	jmp	.LBB98_49
.LBB98_49:                              # %for.inc146
                                        #   in Loop: Header=BB98_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB98_43
.LBB98_50:                              # %for.end148
	jmp	.LBB98_51
.LBB98_51:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB98_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB98_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB98_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB98_54:                              # %for.cond153
                                        #   Parent Loop BB98_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB98_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB98_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB98_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_54
.LBB98_57:                              # %for.end167
                                        #   in Loop: Header=BB98_52 Depth=1
	jmp	.LBB98_58
.LBB98_58:                              # %for.inc168
                                        #   in Loop: Header=BB98_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_52
.LBB98_59:                              # %for.end170
	jmp	.LBB98_60
.LBB98_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB98_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB98_66
.LBB98_62:                              # %lor.lhs.false177
	cmpl	$0, -72(%rbp)
	jne	.LBB98_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB98_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB98_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB98_86
.LBB98_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB98_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_69 Depth 2
                                        #       Child Loop BB98_74 Depth 3
                                        #         Child Loop BB98_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB98_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB98_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB98_69:                              # %for.cond197
                                        #   Parent Loop BB98_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_74 Depth 3
                                        #         Child Loop BB98_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB98_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB98_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB98_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB98_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB98_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB98_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
.LBB98_73:                              # %if.end218
                                        #   in Loop: Header=BB98_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-76(%rbp), %esi
	movl	-68(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB98_74:                              # %for.cond233
                                        #   Parent Loop BB98_67 Depth=1
                                        #     Parent Loop BB98_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB98_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB98_74 Depth=3
	movl	$0, -8(%rbp)
.LBB98_76:                              # %for.cond237
                                        #   Parent Loop BB98_67 Depth=1
                                        #     Parent Loop BB98_69 Depth=2
                                        #       Parent Loop BB98_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB98_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB98_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB98_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_76
.LBB98_79:                              # %for.end269
                                        #   in Loop: Header=BB98_74 Depth=3
	jmp	.LBB98_80
.LBB98_80:                              # %for.inc270
                                        #   in Loop: Header=BB98_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_74
.LBB98_81:                              # %for.end272
                                        #   in Loop: Header=BB98_69 Depth=2
	jmp	.LBB98_82
.LBB98_82:                              # %for.inc273
                                        #   in Loop: Header=BB98_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_69
.LBB98_83:                              # %for.end275
                                        #   in Loop: Header=BB98_67 Depth=1
	jmp	.LBB98_84
.LBB98_84:                              # %for.inc276
                                        #   in Loop: Header=BB98_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB98_67
.LBB98_85:                              # %for.end278
	jmp	.LBB98_95
.LBB98_86:                              # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB98_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB98_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB98_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB98_89:                              # %for.cond284
                                        #   Parent Loop BB98_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB98_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB98_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB98_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_89
.LBB98_92:                              # %for.end310
                                        #   in Loop: Header=BB98_87 Depth=1
	jmp	.LBB98_93
.LBB98_93:                              # %for.inc311
                                        #   in Loop: Header=BB98_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_87
.LBB98_94:                              # %for.end313
	jmp	.LBB98_95
.LBB98_95:                              # %if.end314
	jmp	.LBB98_96
.LBB98_96:                              # %if.end315
	cmpl	$767971309, -84(%rbp)   # imm = 0x2DC64FED
	jne	.LBB98_98
.LBB98_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB98_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB98_97
.Lfunc_end98:
	.size	decode_one_b8block.88, .Lfunc_end98-decode_one_b8block.88
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.89  # -- Begin function Get_Reference_Block.89
	.p2align	4, 0x90
	.type	Get_Reference_Block.89,@function
Get_Reference_Block.89:                 # @Get_Reference_Block.89
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1678329554, -20(%rbp)  # imm = 0x640946D2
	movq	%rdi, -48(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -32(%rbp)
	movq	%r9, -56(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB99_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB99_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB99_1 Depth=1
	movl	$0, -4(%rbp)
.LBB99_3:                               # %for.cond5
                                        #   Parent Loop BB99_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB99_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB99_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-12(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB99_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_3
.LBB99_6:                               # %for.end
                                        #   in Loop: Header=BB99_1 Depth=1
	jmp	.LBB99_7
.LBB99_7:                               # %for.inc14
                                        #   in Loop: Header=BB99_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_1
.LBB99_8:                               # %for.end16
	cmpl	$1678329554, -20(%rbp)  # imm = 0x640946D2
	jne	.LBB99_10
.LBB99_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB99_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB99_9
.Lfunc_end99:
	.size	Get_Reference_Block.89, .Lfunc_end99-Get_Reference_Block.89
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.90    # -- Begin function Error_Concealment.90
	.p2align	4, 0x90
	.type	Error_Concealment.90,@function
Error_Concealment.90:                   # @Error_Concealment.90
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1568332750, -20(%rbp)  # imm = 0x5D7ADBCE
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB100_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB100_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB100_1 Depth=1
	movl	$0, -4(%rbp)
.LBB100_3:                              # %for.cond2
                                        #   Parent Loop BB100_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB100_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB100_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB100_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB100_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB100_6:                              # %if.end
                                        #   in Loop: Header=BB100_3 Depth=2
	jmp	.LBB100_7
.LBB100_7:                              # %for.inc
                                        #   in Loop: Header=BB100_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_3
.LBB100_8:                              # %for.end
                                        #   in Loop: Header=BB100_1 Depth=1
	jmp	.LBB100_9
.LBB100_9:                              # %for.inc7
                                        #   in Loop: Header=BB100_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_1
.LBB100_10:                             # %for.end9
	cmpl	$1568332750, -20(%rbp)  # imm = 0x5D7ADBCE
	jne	.LBB100_12
.LBB100_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB100_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB100_11
.Lfunc_end100:
	.size	Error_Concealment.90, .Lfunc_end100-Error_Concealment.90
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.91  # -- Begin function Get_Reference_Block.91
	.p2align	4, 0x90
	.type	Get_Reference_Block.91,@function
Get_Reference_Block.91:                 # @Get_Reference_Block.91
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1874254323, -20(%rbp)  # imm = 0x6FB6D9F3
	movq	%rdi, -56(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -36(%rbp)
	movq	%r9, -48(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB101_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB101_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB101_1 Depth=1
	movl	$0, -4(%rbp)
.LBB101_3:                              # %for.cond5
                                        #   Parent Loop BB101_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB101_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB101_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-12(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB101_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_3
.LBB101_6:                              # %for.end
                                        #   in Loop: Header=BB101_1 Depth=1
	jmp	.LBB101_7
.LBB101_7:                              # %for.inc14
                                        #   in Loop: Header=BB101_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_1
.LBB101_8:                              # %for.end16
	cmpl	$1874254323, -20(%rbp)  # imm = 0x6FB6D9F3
	jne	.LBB101_10
.LBB101_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB101_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB101_9
.Lfunc_end101:
	.size	Get_Reference_Block.91, .Lfunc_end101-Get_Reference_Block.91
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.92       # -- Begin function DecOneForthPix.92
	.p2align	4, 0x90
	.type	DecOneForthPix.92,@function
DecOneForthPix.92:                      # @DecOneForthPix.92
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$209175027, -8(%rbp)    # imm = 0xC77C1F3
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB102_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB102_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB102_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB102_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_1
.LBB102_4:                              # %for.end
	cmpl	$209175027, -8(%rbp)    # imm = 0xC77C1F3
	jne	.LBB102_6
.LBB102_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB102_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB102_5
.Lfunc_end102:
	.size	DecOneForthPix.92, .Lfunc_end102-DecOneForthPix.92
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.93 # -- Begin function compute_residue_b8block.93
	.p2align	4, 0x90
	.type	compute_residue_b8block.93,@function
compute_residue_b8block.93:             # @compute_residue_b8block.93
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$683792889, -36(%rbp)   # imm = 0x28C1D9F9
	movl	%edi, -28(%rbp)
	movl	%esi, -20(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB103_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB103_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB103_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB103_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB103_4:                              # %for.cond4
                                        #   Parent Loop BB103_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB103_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB103_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-20(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB103_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_4
.LBB103_7:                              # %for.end
                                        #   in Loop: Header=BB103_2 Depth=1
	jmp	.LBB103_8
.LBB103_8:                              # %for.inc22
                                        #   in Loop: Header=BB103_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_2
.LBB103_9:                              # %for.end24
	jmp	.LBB103_19
.LBB103_10:                             # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB103_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB103_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB103_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB103_13:                             # %for.cond29
                                        #   Parent Loop BB103_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB103_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB103_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB103_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_13
.LBB103_16:                             # %for.end56
                                        #   in Loop: Header=BB103_11 Depth=1
	jmp	.LBB103_17
.LBB103_17:                             # %for.inc57
                                        #   in Loop: Header=BB103_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_11
.LBB103_18:                             # %for.end59
	jmp	.LBB103_19
.LBB103_19:                             # %if.end
	cmpl	$683792889, -36(%rbp)   # imm = 0x28C1D9F9
	jne	.LBB103_21
.LBB103_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB103_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB103_20
.Lfunc_end103:
	.size	compute_residue_b8block.93, .Lfunc_end103-compute_residue_b8block.93
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.94       # -- Begin function DecOneForthPix.94
	.p2align	4, 0x90
	.type	DecOneForthPix.94,@function
DecOneForthPix.94:                      # @DecOneForthPix.94
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1892734618, -12(%rbp)  # imm = 0x70D0D69A
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB104_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB104_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB104_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB104_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_1
.LBB104_4:                              # %for.end
	cmpl	$1892734618, -12(%rbp)  # imm = 0x70D0D69A
	jne	.LBB104_6
.LBB104_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB104_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB104_5
.Lfunc_end104:
	.size	DecOneForthPix.94, .Lfunc_end104-DecOneForthPix.94
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.95       # -- Begin function DecOneForthPix.95
	.p2align	4, 0x90
	.type	DecOneForthPix.95,@function
DecOneForthPix.95:                      # @DecOneForthPix.95
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2015822927, -12(%rbp)  # imm = 0x7827044F
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB105_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB105_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB105_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB105_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_1
.LBB105_4:                              # %for.end
	cmpl	$2015822927, -12(%rbp)  # imm = 0x7827044F
	jne	.LBB105_6
.LBB105_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB105_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB105_5
.Lfunc_end105:
	.size	DecOneForthPix.95, .Lfunc_end105-DecOneForthPix.95
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.96        # -- Begin function Conceal_Error.96
	.p2align	4, 0x90
	.type	Conceal_Error.96,@function
Conceal_Error.96:                       # @Conceal_Error.96
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1045145019, -68(%rbp)  # imm = 0x3E4BA5BB
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB106_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB106_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB106_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB106_4:                              # %land.end
.LBB106_5:                              # %lor.end
.LBB106_6:                              # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB106_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB106_9
.LBB106_8:                              # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB106_14
.LBB106_9:                              # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB106_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB106_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB106_12:                             # %land.end51
.LBB106_13:                             # %lor.end53
.LBB106_14:                             # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB106_180
# %bb.15:                               # %land.end54
	movq	.LJTI106_0(,%rax,8), %rax
	jmpq	*%rax
.LBB106_16:                             # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB106_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB106_18:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB106_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB106_18 Depth=1
	movl	$0, -4(%rbp)
.LBB106_20:                             # %for.cond68
                                        #   Parent Loop BB106_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB106_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB106_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB106_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_20
.LBB106_23:                             # %for.end
                                        #   in Loop: Header=BB106_18 Depth=1
	jmp	.LBB106_24
.LBB106_24:                             # %for.inc85
                                        #   in Loop: Header=BB106_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_18
.LBB106_25:                             # %for.end87
	jmp	.LBB106_35
.LBB106_26:                             # %if.else
	movl	$0, -8(%rbp)
.LBB106_27:                             # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB106_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB106_27 Depth=1
	movl	$0, -4(%rbp)
.LBB106_29:                             # %for.cond92
                                        #   Parent Loop BB106_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB106_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB106_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB106_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_29
.LBB106_32:                             # %for.end104
                                        #   in Loop: Header=BB106_27 Depth=1
	jmp	.LBB106_33
.LBB106_33:                             # %for.inc105
                                        #   in Loop: Header=BB106_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_27
.LBB106_34:                             # %for.end107
	jmp	.LBB106_35
.LBB106_35:                             # %if.end
	jmp	.LBB106_180
.LBB106_36:                             # %sw.bb108
	movl	$0, -16(%rbp)
.LBB106_37:                             # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_39 Depth 2
                                        #       Child Loop BB106_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB106_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB106_37 Depth=1
	movl	$0, -12(%rbp)
.LBB106_39:                             # %for.cond113
                                        #   Parent Loop BB106_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB106_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB106_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB106_39 Depth=2
	movl	$0, -4(%rbp)
.LBB106_41:                             # %for.cond117
                                        #   Parent Loop BB106_37 Depth=1
                                        #     Parent Loop BB106_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB106_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB106_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB106_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_41
.LBB106_44:                             # %for.end141
                                        #   in Loop: Header=BB106_39 Depth=2
	jmp	.LBB106_45
.LBB106_45:                             # %for.inc142
                                        #   in Loop: Header=BB106_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB106_39
.LBB106_46:                             # %for.end144
                                        #   in Loop: Header=BB106_37 Depth=1
	jmp	.LBB106_47
.LBB106_47:                             # %for.inc145
                                        #   in Loop: Header=BB106_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB106_37
.LBB106_48:                             # %for.end147
	movl	$0, -4(%rbp)
.LBB106_49:                             # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB106_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB106_49 Depth=1
	movl	$0, -8(%rbp)
.LBB106_51:                             # %for.cond152
                                        #   Parent Loop BB106_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB106_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB106_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB106_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_51
.LBB106_54:                             # %for.end162
                                        #   in Loop: Header=BB106_49 Depth=1
	jmp	.LBB106_55
.LBB106_55:                             # %for.inc163
                                        #   in Loop: Header=BB106_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_49
.LBB106_56:                             # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB106_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB106_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB106_59:                             # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB106_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB106_59 Depth=1
	movl	$0, -4(%rbp)
.LBB106_61:                             # %for.cond175
                                        #   Parent Loop BB106_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB106_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB106_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB106_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_61
.LBB106_64:                             # %for.end195
                                        #   in Loop: Header=BB106_59 Depth=1
	jmp	.LBB106_65
.LBB106_65:                             # %for.inc196
                                        #   in Loop: Header=BB106_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_59
.LBB106_66:                             # %for.end198
	jmp	.LBB106_95
.LBB106_67:                             # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB106_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB106_69:                             # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_71 Depth 2
                                        #       Child Loop BB106_73 Depth 3
                                        #         Child Loop BB106_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB106_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB106_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB106_71:                             # %for.cond210
                                        #   Parent Loop BB106_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB106_73 Depth 3
                                        #         Child Loop BB106_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB106_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB106_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB106_73:                             # %for.cond236
                                        #   Parent Loop BB106_69 Depth=1
                                        #     Parent Loop BB106_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB106_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB106_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB106_73 Depth=3
	movl	$0, -4(%rbp)
.LBB106_75:                             # %for.cond240
                                        #   Parent Loop BB106_69 Depth=1
                                        #     Parent Loop BB106_71 Depth=2
                                        #       Parent Loop BB106_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB106_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB106_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB106_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_75
.LBB106_78:                             # %for.end259
                                        #   in Loop: Header=BB106_73 Depth=3
	jmp	.LBB106_79
.LBB106_79:                             # %for.inc260
                                        #   in Loop: Header=BB106_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_73
.LBB106_80:                             # %for.end262
                                        #   in Loop: Header=BB106_71 Depth=2
	jmp	.LBB106_81
.LBB106_81:                             # %for.inc263
                                        #   in Loop: Header=BB106_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB106_71
.LBB106_82:                             # %for.end265
                                        #   in Loop: Header=BB106_69 Depth=1
	jmp	.LBB106_83
.LBB106_83:                             # %for.inc266
                                        #   in Loop: Header=BB106_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB106_69
.LBB106_84:                             # %for.end268
	jmp	.LBB106_94
.LBB106_85:                             # %if.else269
	movl	$0, -8(%rbp)
.LBB106_86:                             # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB106_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB106_86 Depth=1
	movl	$0, -4(%rbp)
.LBB106_88:                             # %for.cond274
                                        #   Parent Loop BB106_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB106_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB106_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB106_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_88
.LBB106_91:                             # %for.end294
                                        #   in Loop: Header=BB106_86 Depth=1
	jmp	.LBB106_92
.LBB106_92:                             # %for.inc295
                                        #   in Loop: Header=BB106_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_86
.LBB106_93:                             # %for.end297
	jmp	.LBB106_94
.LBB106_94:                             # %if.end298
	jmp	.LBB106_95
.LBB106_95:                             # %if.end299
	jmp	.LBB106_105
.LBB106_96:                             # %if.else300
	movl	$0, -8(%rbp)
.LBB106_97:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB106_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB106_97 Depth=1
	movl	$0, -4(%rbp)
.LBB106_99:                             # %for.cond305
                                        #   Parent Loop BB106_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB106_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB106_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB106_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_99
.LBB106_102:                            # %for.end317
                                        #   in Loop: Header=BB106_97 Depth=1
	jmp	.LBB106_103
.LBB106_103:                            # %for.inc318
                                        #   in Loop: Header=BB106_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_97
.LBB106_104:                            # %for.end320
	jmp	.LBB106_105
.LBB106_105:                            # %if.end321
	jmp	.LBB106_180
.LBB106_106:                            # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB106_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB106_108:                            # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_110 Depth 2
                                        #       Child Loop BB106_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB106_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	$0, -12(%rbp)
.LBB106_110:                            # %for.cond331
                                        #   Parent Loop BB106_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB106_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB106_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB106_110 Depth=2
	movl	$0, -4(%rbp)
.LBB106_112:                            # %for.cond335
                                        #   Parent Loop BB106_108 Depth=1
                                        #     Parent Loop BB106_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB106_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB106_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB106_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_112
.LBB106_115:                            # %for.end359
                                        #   in Loop: Header=BB106_110 Depth=2
	jmp	.LBB106_116
.LBB106_116:                            # %for.inc360
                                        #   in Loop: Header=BB106_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB106_110
.LBB106_117:                            # %for.end362
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_118
.LBB106_118:                            # %for.inc363
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB106_108
.LBB106_119:                            # %for.end365
	movl	$0, -4(%rbp)
.LBB106_120:                            # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB106_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB106_120 Depth=1
	movl	$0, -8(%rbp)
.LBB106_122:                            # %for.cond370
                                        #   Parent Loop BB106_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB106_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB106_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB106_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_122
.LBB106_125:                            # %for.end380
                                        #   in Loop: Header=BB106_120 Depth=1
	jmp	.LBB106_126
.LBB106_126:                            # %for.inc381
                                        #   in Loop: Header=BB106_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_120
.LBB106_127:                            # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB106_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB106_129:                            # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB106_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB106_129 Depth=1
	movl	$0, -4(%rbp)
.LBB106_131:                            # %for.cond390
                                        #   Parent Loop BB106_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB106_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB106_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB106_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_131
.LBB106_134:                            # %for.end410
                                        #   in Loop: Header=BB106_129 Depth=1
	jmp	.LBB106_135
.LBB106_135:                            # %for.inc411
                                        #   in Loop: Header=BB106_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_129
.LBB106_136:                            # %for.end413
	jmp	.LBB106_156
.LBB106_137:                            # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB106_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB106_139:                            # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_141 Depth 2
                                        #       Child Loop BB106_143 Depth 3
                                        #         Child Loop BB106_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB106_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB106_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB106_141:                            # %for.cond425
                                        #   Parent Loop BB106_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB106_143 Depth 3
                                        #         Child Loop BB106_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB106_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB106_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB106_143:                            # %for.cond452
                                        #   Parent Loop BB106_139 Depth=1
                                        #     Parent Loop BB106_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB106_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB106_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB106_143 Depth=3
	movl	$0, -4(%rbp)
.LBB106_145:                            # %for.cond456
                                        #   Parent Loop BB106_139 Depth=1
                                        #     Parent Loop BB106_141 Depth=2
                                        #       Parent Loop BB106_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB106_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB106_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB106_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_145
.LBB106_148:                            # %for.end475
                                        #   in Loop: Header=BB106_143 Depth=3
	jmp	.LBB106_149
.LBB106_149:                            # %for.inc476
                                        #   in Loop: Header=BB106_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_143
.LBB106_150:                            # %for.end478
                                        #   in Loop: Header=BB106_141 Depth=2
	jmp	.LBB106_151
.LBB106_151:                            # %for.inc479
                                        #   in Loop: Header=BB106_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB106_141
.LBB106_152:                            # %for.end481
                                        #   in Loop: Header=BB106_139 Depth=1
	jmp	.LBB106_153
.LBB106_153:                            # %for.inc482
                                        #   in Loop: Header=BB106_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB106_139
.LBB106_154:                            # %for.end484
	jmp	.LBB106_155
.LBB106_155:                            # %if.end485
	jmp	.LBB106_156
.LBB106_156:                            # %if.end486
	jmp	.LBB106_157
.LBB106_157:                            # %if.end487
	jmp	.LBB106_180
.LBB106_158:                            # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB106_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB106_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB106_161:                            # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB106_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB106_161 Depth=1
	movl	$0, -4(%rbp)
.LBB106_163:                            # %for.cond499
                                        #   Parent Loop BB106_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB106_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB106_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB106_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_163
.LBB106_166:                            # %for.end519
                                        #   in Loop: Header=BB106_161 Depth=1
	jmp	.LBB106_167
.LBB106_167:                            # %for.inc520
                                        #   in Loop: Header=BB106_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_161
.LBB106_168:                            # %for.end522
	jmp	.LBB106_169
.LBB106_169:                            # %if.end523
	jmp	.LBB106_179
.LBB106_170:                            # %if.else524
	movl	$0, -8(%rbp)
.LBB106_171:                            # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB106_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB106_171 Depth=1
	movl	$0, -4(%rbp)
.LBB106_173:                            # %for.cond529
                                        #   Parent Loop BB106_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB106_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB106_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB106_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_173
.LBB106_176:                            # %for.end541
                                        #   in Loop: Header=BB106_171 Depth=1
	jmp	.LBB106_177
.LBB106_177:                            # %for.inc542
                                        #   in Loop: Header=BB106_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_171
.LBB106_178:                            # %for.end544
	jmp	.LBB106_179
.LBB106_179:                            # %if.end545
	jmp	.LBB106_180
.LBB106_180:                            # %sw.epilog
	cmpl	$1045145019, -68(%rbp)  # imm = 0x3E4BA5BB
	jne	.LBB106_182
.LBB106_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB106_182:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB106_181
.Lfunc_end106:
	.size	Conceal_Error.96, .Lfunc_end106-Conceal_Error.96
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI106_0:
	.quad	.LBB106_16
	.quad	.LBB106_158
	.quad	.LBB106_106
	.quad	.LBB106_180
	.quad	.LBB106_36
                                        # -- End function
	.text
	.globl	decode_one_b8block.97   # -- Begin function decode_one_b8block.97
	.p2align	4, 0x90
	.type	decode_one_b8block.97,@function
decode_one_b8block.97:                  # @decode_one_b8block.97
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$524497968, -84(%rbp)   # imm = 0x1F433430
	movl	%edi, -56(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -64(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB107_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB107_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB107_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB107_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB107_4:                              # %for.cond9
                                        #   Parent Loop BB107_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB107_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB107_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB107_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_4
.LBB107_7:                              # %for.end
                                        #   in Loop: Header=BB107_2 Depth=1
	jmp	.LBB107_8
.LBB107_8:                              # %for.inc26
                                        #   in Loop: Header=BB107_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_2
.LBB107_9:                              # %for.end28
	jmp	.LBB107_96
.LBB107_10:                             # %if.else
	cmpl	$0, -68(%rbp)
	jne	.LBB107_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB107_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB107_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB107_31
.LBB107_14:                             # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB107_15:                             # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB107_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB107_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB107_17:                             # %for.cond40
                                        #   Parent Loop BB107_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB107_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB107_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB107_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_17
.LBB107_20:                             # %for.end49
                                        #   in Loop: Header=BB107_15 Depth=1
	jmp	.LBB107_21
.LBB107_21:                             # %for.inc50
                                        #   in Loop: Header=BB107_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_15
.LBB107_22:                             # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB107_23:                             # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB107_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB107_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB107_25:                             # %for.cond56
                                        #   Parent Loop BB107_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB107_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB107_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB107_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_25
.LBB107_28:                             # %for.end71
                                        #   in Loop: Header=BB107_23 Depth=1
	jmp	.LBB107_29
.LBB107_29:                             # %for.inc72
                                        #   in Loop: Header=BB107_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_23
.LBB107_30:                             # %for.end74
	jmp	.LBB107_60
.LBB107_31:                             # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB107_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB107_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB107_34:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB107_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB107_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB107_36:                             # %for.cond83
                                        #   Parent Loop BB107_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB107_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB107_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB107_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_36
.LBB107_39:                             # %for.end120
                                        #   in Loop: Header=BB107_34 Depth=1
	jmp	.LBB107_40
.LBB107_40:                             # %for.inc121
                                        #   in Loop: Header=BB107_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_34
.LBB107_41:                             # %for.end123
	jmp	.LBB107_51
.LBB107_42:                             # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB107_43:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB107_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB107_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB107_45:                             # %for.cond129
                                        #   Parent Loop BB107_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB107_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB107_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB107_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_45
.LBB107_48:                             # %for.end145
                                        #   in Loop: Header=BB107_43 Depth=1
	jmp	.LBB107_49
.LBB107_49:                             # %for.inc146
                                        #   in Loop: Header=BB107_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_43
.LBB107_50:                             # %for.end148
	jmp	.LBB107_51
.LBB107_51:                             # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB107_52:                             # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB107_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB107_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB107_54:                             # %for.cond153
                                        #   Parent Loop BB107_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB107_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB107_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB107_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_54
.LBB107_57:                             # %for.end167
                                        #   in Loop: Header=BB107_52 Depth=1
	jmp	.LBB107_58
.LBB107_58:                             # %for.inc168
                                        #   in Loop: Header=BB107_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_52
.LBB107_59:                             # %for.end170
	jmp	.LBB107_60
.LBB107_60:                             # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB107_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB107_66
.LBB107_62:                             # %lor.lhs.false177
	cmpl	$0, -68(%rbp)
	jne	.LBB107_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB107_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB107_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB107_86
.LBB107_66:                             # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB107_67:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_69 Depth 2
                                        #       Child Loop BB107_74 Depth 3
                                        #         Child Loop BB107_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB107_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB107_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB107_69:                             # %for.cond197
                                        #   Parent Loop BB107_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB107_74 Depth 3
                                        #         Child Loop BB107_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB107_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB107_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB107_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB107_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB107_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB107_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
.LBB107_73:                             # %if.end218
                                        #   in Loop: Header=BB107_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-72(%rbp), %esi
	movl	-76(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB107_74:                             # %for.cond233
                                        #   Parent Loop BB107_67 Depth=1
                                        #     Parent Loop BB107_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB107_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB107_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB107_74 Depth=3
	movl	$0, -4(%rbp)
.LBB107_76:                             # %for.cond237
                                        #   Parent Loop BB107_67 Depth=1
                                        #     Parent Loop BB107_69 Depth=2
                                        #       Parent Loop BB107_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB107_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB107_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB107_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_76
.LBB107_79:                             # %for.end269
                                        #   in Loop: Header=BB107_74 Depth=3
	jmp	.LBB107_80
.LBB107_80:                             # %for.inc270
                                        #   in Loop: Header=BB107_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_74
.LBB107_81:                             # %for.end272
                                        #   in Loop: Header=BB107_69 Depth=2
	jmp	.LBB107_82
.LBB107_82:                             # %for.inc273
                                        #   in Loop: Header=BB107_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_69
.LBB107_83:                             # %for.end275
                                        #   in Loop: Header=BB107_67 Depth=1
	jmp	.LBB107_84
.LBB107_84:                             # %for.inc276
                                        #   in Loop: Header=BB107_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_67
.LBB107_85:                             # %for.end278
	jmp	.LBB107_95
.LBB107_86:                             # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB107_87:                             # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB107_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB107_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB107_89:                             # %for.cond284
                                        #   Parent Loop BB107_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB107_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB107_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB107_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_89
.LBB107_92:                             # %for.end310
                                        #   in Loop: Header=BB107_87 Depth=1
	jmp	.LBB107_93
.LBB107_93:                             # %for.inc311
                                        #   in Loop: Header=BB107_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_87
.LBB107_94:                             # %for.end313
	jmp	.LBB107_95
.LBB107_95:                             # %if.end314
	jmp	.LBB107_96
.LBB107_96:                             # %if.end315
	cmpl	$524497968, -84(%rbp)   # imm = 0x1F433430
	jne	.LBB107_98
.LBB107_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB107_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB107_97
.Lfunc_end107:
	.size	decode_one_b8block.97, .Lfunc_end107-decode_one_b8block.97
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.98 # -- Begin function compute_residue_b8block.98
	.p2align	4, 0x90
	.type	compute_residue_b8block.98,@function
compute_residue_b8block.98:             # @compute_residue_b8block.98
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$880263707, -36(%rbp)   # imm = 0x3477C21B
	movl	%edi, -28(%rbp)
	movl	%esi, -24(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB108_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB108_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB108_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB108_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB108_4:                              # %for.cond4
                                        #   Parent Loop BB108_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB108_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB108_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-24(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB108_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_4
.LBB108_7:                              # %for.end
                                        #   in Loop: Header=BB108_2 Depth=1
	jmp	.LBB108_8
.LBB108_8:                              # %for.inc22
                                        #   in Loop: Header=BB108_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_2
.LBB108_9:                              # %for.end24
	jmp	.LBB108_19
.LBB108_10:                             # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB108_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB108_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB108_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB108_13:                             # %for.cond29
                                        #   Parent Loop BB108_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB108_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB108_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB108_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_13
.LBB108_16:                             # %for.end56
                                        #   in Loop: Header=BB108_11 Depth=1
	jmp	.LBB108_17
.LBB108_17:                             # %for.inc57
                                        #   in Loop: Header=BB108_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_11
.LBB108_18:                             # %for.end59
	jmp	.LBB108_19
.LBB108_19:                             # %if.end
	cmpl	$880263707, -36(%rbp)   # imm = 0x3477C21B
	jne	.LBB108_21
.LBB108_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB108_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB108_20
.Lfunc_end108:
	.size	compute_residue_b8block.98, .Lfunc_end108-compute_residue_b8block.98
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.99
.LCPI109_0:
	.quad	4636737291354636288     # double 100
.LCPI109_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.99
	.p2align	4, 0x90
	.type	Build_Status_Map.99,@function
Build_Status_Map.99:                    # @Build_Status_Map.99
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1859826158, -40(%rbp)  # imm = 0x6EDAB1EE
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB109_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB109_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB109_1 Depth=1
	movl	$0, -8(%rbp)
.LBB109_3:                              # %for.cond2
                                        #   Parent Loop BB109_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB109_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB109_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB109_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB109_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB109_13
.LBB109_6:                              # %if.then
                                        #   in Loop: Header=BB109_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI109_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI109_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB109_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB109_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB109_8:                              # %if.end
                                        #   in Loop: Header=BB109_3 Depth=2
	callq	rand
	vmovsd	.LCPI109_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI109_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB109_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB109_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB109_10:                             # %if.end20
                                        #   in Loop: Header=BB109_3 Depth=2
	callq	rand
	vmovsd	.LCPI109_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI109_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB109_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB109_3 Depth=2
	movl	$1, -4(%rbp)
.LBB109_12:                             # %if.end29
                                        #   in Loop: Header=BB109_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB109_13:                             # %if.end30
                                        #   in Loop: Header=BB109_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB109_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB109_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB109_18
.LBB109_15:                             # %if.else
                                        #   in Loop: Header=BB109_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB109_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB109_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB109_17:                             # %if.end49
                                        #   in Loop: Header=BB109_3 Depth=2
	jmp	.LBB109_18
.LBB109_18:                             # %if.end50
                                        #   in Loop: Header=BB109_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB109_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_3
.LBB109_20:                             # %for.end
                                        #   in Loop: Header=BB109_1 Depth=1
	jmp	.LBB109_21
.LBB109_21:                             # %for.inc53
                                        #   in Loop: Header=BB109_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_1
.LBB109_22:                             # %for.end55
	cmpl	$1859826158, -40(%rbp)  # imm = 0x6EDAB1EE
	jne	.LBB109_24
.LBB109_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB109_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB109_23
.Lfunc_end109:
	.size	Build_Status_Map.99, .Lfunc_end109-Build_Status_Map.99
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.100 # -- Begin function compute_residue_b8block.100
	.p2align	4, 0x90
	.type	compute_residue_b8block.100,@function
compute_residue_b8block.100:            # @compute_residue_b8block.100
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$269429426, -36(%rbp)   # imm = 0x100F2AB2
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB110_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB110_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB110_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB110_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB110_4:                              # %for.cond4
                                        #   Parent Loop BB110_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB110_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB110_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB110_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_4
.LBB110_7:                              # %for.end
                                        #   in Loop: Header=BB110_2 Depth=1
	jmp	.LBB110_8
.LBB110_8:                              # %for.inc22
                                        #   in Loop: Header=BB110_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_2
.LBB110_9:                              # %for.end24
	jmp	.LBB110_19
.LBB110_10:                             # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB110_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB110_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB110_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB110_13:                             # %for.cond29
                                        #   Parent Loop BB110_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB110_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB110_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB110_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_13
.LBB110_16:                             # %for.end56
                                        #   in Loop: Header=BB110_11 Depth=1
	jmp	.LBB110_17
.LBB110_17:                             # %for.inc57
                                        #   in Loop: Header=BB110_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_11
.LBB110_18:                             # %for.end59
	jmp	.LBB110_19
.LBB110_19:                             # %if.end
	cmpl	$269429426, -36(%rbp)   # imm = 0x100F2AB2
	jne	.LBB110_21
.LBB110_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB110_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB110_20
.Lfunc_end110:
	.size	compute_residue_b8block.100, .Lfunc_end110-compute_residue_b8block.100
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.101      # -- Begin function DecOneForthPix.101
	.p2align	4, 0x90
	.type	DecOneForthPix.101,@function
DecOneForthPix.101:                     # @DecOneForthPix.101
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2048707066, -8(%rbp)   # imm = 0x7A1CC9FA
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB111_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB111_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB111_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB111_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_1
.LBB111_4:                              # %for.end
	cmpl	$2048707066, -8(%rbp)   # imm = 0x7A1CC9FA
	jne	.LBB111_6
.LBB111_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB111_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB111_5
.Lfunc_end111:
	.size	DecOneForthPix.101, .Lfunc_end111-DecOneForthPix.101
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.102 # -- Begin function compute_residue_b8block.102
	.p2align	4, 0x90
	.type	compute_residue_b8block.102,@function
compute_residue_b8block.102:            # @compute_residue_b8block.102
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1768100623, -36(%rbp)  # imm = 0x6963130F
	movl	%edi, -28(%rbp)
	movl	%esi, -24(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB112_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB112_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB112_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB112_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB112_4:                              # %for.cond4
                                        #   Parent Loop BB112_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB112_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB112_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-24(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB112_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_4
.LBB112_7:                              # %for.end
                                        #   in Loop: Header=BB112_2 Depth=1
	jmp	.LBB112_8
.LBB112_8:                              # %for.inc22
                                        #   in Loop: Header=BB112_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_2
.LBB112_9:                              # %for.end24
	jmp	.LBB112_19
.LBB112_10:                             # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB112_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB112_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB112_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB112_13:                             # %for.cond29
                                        #   Parent Loop BB112_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB112_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB112_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB112_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_13
.LBB112_16:                             # %for.end56
                                        #   in Loop: Header=BB112_11 Depth=1
	jmp	.LBB112_17
.LBB112_17:                             # %for.inc57
                                        #   in Loop: Header=BB112_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_11
.LBB112_18:                             # %for.end59
	jmp	.LBB112_19
.LBB112_19:                             # %if.end
	cmpl	$1768100623, -36(%rbp)  # imm = 0x6963130F
	jne	.LBB112_21
.LBB112_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB112_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB112_20
.Lfunc_end112:
	.size	compute_residue_b8block.102, .Lfunc_end112-compute_residue_b8block.102
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.103      # -- Begin function DecOneForthPix.103
	.p2align	4, 0x90
	.type	DecOneForthPix.103,@function
DecOneForthPix.103:                     # @DecOneForthPix.103
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1542948257, -8(%rbp)   # imm = 0x5BF785A1
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB113_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB113_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB113_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB113_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_1
.LBB113_4:                              # %for.end
	cmpl	$1542948257, -8(%rbp)   # imm = 0x5BF785A1
	jne	.LBB113_6
.LBB113_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB113_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB113_5
.Lfunc_end113:
	.size	DecOneForthPix.103, .Lfunc_end113-DecOneForthPix.103
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.104 # -- Begin function compute_residue_b8block.104
	.p2align	4, 0x90
	.type	compute_residue_b8block.104,@function
compute_residue_b8block.104:            # @compute_residue_b8block.104
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$426869026, -36(%rbp)   # imm = 0x19718122
	movl	%edi, -32(%rbp)
	movl	%esi, -28(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB114_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB114_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB114_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB114_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB114_4:                              # %for.cond4
                                        #   Parent Loop BB114_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB114_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB114_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB114_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_4
.LBB114_7:                              # %for.end
                                        #   in Loop: Header=BB114_2 Depth=1
	jmp	.LBB114_8
.LBB114_8:                              # %for.inc22
                                        #   in Loop: Header=BB114_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_2
.LBB114_9:                              # %for.end24
	jmp	.LBB114_19
.LBB114_10:                             # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB114_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB114_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB114_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB114_13:                             # %for.cond29
                                        #   Parent Loop BB114_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB114_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB114_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB114_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_13
.LBB114_16:                             # %for.end56
                                        #   in Loop: Header=BB114_11 Depth=1
	jmp	.LBB114_17
.LBB114_17:                             # %for.inc57
                                        #   in Loop: Header=BB114_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_11
.LBB114_18:                             # %for.end59
	jmp	.LBB114_19
.LBB114_19:                             # %if.end
	cmpl	$426869026, -36(%rbp)   # imm = 0x19718122
	jne	.LBB114_21
.LBB114_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB114_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB114_20
.Lfunc_end114:
	.size	compute_residue_b8block.104, .Lfunc_end114-compute_residue_b8block.104
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.105   # -- Begin function Error_Concealment.105
	.p2align	4, 0x90
	.type	Error_Concealment.105,@function
Error_Concealment.105:                  # @Error_Concealment.105
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1963797517, -20(%rbp)  # imm = 0x750D2C0D
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB115_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB115_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB115_1 Depth=1
	movl	$0, -8(%rbp)
.LBB115_3:                              # %for.cond2
                                        #   Parent Loop BB115_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB115_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB115_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB115_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB115_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB115_6:                              # %if.end
                                        #   in Loop: Header=BB115_3 Depth=2
	jmp	.LBB115_7
.LBB115_7:                              # %for.inc
                                        #   in Loop: Header=BB115_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_3
.LBB115_8:                              # %for.end
                                        #   in Loop: Header=BB115_1 Depth=1
	jmp	.LBB115_9
.LBB115_9:                              # %for.inc7
                                        #   in Loop: Header=BB115_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_1
.LBB115_10:                             # %for.end9
	cmpl	$1963797517, -20(%rbp)  # imm = 0x750D2C0D
	jne	.LBB115_12
.LBB115_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB115_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB115_11
.Lfunc_end115:
	.size	Error_Concealment.105, .Lfunc_end115-Error_Concealment.105
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.106       # -- Begin function Conceal_Error.106
	.p2align	4, 0x90
	.type	Conceal_Error.106,@function
Conceal_Error.106:                      # @Conceal_Error.106
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1051893349, -68(%rbp)  # imm = 0x3EB29E65
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB116_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB116_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB116_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB116_4:                              # %land.end
.LBB116_5:                              # %lor.end
.LBB116_6:                              # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB116_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB116_9
.LBB116_8:                              # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB116_14
.LBB116_9:                              # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB116_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB116_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB116_12:                             # %land.end51
.LBB116_13:                             # %lor.end53
.LBB116_14:                             # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB116_180
# %bb.15:                               # %land.end54
	movq	.LJTI116_0(,%rax,8), %rax
	jmpq	*%rax
.LBB116_16:                             # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB116_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB116_18:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB116_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB116_18 Depth=1
	movl	$0, -4(%rbp)
.LBB116_20:                             # %for.cond68
                                        #   Parent Loop BB116_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB116_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB116_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB116_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_20
.LBB116_23:                             # %for.end
                                        #   in Loop: Header=BB116_18 Depth=1
	jmp	.LBB116_24
.LBB116_24:                             # %for.inc85
                                        #   in Loop: Header=BB116_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_18
.LBB116_25:                             # %for.end87
	jmp	.LBB116_35
.LBB116_26:                             # %if.else
	movl	$0, -8(%rbp)
.LBB116_27:                             # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB116_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB116_27 Depth=1
	movl	$0, -4(%rbp)
.LBB116_29:                             # %for.cond92
                                        #   Parent Loop BB116_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB116_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB116_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB116_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_29
.LBB116_32:                             # %for.end104
                                        #   in Loop: Header=BB116_27 Depth=1
	jmp	.LBB116_33
.LBB116_33:                             # %for.inc105
                                        #   in Loop: Header=BB116_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_27
.LBB116_34:                             # %for.end107
	jmp	.LBB116_35
.LBB116_35:                             # %if.end
	jmp	.LBB116_180
.LBB116_36:                             # %sw.bb108
	movl	$0, -16(%rbp)
.LBB116_37:                             # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_39 Depth 2
                                        #       Child Loop BB116_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB116_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB116_37 Depth=1
	movl	$0, -12(%rbp)
.LBB116_39:                             # %for.cond113
                                        #   Parent Loop BB116_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB116_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB116_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB116_39 Depth=2
	movl	$0, -4(%rbp)
.LBB116_41:                             # %for.cond117
                                        #   Parent Loop BB116_37 Depth=1
                                        #     Parent Loop BB116_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB116_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB116_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB116_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_41
.LBB116_44:                             # %for.end141
                                        #   in Loop: Header=BB116_39 Depth=2
	jmp	.LBB116_45
.LBB116_45:                             # %for.inc142
                                        #   in Loop: Header=BB116_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_39
.LBB116_46:                             # %for.end144
                                        #   in Loop: Header=BB116_37 Depth=1
	jmp	.LBB116_47
.LBB116_47:                             # %for.inc145
                                        #   in Loop: Header=BB116_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_37
.LBB116_48:                             # %for.end147
	movl	$0, -4(%rbp)
.LBB116_49:                             # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB116_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB116_49 Depth=1
	movl	$0, -8(%rbp)
.LBB116_51:                             # %for.cond152
                                        #   Parent Loop BB116_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB116_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB116_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB116_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_51
.LBB116_54:                             # %for.end162
                                        #   in Loop: Header=BB116_49 Depth=1
	jmp	.LBB116_55
.LBB116_55:                             # %for.inc163
                                        #   in Loop: Header=BB116_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_49
.LBB116_56:                             # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB116_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB116_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB116_59:                             # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB116_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB116_59 Depth=1
	movl	$0, -4(%rbp)
.LBB116_61:                             # %for.cond175
                                        #   Parent Loop BB116_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB116_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB116_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB116_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_61
.LBB116_64:                             # %for.end195
                                        #   in Loop: Header=BB116_59 Depth=1
	jmp	.LBB116_65
.LBB116_65:                             # %for.inc196
                                        #   in Loop: Header=BB116_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_59
.LBB116_66:                             # %for.end198
	jmp	.LBB116_95
.LBB116_67:                             # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB116_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB116_69:                             # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_71 Depth 2
                                        #       Child Loop BB116_73 Depth 3
                                        #         Child Loop BB116_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB116_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB116_71:                             # %for.cond210
                                        #   Parent Loop BB116_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB116_73 Depth 3
                                        #         Child Loop BB116_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB116_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB116_73:                             # %for.cond236
                                        #   Parent Loop BB116_69 Depth=1
                                        #     Parent Loop BB116_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB116_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB116_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB116_73 Depth=3
	movl	$0, -4(%rbp)
.LBB116_75:                             # %for.cond240
                                        #   Parent Loop BB116_69 Depth=1
                                        #     Parent Loop BB116_71 Depth=2
                                        #       Parent Loop BB116_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB116_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB116_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB116_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_75
.LBB116_78:                             # %for.end259
                                        #   in Loop: Header=BB116_73 Depth=3
	jmp	.LBB116_79
.LBB116_79:                             # %for.inc260
                                        #   in Loop: Header=BB116_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_73
.LBB116_80:                             # %for.end262
                                        #   in Loop: Header=BB116_71 Depth=2
	jmp	.LBB116_81
.LBB116_81:                             # %for.inc263
                                        #   in Loop: Header=BB116_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_71
.LBB116_82:                             # %for.end265
                                        #   in Loop: Header=BB116_69 Depth=1
	jmp	.LBB116_83
.LBB116_83:                             # %for.inc266
                                        #   in Loop: Header=BB116_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_69
.LBB116_84:                             # %for.end268
	jmp	.LBB116_94
.LBB116_85:                             # %if.else269
	movl	$0, -8(%rbp)
.LBB116_86:                             # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB116_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB116_86 Depth=1
	movl	$0, -4(%rbp)
.LBB116_88:                             # %for.cond274
                                        #   Parent Loop BB116_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB116_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB116_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB116_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_88
.LBB116_91:                             # %for.end294
                                        #   in Loop: Header=BB116_86 Depth=1
	jmp	.LBB116_92
.LBB116_92:                             # %for.inc295
                                        #   in Loop: Header=BB116_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_86
.LBB116_93:                             # %for.end297
	jmp	.LBB116_94
.LBB116_94:                             # %if.end298
	jmp	.LBB116_95
.LBB116_95:                             # %if.end299
	jmp	.LBB116_105
.LBB116_96:                             # %if.else300
	movl	$0, -8(%rbp)
.LBB116_97:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB116_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB116_97 Depth=1
	movl	$0, -4(%rbp)
.LBB116_99:                             # %for.cond305
                                        #   Parent Loop BB116_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB116_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB116_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB116_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_99
.LBB116_102:                            # %for.end317
                                        #   in Loop: Header=BB116_97 Depth=1
	jmp	.LBB116_103
.LBB116_103:                            # %for.inc318
                                        #   in Loop: Header=BB116_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_97
.LBB116_104:                            # %for.end320
	jmp	.LBB116_105
.LBB116_105:                            # %if.end321
	jmp	.LBB116_180
.LBB116_106:                            # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB116_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB116_108:                            # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_110 Depth 2
                                        #       Child Loop BB116_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB116_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB116_108 Depth=1
	movl	$0, -12(%rbp)
.LBB116_110:                            # %for.cond331
                                        #   Parent Loop BB116_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB116_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB116_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB116_110 Depth=2
	movl	$0, -4(%rbp)
.LBB116_112:                            # %for.cond335
                                        #   Parent Loop BB116_108 Depth=1
                                        #     Parent Loop BB116_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB116_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB116_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB116_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_112
.LBB116_115:                            # %for.end359
                                        #   in Loop: Header=BB116_110 Depth=2
	jmp	.LBB116_116
.LBB116_116:                            # %for.inc360
                                        #   in Loop: Header=BB116_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_110
.LBB116_117:                            # %for.end362
                                        #   in Loop: Header=BB116_108 Depth=1
	jmp	.LBB116_118
.LBB116_118:                            # %for.inc363
                                        #   in Loop: Header=BB116_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_108
.LBB116_119:                            # %for.end365
	movl	$0, -4(%rbp)
.LBB116_120:                            # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB116_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB116_120 Depth=1
	movl	$0, -8(%rbp)
.LBB116_122:                            # %for.cond370
                                        #   Parent Loop BB116_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB116_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB116_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB116_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_122
.LBB116_125:                            # %for.end380
                                        #   in Loop: Header=BB116_120 Depth=1
	jmp	.LBB116_126
.LBB116_126:                            # %for.inc381
                                        #   in Loop: Header=BB116_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_120
.LBB116_127:                            # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB116_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB116_129:                            # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB116_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB116_129 Depth=1
	movl	$0, -4(%rbp)
.LBB116_131:                            # %for.cond390
                                        #   Parent Loop BB116_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB116_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB116_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB116_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_131
.LBB116_134:                            # %for.end410
                                        #   in Loop: Header=BB116_129 Depth=1
	jmp	.LBB116_135
.LBB116_135:                            # %for.inc411
                                        #   in Loop: Header=BB116_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_129
.LBB116_136:                            # %for.end413
	jmp	.LBB116_156
.LBB116_137:                            # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB116_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB116_139:                            # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_141 Depth 2
                                        #       Child Loop BB116_143 Depth 3
                                        #         Child Loop BB116_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB116_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB116_141:                            # %for.cond425
                                        #   Parent Loop BB116_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB116_143 Depth 3
                                        #         Child Loop BB116_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB116_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB116_143:                            # %for.cond452
                                        #   Parent Loop BB116_139 Depth=1
                                        #     Parent Loop BB116_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB116_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB116_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB116_143 Depth=3
	movl	$0, -4(%rbp)
.LBB116_145:                            # %for.cond456
                                        #   Parent Loop BB116_139 Depth=1
                                        #     Parent Loop BB116_141 Depth=2
                                        #       Parent Loop BB116_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB116_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB116_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB116_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_145
.LBB116_148:                            # %for.end475
                                        #   in Loop: Header=BB116_143 Depth=3
	jmp	.LBB116_149
.LBB116_149:                            # %for.inc476
                                        #   in Loop: Header=BB116_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_143
.LBB116_150:                            # %for.end478
                                        #   in Loop: Header=BB116_141 Depth=2
	jmp	.LBB116_151
.LBB116_151:                            # %for.inc479
                                        #   in Loop: Header=BB116_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_141
.LBB116_152:                            # %for.end481
                                        #   in Loop: Header=BB116_139 Depth=1
	jmp	.LBB116_153
.LBB116_153:                            # %for.inc482
                                        #   in Loop: Header=BB116_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_139
.LBB116_154:                            # %for.end484
	jmp	.LBB116_155
.LBB116_155:                            # %if.end485
	jmp	.LBB116_156
.LBB116_156:                            # %if.end486
	jmp	.LBB116_157
.LBB116_157:                            # %if.end487
	jmp	.LBB116_180
.LBB116_158:                            # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB116_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB116_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB116_161:                            # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB116_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB116_161 Depth=1
	movl	$0, -4(%rbp)
.LBB116_163:                            # %for.cond499
                                        #   Parent Loop BB116_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB116_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB116_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB116_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_163
.LBB116_166:                            # %for.end519
                                        #   in Loop: Header=BB116_161 Depth=1
	jmp	.LBB116_167
.LBB116_167:                            # %for.inc520
                                        #   in Loop: Header=BB116_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_161
.LBB116_168:                            # %for.end522
	jmp	.LBB116_169
.LBB116_169:                            # %if.end523
	jmp	.LBB116_179
.LBB116_170:                            # %if.else524
	movl	$0, -8(%rbp)
.LBB116_171:                            # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB116_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB116_171 Depth=1
	movl	$0, -4(%rbp)
.LBB116_173:                            # %for.cond529
                                        #   Parent Loop BB116_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB116_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB116_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB116_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_173
.LBB116_176:                            # %for.end541
                                        #   in Loop: Header=BB116_171 Depth=1
	jmp	.LBB116_177
.LBB116_177:                            # %for.inc542
                                        #   in Loop: Header=BB116_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_171
.LBB116_178:                            # %for.end544
	jmp	.LBB116_179
.LBB116_179:                            # %if.end545
	jmp	.LBB116_180
.LBB116_180:                            # %sw.epilog
	cmpl	$1051893349, -68(%rbp)  # imm = 0x3EB29E65
	jne	.LBB116_182
.LBB116_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB116_182:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB116_181
.Lfunc_end116:
	.size	Conceal_Error.106, .Lfunc_end116-Conceal_Error.106
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI116_0:
	.quad	.LBB116_16
	.quad	.LBB116_158
	.quad	.LBB116_106
	.quad	.LBB116_180
	.quad	.LBB116_36
                                        # -- End function
	.text
	.globl	decode_one_b8block.107  # -- Begin function decode_one_b8block.107
	.p2align	4, 0x90
	.type	decode_one_b8block.107,@function
decode_one_b8block.107:                 # @decode_one_b8block.107
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1678163997, -84(%rbp)  # imm = 0x6406C01D
	movl	%edi, -56(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
	movl	-76(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-76(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB117_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB117_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB117_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB117_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB117_4:                              # %for.cond9
                                        #   Parent Loop BB117_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB117_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB117_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB117_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_4
.LBB117_7:                              # %for.end
                                        #   in Loop: Header=BB117_2 Depth=1
	jmp	.LBB117_8
.LBB117_8:                              # %for.inc26
                                        #   in Loop: Header=BB117_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_2
.LBB117_9:                              # %for.end28
	jmp	.LBB117_96
.LBB117_10:                             # %if.else
	cmpl	$0, -68(%rbp)
	jne	.LBB117_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB117_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB117_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB117_31
.LBB117_14:                             # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB117_15:                             # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB117_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB117_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB117_17:                             # %for.cond40
                                        #   Parent Loop BB117_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB117_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB117_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB117_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_17
.LBB117_20:                             # %for.end49
                                        #   in Loop: Header=BB117_15 Depth=1
	jmp	.LBB117_21
.LBB117_21:                             # %for.inc50
                                        #   in Loop: Header=BB117_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_15
.LBB117_22:                             # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB117_23:                             # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB117_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB117_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB117_25:                             # %for.cond56
                                        #   Parent Loop BB117_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB117_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB117_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB117_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB117_25
.LBB117_28:                             # %for.end71
                                        #   in Loop: Header=BB117_23 Depth=1
	jmp	.LBB117_29
.LBB117_29:                             # %for.inc72
                                        #   in Loop: Header=BB117_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB117_23
.LBB117_30:                             # %for.end74
	jmp	.LBB117_60
.LBB117_31:                             # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB117_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB117_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB117_34:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB117_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB117_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB117_36:                             # %for.cond83
                                        #   Parent Loop BB117_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB117_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB117_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB117_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB117_36
.LBB117_39:                             # %for.end120
                                        #   in Loop: Header=BB117_34 Depth=1
	jmp	.LBB117_40
.LBB117_40:                             # %for.inc121
                                        #   in Loop: Header=BB117_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB117_34
.LBB117_41:                             # %for.end123
	jmp	.LBB117_51
.LBB117_42:                             # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB117_43:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB117_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB117_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB117_45:                             # %for.cond129
                                        #   Parent Loop BB117_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB117_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB117_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB117_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB117_45
.LBB117_48:                             # %for.end145
                                        #   in Loop: Header=BB117_43 Depth=1
	jmp	.LBB117_49
.LBB117_49:                             # %for.inc146
                                        #   in Loop: Header=BB117_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB117_43
.LBB117_50:                             # %for.end148
	jmp	.LBB117_51
.LBB117_51:                             # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB117_52:                             # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB117_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB117_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB117_54:                             # %for.cond153
                                        #   Parent Loop BB117_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB117_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB117_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB117_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_54
.LBB117_57:                             # %for.end167
                                        #   in Loop: Header=BB117_52 Depth=1
	jmp	.LBB117_58
.LBB117_58:                             # %for.inc168
                                        #   in Loop: Header=BB117_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_52
.LBB117_59:                             # %for.end170
	jmp	.LBB117_60
.LBB117_60:                             # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB117_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB117_66
.LBB117_62:                             # %lor.lhs.false177
	cmpl	$0, -68(%rbp)
	jne	.LBB117_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB117_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB117_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB117_86
.LBB117_66:                             # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB117_67:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_69 Depth 2
                                        #       Child Loop BB117_74 Depth 3
                                        #         Child Loop BB117_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB117_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB117_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB117_69:                             # %for.cond197
                                        #   Parent Loop BB117_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_74 Depth 3
                                        #         Child Loop BB117_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB117_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB117_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB117_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB117_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB117_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB117_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
.LBB117_73:                             # %if.end218
                                        #   in Loop: Header=BB117_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-80(%rbp), %esi
	movl	-72(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB117_74:                             # %for.cond233
                                        #   Parent Loop BB117_67 Depth=1
                                        #     Parent Loop BB117_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB117_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB117_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB117_74 Depth=3
	movl	$0, -8(%rbp)
.LBB117_76:                             # %for.cond237
                                        #   Parent Loop BB117_67 Depth=1
                                        #     Parent Loop BB117_69 Depth=2
                                        #       Parent Loop BB117_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB117_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB117_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB117_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_76
.LBB117_79:                             # %for.end269
                                        #   in Loop: Header=BB117_74 Depth=3
	jmp	.LBB117_80
.LBB117_80:                             # %for.inc270
                                        #   in Loop: Header=BB117_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_74
.LBB117_81:                             # %for.end272
                                        #   in Loop: Header=BB117_69 Depth=2
	jmp	.LBB117_82
.LBB117_82:                             # %for.inc273
                                        #   in Loop: Header=BB117_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB117_69
.LBB117_83:                             # %for.end275
                                        #   in Loop: Header=BB117_67 Depth=1
	jmp	.LBB117_84
.LBB117_84:                             # %for.inc276
                                        #   in Loop: Header=BB117_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB117_67
.LBB117_85:                             # %for.end278
	jmp	.LBB117_95
.LBB117_86:                             # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB117_87:                             # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB117_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB117_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB117_89:                             # %for.cond284
                                        #   Parent Loop BB117_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB117_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB117_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB117_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_89
.LBB117_92:                             # %for.end310
                                        #   in Loop: Header=BB117_87 Depth=1
	jmp	.LBB117_93
.LBB117_93:                             # %for.inc311
                                        #   in Loop: Header=BB117_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_87
.LBB117_94:                             # %for.end313
	jmp	.LBB117_95
.LBB117_95:                             # %if.end314
	jmp	.LBB117_96
.LBB117_96:                             # %if.end315
	cmpl	$1678163997, -84(%rbp)  # imm = 0x6406C01D
	jne	.LBB117_98
.LBB117_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB117_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB117_97
.Lfunc_end117:
	.size	decode_one_b8block.107, .Lfunc_end117-decode_one_b8block.107
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.108      # -- Begin function DecOneForthPix.108
	.p2align	4, 0x90
	.type	DecOneForthPix.108,@function
DecOneForthPix.108:                     # @DecOneForthPix.108
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$493175053, -12(%rbp)   # imm = 0x1D65410D
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB118_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB118_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB118_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB118_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_1
.LBB118_4:                              # %for.end
	cmpl	$493175053, -12(%rbp)   # imm = 0x1D65410D
	jne	.LBB118_6
.LBB118_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB118_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB118_5
.Lfunc_end118:
	.size	DecOneForthPix.108, .Lfunc_end118-DecOneForthPix.108
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.109   # -- Begin function Error_Concealment.109
	.p2align	4, 0x90
	.type	Error_Concealment.109,@function
Error_Concealment.109:                  # @Error_Concealment.109
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$524121328, -20(%rbp)   # imm = 0x1F3D74F0
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB119_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB119_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB119_1 Depth=1
	movl	$0, -8(%rbp)
.LBB119_3:                              # %for.cond2
                                        #   Parent Loop BB119_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB119_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB119_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB119_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB119_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB119_6:                              # %if.end
                                        #   in Loop: Header=BB119_3 Depth=2
	jmp	.LBB119_7
.LBB119_7:                              # %for.inc
                                        #   in Loop: Header=BB119_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_3
.LBB119_8:                              # %for.end
                                        #   in Loop: Header=BB119_1 Depth=1
	jmp	.LBB119_9
.LBB119_9:                              # %for.inc7
                                        #   in Loop: Header=BB119_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_1
.LBB119_10:                             # %for.end9
	cmpl	$524121328, -20(%rbp)   # imm = 0x1F3D74F0
	jne	.LBB119_12
.LBB119_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB119_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB119_11
.Lfunc_end119:
	.size	Error_Concealment.109, .Lfunc_end119-Error_Concealment.109
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.110       # -- Begin function Conceal_Error.110
	.p2align	4, 0x90
	.type	Conceal_Error.110,@function
Conceal_Error.110:                      # @Conceal_Error.110
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1973329860, -68(%rbp)  # imm = 0x759E9FC4
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB120_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB120_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB120_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB120_4:                              # %land.end
.LBB120_5:                              # %lor.end
.LBB120_6:                              # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB120_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB120_9
.LBB120_8:                              # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB120_14
.LBB120_9:                              # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB120_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB120_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB120_12:                             # %land.end51
.LBB120_13:                             # %lor.end53
.LBB120_14:                             # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB120_180
# %bb.15:                               # %land.end54
	movq	.LJTI120_0(,%rax,8), %rax
	jmpq	*%rax
.LBB120_16:                             # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB120_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB120_18:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB120_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB120_18 Depth=1
	movl	$0, -4(%rbp)
.LBB120_20:                             # %for.cond68
                                        #   Parent Loop BB120_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB120_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB120_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB120_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_20
.LBB120_23:                             # %for.end
                                        #   in Loop: Header=BB120_18 Depth=1
	jmp	.LBB120_24
.LBB120_24:                             # %for.inc85
                                        #   in Loop: Header=BB120_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_18
.LBB120_25:                             # %for.end87
	jmp	.LBB120_35
.LBB120_26:                             # %if.else
	movl	$0, -8(%rbp)
.LBB120_27:                             # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB120_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB120_27 Depth=1
	movl	$0, -4(%rbp)
.LBB120_29:                             # %for.cond92
                                        #   Parent Loop BB120_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB120_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB120_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB120_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_29
.LBB120_32:                             # %for.end104
                                        #   in Loop: Header=BB120_27 Depth=1
	jmp	.LBB120_33
.LBB120_33:                             # %for.inc105
                                        #   in Loop: Header=BB120_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_27
.LBB120_34:                             # %for.end107
	jmp	.LBB120_35
.LBB120_35:                             # %if.end
	jmp	.LBB120_180
.LBB120_36:                             # %sw.bb108
	movl	$0, -16(%rbp)
.LBB120_37:                             # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_39 Depth 2
                                        #       Child Loop BB120_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB120_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB120_37 Depth=1
	movl	$0, -12(%rbp)
.LBB120_39:                             # %for.cond113
                                        #   Parent Loop BB120_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB120_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB120_39 Depth=2
	movl	$0, -4(%rbp)
.LBB120_41:                             # %for.cond117
                                        #   Parent Loop BB120_37 Depth=1
                                        #     Parent Loop BB120_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB120_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB120_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB120_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_41
.LBB120_44:                             # %for.end141
                                        #   in Loop: Header=BB120_39 Depth=2
	jmp	.LBB120_45
.LBB120_45:                             # %for.inc142
                                        #   in Loop: Header=BB120_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB120_39
.LBB120_46:                             # %for.end144
                                        #   in Loop: Header=BB120_37 Depth=1
	jmp	.LBB120_47
.LBB120_47:                             # %for.inc145
                                        #   in Loop: Header=BB120_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB120_37
.LBB120_48:                             # %for.end147
	movl	$0, -4(%rbp)
.LBB120_49:                             # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB120_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB120_49 Depth=1
	movl	$0, -8(%rbp)
.LBB120_51:                             # %for.cond152
                                        #   Parent Loop BB120_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB120_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB120_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB120_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_51
.LBB120_54:                             # %for.end162
                                        #   in Loop: Header=BB120_49 Depth=1
	jmp	.LBB120_55
.LBB120_55:                             # %for.inc163
                                        #   in Loop: Header=BB120_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_49
.LBB120_56:                             # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB120_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB120_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB120_59:                             # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB120_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB120_59 Depth=1
	movl	$0, -4(%rbp)
.LBB120_61:                             # %for.cond175
                                        #   Parent Loop BB120_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB120_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB120_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB120_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_61
.LBB120_64:                             # %for.end195
                                        #   in Loop: Header=BB120_59 Depth=1
	jmp	.LBB120_65
.LBB120_65:                             # %for.inc196
                                        #   in Loop: Header=BB120_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_59
.LBB120_66:                             # %for.end198
	jmp	.LBB120_95
.LBB120_67:                             # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB120_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB120_69:                             # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_71 Depth 2
                                        #       Child Loop BB120_73 Depth 3
                                        #         Child Loop BB120_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB120_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB120_71:                             # %for.cond210
                                        #   Parent Loop BB120_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_73 Depth 3
                                        #         Child Loop BB120_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB120_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB120_73:                             # %for.cond236
                                        #   Parent Loop BB120_69 Depth=1
                                        #     Parent Loop BB120_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB120_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB120_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB120_73 Depth=3
	movl	$0, -4(%rbp)
.LBB120_75:                             # %for.cond240
                                        #   Parent Loop BB120_69 Depth=1
                                        #     Parent Loop BB120_71 Depth=2
                                        #       Parent Loop BB120_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB120_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB120_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB120_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_75
.LBB120_78:                             # %for.end259
                                        #   in Loop: Header=BB120_73 Depth=3
	jmp	.LBB120_79
.LBB120_79:                             # %for.inc260
                                        #   in Loop: Header=BB120_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_73
.LBB120_80:                             # %for.end262
                                        #   in Loop: Header=BB120_71 Depth=2
	jmp	.LBB120_81
.LBB120_81:                             # %for.inc263
                                        #   in Loop: Header=BB120_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB120_71
.LBB120_82:                             # %for.end265
                                        #   in Loop: Header=BB120_69 Depth=1
	jmp	.LBB120_83
.LBB120_83:                             # %for.inc266
                                        #   in Loop: Header=BB120_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB120_69
.LBB120_84:                             # %for.end268
	jmp	.LBB120_94
.LBB120_85:                             # %if.else269
	movl	$0, -8(%rbp)
.LBB120_86:                             # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB120_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB120_86 Depth=1
	movl	$0, -4(%rbp)
.LBB120_88:                             # %for.cond274
                                        #   Parent Loop BB120_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB120_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB120_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB120_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_88
.LBB120_91:                             # %for.end294
                                        #   in Loop: Header=BB120_86 Depth=1
	jmp	.LBB120_92
.LBB120_92:                             # %for.inc295
                                        #   in Loop: Header=BB120_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_86
.LBB120_93:                             # %for.end297
	jmp	.LBB120_94
.LBB120_94:                             # %if.end298
	jmp	.LBB120_95
.LBB120_95:                             # %if.end299
	jmp	.LBB120_105
.LBB120_96:                             # %if.else300
	movl	$0, -8(%rbp)
.LBB120_97:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB120_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB120_97 Depth=1
	movl	$0, -4(%rbp)
.LBB120_99:                             # %for.cond305
                                        #   Parent Loop BB120_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB120_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB120_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB120_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_99
.LBB120_102:                            # %for.end317
                                        #   in Loop: Header=BB120_97 Depth=1
	jmp	.LBB120_103
.LBB120_103:                            # %for.inc318
                                        #   in Loop: Header=BB120_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_97
.LBB120_104:                            # %for.end320
	jmp	.LBB120_105
.LBB120_105:                            # %if.end321
	jmp	.LBB120_180
.LBB120_106:                            # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB120_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB120_108:                            # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_110 Depth 2
                                        #       Child Loop BB120_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB120_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB120_108 Depth=1
	movl	$0, -12(%rbp)
.LBB120_110:                            # %for.cond331
                                        #   Parent Loop BB120_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB120_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB120_110 Depth=2
	movl	$0, -4(%rbp)
.LBB120_112:                            # %for.cond335
                                        #   Parent Loop BB120_108 Depth=1
                                        #     Parent Loop BB120_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB120_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB120_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB120_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_112
.LBB120_115:                            # %for.end359
                                        #   in Loop: Header=BB120_110 Depth=2
	jmp	.LBB120_116
.LBB120_116:                            # %for.inc360
                                        #   in Loop: Header=BB120_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB120_110
.LBB120_117:                            # %for.end362
                                        #   in Loop: Header=BB120_108 Depth=1
	jmp	.LBB120_118
.LBB120_118:                            # %for.inc363
                                        #   in Loop: Header=BB120_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB120_108
.LBB120_119:                            # %for.end365
	movl	$0, -4(%rbp)
.LBB120_120:                            # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB120_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB120_120 Depth=1
	movl	$0, -8(%rbp)
.LBB120_122:                            # %for.cond370
                                        #   Parent Loop BB120_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB120_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB120_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB120_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_122
.LBB120_125:                            # %for.end380
                                        #   in Loop: Header=BB120_120 Depth=1
	jmp	.LBB120_126
.LBB120_126:                            # %for.inc381
                                        #   in Loop: Header=BB120_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_120
.LBB120_127:                            # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB120_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB120_129:                            # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB120_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB120_129 Depth=1
	movl	$0, -4(%rbp)
.LBB120_131:                            # %for.cond390
                                        #   Parent Loop BB120_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB120_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB120_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB120_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_131
.LBB120_134:                            # %for.end410
                                        #   in Loop: Header=BB120_129 Depth=1
	jmp	.LBB120_135
.LBB120_135:                            # %for.inc411
                                        #   in Loop: Header=BB120_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_129
.LBB120_136:                            # %for.end413
	jmp	.LBB120_156
.LBB120_137:                            # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB120_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB120_139:                            # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_141 Depth 2
                                        #       Child Loop BB120_143 Depth 3
                                        #         Child Loop BB120_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB120_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB120_141:                            # %for.cond425
                                        #   Parent Loop BB120_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_143 Depth 3
                                        #         Child Loop BB120_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB120_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB120_143:                            # %for.cond452
                                        #   Parent Loop BB120_139 Depth=1
                                        #     Parent Loop BB120_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB120_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB120_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB120_143 Depth=3
	movl	$0, -4(%rbp)
.LBB120_145:                            # %for.cond456
                                        #   Parent Loop BB120_139 Depth=1
                                        #     Parent Loop BB120_141 Depth=2
                                        #       Parent Loop BB120_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB120_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB120_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB120_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_145
.LBB120_148:                            # %for.end475
                                        #   in Loop: Header=BB120_143 Depth=3
	jmp	.LBB120_149
.LBB120_149:                            # %for.inc476
                                        #   in Loop: Header=BB120_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_143
.LBB120_150:                            # %for.end478
                                        #   in Loop: Header=BB120_141 Depth=2
	jmp	.LBB120_151
.LBB120_151:                            # %for.inc479
                                        #   in Loop: Header=BB120_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB120_141
.LBB120_152:                            # %for.end481
                                        #   in Loop: Header=BB120_139 Depth=1
	jmp	.LBB120_153
.LBB120_153:                            # %for.inc482
                                        #   in Loop: Header=BB120_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB120_139
.LBB120_154:                            # %for.end484
	jmp	.LBB120_155
.LBB120_155:                            # %if.end485
	jmp	.LBB120_156
.LBB120_156:                            # %if.end486
	jmp	.LBB120_157
.LBB120_157:                            # %if.end487
	jmp	.LBB120_180
.LBB120_158:                            # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB120_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB120_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB120_161:                            # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB120_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB120_161 Depth=1
	movl	$0, -4(%rbp)
.LBB120_163:                            # %for.cond499
                                        #   Parent Loop BB120_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB120_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB120_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB120_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_163
.LBB120_166:                            # %for.end519
                                        #   in Loop: Header=BB120_161 Depth=1
	jmp	.LBB120_167
.LBB120_167:                            # %for.inc520
                                        #   in Loop: Header=BB120_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_161
.LBB120_168:                            # %for.end522
	jmp	.LBB120_169
.LBB120_169:                            # %if.end523
	jmp	.LBB120_179
.LBB120_170:                            # %if.else524
	movl	$0, -8(%rbp)
.LBB120_171:                            # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB120_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	$0, -4(%rbp)
.LBB120_173:                            # %for.cond529
                                        #   Parent Loop BB120_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB120_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB120_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB120_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_173
.LBB120_176:                            # %for.end541
                                        #   in Loop: Header=BB120_171 Depth=1
	jmp	.LBB120_177
.LBB120_177:                            # %for.inc542
                                        #   in Loop: Header=BB120_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_171
.LBB120_178:                            # %for.end544
	jmp	.LBB120_179
.LBB120_179:                            # %if.end545
	jmp	.LBB120_180
.LBB120_180:                            # %sw.epilog
	cmpl	$1973329860, -68(%rbp)  # imm = 0x759E9FC4
	jne	.LBB120_182
.LBB120_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB120_182:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB120_181
.Lfunc_end120:
	.size	Conceal_Error.110, .Lfunc_end120-Conceal_Error.110
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI120_0:
	.quad	.LBB120_16
	.quad	.LBB120_158
	.quad	.LBB120_106
	.quad	.LBB120_180
	.quad	.LBB120_36
                                        # -- End function
	.text
	.globl	decode_one_b8block.111  # -- Begin function decode_one_b8block.111
	.p2align	4, 0x90
	.type	decode_one_b8block.111,@function
decode_one_b8block.111:                 # @decode_one_b8block.111
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$70087800, -84(%rbp)    # imm = 0x42D7478
	movl	%edi, -52(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
	movl	-76(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movl	-76(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB121_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB121_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB121_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB121_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB121_4:                              # %for.cond9
                                        #   Parent Loop BB121_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB121_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB121_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB121_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_4
.LBB121_7:                              # %for.end
                                        #   in Loop: Header=BB121_2 Depth=1
	jmp	.LBB121_8
.LBB121_8:                              # %for.inc26
                                        #   in Loop: Header=BB121_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_2
.LBB121_9:                              # %for.end28
	jmp	.LBB121_96
.LBB121_10:                             # %if.else
	cmpl	$0, -80(%rbp)
	jne	.LBB121_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB121_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB121_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB121_31
.LBB121_14:                             # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB121_15:                             # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB121_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB121_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB121_17:                             # %for.cond40
                                        #   Parent Loop BB121_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB121_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB121_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB121_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_17
.LBB121_20:                             # %for.end49
                                        #   in Loop: Header=BB121_15 Depth=1
	jmp	.LBB121_21
.LBB121_21:                             # %for.inc50
                                        #   in Loop: Header=BB121_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_15
.LBB121_22:                             # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB121_23:                             # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB121_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB121_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB121_25:                             # %for.cond56
                                        #   Parent Loop BB121_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB121_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB121_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB121_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB121_25
.LBB121_28:                             # %for.end71
                                        #   in Loop: Header=BB121_23 Depth=1
	jmp	.LBB121_29
.LBB121_29:                             # %for.inc72
                                        #   in Loop: Header=BB121_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB121_23
.LBB121_30:                             # %for.end74
	jmp	.LBB121_60
.LBB121_31:                             # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB121_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB121_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB121_34:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB121_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB121_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB121_36:                             # %for.cond83
                                        #   Parent Loop BB121_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB121_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB121_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB121_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB121_36
.LBB121_39:                             # %for.end120
                                        #   in Loop: Header=BB121_34 Depth=1
	jmp	.LBB121_40
.LBB121_40:                             # %for.inc121
                                        #   in Loop: Header=BB121_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB121_34
.LBB121_41:                             # %for.end123
	jmp	.LBB121_51
.LBB121_42:                             # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB121_43:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB121_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB121_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB121_45:                             # %for.cond129
                                        #   Parent Loop BB121_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB121_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB121_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB121_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB121_45
.LBB121_48:                             # %for.end145
                                        #   in Loop: Header=BB121_43 Depth=1
	jmp	.LBB121_49
.LBB121_49:                             # %for.inc146
                                        #   in Loop: Header=BB121_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB121_43
.LBB121_50:                             # %for.end148
	jmp	.LBB121_51
.LBB121_51:                             # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB121_52:                             # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB121_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB121_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB121_54:                             # %for.cond153
                                        #   Parent Loop BB121_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB121_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB121_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB121_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_54
.LBB121_57:                             # %for.end167
                                        #   in Loop: Header=BB121_52 Depth=1
	jmp	.LBB121_58
.LBB121_58:                             # %for.inc168
                                        #   in Loop: Header=BB121_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_52
.LBB121_59:                             # %for.end170
	jmp	.LBB121_60
.LBB121_60:                             # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB121_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB121_66
.LBB121_62:                             # %lor.lhs.false177
	cmpl	$0, -80(%rbp)
	jne	.LBB121_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB121_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB121_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB121_86
.LBB121_66:                             # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB121_67:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_69 Depth 2
                                        #       Child Loop BB121_74 Depth 3
                                        #         Child Loop BB121_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB121_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB121_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB121_69:                             # %for.cond197
                                        #   Parent Loop BB121_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB121_74 Depth 3
                                        #         Child Loop BB121_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB121_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB121_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB121_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB121_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB121_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB121_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
.LBB121_73:                             # %if.end218
                                        #   in Loop: Header=BB121_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-64(%rbp), %esi
	movl	-72(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB121_74:                             # %for.cond233
                                        #   Parent Loop BB121_67 Depth=1
                                        #     Parent Loop BB121_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB121_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB121_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB121_74 Depth=3
	movl	$0, -8(%rbp)
.LBB121_76:                             # %for.cond237
                                        #   Parent Loop BB121_67 Depth=1
                                        #     Parent Loop BB121_69 Depth=2
                                        #       Parent Loop BB121_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB121_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB121_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB121_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_76
.LBB121_79:                             # %for.end269
                                        #   in Loop: Header=BB121_74 Depth=3
	jmp	.LBB121_80
.LBB121_80:                             # %for.inc270
                                        #   in Loop: Header=BB121_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_74
.LBB121_81:                             # %for.end272
                                        #   in Loop: Header=BB121_69 Depth=2
	jmp	.LBB121_82
.LBB121_82:                             # %for.inc273
                                        #   in Loop: Header=BB121_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB121_69
.LBB121_83:                             # %for.end275
                                        #   in Loop: Header=BB121_67 Depth=1
	jmp	.LBB121_84
.LBB121_84:                             # %for.inc276
                                        #   in Loop: Header=BB121_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB121_67
.LBB121_85:                             # %for.end278
	jmp	.LBB121_95
.LBB121_86:                             # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB121_87:                             # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB121_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB121_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB121_89:                             # %for.cond284
                                        #   Parent Loop BB121_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB121_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB121_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB121_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_89
.LBB121_92:                             # %for.end310
                                        #   in Loop: Header=BB121_87 Depth=1
	jmp	.LBB121_93
.LBB121_93:                             # %for.inc311
                                        #   in Loop: Header=BB121_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_87
.LBB121_94:                             # %for.end313
	jmp	.LBB121_95
.LBB121_95:                             # %if.end314
	jmp	.LBB121_96
.LBB121_96:                             # %if.end315
	cmpl	$70087800, -84(%rbp)    # imm = 0x42D7478
	jne	.LBB121_98
.LBB121_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB121_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB121_97
.Lfunc_end121:
	.size	decode_one_b8block.111, .Lfunc_end121-decode_one_b8block.111
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.112   # -- Begin function Error_Concealment.112
	.p2align	4, 0x90
	.type	Error_Concealment.112,@function
Error_Concealment.112:                  # @Error_Concealment.112
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1024773004, -20(%rbp)  # imm = 0x3D14CB8C
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB122_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB122_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB122_1 Depth=1
	movl	$0, -4(%rbp)
.LBB122_3:                              # %for.cond2
                                        #   Parent Loop BB122_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB122_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB122_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB122_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB122_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB122_6:                              # %if.end
                                        #   in Loop: Header=BB122_3 Depth=2
	jmp	.LBB122_7
.LBB122_7:                              # %for.inc
                                        #   in Loop: Header=BB122_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_3
.LBB122_8:                              # %for.end
                                        #   in Loop: Header=BB122_1 Depth=1
	jmp	.LBB122_9
.LBB122_9:                              # %for.inc7
                                        #   in Loop: Header=BB122_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB122_1
.LBB122_10:                             # %for.end9
	cmpl	$1024773004, -20(%rbp)  # imm = 0x3D14CB8C
	jne	.LBB122_12
.LBB122_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB122_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB122_11
.Lfunc_end122:
	.size	Error_Concealment.112, .Lfunc_end122-Error_Concealment.112
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.113       # -- Begin function Conceal_Error.113
	.p2align	4, 0x90
	.type	Conceal_Error.113,@function
Conceal_Error.113:                      # @Conceal_Error.113
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$634466075, -68(%rbp)   # imm = 0x25D12F1B
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB123_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB123_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB123_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB123_4:                              # %land.end
.LBB123_5:                              # %lor.end
.LBB123_6:                              # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB123_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB123_9
.LBB123_8:                              # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB123_14
.LBB123_9:                              # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB123_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB123_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB123_12:                             # %land.end51
.LBB123_13:                             # %lor.end53
.LBB123_14:                             # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB123_180
# %bb.15:                               # %land.end54
	movq	.LJTI123_0(,%rax,8), %rax
	jmpq	*%rax
.LBB123_16:                             # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB123_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB123_18:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB123_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB123_18 Depth=1
	movl	$0, -4(%rbp)
.LBB123_20:                             # %for.cond68
                                        #   Parent Loop BB123_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB123_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB123_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB123_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_20
.LBB123_23:                             # %for.end
                                        #   in Loop: Header=BB123_18 Depth=1
	jmp	.LBB123_24
.LBB123_24:                             # %for.inc85
                                        #   in Loop: Header=BB123_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_18
.LBB123_25:                             # %for.end87
	jmp	.LBB123_35
.LBB123_26:                             # %if.else
	movl	$0, -8(%rbp)
.LBB123_27:                             # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB123_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB123_27 Depth=1
	movl	$0, -4(%rbp)
.LBB123_29:                             # %for.cond92
                                        #   Parent Loop BB123_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB123_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB123_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB123_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_29
.LBB123_32:                             # %for.end104
                                        #   in Loop: Header=BB123_27 Depth=1
	jmp	.LBB123_33
.LBB123_33:                             # %for.inc105
                                        #   in Loop: Header=BB123_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_27
.LBB123_34:                             # %for.end107
	jmp	.LBB123_35
.LBB123_35:                             # %if.end
	jmp	.LBB123_180
.LBB123_36:                             # %sw.bb108
	movl	$0, -16(%rbp)
.LBB123_37:                             # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_39 Depth 2
                                        #       Child Loop BB123_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB123_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB123_37 Depth=1
	movl	$0, -12(%rbp)
.LBB123_39:                             # %for.cond113
                                        #   Parent Loop BB123_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB123_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB123_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB123_39 Depth=2
	movl	$0, -4(%rbp)
.LBB123_41:                             # %for.cond117
                                        #   Parent Loop BB123_37 Depth=1
                                        #     Parent Loop BB123_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB123_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB123_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB123_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_41
.LBB123_44:                             # %for.end141
                                        #   in Loop: Header=BB123_39 Depth=2
	jmp	.LBB123_45
.LBB123_45:                             # %for.inc142
                                        #   in Loop: Header=BB123_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB123_39
.LBB123_46:                             # %for.end144
                                        #   in Loop: Header=BB123_37 Depth=1
	jmp	.LBB123_47
.LBB123_47:                             # %for.inc145
                                        #   in Loop: Header=BB123_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB123_37
.LBB123_48:                             # %for.end147
	movl	$0, -4(%rbp)
.LBB123_49:                             # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB123_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB123_49 Depth=1
	movl	$0, -8(%rbp)
.LBB123_51:                             # %for.cond152
                                        #   Parent Loop BB123_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB123_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB123_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB123_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_51
.LBB123_54:                             # %for.end162
                                        #   in Loop: Header=BB123_49 Depth=1
	jmp	.LBB123_55
.LBB123_55:                             # %for.inc163
                                        #   in Loop: Header=BB123_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_49
.LBB123_56:                             # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB123_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB123_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB123_59:                             # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB123_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB123_59 Depth=1
	movl	$0, -4(%rbp)
.LBB123_61:                             # %for.cond175
                                        #   Parent Loop BB123_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB123_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB123_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB123_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_61
.LBB123_64:                             # %for.end195
                                        #   in Loop: Header=BB123_59 Depth=1
	jmp	.LBB123_65
.LBB123_65:                             # %for.inc196
                                        #   in Loop: Header=BB123_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_59
.LBB123_66:                             # %for.end198
	jmp	.LBB123_95
.LBB123_67:                             # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB123_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB123_69:                             # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_71 Depth 2
                                        #       Child Loop BB123_73 Depth 3
                                        #         Child Loop BB123_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB123_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB123_71:                             # %for.cond210
                                        #   Parent Loop BB123_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB123_73 Depth 3
                                        #         Child Loop BB123_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB123_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB123_73:                             # %for.cond236
                                        #   Parent Loop BB123_69 Depth=1
                                        #     Parent Loop BB123_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB123_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB123_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB123_73 Depth=3
	movl	$0, -4(%rbp)
.LBB123_75:                             # %for.cond240
                                        #   Parent Loop BB123_69 Depth=1
                                        #     Parent Loop BB123_71 Depth=2
                                        #       Parent Loop BB123_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB123_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB123_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB123_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_75
.LBB123_78:                             # %for.end259
                                        #   in Loop: Header=BB123_73 Depth=3
	jmp	.LBB123_79
.LBB123_79:                             # %for.inc260
                                        #   in Loop: Header=BB123_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_73
.LBB123_80:                             # %for.end262
                                        #   in Loop: Header=BB123_71 Depth=2
	jmp	.LBB123_81
.LBB123_81:                             # %for.inc263
                                        #   in Loop: Header=BB123_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB123_71
.LBB123_82:                             # %for.end265
                                        #   in Loop: Header=BB123_69 Depth=1
	jmp	.LBB123_83
.LBB123_83:                             # %for.inc266
                                        #   in Loop: Header=BB123_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB123_69
.LBB123_84:                             # %for.end268
	jmp	.LBB123_94
.LBB123_85:                             # %if.else269
	movl	$0, -8(%rbp)
.LBB123_86:                             # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB123_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB123_86 Depth=1
	movl	$0, -4(%rbp)
.LBB123_88:                             # %for.cond274
                                        #   Parent Loop BB123_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB123_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB123_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB123_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_88
.LBB123_91:                             # %for.end294
                                        #   in Loop: Header=BB123_86 Depth=1
	jmp	.LBB123_92
.LBB123_92:                             # %for.inc295
                                        #   in Loop: Header=BB123_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_86
.LBB123_93:                             # %for.end297
	jmp	.LBB123_94
.LBB123_94:                             # %if.end298
	jmp	.LBB123_95
.LBB123_95:                             # %if.end299
	jmp	.LBB123_105
.LBB123_96:                             # %if.else300
	movl	$0, -8(%rbp)
.LBB123_97:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB123_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB123_97 Depth=1
	movl	$0, -4(%rbp)
.LBB123_99:                             # %for.cond305
                                        #   Parent Loop BB123_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB123_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB123_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB123_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_99
.LBB123_102:                            # %for.end317
                                        #   in Loop: Header=BB123_97 Depth=1
	jmp	.LBB123_103
.LBB123_103:                            # %for.inc318
                                        #   in Loop: Header=BB123_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_97
.LBB123_104:                            # %for.end320
	jmp	.LBB123_105
.LBB123_105:                            # %if.end321
	jmp	.LBB123_180
.LBB123_106:                            # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB123_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB123_108:                            # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_110 Depth 2
                                        #       Child Loop BB123_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB123_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB123_108 Depth=1
	movl	$0, -12(%rbp)
.LBB123_110:                            # %for.cond331
                                        #   Parent Loop BB123_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB123_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB123_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB123_110 Depth=2
	movl	$0, -4(%rbp)
.LBB123_112:                            # %for.cond335
                                        #   Parent Loop BB123_108 Depth=1
                                        #     Parent Loop BB123_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB123_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB123_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB123_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_112
.LBB123_115:                            # %for.end359
                                        #   in Loop: Header=BB123_110 Depth=2
	jmp	.LBB123_116
.LBB123_116:                            # %for.inc360
                                        #   in Loop: Header=BB123_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB123_110
.LBB123_117:                            # %for.end362
                                        #   in Loop: Header=BB123_108 Depth=1
	jmp	.LBB123_118
.LBB123_118:                            # %for.inc363
                                        #   in Loop: Header=BB123_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB123_108
.LBB123_119:                            # %for.end365
	movl	$0, -4(%rbp)
.LBB123_120:                            # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB123_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB123_120 Depth=1
	movl	$0, -8(%rbp)
.LBB123_122:                            # %for.cond370
                                        #   Parent Loop BB123_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB123_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB123_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB123_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_122
.LBB123_125:                            # %for.end380
                                        #   in Loop: Header=BB123_120 Depth=1
	jmp	.LBB123_126
.LBB123_126:                            # %for.inc381
                                        #   in Loop: Header=BB123_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_120
.LBB123_127:                            # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB123_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB123_129:                            # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB123_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB123_129 Depth=1
	movl	$0, -4(%rbp)
.LBB123_131:                            # %for.cond390
                                        #   Parent Loop BB123_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB123_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB123_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB123_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_131
.LBB123_134:                            # %for.end410
                                        #   in Loop: Header=BB123_129 Depth=1
	jmp	.LBB123_135
.LBB123_135:                            # %for.inc411
                                        #   in Loop: Header=BB123_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_129
.LBB123_136:                            # %for.end413
	jmp	.LBB123_156
.LBB123_137:                            # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB123_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB123_139:                            # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_141 Depth 2
                                        #       Child Loop BB123_143 Depth 3
                                        #         Child Loop BB123_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB123_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB123_141:                            # %for.cond425
                                        #   Parent Loop BB123_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB123_143 Depth 3
                                        #         Child Loop BB123_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB123_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB123_143:                            # %for.cond452
                                        #   Parent Loop BB123_139 Depth=1
                                        #     Parent Loop BB123_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB123_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB123_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB123_143 Depth=3
	movl	$0, -4(%rbp)
.LBB123_145:                            # %for.cond456
                                        #   Parent Loop BB123_139 Depth=1
                                        #     Parent Loop BB123_141 Depth=2
                                        #       Parent Loop BB123_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB123_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB123_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB123_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_145
.LBB123_148:                            # %for.end475
                                        #   in Loop: Header=BB123_143 Depth=3
	jmp	.LBB123_149
.LBB123_149:                            # %for.inc476
                                        #   in Loop: Header=BB123_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_143
.LBB123_150:                            # %for.end478
                                        #   in Loop: Header=BB123_141 Depth=2
	jmp	.LBB123_151
.LBB123_151:                            # %for.inc479
                                        #   in Loop: Header=BB123_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB123_141
.LBB123_152:                            # %for.end481
                                        #   in Loop: Header=BB123_139 Depth=1
	jmp	.LBB123_153
.LBB123_153:                            # %for.inc482
                                        #   in Loop: Header=BB123_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB123_139
.LBB123_154:                            # %for.end484
	jmp	.LBB123_155
.LBB123_155:                            # %if.end485
	jmp	.LBB123_156
.LBB123_156:                            # %if.end486
	jmp	.LBB123_157
.LBB123_157:                            # %if.end487
	jmp	.LBB123_180
.LBB123_158:                            # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB123_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB123_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB123_161:                            # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB123_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB123_161 Depth=1
	movl	$0, -4(%rbp)
.LBB123_163:                            # %for.cond499
                                        #   Parent Loop BB123_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB123_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB123_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB123_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_163
.LBB123_166:                            # %for.end519
                                        #   in Loop: Header=BB123_161 Depth=1
	jmp	.LBB123_167
.LBB123_167:                            # %for.inc520
                                        #   in Loop: Header=BB123_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_161
.LBB123_168:                            # %for.end522
	jmp	.LBB123_169
.LBB123_169:                            # %if.end523
	jmp	.LBB123_179
.LBB123_170:                            # %if.else524
	movl	$0, -8(%rbp)
.LBB123_171:                            # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB123_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB123_171 Depth=1
	movl	$0, -4(%rbp)
.LBB123_173:                            # %for.cond529
                                        #   Parent Loop BB123_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB123_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB123_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB123_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_173
.LBB123_176:                            # %for.end541
                                        #   in Loop: Header=BB123_171 Depth=1
	jmp	.LBB123_177
.LBB123_177:                            # %for.inc542
                                        #   in Loop: Header=BB123_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_171
.LBB123_178:                            # %for.end544
	jmp	.LBB123_179
.LBB123_179:                            # %if.end545
	jmp	.LBB123_180
.LBB123_180:                            # %sw.epilog
	cmpl	$634466075, -68(%rbp)   # imm = 0x25D12F1B
	jne	.LBB123_182
.LBB123_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB123_182:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB123_181
.Lfunc_end123:
	.size	Conceal_Error.113, .Lfunc_end123-Conceal_Error.113
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI123_0:
	.quad	.LBB123_16
	.quad	.LBB123_158
	.quad	.LBB123_106
	.quad	.LBB123_180
	.quad	.LBB123_36
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.114
.LCPI124_0:
	.quad	4636737291354636288     # double 100
.LCPI124_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.114
	.p2align	4, 0x90
	.type	Build_Status_Map.114,@function
Build_Status_Map.114:                   # @Build_Status_Map.114
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$786385100, -44(%rbp)   # imm = 0x2EDF48CC
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB124_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB124_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB124_1 Depth=1
	movl	$0, -8(%rbp)
.LBB124_3:                              # %for.cond2
                                        #   Parent Loop BB124_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB124_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB124_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB124_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB124_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB124_13
.LBB124_6:                              # %if.then
                                        #   in Loop: Header=BB124_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI124_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI124_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB124_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB124_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB124_8:                              # %if.end
                                        #   in Loop: Header=BB124_3 Depth=2
	callq	rand
	vmovsd	.LCPI124_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI124_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB124_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB124_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB124_10:                             # %if.end20
                                        #   in Loop: Header=BB124_3 Depth=2
	callq	rand
	vmovsd	.LCPI124_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI124_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB124_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB124_3 Depth=2
	movl	$1, -4(%rbp)
.LBB124_12:                             # %if.end29
                                        #   in Loop: Header=BB124_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB124_13:                             # %if.end30
                                        #   in Loop: Header=BB124_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB124_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB124_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB124_18
.LBB124_15:                             # %if.else
                                        #   in Loop: Header=BB124_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB124_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB124_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB124_17:                             # %if.end49
                                        #   in Loop: Header=BB124_3 Depth=2
	jmp	.LBB124_18
.LBB124_18:                             # %if.end50
                                        #   in Loop: Header=BB124_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB124_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_3
.LBB124_20:                             # %for.end
                                        #   in Loop: Header=BB124_1 Depth=1
	jmp	.LBB124_21
.LBB124_21:                             # %for.inc53
                                        #   in Loop: Header=BB124_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_1
.LBB124_22:                             # %for.end55
	cmpl	$786385100, -44(%rbp)   # imm = 0x2EDF48CC
	jne	.LBB124_24
.LBB124_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB124_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB124_23
.Lfunc_end124:
	.size	Build_Status_Map.114, .Lfunc_end124-Build_Status_Map.114
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.115   # -- Begin function Error_Concealment.115
	.p2align	4, 0x90
	.type	Error_Concealment.115,@function
Error_Concealment.115:                  # @Error_Concealment.115
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$921155714, -16(%rbp)   # imm = 0x36E7B882
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
.LBB125_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB125_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB125_1 Depth=1
	movl	$0, -4(%rbp)
.LBB125_3:                              # %for.cond2
                                        #   Parent Loop BB125_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB125_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB125_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB125_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB125_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB125_6:                              # %if.end
                                        #   in Loop: Header=BB125_3 Depth=2
	jmp	.LBB125_7
.LBB125_7:                              # %for.inc
                                        #   in Loop: Header=BB125_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_3
.LBB125_8:                              # %for.end
                                        #   in Loop: Header=BB125_1 Depth=1
	jmp	.LBB125_9
.LBB125_9:                              # %for.inc7
                                        #   in Loop: Header=BB125_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_1
.LBB125_10:                             # %for.end9
	cmpl	$921155714, -16(%rbp)   # imm = 0x36E7B882
	jne	.LBB125_12
.LBB125_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB125_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB125_11
.Lfunc_end125:
	.size	Error_Concealment.115, .Lfunc_end125-Error_Concealment.115
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.116       # -- Begin function Conceal_Error.116
	.p2align	4, 0x90
	.type	Conceal_Error.116,@function
Conceal_Error.116:                      # @Conceal_Error.116
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$539918785, -68(%rbp)   # imm = 0x202E81C1
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB126_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB126_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB126_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB126_4:                              # %land.end
.LBB126_5:                              # %lor.end
.LBB126_6:                              # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB126_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB126_9
.LBB126_8:                              # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB126_14
.LBB126_9:                              # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB126_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB126_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB126_12:                             # %land.end51
.LBB126_13:                             # %lor.end53
.LBB126_14:                             # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB126_180
# %bb.15:                               # %land.end54
	movq	.LJTI126_0(,%rax,8), %rax
	jmpq	*%rax
.LBB126_16:                             # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB126_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB126_18:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB126_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB126_18 Depth=1
	movl	$0, -4(%rbp)
.LBB126_20:                             # %for.cond68
                                        #   Parent Loop BB126_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB126_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB126_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB126_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_20
.LBB126_23:                             # %for.end
                                        #   in Loop: Header=BB126_18 Depth=1
	jmp	.LBB126_24
.LBB126_24:                             # %for.inc85
                                        #   in Loop: Header=BB126_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_18
.LBB126_25:                             # %for.end87
	jmp	.LBB126_35
.LBB126_26:                             # %if.else
	movl	$0, -8(%rbp)
.LBB126_27:                             # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB126_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB126_27 Depth=1
	movl	$0, -4(%rbp)
.LBB126_29:                             # %for.cond92
                                        #   Parent Loop BB126_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB126_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB126_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB126_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_29
.LBB126_32:                             # %for.end104
                                        #   in Loop: Header=BB126_27 Depth=1
	jmp	.LBB126_33
.LBB126_33:                             # %for.inc105
                                        #   in Loop: Header=BB126_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_27
.LBB126_34:                             # %for.end107
	jmp	.LBB126_35
.LBB126_35:                             # %if.end
	jmp	.LBB126_180
.LBB126_36:                             # %sw.bb108
	movl	$0, -12(%rbp)
.LBB126_37:                             # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_39 Depth 2
                                        #       Child Loop BB126_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB126_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB126_37 Depth=1
	movl	$0, -16(%rbp)
.LBB126_39:                             # %for.cond113
                                        #   Parent Loop BB126_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB126_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB126_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB126_39 Depth=2
	movl	$0, -4(%rbp)
.LBB126_41:                             # %for.cond117
                                        #   Parent Loop BB126_37 Depth=1
                                        #     Parent Loop BB126_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB126_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB126_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB126_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_41
.LBB126_44:                             # %for.end141
                                        #   in Loop: Header=BB126_39 Depth=2
	jmp	.LBB126_45
.LBB126_45:                             # %for.inc142
                                        #   in Loop: Header=BB126_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB126_39
.LBB126_46:                             # %for.end144
                                        #   in Loop: Header=BB126_37 Depth=1
	jmp	.LBB126_47
.LBB126_47:                             # %for.inc145
                                        #   in Loop: Header=BB126_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB126_37
.LBB126_48:                             # %for.end147
	movl	$0, -4(%rbp)
.LBB126_49:                             # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB126_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB126_49 Depth=1
	movl	$0, -8(%rbp)
.LBB126_51:                             # %for.cond152
                                        #   Parent Loop BB126_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB126_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB126_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB126_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_51
.LBB126_54:                             # %for.end162
                                        #   in Loop: Header=BB126_49 Depth=1
	jmp	.LBB126_55
.LBB126_55:                             # %for.inc163
                                        #   in Loop: Header=BB126_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_49
.LBB126_56:                             # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB126_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB126_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB126_59:                             # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB126_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB126_59 Depth=1
	movl	$0, -4(%rbp)
.LBB126_61:                             # %for.cond175
                                        #   Parent Loop BB126_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB126_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB126_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB126_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_61
.LBB126_64:                             # %for.end195
                                        #   in Loop: Header=BB126_59 Depth=1
	jmp	.LBB126_65
.LBB126_65:                             # %for.inc196
                                        #   in Loop: Header=BB126_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_59
.LBB126_66:                             # %for.end198
	jmp	.LBB126_95
.LBB126_67:                             # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB126_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB126_69:                             # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_71 Depth 2
                                        #       Child Loop BB126_73 Depth 3
                                        #         Child Loop BB126_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB126_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB126_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB126_71:                             # %for.cond210
                                        #   Parent Loop BB126_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB126_73 Depth 3
                                        #         Child Loop BB126_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB126_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB126_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB126_73:                             # %for.cond236
                                        #   Parent Loop BB126_69 Depth=1
                                        #     Parent Loop BB126_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB126_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB126_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB126_73 Depth=3
	movl	$0, -4(%rbp)
.LBB126_75:                             # %for.cond240
                                        #   Parent Loop BB126_69 Depth=1
                                        #     Parent Loop BB126_71 Depth=2
                                        #       Parent Loop BB126_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB126_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB126_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB126_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_75
.LBB126_78:                             # %for.end259
                                        #   in Loop: Header=BB126_73 Depth=3
	jmp	.LBB126_79
.LBB126_79:                             # %for.inc260
                                        #   in Loop: Header=BB126_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_73
.LBB126_80:                             # %for.end262
                                        #   in Loop: Header=BB126_71 Depth=2
	jmp	.LBB126_81
.LBB126_81:                             # %for.inc263
                                        #   in Loop: Header=BB126_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB126_71
.LBB126_82:                             # %for.end265
                                        #   in Loop: Header=BB126_69 Depth=1
	jmp	.LBB126_83
.LBB126_83:                             # %for.inc266
                                        #   in Loop: Header=BB126_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB126_69
.LBB126_84:                             # %for.end268
	jmp	.LBB126_94
.LBB126_85:                             # %if.else269
	movl	$0, -8(%rbp)
.LBB126_86:                             # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB126_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB126_86 Depth=1
	movl	$0, -4(%rbp)
.LBB126_88:                             # %for.cond274
                                        #   Parent Loop BB126_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB126_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB126_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB126_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_88
.LBB126_91:                             # %for.end294
                                        #   in Loop: Header=BB126_86 Depth=1
	jmp	.LBB126_92
.LBB126_92:                             # %for.inc295
                                        #   in Loop: Header=BB126_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_86
.LBB126_93:                             # %for.end297
	jmp	.LBB126_94
.LBB126_94:                             # %if.end298
	jmp	.LBB126_95
.LBB126_95:                             # %if.end299
	jmp	.LBB126_105
.LBB126_96:                             # %if.else300
	movl	$0, -8(%rbp)
.LBB126_97:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB126_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB126_97 Depth=1
	movl	$0, -4(%rbp)
.LBB126_99:                             # %for.cond305
                                        #   Parent Loop BB126_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB126_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB126_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB126_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_99
.LBB126_102:                            # %for.end317
                                        #   in Loop: Header=BB126_97 Depth=1
	jmp	.LBB126_103
.LBB126_103:                            # %for.inc318
                                        #   in Loop: Header=BB126_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_97
.LBB126_104:                            # %for.end320
	jmp	.LBB126_105
.LBB126_105:                            # %if.end321
	jmp	.LBB126_180
.LBB126_106:                            # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB126_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB126_108:                            # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_110 Depth 2
                                        #       Child Loop BB126_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB126_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB126_108 Depth=1
	movl	$0, -16(%rbp)
.LBB126_110:                            # %for.cond331
                                        #   Parent Loop BB126_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB126_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB126_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB126_110 Depth=2
	movl	$0, -4(%rbp)
.LBB126_112:                            # %for.cond335
                                        #   Parent Loop BB126_108 Depth=1
                                        #     Parent Loop BB126_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB126_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB126_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB126_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_112
.LBB126_115:                            # %for.end359
                                        #   in Loop: Header=BB126_110 Depth=2
	jmp	.LBB126_116
.LBB126_116:                            # %for.inc360
                                        #   in Loop: Header=BB126_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB126_110
.LBB126_117:                            # %for.end362
                                        #   in Loop: Header=BB126_108 Depth=1
	jmp	.LBB126_118
.LBB126_118:                            # %for.inc363
                                        #   in Loop: Header=BB126_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB126_108
.LBB126_119:                            # %for.end365
	movl	$0, -4(%rbp)
.LBB126_120:                            # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB126_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB126_120 Depth=1
	movl	$0, -8(%rbp)
.LBB126_122:                            # %for.cond370
                                        #   Parent Loop BB126_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB126_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB126_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB126_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_122
.LBB126_125:                            # %for.end380
                                        #   in Loop: Header=BB126_120 Depth=1
	jmp	.LBB126_126
.LBB126_126:                            # %for.inc381
                                        #   in Loop: Header=BB126_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_120
.LBB126_127:                            # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB126_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB126_129:                            # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB126_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB126_129 Depth=1
	movl	$0, -4(%rbp)
.LBB126_131:                            # %for.cond390
                                        #   Parent Loop BB126_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB126_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB126_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB126_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_131
.LBB126_134:                            # %for.end410
                                        #   in Loop: Header=BB126_129 Depth=1
	jmp	.LBB126_135
.LBB126_135:                            # %for.inc411
                                        #   in Loop: Header=BB126_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_129
.LBB126_136:                            # %for.end413
	jmp	.LBB126_156
.LBB126_137:                            # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB126_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB126_139:                            # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_141 Depth 2
                                        #       Child Loop BB126_143 Depth 3
                                        #         Child Loop BB126_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB126_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB126_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB126_141:                            # %for.cond425
                                        #   Parent Loop BB126_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB126_143 Depth 3
                                        #         Child Loop BB126_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB126_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB126_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB126_143:                            # %for.cond452
                                        #   Parent Loop BB126_139 Depth=1
                                        #     Parent Loop BB126_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB126_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB126_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB126_143 Depth=3
	movl	$0, -4(%rbp)
.LBB126_145:                            # %for.cond456
                                        #   Parent Loop BB126_139 Depth=1
                                        #     Parent Loop BB126_141 Depth=2
                                        #       Parent Loop BB126_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB126_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB126_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB126_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_145
.LBB126_148:                            # %for.end475
                                        #   in Loop: Header=BB126_143 Depth=3
	jmp	.LBB126_149
.LBB126_149:                            # %for.inc476
                                        #   in Loop: Header=BB126_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_143
.LBB126_150:                            # %for.end478
                                        #   in Loop: Header=BB126_141 Depth=2
	jmp	.LBB126_151
.LBB126_151:                            # %for.inc479
                                        #   in Loop: Header=BB126_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB126_141
.LBB126_152:                            # %for.end481
                                        #   in Loop: Header=BB126_139 Depth=1
	jmp	.LBB126_153
.LBB126_153:                            # %for.inc482
                                        #   in Loop: Header=BB126_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB126_139
.LBB126_154:                            # %for.end484
	jmp	.LBB126_155
.LBB126_155:                            # %if.end485
	jmp	.LBB126_156
.LBB126_156:                            # %if.end486
	jmp	.LBB126_157
.LBB126_157:                            # %if.end487
	jmp	.LBB126_180
.LBB126_158:                            # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB126_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB126_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB126_161:                            # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB126_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB126_161 Depth=1
	movl	$0, -4(%rbp)
.LBB126_163:                            # %for.cond499
                                        #   Parent Loop BB126_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB126_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB126_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB126_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_163
.LBB126_166:                            # %for.end519
                                        #   in Loop: Header=BB126_161 Depth=1
	jmp	.LBB126_167
.LBB126_167:                            # %for.inc520
                                        #   in Loop: Header=BB126_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_161
.LBB126_168:                            # %for.end522
	jmp	.LBB126_169
.LBB126_169:                            # %if.end523
	jmp	.LBB126_179
.LBB126_170:                            # %if.else524
	movl	$0, -8(%rbp)
.LBB126_171:                            # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB126_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB126_171 Depth=1
	movl	$0, -4(%rbp)
.LBB126_173:                            # %for.cond529
                                        #   Parent Loop BB126_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB126_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB126_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB126_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_173
.LBB126_176:                            # %for.end541
                                        #   in Loop: Header=BB126_171 Depth=1
	jmp	.LBB126_177
.LBB126_177:                            # %for.inc542
                                        #   in Loop: Header=BB126_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_171
.LBB126_178:                            # %for.end544
	jmp	.LBB126_179
.LBB126_179:                            # %if.end545
	jmp	.LBB126_180
.LBB126_180:                            # %sw.epilog
	cmpl	$539918785, -68(%rbp)   # imm = 0x202E81C1
	jne	.LBB126_182
.LBB126_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB126_182:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB126_181
.Lfunc_end126:
	.size	Conceal_Error.116, .Lfunc_end126-Conceal_Error.116
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI126_0:
	.quad	.LBB126_16
	.quad	.LBB126_158
	.quad	.LBB126_106
	.quad	.LBB126_180
	.quad	.LBB126_36
                                        # -- End function
	.text
	.globl	Conceal_Error.117       # -- Begin function Conceal_Error.117
	.p2align	4, 0x90
	.type	Conceal_Error.117,@function
Conceal_Error.117:                      # @Conceal_Error.117
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$975014403, -68(%rbp)   # imm = 0x3A1D8A03
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB127_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB127_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB127_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB127_4:                              # %land.end
.LBB127_5:                              # %lor.end
.LBB127_6:                              # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB127_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB127_9
.LBB127_8:                              # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB127_14
.LBB127_9:                              # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB127_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB127_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB127_12:                             # %land.end51
.LBB127_13:                             # %lor.end53
.LBB127_14:                             # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB127_180
# %bb.15:                               # %land.end54
	movq	.LJTI127_0(,%rax,8), %rax
	jmpq	*%rax
.LBB127_16:                             # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB127_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB127_18:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB127_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB127_18 Depth=1
	movl	$0, -4(%rbp)
.LBB127_20:                             # %for.cond68
                                        #   Parent Loop BB127_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB127_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB127_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB127_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_20
.LBB127_23:                             # %for.end
                                        #   in Loop: Header=BB127_18 Depth=1
	jmp	.LBB127_24
.LBB127_24:                             # %for.inc85
                                        #   in Loop: Header=BB127_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_18
.LBB127_25:                             # %for.end87
	jmp	.LBB127_35
.LBB127_26:                             # %if.else
	movl	$0, -8(%rbp)
.LBB127_27:                             # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB127_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB127_27 Depth=1
	movl	$0, -4(%rbp)
.LBB127_29:                             # %for.cond92
                                        #   Parent Loop BB127_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB127_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB127_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB127_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_29
.LBB127_32:                             # %for.end104
                                        #   in Loop: Header=BB127_27 Depth=1
	jmp	.LBB127_33
.LBB127_33:                             # %for.inc105
                                        #   in Loop: Header=BB127_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_27
.LBB127_34:                             # %for.end107
	jmp	.LBB127_35
.LBB127_35:                             # %if.end
	jmp	.LBB127_180
.LBB127_36:                             # %sw.bb108
	movl	$0, -12(%rbp)
.LBB127_37:                             # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_39 Depth 2
                                        #       Child Loop BB127_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB127_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB127_37 Depth=1
	movl	$0, -16(%rbp)
.LBB127_39:                             # %for.cond113
                                        #   Parent Loop BB127_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB127_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB127_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB127_39 Depth=2
	movl	$0, -4(%rbp)
.LBB127_41:                             # %for.cond117
                                        #   Parent Loop BB127_37 Depth=1
                                        #     Parent Loop BB127_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB127_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB127_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB127_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_41
.LBB127_44:                             # %for.end141
                                        #   in Loop: Header=BB127_39 Depth=2
	jmp	.LBB127_45
.LBB127_45:                             # %for.inc142
                                        #   in Loop: Header=BB127_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB127_39
.LBB127_46:                             # %for.end144
                                        #   in Loop: Header=BB127_37 Depth=1
	jmp	.LBB127_47
.LBB127_47:                             # %for.inc145
                                        #   in Loop: Header=BB127_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB127_37
.LBB127_48:                             # %for.end147
	movl	$0, -4(%rbp)
.LBB127_49:                             # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB127_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB127_49 Depth=1
	movl	$0, -8(%rbp)
.LBB127_51:                             # %for.cond152
                                        #   Parent Loop BB127_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB127_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB127_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB127_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_51
.LBB127_54:                             # %for.end162
                                        #   in Loop: Header=BB127_49 Depth=1
	jmp	.LBB127_55
.LBB127_55:                             # %for.inc163
                                        #   in Loop: Header=BB127_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_49
.LBB127_56:                             # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB127_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB127_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB127_59:                             # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB127_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB127_59 Depth=1
	movl	$0, -4(%rbp)
.LBB127_61:                             # %for.cond175
                                        #   Parent Loop BB127_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB127_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB127_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB127_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_61
.LBB127_64:                             # %for.end195
                                        #   in Loop: Header=BB127_59 Depth=1
	jmp	.LBB127_65
.LBB127_65:                             # %for.inc196
                                        #   in Loop: Header=BB127_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_59
.LBB127_66:                             # %for.end198
	jmp	.LBB127_95
.LBB127_67:                             # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB127_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB127_69:                             # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_71 Depth 2
                                        #       Child Loop BB127_73 Depth 3
                                        #         Child Loop BB127_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB127_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB127_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB127_71:                             # %for.cond210
                                        #   Parent Loop BB127_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB127_73 Depth 3
                                        #         Child Loop BB127_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB127_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB127_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB127_73:                             # %for.cond236
                                        #   Parent Loop BB127_69 Depth=1
                                        #     Parent Loop BB127_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB127_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB127_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB127_73 Depth=3
	movl	$0, -4(%rbp)
.LBB127_75:                             # %for.cond240
                                        #   Parent Loop BB127_69 Depth=1
                                        #     Parent Loop BB127_71 Depth=2
                                        #       Parent Loop BB127_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB127_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB127_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB127_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_75
.LBB127_78:                             # %for.end259
                                        #   in Loop: Header=BB127_73 Depth=3
	jmp	.LBB127_79
.LBB127_79:                             # %for.inc260
                                        #   in Loop: Header=BB127_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_73
.LBB127_80:                             # %for.end262
                                        #   in Loop: Header=BB127_71 Depth=2
	jmp	.LBB127_81
.LBB127_81:                             # %for.inc263
                                        #   in Loop: Header=BB127_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB127_71
.LBB127_82:                             # %for.end265
                                        #   in Loop: Header=BB127_69 Depth=1
	jmp	.LBB127_83
.LBB127_83:                             # %for.inc266
                                        #   in Loop: Header=BB127_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB127_69
.LBB127_84:                             # %for.end268
	jmp	.LBB127_94
.LBB127_85:                             # %if.else269
	movl	$0, -8(%rbp)
.LBB127_86:                             # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB127_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB127_86 Depth=1
	movl	$0, -4(%rbp)
.LBB127_88:                             # %for.cond274
                                        #   Parent Loop BB127_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB127_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB127_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB127_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_88
.LBB127_91:                             # %for.end294
                                        #   in Loop: Header=BB127_86 Depth=1
	jmp	.LBB127_92
.LBB127_92:                             # %for.inc295
                                        #   in Loop: Header=BB127_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_86
.LBB127_93:                             # %for.end297
	jmp	.LBB127_94
.LBB127_94:                             # %if.end298
	jmp	.LBB127_95
.LBB127_95:                             # %if.end299
	jmp	.LBB127_105
.LBB127_96:                             # %if.else300
	movl	$0, -8(%rbp)
.LBB127_97:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB127_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB127_97 Depth=1
	movl	$0, -4(%rbp)
.LBB127_99:                             # %for.cond305
                                        #   Parent Loop BB127_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB127_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB127_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB127_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_99
.LBB127_102:                            # %for.end317
                                        #   in Loop: Header=BB127_97 Depth=1
	jmp	.LBB127_103
.LBB127_103:                            # %for.inc318
                                        #   in Loop: Header=BB127_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_97
.LBB127_104:                            # %for.end320
	jmp	.LBB127_105
.LBB127_105:                            # %if.end321
	jmp	.LBB127_180
.LBB127_106:                            # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB127_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB127_108:                            # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_110 Depth 2
                                        #       Child Loop BB127_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB127_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB127_108 Depth=1
	movl	$0, -16(%rbp)
.LBB127_110:                            # %for.cond331
                                        #   Parent Loop BB127_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB127_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB127_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB127_110 Depth=2
	movl	$0, -4(%rbp)
.LBB127_112:                            # %for.cond335
                                        #   Parent Loop BB127_108 Depth=1
                                        #     Parent Loop BB127_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB127_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB127_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB127_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_112
.LBB127_115:                            # %for.end359
                                        #   in Loop: Header=BB127_110 Depth=2
	jmp	.LBB127_116
.LBB127_116:                            # %for.inc360
                                        #   in Loop: Header=BB127_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB127_110
.LBB127_117:                            # %for.end362
                                        #   in Loop: Header=BB127_108 Depth=1
	jmp	.LBB127_118
.LBB127_118:                            # %for.inc363
                                        #   in Loop: Header=BB127_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB127_108
.LBB127_119:                            # %for.end365
	movl	$0, -4(%rbp)
.LBB127_120:                            # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB127_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB127_120 Depth=1
	movl	$0, -8(%rbp)
.LBB127_122:                            # %for.cond370
                                        #   Parent Loop BB127_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB127_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB127_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB127_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_122
.LBB127_125:                            # %for.end380
                                        #   in Loop: Header=BB127_120 Depth=1
	jmp	.LBB127_126
.LBB127_126:                            # %for.inc381
                                        #   in Loop: Header=BB127_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_120
.LBB127_127:                            # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB127_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB127_129:                            # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB127_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB127_129 Depth=1
	movl	$0, -4(%rbp)
.LBB127_131:                            # %for.cond390
                                        #   Parent Loop BB127_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB127_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB127_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB127_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_131
.LBB127_134:                            # %for.end410
                                        #   in Loop: Header=BB127_129 Depth=1
	jmp	.LBB127_135
.LBB127_135:                            # %for.inc411
                                        #   in Loop: Header=BB127_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_129
.LBB127_136:                            # %for.end413
	jmp	.LBB127_156
.LBB127_137:                            # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB127_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB127_139:                            # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_141 Depth 2
                                        #       Child Loop BB127_143 Depth 3
                                        #         Child Loop BB127_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB127_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB127_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB127_141:                            # %for.cond425
                                        #   Parent Loop BB127_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB127_143 Depth 3
                                        #         Child Loop BB127_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB127_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB127_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB127_143:                            # %for.cond452
                                        #   Parent Loop BB127_139 Depth=1
                                        #     Parent Loop BB127_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB127_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB127_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB127_143 Depth=3
	movl	$0, -4(%rbp)
.LBB127_145:                            # %for.cond456
                                        #   Parent Loop BB127_139 Depth=1
                                        #     Parent Loop BB127_141 Depth=2
                                        #       Parent Loop BB127_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB127_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB127_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB127_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_145
.LBB127_148:                            # %for.end475
                                        #   in Loop: Header=BB127_143 Depth=3
	jmp	.LBB127_149
.LBB127_149:                            # %for.inc476
                                        #   in Loop: Header=BB127_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_143
.LBB127_150:                            # %for.end478
                                        #   in Loop: Header=BB127_141 Depth=2
	jmp	.LBB127_151
.LBB127_151:                            # %for.inc479
                                        #   in Loop: Header=BB127_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB127_141
.LBB127_152:                            # %for.end481
                                        #   in Loop: Header=BB127_139 Depth=1
	jmp	.LBB127_153
.LBB127_153:                            # %for.inc482
                                        #   in Loop: Header=BB127_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB127_139
.LBB127_154:                            # %for.end484
	jmp	.LBB127_155
.LBB127_155:                            # %if.end485
	jmp	.LBB127_156
.LBB127_156:                            # %if.end486
	jmp	.LBB127_157
.LBB127_157:                            # %if.end487
	jmp	.LBB127_180
.LBB127_158:                            # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB127_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB127_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB127_161:                            # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB127_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB127_161 Depth=1
	movl	$0, -4(%rbp)
.LBB127_163:                            # %for.cond499
                                        #   Parent Loop BB127_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB127_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB127_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB127_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_163
.LBB127_166:                            # %for.end519
                                        #   in Loop: Header=BB127_161 Depth=1
	jmp	.LBB127_167
.LBB127_167:                            # %for.inc520
                                        #   in Loop: Header=BB127_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_161
.LBB127_168:                            # %for.end522
	jmp	.LBB127_169
.LBB127_169:                            # %if.end523
	jmp	.LBB127_179
.LBB127_170:                            # %if.else524
	movl	$0, -8(%rbp)
.LBB127_171:                            # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB127_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB127_171 Depth=1
	movl	$0, -4(%rbp)
.LBB127_173:                            # %for.cond529
                                        #   Parent Loop BB127_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB127_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB127_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB127_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_173
.LBB127_176:                            # %for.end541
                                        #   in Loop: Header=BB127_171 Depth=1
	jmp	.LBB127_177
.LBB127_177:                            # %for.inc542
                                        #   in Loop: Header=BB127_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_171
.LBB127_178:                            # %for.end544
	jmp	.LBB127_179
.LBB127_179:                            # %if.end545
	jmp	.LBB127_180
.LBB127_180:                            # %sw.epilog
	cmpl	$975014403, -68(%rbp)   # imm = 0x3A1D8A03
	jne	.LBB127_182
.LBB127_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB127_182:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB127_181
.Lfunc_end127:
	.size	Conceal_Error.117, .Lfunc_end127-Conceal_Error.117
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI127_0:
	.quad	.LBB127_16
	.quad	.LBB127_158
	.quad	.LBB127_106
	.quad	.LBB127_180
	.quad	.LBB127_36
                                        # -- End function
	.text
	.globl	DecOneForthPix.118      # -- Begin function DecOneForthPix.118
	.p2align	4, 0x90
	.type	DecOneForthPix.118,@function
DecOneForthPix.118:                     # @DecOneForthPix.118
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$407856657, -12(%rbp)   # imm = 0x184F6611
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB128_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB128_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB128_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB128_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_1
.LBB128_4:                              # %for.end
	cmpl	$407856657, -12(%rbp)   # imm = 0x184F6611
	jne	.LBB128_6
.LBB128_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB128_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB128_5
.Lfunc_end128:
	.size	DecOneForthPix.118, .Lfunc_end128-DecOneForthPix.118
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.119
.LCPI129_0:
	.quad	4636737291354636288     # double 100
.LCPI129_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.119
	.p2align	4, 0x90
	.type	Build_Status_Map.119,@function
Build_Status_Map.119:                   # @Build_Status_Map.119
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1514115939, -36(%rbp)  # imm = 0x5A3F9363
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB129_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB129_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB129_1 Depth=1
	movl	$0, -8(%rbp)
.LBB129_3:                              # %for.cond2
                                        #   Parent Loop BB129_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB129_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB129_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB129_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB129_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB129_13
.LBB129_6:                              # %if.then
                                        #   in Loop: Header=BB129_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI129_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI129_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB129_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB129_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB129_8:                              # %if.end
                                        #   in Loop: Header=BB129_3 Depth=2
	callq	rand
	vmovsd	.LCPI129_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI129_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB129_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB129_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB129_10:                             # %if.end20
                                        #   in Loop: Header=BB129_3 Depth=2
	callq	rand
	vmovsd	.LCPI129_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI129_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB129_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB129_3 Depth=2
	movl	$1, -4(%rbp)
.LBB129_12:                             # %if.end29
                                        #   in Loop: Header=BB129_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB129_13:                             # %if.end30
                                        #   in Loop: Header=BB129_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB129_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB129_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB129_18
.LBB129_15:                             # %if.else
                                        #   in Loop: Header=BB129_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB129_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB129_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB129_17:                             # %if.end49
                                        #   in Loop: Header=BB129_3 Depth=2
	jmp	.LBB129_18
.LBB129_18:                             # %if.end50
                                        #   in Loop: Header=BB129_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB129_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_3
.LBB129_20:                             # %for.end
                                        #   in Loop: Header=BB129_1 Depth=1
	jmp	.LBB129_21
.LBB129_21:                             # %for.inc53
                                        #   in Loop: Header=BB129_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB129_1
.LBB129_22:                             # %for.end55
	cmpl	$1514115939, -36(%rbp)  # imm = 0x5A3F9363
	jne	.LBB129_24
.LBB129_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB129_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB129_23
.Lfunc_end129:
	.size	Build_Status_Map.119, .Lfunc_end129-Build_Status_Map.119
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.120
.LCPI130_0:
	.quad	4636737291354636288     # double 100
.LCPI130_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.120
	.p2align	4, 0x90
	.type	Build_Status_Map.120,@function
Build_Status_Map.120:                   # @Build_Status_Map.120
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$544139152, -40(%rbp)   # imm = 0x206EE790
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -8(%rbp)
.LBB130_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB130_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB130_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB130_1 Depth=1
	movl	$0, -12(%rbp)
.LBB130_3:                              # %for.cond2
                                        #   Parent Loop BB130_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB130_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB130_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB130_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB130_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB130_13
.LBB130_6:                              # %if.then
                                        #   in Loop: Header=BB130_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI130_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI130_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB130_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB130_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB130_8:                              # %if.end
                                        #   in Loop: Header=BB130_3 Depth=2
	callq	rand
	vmovsd	.LCPI130_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI130_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB130_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB130_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB130_10:                             # %if.end20
                                        #   in Loop: Header=BB130_3 Depth=2
	callq	rand
	vmovsd	.LCPI130_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI130_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB130_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB130_3 Depth=2
	movl	$1, -4(%rbp)
.LBB130_12:                             # %if.end29
                                        #   in Loop: Header=BB130_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB130_13:                             # %if.end30
                                        #   in Loop: Header=BB130_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB130_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB130_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB130_18
.LBB130_15:                             # %if.else
                                        #   in Loop: Header=BB130_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB130_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB130_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB130_17:                             # %if.end49
                                        #   in Loop: Header=BB130_3 Depth=2
	jmp	.LBB130_18
.LBB130_18:                             # %if.end50
                                        #   in Loop: Header=BB130_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB130_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB130_3
.LBB130_20:                             # %for.end
                                        #   in Loop: Header=BB130_1 Depth=1
	jmp	.LBB130_21
.LBB130_21:                             # %for.inc53
                                        #   in Loop: Header=BB130_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB130_1
.LBB130_22:                             # %for.end55
	cmpl	$544139152, -40(%rbp)   # imm = 0x206EE790
	jne	.LBB130_24
.LBB130_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB130_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB130_23
.Lfunc_end130:
	.size	Build_Status_Map.120, .Lfunc_end130-Build_Status_Map.120
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.121   # -- Begin function Error_Concealment.121
	.p2align	4, 0x90
	.type	Error_Concealment.121,@function
Error_Concealment.121:                  # @Error_Concealment.121
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$666825639, -16(%rbp)   # imm = 0x27BEF3A7
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB131_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB131_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB131_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB131_1 Depth=1
	movl	$0, -4(%rbp)
.LBB131_3:                              # %for.cond2
                                        #   Parent Loop BB131_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB131_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB131_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB131_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB131_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB131_6:                              # %if.end
                                        #   in Loop: Header=BB131_3 Depth=2
	jmp	.LBB131_7
.LBB131_7:                              # %for.inc
                                        #   in Loop: Header=BB131_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB131_3
.LBB131_8:                              # %for.end
                                        #   in Loop: Header=BB131_1 Depth=1
	jmp	.LBB131_9
.LBB131_9:                              # %for.inc7
                                        #   in Loop: Header=BB131_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB131_1
.LBB131_10:                             # %for.end9
	cmpl	$666825639, -16(%rbp)   # imm = 0x27BEF3A7
	jne	.LBB131_12
.LBB131_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB131_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB131_11
.Lfunc_end131:
	.size	Error_Concealment.121, .Lfunc_end131-Error_Concealment.121
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.122   # -- Begin function Error_Concealment.122
	.p2align	4, 0x90
	.type	Error_Concealment.122,@function
Error_Concealment.122:                  # @Error_Concealment.122
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$967508755, -16(%rbp)   # imm = 0x39AB0313
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB132_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB132_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB132_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB132_1 Depth=1
	movl	$0, -8(%rbp)
.LBB132_3:                              # %for.cond2
                                        #   Parent Loop BB132_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB132_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB132_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB132_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB132_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB132_6:                              # %if.end
                                        #   in Loop: Header=BB132_3 Depth=2
	jmp	.LBB132_7
.LBB132_7:                              # %for.inc
                                        #   in Loop: Header=BB132_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB132_3
.LBB132_8:                              # %for.end
                                        #   in Loop: Header=BB132_1 Depth=1
	jmp	.LBB132_9
.LBB132_9:                              # %for.inc7
                                        #   in Loop: Header=BB132_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB132_1
.LBB132_10:                             # %for.end9
	cmpl	$967508755, -16(%rbp)   # imm = 0x39AB0313
	jne	.LBB132_12
.LBB132_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB132_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB132_11
.Lfunc_end132:
	.size	Error_Concealment.122, .Lfunc_end132-Error_Concealment.122
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.123      # -- Begin function DecOneForthPix.123
	.p2align	4, 0x90
	.type	DecOneForthPix.123,@function
DecOneForthPix.123:                     # @DecOneForthPix.123
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1783445382, -8(%rbp)   # imm = 0x6A4D3786
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB133_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB133_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB133_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB133_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB133_1
.LBB133_4:                              # %for.end
	cmpl	$1783445382, -8(%rbp)   # imm = 0x6A4D3786
	jne	.LBB133_6
.LBB133_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB133_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB133_5
.Lfunc_end133:
	.size	DecOneForthPix.123, .Lfunc_end133-DecOneForthPix.123
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.124      # -- Begin function DecOneForthPix.124
	.p2align	4, 0x90
	.type	DecOneForthPix.124,@function
DecOneForthPix.124:                     # @DecOneForthPix.124
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1302284632, -12(%rbp)  # imm = 0x4D9F4958
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB134_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB134_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB134_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB134_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB134_1
.LBB134_4:                              # %for.end
	cmpl	$1302284632, -12(%rbp)  # imm = 0x4D9F4958
	jne	.LBB134_6
.LBB134_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB134_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB134_5
.Lfunc_end134:
	.size	DecOneForthPix.124, .Lfunc_end134-DecOneForthPix.124
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.125
.LCPI135_0:
	.quad	4636737291354636288     # double 100
.LCPI135_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.125
	.p2align	4, 0x90
	.type	Build_Status_Map.125,@function
Build_Status_Map.125:                   # @Build_Status_Map.125
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$924088334, -40(%rbp)   # imm = 0x3714780E
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB135_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB135_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB135_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB135_1 Depth=1
	movl	$0, -8(%rbp)
.LBB135_3:                              # %for.cond2
                                        #   Parent Loop BB135_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB135_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB135_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB135_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB135_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB135_13
.LBB135_6:                              # %if.then
                                        #   in Loop: Header=BB135_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI135_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI135_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB135_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB135_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB135_8:                              # %if.end
                                        #   in Loop: Header=BB135_3 Depth=2
	callq	rand
	vmovsd	.LCPI135_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI135_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB135_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB135_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB135_10:                             # %if.end20
                                        #   in Loop: Header=BB135_3 Depth=2
	callq	rand
	vmovsd	.LCPI135_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI135_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB135_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB135_3 Depth=2
	movl	$1, -4(%rbp)
.LBB135_12:                             # %if.end29
                                        #   in Loop: Header=BB135_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB135_13:                             # %if.end30
                                        #   in Loop: Header=BB135_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB135_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB135_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB135_18
.LBB135_15:                             # %if.else
                                        #   in Loop: Header=BB135_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB135_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB135_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB135_17:                             # %if.end49
                                        #   in Loop: Header=BB135_3 Depth=2
	jmp	.LBB135_18
.LBB135_18:                             # %if.end50
                                        #   in Loop: Header=BB135_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB135_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB135_3
.LBB135_20:                             # %for.end
                                        #   in Loop: Header=BB135_1 Depth=1
	jmp	.LBB135_21
.LBB135_21:                             # %for.inc53
                                        #   in Loop: Header=BB135_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB135_1
.LBB135_22:                             # %for.end55
	cmpl	$924088334, -40(%rbp)   # imm = 0x3714780E
	jne	.LBB135_24
.LBB135_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB135_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB135_23
.Lfunc_end135:
	.size	Build_Status_Map.125, .Lfunc_end135-Build_Status_Map.125
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.126
.LCPI136_0:
	.quad	4636737291354636288     # double 100
.LCPI136_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.126
	.p2align	4, 0x90
	.type	Build_Status_Map.126,@function
Build_Status_Map.126:                   # @Build_Status_Map.126
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1444184080, -40(%rbp)  # imm = 0x56148010
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB136_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB136_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB136_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB136_1 Depth=1
	movl	$0, -8(%rbp)
.LBB136_3:                              # %for.cond2
                                        #   Parent Loop BB136_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB136_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB136_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB136_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB136_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB136_13
.LBB136_6:                              # %if.then
                                        #   in Loop: Header=BB136_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI136_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI136_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB136_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB136_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB136_8:                              # %if.end
                                        #   in Loop: Header=BB136_3 Depth=2
	callq	rand
	vmovsd	.LCPI136_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI136_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB136_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB136_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB136_10:                             # %if.end20
                                        #   in Loop: Header=BB136_3 Depth=2
	callq	rand
	vmovsd	.LCPI136_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI136_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB136_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB136_3 Depth=2
	movl	$1, -4(%rbp)
.LBB136_12:                             # %if.end29
                                        #   in Loop: Header=BB136_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB136_13:                             # %if.end30
                                        #   in Loop: Header=BB136_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB136_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB136_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB136_18
.LBB136_15:                             # %if.else
                                        #   in Loop: Header=BB136_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB136_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB136_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB136_17:                             # %if.end49
                                        #   in Loop: Header=BB136_3 Depth=2
	jmp	.LBB136_18
.LBB136_18:                             # %if.end50
                                        #   in Loop: Header=BB136_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB136_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB136_3
.LBB136_20:                             # %for.end
                                        #   in Loop: Header=BB136_1 Depth=1
	jmp	.LBB136_21
.LBB136_21:                             # %for.inc53
                                        #   in Loop: Header=BB136_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB136_1
.LBB136_22:                             # %for.end55
	cmpl	$1444184080, -40(%rbp)  # imm = 0x56148010
	jne	.LBB136_24
.LBB136_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB136_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB136_23
.Lfunc_end136:
	.size	Build_Status_Map.126, .Lfunc_end136-Build_Status_Map.126
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.127
.LCPI137_0:
	.quad	4636737291354636288     # double 100
.LCPI137_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.127
	.p2align	4, 0x90
	.type	Build_Status_Map.127,@function
Build_Status_Map.127:                   # @Build_Status_Map.127
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2143423978, -40(%rbp)  # imm = 0x7FC20DEA
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB137_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB137_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB137_1 Depth=1
	movl	$0, -12(%rbp)
.LBB137_3:                              # %for.cond2
                                        #   Parent Loop BB137_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB137_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB137_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB137_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB137_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB137_13
.LBB137_6:                              # %if.then
                                        #   in Loop: Header=BB137_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI137_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI137_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB137_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB137_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB137_8:                              # %if.end
                                        #   in Loop: Header=BB137_3 Depth=2
	callq	rand
	vmovsd	.LCPI137_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI137_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB137_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB137_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB137_10:                             # %if.end20
                                        #   in Loop: Header=BB137_3 Depth=2
	callq	rand
	vmovsd	.LCPI137_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI137_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB137_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB137_3 Depth=2
	movl	$1, -4(%rbp)
.LBB137_12:                             # %if.end29
                                        #   in Loop: Header=BB137_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB137_13:                             # %if.end30
                                        #   in Loop: Header=BB137_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB137_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB137_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB137_18
.LBB137_15:                             # %if.else
                                        #   in Loop: Header=BB137_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB137_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB137_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB137_17:                             # %if.end49
                                        #   in Loop: Header=BB137_3 Depth=2
	jmp	.LBB137_18
.LBB137_18:                             # %if.end50
                                        #   in Loop: Header=BB137_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB137_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB137_3
.LBB137_20:                             # %for.end
                                        #   in Loop: Header=BB137_1 Depth=1
	jmp	.LBB137_21
.LBB137_21:                             # %for.inc53
                                        #   in Loop: Header=BB137_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB137_1
.LBB137_22:                             # %for.end55
	cmpl	$2143423978, -40(%rbp)  # imm = 0x7FC20DEA
	jne	.LBB137_24
.LBB137_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB137_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB137_23
.Lfunc_end137:
	.size	Build_Status_Map.127, .Lfunc_end137-Build_Status_Map.127
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.128
.LCPI138_0:
	.quad	4636737291354636288     # double 100
.LCPI138_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.128
	.p2align	4, 0x90
	.type	Build_Status_Map.128,@function
Build_Status_Map.128:                   # @Build_Status_Map.128
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$301522172, -40(%rbp)   # imm = 0x11F8DCFC
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -12(%rbp)
.LBB138_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB138_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB138_1 Depth=1
	movl	$0, -8(%rbp)
.LBB138_3:                              # %for.cond2
                                        #   Parent Loop BB138_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB138_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB138_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB138_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB138_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB138_13
.LBB138_6:                              # %if.then
                                        #   in Loop: Header=BB138_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI138_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI138_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB138_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB138_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB138_8:                              # %if.end
                                        #   in Loop: Header=BB138_3 Depth=2
	callq	rand
	vmovsd	.LCPI138_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI138_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB138_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB138_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB138_10:                             # %if.end20
                                        #   in Loop: Header=BB138_3 Depth=2
	callq	rand
	vmovsd	.LCPI138_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI138_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB138_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB138_3 Depth=2
	movl	$1, -4(%rbp)
.LBB138_12:                             # %if.end29
                                        #   in Loop: Header=BB138_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB138_13:                             # %if.end30
                                        #   in Loop: Header=BB138_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB138_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB138_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB138_18
.LBB138_15:                             # %if.else
                                        #   in Loop: Header=BB138_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB138_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB138_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB138_17:                             # %if.end49
                                        #   in Loop: Header=BB138_3 Depth=2
	jmp	.LBB138_18
.LBB138_18:                             # %if.end50
                                        #   in Loop: Header=BB138_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB138_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB138_3
.LBB138_20:                             # %for.end
                                        #   in Loop: Header=BB138_1 Depth=1
	jmp	.LBB138_21
.LBB138_21:                             # %for.inc53
                                        #   in Loop: Header=BB138_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB138_1
.LBB138_22:                             # %for.end55
	cmpl	$301522172, -40(%rbp)   # imm = 0x11F8DCFC
	jne	.LBB138_24
.LBB138_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB138_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB138_23
.Lfunc_end138:
	.size	Build_Status_Map.128, .Lfunc_end138-Build_Status_Map.128
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.129
.LCPI139_0:
	.quad	4636737291354636288     # double 100
.LCPI139_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.129
	.p2align	4, 0x90
	.type	Build_Status_Map.129,@function
Build_Status_Map.129:                   # @Build_Status_Map.129
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1214039435, -44(%rbp)  # imm = 0x485CC58B
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB139_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB139_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB139_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB139_1 Depth=1
	movl	$0, -8(%rbp)
.LBB139_3:                              # %for.cond2
                                        #   Parent Loop BB139_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB139_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB139_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB139_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB139_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB139_13
.LBB139_6:                              # %if.then
                                        #   in Loop: Header=BB139_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI139_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI139_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB139_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB139_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB139_8:                              # %if.end
                                        #   in Loop: Header=BB139_3 Depth=2
	callq	rand
	vmovsd	.LCPI139_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI139_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB139_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB139_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB139_10:                             # %if.end20
                                        #   in Loop: Header=BB139_3 Depth=2
	callq	rand
	vmovsd	.LCPI139_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI139_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB139_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB139_3 Depth=2
	movl	$1, -4(%rbp)
.LBB139_12:                             # %if.end29
                                        #   in Loop: Header=BB139_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB139_13:                             # %if.end30
                                        #   in Loop: Header=BB139_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB139_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB139_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB139_18
.LBB139_15:                             # %if.else
                                        #   in Loop: Header=BB139_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB139_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB139_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB139_17:                             # %if.end49
                                        #   in Loop: Header=BB139_3 Depth=2
	jmp	.LBB139_18
.LBB139_18:                             # %if.end50
                                        #   in Loop: Header=BB139_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB139_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB139_3
.LBB139_20:                             # %for.end
                                        #   in Loop: Header=BB139_1 Depth=1
	jmp	.LBB139_21
.LBB139_21:                             # %for.inc53
                                        #   in Loop: Header=BB139_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB139_1
.LBB139_22:                             # %for.end55
	cmpl	$1214039435, -44(%rbp)  # imm = 0x485CC58B
	jne	.LBB139_24
.LBB139_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB139_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB139_23
.Lfunc_end139:
	.size	Build_Status_Map.129, .Lfunc_end139-Build_Status_Map.129
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.130
.LCPI140_0:
	.quad	4636737291354636288     # double 100
.LCPI140_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.130
	.p2align	4, 0x90
	.type	Build_Status_Map.130,@function
Build_Status_Map.130:                   # @Build_Status_Map.130
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$994536039, -40(%rbp)   # imm = 0x3B476A67
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -8(%rbp)
.LBB140_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB140_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB140_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB140_1 Depth=1
	movl	$0, -12(%rbp)
.LBB140_3:                              # %for.cond2
                                        #   Parent Loop BB140_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB140_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB140_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB140_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB140_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB140_13
.LBB140_6:                              # %if.then
                                        #   in Loop: Header=BB140_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI140_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI140_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB140_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB140_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB140_8:                              # %if.end
                                        #   in Loop: Header=BB140_3 Depth=2
	callq	rand
	vmovsd	.LCPI140_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI140_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB140_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB140_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB140_10:                             # %if.end20
                                        #   in Loop: Header=BB140_3 Depth=2
	callq	rand
	vmovsd	.LCPI140_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI140_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB140_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB140_3 Depth=2
	movl	$1, -4(%rbp)
.LBB140_12:                             # %if.end29
                                        #   in Loop: Header=BB140_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB140_13:                             # %if.end30
                                        #   in Loop: Header=BB140_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB140_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB140_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB140_18
.LBB140_15:                             # %if.else
                                        #   in Loop: Header=BB140_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB140_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB140_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB140_17:                             # %if.end49
                                        #   in Loop: Header=BB140_3 Depth=2
	jmp	.LBB140_18
.LBB140_18:                             # %if.end50
                                        #   in Loop: Header=BB140_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB140_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB140_3
.LBB140_20:                             # %for.end
                                        #   in Loop: Header=BB140_1 Depth=1
	jmp	.LBB140_21
.LBB140_21:                             # %for.inc53
                                        #   in Loop: Header=BB140_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB140_1
.LBB140_22:                             # %for.end55
	cmpl	$994536039, -40(%rbp)   # imm = 0x3B476A67
	jne	.LBB140_24
.LBB140_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB140_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB140_23
.Lfunc_end140:
	.size	Build_Status_Map.130, .Lfunc_end140-Build_Status_Map.130
	.cfi_endproc
                                        # -- End function
	.type	Get_Reference_Pixel.COEF,@object # @Get_Reference_Pixel.COEF
	.section	.rodata,"a",@progbits
	.p2align	4
Get_Reference_Pixel.COEF:
	.long	1                       # 0x1
	.long	4294967291              # 0xfffffffb
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	4294967291              # 0xfffffffb
	.long	1                       # 0x1
	.size	Get_Reference_Pixel.COEF, 24

	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
