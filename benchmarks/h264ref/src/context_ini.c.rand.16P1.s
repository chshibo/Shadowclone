	.text
	.file	"context_ini.c"
	.globl	create_context_memory   # -- Begin function create_context_memory
	.p2align	4, 0x90
	.type	create_context_memory,@function
create_context_memory:                  # @create_context_memory
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB0_17
# %bb.1:                                # %func_create_context_memory.2
	callq	create_context_memory.2
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_create_context_memory.6
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.6
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_create_context_memory.30
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.30
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_create_context_memory.32
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.32
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %func_create_context_memory.33
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.33
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_6:                                # %func_create_context_memory.39
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.39
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_7:                                # %func_create_context_memory.40
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.40
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_8:                                # %func_create_context_memory.45
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.45
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_9:                                # %func_create_context_memory.57
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.57
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_10:                               # %func_create_context_memory.63
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.63
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_11:                               # %func_create_context_memory.64
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.64
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_12:                               # %func_create_context_memory.65
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.65
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_13:                               # %func_create_context_memory.72
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.72
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_14:                               # %func_create_context_memory.73
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.73
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_15:                               # %func_create_context_memory.74
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.74
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_16:                               # %func_create_context_memory.75
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.75
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB0_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB0_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB0_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB0_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB0_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB0_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB0_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB0_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB0_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB0_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB0_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB0_15
	jmp	.LBB0_16
.Lfunc_end0:
	.size	create_context_memory, .Lfunc_end0-create_context_memory
	.cfi_endproc
                                        # -- End function
	.globl	free_context_memory     # -- Begin function free_context_memory
	.p2align	4, 0x90
	.type	free_context_memory,@function
free_context_memory:                    # @free_context_memory
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB1_2
# %bb.1:                                # %func_free_context_memory.11
	callq	free_context_memory.11
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_free_context_memory.21
	.cfi_def_cfa %rbp, 16
	callq	free_context_memory.21
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end1:
	.size	free_context_memory, .Lfunc_end1-free_context_memory
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber       # -- Begin function SetCtxModelNumber
	.p2align	4, 0x90
	.type	SetCtxModelNumber,@function
SetCtxModelNumber:                      # @SetCtxModelNumber
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB2_7
# %bb.1:                                # %func_SetCtxModelNumber.22
	callq	SetCtxModelNumber.22
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_SetCtxModelNumber.26
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.26
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_3:                                # %func_SetCtxModelNumber.27
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.27
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_4:                                # %func_SetCtxModelNumber.43
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.43
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_5:                                # %func_SetCtxModelNumber.54
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.54
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_6:                                # %func_SetCtxModelNumber.56
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.56
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_7:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB2_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB2_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB2_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB2_5
	jmp	.LBB2_6
.Lfunc_end2:
	.size	SetCtxModelNumber, .Lfunc_end2-SetCtxModelNumber
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts           # -- Begin function init_contexts
	.p2align	4, 0x90
	.type	init_contexts,@function
init_contexts:                          # @init_contexts
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB3_17
# %bb.1:                                # %func_init_contexts.7
	callq	init_contexts.7
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_init_contexts.8
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.8
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_init_contexts.9
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.9
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_init_contexts.13
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.13
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %func_init_contexts.20
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.20
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_6:                                # %func_init_contexts.25
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.25
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_7:                                # %func_init_contexts.44
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.44
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_8:                                # %func_init_contexts.46
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.46
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_9:                                # %func_init_contexts.66
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.66
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_10:                               # %func_init_contexts.68
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.68
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_11:                               # %func_init_contexts.77
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.77
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_12:                               # %func_init_contexts.80
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.80
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_13:                               # %func_init_contexts.81
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.81
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_14:                               # %func_init_contexts.82
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.82
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_15:                               # %func_init_contexts.83
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.83
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_16:                               # %func_init_contexts.84
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.84
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB3_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB3_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB3_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB3_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB3_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB3_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB3_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB3_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB3_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB3_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB3_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB3_15
	jmp	.LBB3_16
.Lfunc_end3:
	.size	init_contexts, .Lfunc_end3-init_contexts
	.cfi_endproc
                                        # -- End function
	.globl	XRate                   # -- Begin function XRate
	.p2align	4, 0x90
	.type	XRate,@function
XRate:                                  # @XRate
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB4_17
# %bb.1:                                # %func_XRate.1
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.1
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_XRate.4
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.4
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_XRate.15
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.15
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_XRate.17
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.17
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %func_XRate.18
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.18
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_6:                                # %func_XRate.19
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.19
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_7:                                # %func_XRate.28
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.28
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_8:                                # %func_XRate.29
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.29
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_9:                                # %func_XRate.34
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.34
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_10:                               # %func_XRate.35
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.35
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_11:                               # %func_XRate.37
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.37
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_12:                               # %func_XRate.47
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.47
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_13:                               # %func_XRate.50
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.50
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_14:                               # %func_XRate.55
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.55
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_15:                               # %func_XRate.62
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.62
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_16:                               # %func_XRate.71
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.71
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB4_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB4_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB4_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB4_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB4_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB4_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB4_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB4_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB4_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB4_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB4_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB4_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB4_15
	jmp	.LBB4_16
.Lfunc_end4:
	.size	XRate, .Lfunc_end4-XRate
	.cfi_endproc
                                        # -- End function
	.globl	GetCtxModelNumber       # -- Begin function GetCtxModelNumber
	.p2align	4, 0x90
	.type	GetCtxModelNumber,@function
GetCtxModelNumber:                      # @GetCtxModelNumber
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB5_17
# %bb.1:                                # %func_GetCtxModelNumber.3
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.3
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_GetCtxModelNumber.5
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.5
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_GetCtxModelNumber.14
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.14
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_GetCtxModelNumber.23
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.23
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %func_GetCtxModelNumber.24
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.24
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_6:                                # %func_GetCtxModelNumber.36
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.36
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_7:                                # %func_GetCtxModelNumber.53
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.53
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_8:                                # %func_GetCtxModelNumber.58
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.58
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_9:                                # %func_GetCtxModelNumber.60
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.60
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_10:                               # %func_GetCtxModelNumber.61
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.61
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_11:                               # %func_GetCtxModelNumber.67
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.67
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_12:                               # %func_GetCtxModelNumber.69
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.69
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_13:                               # %func_GetCtxModelNumber.70
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.70
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_14:                               # %func_GetCtxModelNumber.76
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.76
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_15:                               # %func_GetCtxModelNumber.78
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.78
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_16:                               # %func_GetCtxModelNumber.79
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.79
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB5_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB5_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB5_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB5_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB5_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB5_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB5_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB5_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB5_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB5_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB5_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB5_15
	jmp	.LBB5_16
.Lfunc_end5:
	.size	GetCtxModelNumber, .Lfunc_end5-GetCtxModelNumber
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts          # -- Begin function store_contexts
	.p2align	4, 0x90
	.type	store_contexts,@function
store_contexts:                         # @store_contexts
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB6_7
# %bb.1:                                # %func_store_contexts.16
	callq	store_contexts.16
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_store_contexts.48
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.48
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_store_contexts.49
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.49
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_store_contexts.51
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.51
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %func_store_contexts.52
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.52
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_6:                                # %func_store_contexts.59
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.59
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_7:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB6_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB6_5
	jmp	.LBB6_6
.Lfunc_end6:
	.size	store_contexts, .Lfunc_end6-store_contexts
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts # -- Begin function update_field_frame_contexts
	.p2align	4, 0x90
	.type	update_field_frame_contexts,@function
update_field_frame_contexts:            # @update_field_frame_contexts
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB7_7
# %bb.1:                                # %func_update_field_frame_contexts.10
	movl	%ebx, %edi
	callq	update_field_frame_contexts.10
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_update_field_frame_contexts.12
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.12
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_update_field_frame_contexts.31
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.31
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_update_field_frame_contexts.38
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.38
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %func_update_field_frame_contexts.41
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.41
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_6:                                # %func_update_field_frame_contexts.42
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.42
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_7:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB7_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB7_5
	jmp	.LBB7_6
.Lfunc_end7:
	.size	update_field_frame_contexts, .Lfunc_end7-update_field_frame_contexts
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.1
.LCPI8_0:
	.quad	4607182418800017408     # double 1
.LCPI8_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI8_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI8_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.1
	.p2align	4, 0x90
	.type	XRate.1,@function
XRate.1:                                # @XRate.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$2003740717, -36(%rbp)  # imm = 0x776EA82D
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB8_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB8_3
.LBB8_2:                                # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB8_3:                                # %cond.end
	vmovsd	.LCPI8_0(%rip), %xmm0   # xmm0 = mem[0],zero
	vmovsd	.LCPI8_1(%rip), %xmm1   # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI8_2(%rip), %xmm3   # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI8_3(%rip), %xmm3   # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB8_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI8_0(%rip), %xmm0   # xmm0 = mem[0],zero
	jmp	.LBB8_6
.LBB8_5:                                # %cond.false6
	vmovsd	.LCPI8_1(%rip), %xmm0   # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI8_2(%rip), %xmm2   # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI8_3(%rip), %xmm2   # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB8_6:                                # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB8_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB8_9
.LBB8_8:                                # %cond.false16
	movl	-4(%rbp), %eax
.LBB8_9:                                # %cond.end17
	cmpl	$127, %eax
	jge	.LBB8_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB8_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB8_13
.LBB8_12:                               # %cond.false25
	movl	-4(%rbp), %eax
.LBB8_13:                               # %cond.end26
	jmp	.LBB8_15
.LBB8_14:                               # %cond.false28
	movl	$127, %eax
	jmp	.LBB8_15
.LBB8_15:                               # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB8_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB8_18
.LBB8_17:                               # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB8_18:                               # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$2003740717, -36(%rbp)  # imm = 0x776EA82D
	jne	.LBB8_20
.LBB8_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_20:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB8_19
.Lfunc_end8:
	.size	XRate.1, .Lfunc_end8-XRate.1
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.2
.LCPI9_0:
	.quad	4611686018427387904     # double 2
.LCPI9_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.2
	.p2align	4, 0x90
	.type	create_context_memory.2,@function
create_context_memory.2:                # @create_context_memory.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1265825229, -20(%rbp)  # imm = 0x4B72F5CD
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB9_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB9_3
.LBB9_2:                                # %cond.false
	movl	-16(%rbp), %eax
.LBB9_3:                                # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB9_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB9_5:                                # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB9_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB9_7:                                # %if.end5
	movl	$0, -4(%rbp)
.LBB9_8:                                # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB9_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB9_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB9_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB9_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB9_11:                               # %if.end10
                                        #   in Loop: Header=BB9_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB9_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB9_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB9_13:                               # %if.end16
                                        #   in Loop: Header=BB9_8 Depth=1
	movl	$0, -8(%rbp)
.LBB9_14:                               # %for.cond17
                                        #   Parent Loop BB9_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB9_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB9_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB9_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB9_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB9_17:                               # %if.end28
                                        #   in Loop: Header=BB9_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB9_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB9_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB9_19:                               # %if.end39
                                        #   in Loop: Header=BB9_14 Depth=2
	jmp	.LBB9_20
.LBB9_20:                               # %for.inc
                                        #   in Loop: Header=BB9_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB9_14
.LBB9_21:                               # %for.end
                                        #   in Loop: Header=BB9_8 Depth=1
	jmp	.LBB9_22
.LBB9_22:                               # %for.inc40
                                        #   in Loop: Header=BB9_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_8
.LBB9_23:                               # %for.end42
	movl	$0, -4(%rbp)
.LBB9_24:                               # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_26 Depth 2
                                        #       Child Loop BB9_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB9_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB9_24 Depth=1
	movl	$0, -8(%rbp)
.LBB9_26:                               # %for.cond47
                                        #   Parent Loop BB9_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB9_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB9_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB9_26 Depth=2
	movl	$0, -12(%rbp)
.LBB9_28:                               # %for.cond51
                                        #   Parent Loop BB9_24 Depth=1
                                        #     Parent Loop BB9_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB9_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB9_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB9_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB9_28
.LBB9_31:                               # %for.end63
                                        #   in Loop: Header=BB9_26 Depth=2
	jmp	.LBB9_32
.LBB9_32:                               # %for.inc64
                                        #   in Loop: Header=BB9_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB9_26
.LBB9_33:                               # %for.end66
                                        #   in Loop: Header=BB9_24 Depth=1
	jmp	.LBB9_34
.LBB9_34:                               # %for.inc67
                                        #   in Loop: Header=BB9_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_24
.LBB9_35:                               # %for.end69
	movl	$0, -4(%rbp)
.LBB9_36:                               # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB9_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB9_36 Depth=1
	vmovsd	.LCPI9_1(%rip), %xmm0   # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI9_0(%rip), %xmm0   # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI9_0(%rip), %xmm0   # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB9_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_36
.LBB9_39:                               # %for.end98
	cmpl	$1265825229, -20(%rbp)  # imm = 0x4B72F5CD
	jne	.LBB9_41
.LBB9_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_41:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB9_40
.Lfunc_end9:
	.size	create_context_memory.2, .Lfunc_end9-create_context_memory.2
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.3
.LCPI10_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.3
	.p2align	4, 0x90
	.type	GetCtxModelNumber.3,@function
GetCtxModelNumber.3:                    # @GetCtxModelNumber.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI10_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$370601462, -44(%rbp)   # imm = 0x1616EDF6
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB10_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_3 Depth 2
                                        #       Child Loop BB10_5 Depth 3
                                        #     Child Loop BB10_14 Depth 2
                                        #       Child Loop BB10_16 Depth 3
                                        #     Child Loop BB10_25 Depth 2
                                        #       Child Loop BB10_27 Depth 3
                                        #     Child Loop BB10_36 Depth 2
                                        #       Child Loop BB10_38 Depth 3
                                        #     Child Loop BB10_47 Depth 2
                                        #     Child Loop BB10_54 Depth 2
                                        #     Child Loop BB10_61 Depth 2
                                        #     Child Loop BB10_68 Depth 2
                                        #     Child Loop BB10_75 Depth 2
                                        #     Child Loop BB10_82 Depth 2
                                        #       Child Loop BB10_84 Depth 3
                                        #     Child Loop BB10_93 Depth 2
                                        #       Child Loop BB10_95 Depth 3
                                        #     Child Loop BB10_104 Depth 2
                                        #       Child Loop BB10_106 Depth 3
                                        #     Child Loop BB10_115 Depth 2
                                        #       Child Loop BB10_117 Depth 3
                                        #     Child Loop BB10_126 Depth 2
                                        #       Child Loop BB10_128 Depth 3
                                        #     Child Loop BB10_137 Depth 2
                                        #       Child Loop BB10_139 Depth 3
                                        #     Child Loop BB10_148 Depth 2
                                        #       Child Loop BB10_150 Depth 3
                                        #     Child Loop BB10_159 Depth 2
                                        #       Child Loop BB10_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB10_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB10_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB10_3:                               # %for.cond2
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB10_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB10_3 Depth=2
	movl	$0, -4(%rbp)
.LBB10_5:                               # %for.cond5
                                        #   Parent Loop BB10_1 Depth=1
                                        #     Parent Loop BB10_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB10_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB10_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB10_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB10_9
.LBB10_8:                               # %if.else
                                        #   in Loop: Header=BB10_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB10_9:                               # %if.end
                                        #   in Loop: Header=BB10_5 Depth=3
	jmp	.LBB10_10
.LBB10_10:                              # %for.inc
                                        #   in Loop: Header=BB10_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_5
.LBB10_11:                              # %for.end
                                        #   in Loop: Header=BB10_3 Depth=2
	jmp	.LBB10_12
.LBB10_12:                              # %for.inc33
                                        #   in Loop: Header=BB10_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_3
.LBB10_13:                              # %for.end35
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$0, -8(%rbp)
.LBB10_14:                              # %for.cond36
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB10_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB10_14 Depth=2
	movl	$0, -4(%rbp)
.LBB10_16:                              # %for.cond39
                                        #   Parent Loop BB10_1 Depth=1
                                        #     Parent Loop BB10_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB10_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB10_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB10_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB10_20
.LBB10_19:                              # %if.else58
                                        #   in Loop: Header=BB10_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB10_20:                              # %if.end73
                                        #   in Loop: Header=BB10_16 Depth=3
	jmp	.LBB10_21
.LBB10_21:                              # %for.inc74
                                        #   in Loop: Header=BB10_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_16
.LBB10_22:                              # %for.end76
                                        #   in Loop: Header=BB10_14 Depth=2
	jmp	.LBB10_23
.LBB10_23:                              # %for.inc77
                                        #   in Loop: Header=BB10_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_14
.LBB10_24:                              # %for.end79
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$0, -8(%rbp)
.LBB10_25:                              # %for.cond80
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB10_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB10_25 Depth=2
	movl	$0, -4(%rbp)
.LBB10_27:                              # %for.cond83
                                        #   Parent Loop BB10_1 Depth=1
                                        #     Parent Loop BB10_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB10_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB10_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB10_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB10_31
.LBB10_30:                              # %if.else102
                                        #   in Loop: Header=BB10_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB10_31:                              # %if.end117
                                        #   in Loop: Header=BB10_27 Depth=3
	jmp	.LBB10_32
.LBB10_32:                              # %for.inc118
                                        #   in Loop: Header=BB10_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_27
.LBB10_33:                              # %for.end120
                                        #   in Loop: Header=BB10_25 Depth=2
	jmp	.LBB10_34
.LBB10_34:                              # %for.inc121
                                        #   in Loop: Header=BB10_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_25
.LBB10_35:                              # %for.end123
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$0, -8(%rbp)
.LBB10_36:                              # %for.cond124
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB10_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB10_36 Depth=2
	movl	$0, -4(%rbp)
.LBB10_38:                              # %for.cond127
                                        #   Parent Loop BB10_1 Depth=1
                                        #     Parent Loop BB10_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB10_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB10_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB10_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB10_42
.LBB10_41:                              # %if.else146
                                        #   in Loop: Header=BB10_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB10_42:                              # %if.end161
                                        #   in Loop: Header=BB10_38 Depth=3
	jmp	.LBB10_43
.LBB10_43:                              # %for.inc162
                                        #   in Loop: Header=BB10_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_38
.LBB10_44:                              # %for.end164
                                        #   in Loop: Header=BB10_36 Depth=2
	jmp	.LBB10_45
.LBB10_45:                              # %for.inc165
                                        #   in Loop: Header=BB10_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_36
.LBB10_46:                              # %for.end167
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$0, -4(%rbp)
.LBB10_47:                              # %for.cond168
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB10_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB10_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB10_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB10_51
.LBB10_50:                              # %if.else184
                                        #   in Loop: Header=BB10_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB10_51:                              # %if.end196
                                        #   in Loop: Header=BB10_47 Depth=2
	jmp	.LBB10_52
.LBB10_52:                              # %for.inc197
                                        #   in Loop: Header=BB10_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_47
.LBB10_53:                              # %for.end199
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$0, -4(%rbp)
.LBB10_54:                              # %for.cond200
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB10_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB10_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB10_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB10_58
.LBB10_57:                              # %if.else216
                                        #   in Loop: Header=BB10_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB10_58:                              # %if.end228
                                        #   in Loop: Header=BB10_54 Depth=2
	jmp	.LBB10_59
.LBB10_59:                              # %for.inc229
                                        #   in Loop: Header=BB10_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_54
.LBB10_60:                              # %for.end231
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$0, -4(%rbp)
.LBB10_61:                              # %for.cond232
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB10_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB10_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB10_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB10_65
.LBB10_64:                              # %if.else248
                                        #   in Loop: Header=BB10_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB10_65:                              # %if.end260
                                        #   in Loop: Header=BB10_61 Depth=2
	jmp	.LBB10_66
.LBB10_66:                              # %for.inc261
                                        #   in Loop: Header=BB10_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_61
.LBB10_67:                              # %for.end263
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$0, -4(%rbp)
.LBB10_68:                              # %for.cond264
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB10_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB10_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB10_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB10_72
.LBB10_71:                              # %if.else280
                                        #   in Loop: Header=BB10_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB10_72:                              # %if.end292
                                        #   in Loop: Header=BB10_68 Depth=2
	jmp	.LBB10_73
.LBB10_73:                              # %for.inc293
                                        #   in Loop: Header=BB10_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_68
.LBB10_74:                              # %for.end295
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$0, -4(%rbp)
.LBB10_75:                              # %for.cond296
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB10_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB10_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB10_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB10_79
.LBB10_78:                              # %if.else312
                                        #   in Loop: Header=BB10_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB10_79:                              # %if.end324
                                        #   in Loop: Header=BB10_75 Depth=2
	jmp	.LBB10_80
.LBB10_80:                              # %for.inc325
                                        #   in Loop: Header=BB10_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_75
.LBB10_81:                              # %for.end327
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$0, -8(%rbp)
.LBB10_82:                              # %for.cond328
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB10_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB10_82 Depth=2
	movl	$0, -4(%rbp)
.LBB10_84:                              # %for.cond331
                                        #   Parent Loop BB10_1 Depth=1
                                        #     Parent Loop BB10_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB10_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB10_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB10_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB10_88
.LBB10_87:                              # %if.else350
                                        #   in Loop: Header=BB10_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB10_88:                              # %if.end365
                                        #   in Loop: Header=BB10_84 Depth=3
	jmp	.LBB10_89
.LBB10_89:                              # %for.inc366
                                        #   in Loop: Header=BB10_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_84
.LBB10_90:                              # %for.end368
                                        #   in Loop: Header=BB10_82 Depth=2
	jmp	.LBB10_91
.LBB10_91:                              # %for.inc369
                                        #   in Loop: Header=BB10_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_82
.LBB10_92:                              # %for.end371
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$0, -8(%rbp)
.LBB10_93:                              # %for.cond372
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB10_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB10_93 Depth=2
	movl	$0, -4(%rbp)
.LBB10_95:                              # %for.cond375
                                        #   Parent Loop BB10_1 Depth=1
                                        #     Parent Loop BB10_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB10_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB10_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB10_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB10_99
.LBB10_98:                              # %if.else394
                                        #   in Loop: Header=BB10_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB10_99:                              # %if.end409
                                        #   in Loop: Header=BB10_95 Depth=3
	jmp	.LBB10_100
.LBB10_100:                             # %for.inc410
                                        #   in Loop: Header=BB10_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_95
.LBB10_101:                             # %for.end412
                                        #   in Loop: Header=BB10_93 Depth=2
	jmp	.LBB10_102
.LBB10_102:                             # %for.inc413
                                        #   in Loop: Header=BB10_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_93
.LBB10_103:                             # %for.end415
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$0, -8(%rbp)
.LBB10_104:                             # %for.cond416
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB10_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB10_104 Depth=2
	movl	$0, -4(%rbp)
.LBB10_106:                             # %for.cond419
                                        #   Parent Loop BB10_1 Depth=1
                                        #     Parent Loop BB10_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB10_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB10_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB10_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB10_110
.LBB10_109:                             # %if.else438
                                        #   in Loop: Header=BB10_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB10_110:                             # %if.end453
                                        #   in Loop: Header=BB10_106 Depth=3
	jmp	.LBB10_111
.LBB10_111:                             # %for.inc454
                                        #   in Loop: Header=BB10_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_106
.LBB10_112:                             # %for.end456
                                        #   in Loop: Header=BB10_104 Depth=2
	jmp	.LBB10_113
.LBB10_113:                             # %for.inc457
                                        #   in Loop: Header=BB10_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_104
.LBB10_114:                             # %for.end459
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$0, -8(%rbp)
.LBB10_115:                             # %for.cond460
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB10_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB10_115 Depth=2
	movl	$0, -4(%rbp)
.LBB10_117:                             # %for.cond463
                                        #   Parent Loop BB10_1 Depth=1
                                        #     Parent Loop BB10_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB10_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB10_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB10_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB10_121
.LBB10_120:                             # %if.else482
                                        #   in Loop: Header=BB10_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB10_121:                             # %if.end497
                                        #   in Loop: Header=BB10_117 Depth=3
	jmp	.LBB10_122
.LBB10_122:                             # %for.inc498
                                        #   in Loop: Header=BB10_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_117
.LBB10_123:                             # %for.end500
                                        #   in Loop: Header=BB10_115 Depth=2
	jmp	.LBB10_124
.LBB10_124:                             # %for.inc501
                                        #   in Loop: Header=BB10_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_115
.LBB10_125:                             # %for.end503
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$0, -8(%rbp)
.LBB10_126:                             # %for.cond504
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB10_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB10_126 Depth=2
	movl	$0, -4(%rbp)
.LBB10_128:                             # %for.cond507
                                        #   Parent Loop BB10_1 Depth=1
                                        #     Parent Loop BB10_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB10_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB10_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB10_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB10_132
.LBB10_131:                             # %if.else526
                                        #   in Loop: Header=BB10_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB10_132:                             # %if.end541
                                        #   in Loop: Header=BB10_128 Depth=3
	jmp	.LBB10_133
.LBB10_133:                             # %for.inc542
                                        #   in Loop: Header=BB10_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_128
.LBB10_134:                             # %for.end544
                                        #   in Loop: Header=BB10_126 Depth=2
	jmp	.LBB10_135
.LBB10_135:                             # %for.inc545
                                        #   in Loop: Header=BB10_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_126
.LBB10_136:                             # %for.end547
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$0, -8(%rbp)
.LBB10_137:                             # %for.cond548
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB10_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB10_137 Depth=2
	movl	$0, -4(%rbp)
.LBB10_139:                             # %for.cond551
                                        #   Parent Loop BB10_1 Depth=1
                                        #     Parent Loop BB10_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB10_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB10_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB10_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB10_143
.LBB10_142:                             # %if.else570
                                        #   in Loop: Header=BB10_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB10_143:                             # %if.end585
                                        #   in Loop: Header=BB10_139 Depth=3
	jmp	.LBB10_144
.LBB10_144:                             # %for.inc586
                                        #   in Loop: Header=BB10_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_139
.LBB10_145:                             # %for.end588
                                        #   in Loop: Header=BB10_137 Depth=2
	jmp	.LBB10_146
.LBB10_146:                             # %for.inc589
                                        #   in Loop: Header=BB10_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_137
.LBB10_147:                             # %for.end591
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$0, -8(%rbp)
.LBB10_148:                             # %for.cond592
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB10_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB10_148 Depth=2
	movl	$0, -4(%rbp)
.LBB10_150:                             # %for.cond595
                                        #   Parent Loop BB10_1 Depth=1
                                        #     Parent Loop BB10_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB10_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB10_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB10_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB10_154
.LBB10_153:                             # %if.else614
                                        #   in Loop: Header=BB10_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB10_154:                             # %if.end629
                                        #   in Loop: Header=BB10_150 Depth=3
	jmp	.LBB10_155
.LBB10_155:                             # %for.inc630
                                        #   in Loop: Header=BB10_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_150
.LBB10_156:                             # %for.end632
                                        #   in Loop: Header=BB10_148 Depth=2
	jmp	.LBB10_157
.LBB10_157:                             # %for.inc633
                                        #   in Loop: Header=BB10_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_148
.LBB10_158:                             # %for.end635
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$0, -8(%rbp)
.LBB10_159:                             # %for.cond636
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB10_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB10_159 Depth=2
	movl	$0, -4(%rbp)
.LBB10_161:                             # %for.cond639
                                        #   Parent Loop BB10_1 Depth=1
                                        #     Parent Loop BB10_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB10_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB10_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB10_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB10_165
.LBB10_164:                             # %if.else658
                                        #   in Loop: Header=BB10_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB10_165:                             # %if.end673
                                        #   in Loop: Header=BB10_161 Depth=3
	jmp	.LBB10_166
.LBB10_166:                             # %for.inc674
                                        #   in Loop: Header=BB10_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_161
.LBB10_167:                             # %for.end676
                                        #   in Loop: Header=BB10_159 Depth=2
	jmp	.LBB10_168
.LBB10_168:                             # %for.inc677
                                        #   in Loop: Header=BB10_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_159
.LBB10_169:                             # %for.end679
                                        #   in Loop: Header=BB10_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB10_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB10_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB10_171:                             # %if.end682
                                        #   in Loop: Header=BB10_1 Depth=1
	jmp	.LBB10_172
.LBB10_172:                             # %for.inc683
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_1
.LBB10_173:                             # %for.end685
	cmpl	$370601462, -44(%rbp)   # imm = 0x1616EDF6
	jne	.LBB10_175
.LBB10_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB10_174
.Lfunc_end10:
	.size	GetCtxModelNumber.3, .Lfunc_end10-GetCtxModelNumber.3
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.4
.LCPI11_0:
	.quad	4607182418800017408     # double 1
.LCPI11_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI11_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI11_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.4
	.p2align	4, 0x90
	.type	XRate.4,@function
XRate.4:                                # @XRate.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$2125194593, -32(%rbp)  # imm = 0x7EABE561
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB11_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB11_3
.LBB11_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB11_3:                               # %cond.end
	vmovsd	.LCPI11_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI11_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI11_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI11_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB11_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI11_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB11_6
.LBB11_5:                               # %cond.false6
	vmovsd	.LCPI11_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI11_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI11_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB11_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB11_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB11_9
.LBB11_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB11_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB11_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB11_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB11_13
.LBB11_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB11_13:                              # %cond.end26
	jmp	.LBB11_15
.LBB11_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB11_15
.LBB11_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB11_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB11_18
.LBB11_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB11_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$2125194593, -32(%rbp)  # imm = 0x7EABE561
	jne	.LBB11_20
.LBB11_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB11_19
.Lfunc_end11:
	.size	XRate.4, .Lfunc_end11-XRate.4
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.5
.LCPI12_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.5
	.p2align	4, 0x90
	.type	GetCtxModelNumber.5,@function
GetCtxModelNumber.5:                    # @GetCtxModelNumber.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI12_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1507001130, -44(%rbp)  # imm = 0x59D3032A
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB12_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_3 Depth 2
                                        #       Child Loop BB12_5 Depth 3
                                        #     Child Loop BB12_14 Depth 2
                                        #       Child Loop BB12_16 Depth 3
                                        #     Child Loop BB12_25 Depth 2
                                        #       Child Loop BB12_27 Depth 3
                                        #     Child Loop BB12_36 Depth 2
                                        #       Child Loop BB12_38 Depth 3
                                        #     Child Loop BB12_47 Depth 2
                                        #     Child Loop BB12_54 Depth 2
                                        #     Child Loop BB12_61 Depth 2
                                        #     Child Loop BB12_68 Depth 2
                                        #     Child Loop BB12_75 Depth 2
                                        #     Child Loop BB12_82 Depth 2
                                        #       Child Loop BB12_84 Depth 3
                                        #     Child Loop BB12_93 Depth 2
                                        #       Child Loop BB12_95 Depth 3
                                        #     Child Loop BB12_104 Depth 2
                                        #       Child Loop BB12_106 Depth 3
                                        #     Child Loop BB12_115 Depth 2
                                        #       Child Loop BB12_117 Depth 3
                                        #     Child Loop BB12_126 Depth 2
                                        #       Child Loop BB12_128 Depth 3
                                        #     Child Loop BB12_137 Depth 2
                                        #       Child Loop BB12_139 Depth 3
                                        #     Child Loop BB12_148 Depth 2
                                        #       Child Loop BB12_150 Depth 3
                                        #     Child Loop BB12_159 Depth 2
                                        #       Child Loop BB12_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB12_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB12_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB12_3:                               # %for.cond2
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB12_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB12_3 Depth=2
	movl	$0, -4(%rbp)
.LBB12_5:                               # %for.cond5
                                        #   Parent Loop BB12_1 Depth=1
                                        #     Parent Loop BB12_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB12_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB12_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB12_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB12_9
.LBB12_8:                               # %if.else
                                        #   in Loop: Header=BB12_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB12_9:                               # %if.end
                                        #   in Loop: Header=BB12_5 Depth=3
	jmp	.LBB12_10
.LBB12_10:                              # %for.inc
                                        #   in Loop: Header=BB12_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_5
.LBB12_11:                              # %for.end
                                        #   in Loop: Header=BB12_3 Depth=2
	jmp	.LBB12_12
.LBB12_12:                              # %for.inc33
                                        #   in Loop: Header=BB12_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_3
.LBB12_13:                              # %for.end35
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -8(%rbp)
.LBB12_14:                              # %for.cond36
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB12_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB12_14 Depth=2
	movl	$0, -4(%rbp)
.LBB12_16:                              # %for.cond39
                                        #   Parent Loop BB12_1 Depth=1
                                        #     Parent Loop BB12_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB12_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB12_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB12_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB12_20
.LBB12_19:                              # %if.else58
                                        #   in Loop: Header=BB12_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB12_20:                              # %if.end73
                                        #   in Loop: Header=BB12_16 Depth=3
	jmp	.LBB12_21
.LBB12_21:                              # %for.inc74
                                        #   in Loop: Header=BB12_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_16
.LBB12_22:                              # %for.end76
                                        #   in Loop: Header=BB12_14 Depth=2
	jmp	.LBB12_23
.LBB12_23:                              # %for.inc77
                                        #   in Loop: Header=BB12_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_14
.LBB12_24:                              # %for.end79
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -8(%rbp)
.LBB12_25:                              # %for.cond80
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB12_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB12_25 Depth=2
	movl	$0, -4(%rbp)
.LBB12_27:                              # %for.cond83
                                        #   Parent Loop BB12_1 Depth=1
                                        #     Parent Loop BB12_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB12_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB12_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB12_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB12_31
.LBB12_30:                              # %if.else102
                                        #   in Loop: Header=BB12_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB12_31:                              # %if.end117
                                        #   in Loop: Header=BB12_27 Depth=3
	jmp	.LBB12_32
.LBB12_32:                              # %for.inc118
                                        #   in Loop: Header=BB12_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_27
.LBB12_33:                              # %for.end120
                                        #   in Loop: Header=BB12_25 Depth=2
	jmp	.LBB12_34
.LBB12_34:                              # %for.inc121
                                        #   in Loop: Header=BB12_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_25
.LBB12_35:                              # %for.end123
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -8(%rbp)
.LBB12_36:                              # %for.cond124
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB12_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB12_36 Depth=2
	movl	$0, -4(%rbp)
.LBB12_38:                              # %for.cond127
                                        #   Parent Loop BB12_1 Depth=1
                                        #     Parent Loop BB12_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB12_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB12_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB12_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB12_42
.LBB12_41:                              # %if.else146
                                        #   in Loop: Header=BB12_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB12_42:                              # %if.end161
                                        #   in Loop: Header=BB12_38 Depth=3
	jmp	.LBB12_43
.LBB12_43:                              # %for.inc162
                                        #   in Loop: Header=BB12_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_38
.LBB12_44:                              # %for.end164
                                        #   in Loop: Header=BB12_36 Depth=2
	jmp	.LBB12_45
.LBB12_45:                              # %for.inc165
                                        #   in Loop: Header=BB12_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_36
.LBB12_46:                              # %for.end167
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -4(%rbp)
.LBB12_47:                              # %for.cond168
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB12_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB12_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB12_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB12_51
.LBB12_50:                              # %if.else184
                                        #   in Loop: Header=BB12_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB12_51:                              # %if.end196
                                        #   in Loop: Header=BB12_47 Depth=2
	jmp	.LBB12_52
.LBB12_52:                              # %for.inc197
                                        #   in Loop: Header=BB12_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_47
.LBB12_53:                              # %for.end199
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -4(%rbp)
.LBB12_54:                              # %for.cond200
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB12_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB12_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB12_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB12_58
.LBB12_57:                              # %if.else216
                                        #   in Loop: Header=BB12_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB12_58:                              # %if.end228
                                        #   in Loop: Header=BB12_54 Depth=2
	jmp	.LBB12_59
.LBB12_59:                              # %for.inc229
                                        #   in Loop: Header=BB12_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_54
.LBB12_60:                              # %for.end231
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -4(%rbp)
.LBB12_61:                              # %for.cond232
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB12_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB12_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB12_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB12_65
.LBB12_64:                              # %if.else248
                                        #   in Loop: Header=BB12_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB12_65:                              # %if.end260
                                        #   in Loop: Header=BB12_61 Depth=2
	jmp	.LBB12_66
.LBB12_66:                              # %for.inc261
                                        #   in Loop: Header=BB12_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_61
.LBB12_67:                              # %for.end263
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -4(%rbp)
.LBB12_68:                              # %for.cond264
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB12_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB12_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB12_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB12_72
.LBB12_71:                              # %if.else280
                                        #   in Loop: Header=BB12_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB12_72:                              # %if.end292
                                        #   in Loop: Header=BB12_68 Depth=2
	jmp	.LBB12_73
.LBB12_73:                              # %for.inc293
                                        #   in Loop: Header=BB12_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_68
.LBB12_74:                              # %for.end295
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -4(%rbp)
.LBB12_75:                              # %for.cond296
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB12_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB12_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB12_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB12_79
.LBB12_78:                              # %if.else312
                                        #   in Loop: Header=BB12_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB12_79:                              # %if.end324
                                        #   in Loop: Header=BB12_75 Depth=2
	jmp	.LBB12_80
.LBB12_80:                              # %for.inc325
                                        #   in Loop: Header=BB12_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_75
.LBB12_81:                              # %for.end327
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -8(%rbp)
.LBB12_82:                              # %for.cond328
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB12_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB12_82 Depth=2
	movl	$0, -4(%rbp)
.LBB12_84:                              # %for.cond331
                                        #   Parent Loop BB12_1 Depth=1
                                        #     Parent Loop BB12_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB12_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB12_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB12_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB12_88
.LBB12_87:                              # %if.else350
                                        #   in Loop: Header=BB12_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB12_88:                              # %if.end365
                                        #   in Loop: Header=BB12_84 Depth=3
	jmp	.LBB12_89
.LBB12_89:                              # %for.inc366
                                        #   in Loop: Header=BB12_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_84
.LBB12_90:                              # %for.end368
                                        #   in Loop: Header=BB12_82 Depth=2
	jmp	.LBB12_91
.LBB12_91:                              # %for.inc369
                                        #   in Loop: Header=BB12_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_82
.LBB12_92:                              # %for.end371
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -8(%rbp)
.LBB12_93:                              # %for.cond372
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB12_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB12_93 Depth=2
	movl	$0, -4(%rbp)
.LBB12_95:                              # %for.cond375
                                        #   Parent Loop BB12_1 Depth=1
                                        #     Parent Loop BB12_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB12_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB12_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB12_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB12_99
.LBB12_98:                              # %if.else394
                                        #   in Loop: Header=BB12_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB12_99:                              # %if.end409
                                        #   in Loop: Header=BB12_95 Depth=3
	jmp	.LBB12_100
.LBB12_100:                             # %for.inc410
                                        #   in Loop: Header=BB12_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_95
.LBB12_101:                             # %for.end412
                                        #   in Loop: Header=BB12_93 Depth=2
	jmp	.LBB12_102
.LBB12_102:                             # %for.inc413
                                        #   in Loop: Header=BB12_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_93
.LBB12_103:                             # %for.end415
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -8(%rbp)
.LBB12_104:                             # %for.cond416
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB12_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB12_104 Depth=2
	movl	$0, -4(%rbp)
.LBB12_106:                             # %for.cond419
                                        #   Parent Loop BB12_1 Depth=1
                                        #     Parent Loop BB12_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB12_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB12_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB12_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB12_110
.LBB12_109:                             # %if.else438
                                        #   in Loop: Header=BB12_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB12_110:                             # %if.end453
                                        #   in Loop: Header=BB12_106 Depth=3
	jmp	.LBB12_111
.LBB12_111:                             # %for.inc454
                                        #   in Loop: Header=BB12_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_106
.LBB12_112:                             # %for.end456
                                        #   in Loop: Header=BB12_104 Depth=2
	jmp	.LBB12_113
.LBB12_113:                             # %for.inc457
                                        #   in Loop: Header=BB12_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_104
.LBB12_114:                             # %for.end459
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -8(%rbp)
.LBB12_115:                             # %for.cond460
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB12_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB12_115 Depth=2
	movl	$0, -4(%rbp)
.LBB12_117:                             # %for.cond463
                                        #   Parent Loop BB12_1 Depth=1
                                        #     Parent Loop BB12_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB12_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB12_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB12_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB12_121
.LBB12_120:                             # %if.else482
                                        #   in Loop: Header=BB12_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB12_121:                             # %if.end497
                                        #   in Loop: Header=BB12_117 Depth=3
	jmp	.LBB12_122
.LBB12_122:                             # %for.inc498
                                        #   in Loop: Header=BB12_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_117
.LBB12_123:                             # %for.end500
                                        #   in Loop: Header=BB12_115 Depth=2
	jmp	.LBB12_124
.LBB12_124:                             # %for.inc501
                                        #   in Loop: Header=BB12_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_115
.LBB12_125:                             # %for.end503
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -8(%rbp)
.LBB12_126:                             # %for.cond504
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB12_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB12_126 Depth=2
	movl	$0, -4(%rbp)
.LBB12_128:                             # %for.cond507
                                        #   Parent Loop BB12_1 Depth=1
                                        #     Parent Loop BB12_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB12_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB12_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB12_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB12_132
.LBB12_131:                             # %if.else526
                                        #   in Loop: Header=BB12_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB12_132:                             # %if.end541
                                        #   in Loop: Header=BB12_128 Depth=3
	jmp	.LBB12_133
.LBB12_133:                             # %for.inc542
                                        #   in Loop: Header=BB12_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_128
.LBB12_134:                             # %for.end544
                                        #   in Loop: Header=BB12_126 Depth=2
	jmp	.LBB12_135
.LBB12_135:                             # %for.inc545
                                        #   in Loop: Header=BB12_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_126
.LBB12_136:                             # %for.end547
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -8(%rbp)
.LBB12_137:                             # %for.cond548
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB12_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB12_137 Depth=2
	movl	$0, -4(%rbp)
.LBB12_139:                             # %for.cond551
                                        #   Parent Loop BB12_1 Depth=1
                                        #     Parent Loop BB12_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB12_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB12_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB12_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB12_143
.LBB12_142:                             # %if.else570
                                        #   in Loop: Header=BB12_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB12_143:                             # %if.end585
                                        #   in Loop: Header=BB12_139 Depth=3
	jmp	.LBB12_144
.LBB12_144:                             # %for.inc586
                                        #   in Loop: Header=BB12_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_139
.LBB12_145:                             # %for.end588
                                        #   in Loop: Header=BB12_137 Depth=2
	jmp	.LBB12_146
.LBB12_146:                             # %for.inc589
                                        #   in Loop: Header=BB12_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_137
.LBB12_147:                             # %for.end591
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -8(%rbp)
.LBB12_148:                             # %for.cond592
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB12_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB12_148 Depth=2
	movl	$0, -4(%rbp)
.LBB12_150:                             # %for.cond595
                                        #   Parent Loop BB12_1 Depth=1
                                        #     Parent Loop BB12_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB12_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB12_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB12_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB12_154
.LBB12_153:                             # %if.else614
                                        #   in Loop: Header=BB12_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB12_154:                             # %if.end629
                                        #   in Loop: Header=BB12_150 Depth=3
	jmp	.LBB12_155
.LBB12_155:                             # %for.inc630
                                        #   in Loop: Header=BB12_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_150
.LBB12_156:                             # %for.end632
                                        #   in Loop: Header=BB12_148 Depth=2
	jmp	.LBB12_157
.LBB12_157:                             # %for.inc633
                                        #   in Loop: Header=BB12_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_148
.LBB12_158:                             # %for.end635
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -8(%rbp)
.LBB12_159:                             # %for.cond636
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB12_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB12_159 Depth=2
	movl	$0, -4(%rbp)
.LBB12_161:                             # %for.cond639
                                        #   Parent Loop BB12_1 Depth=1
                                        #     Parent Loop BB12_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB12_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB12_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB12_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB12_165
.LBB12_164:                             # %if.else658
                                        #   in Loop: Header=BB12_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB12_165:                             # %if.end673
                                        #   in Loop: Header=BB12_161 Depth=3
	jmp	.LBB12_166
.LBB12_166:                             # %for.inc674
                                        #   in Loop: Header=BB12_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_161
.LBB12_167:                             # %for.end676
                                        #   in Loop: Header=BB12_159 Depth=2
	jmp	.LBB12_168
.LBB12_168:                             # %for.inc677
                                        #   in Loop: Header=BB12_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_159
.LBB12_169:                             # %for.end679
                                        #   in Loop: Header=BB12_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB12_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB12_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB12_171:                             # %if.end682
                                        #   in Loop: Header=BB12_1 Depth=1
	jmp	.LBB12_172
.LBB12_172:                             # %for.inc683
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_1
.LBB12_173:                             # %for.end685
	cmpl	$1507001130, -44(%rbp)  # imm = 0x59D3032A
	jne	.LBB12_175
.LBB12_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB12_174
.Lfunc_end12:
	.size	GetCtxModelNumber.5, .Lfunc_end12-GetCtxModelNumber.5
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.6
.LCPI13_0:
	.quad	4611686018427387904     # double 2
.LCPI13_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.6
	.p2align	4, 0x90
	.type	create_context_memory.6,@function
create_context_memory.6:                # @create_context_memory.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1749613970, -20(%rbp)  # imm = 0x6848FD92
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB13_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB13_3
.LBB13_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB13_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB13_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB13_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB13_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB13_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB13_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB13_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB13_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB13_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB13_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB13_11:                              # %if.end10
                                        #   in Loop: Header=BB13_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB13_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB13_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB13_13:                              # %if.end16
                                        #   in Loop: Header=BB13_8 Depth=1
	movl	$0, -8(%rbp)
.LBB13_14:                              # %for.cond17
                                        #   Parent Loop BB13_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB13_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB13_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB13_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB13_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB13_17:                              # %if.end28
                                        #   in Loop: Header=BB13_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB13_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB13_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB13_19:                              # %if.end39
                                        #   in Loop: Header=BB13_14 Depth=2
	jmp	.LBB13_20
.LBB13_20:                              # %for.inc
                                        #   in Loop: Header=BB13_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_14
.LBB13_21:                              # %for.end
                                        #   in Loop: Header=BB13_8 Depth=1
	jmp	.LBB13_22
.LBB13_22:                              # %for.inc40
                                        #   in Loop: Header=BB13_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_8
.LBB13_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB13_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_26 Depth 2
                                        #       Child Loop BB13_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB13_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB13_24 Depth=1
	movl	$0, -8(%rbp)
.LBB13_26:                              # %for.cond47
                                        #   Parent Loop BB13_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB13_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB13_26 Depth=2
	movl	$0, -12(%rbp)
.LBB13_28:                              # %for.cond51
                                        #   Parent Loop BB13_24 Depth=1
                                        #     Parent Loop BB13_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB13_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB13_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB13_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_28
.LBB13_31:                              # %for.end63
                                        #   in Loop: Header=BB13_26 Depth=2
	jmp	.LBB13_32
.LBB13_32:                              # %for.inc64
                                        #   in Loop: Header=BB13_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_26
.LBB13_33:                              # %for.end66
                                        #   in Loop: Header=BB13_24 Depth=1
	jmp	.LBB13_34
.LBB13_34:                              # %for.inc67
                                        #   in Loop: Header=BB13_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_24
.LBB13_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB13_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB13_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB13_36 Depth=1
	vmovsd	.LCPI13_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI13_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI13_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB13_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_36
.LBB13_39:                              # %for.end98
	cmpl	$1749613970, -20(%rbp)  # imm = 0x6848FD92
	jne	.LBB13_41
.LBB13_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB13_40
.Lfunc_end13:
	.size	create_context_memory.6, .Lfunc_end13-create_context_memory.6
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.7         # -- Begin function init_contexts.7
	.p2align	4, 0x90
	.type	init_contexts.7,@function
init_contexts.7:                        # @init_contexts.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1500156411, -28(%rbp)  # imm = 0x596A91FB
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB14_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB14_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB14_1 Depth=1
	movl	$0, -4(%rbp)
.LBB14_3:                               # %for.cond2
                                        #   Parent Loop BB14_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB14_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB14_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB14_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB14_7
.LBB14_6:                               # %if.else
                                        #   in Loop: Header=BB14_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB14_7:                               # %if.end
                                        #   in Loop: Header=BB14_3 Depth=2
	jmp	.LBB14_8
.LBB14_8:                               # %for.inc
                                        #   in Loop: Header=BB14_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_3
.LBB14_9:                               # %for.end
                                        #   in Loop: Header=BB14_1 Depth=1
	jmp	.LBB14_10
.LBB14_10:                              # %for.inc28
                                        #   in Loop: Header=BB14_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_1
.LBB14_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB14_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB14_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB14_12 Depth=1
	movl	$0, -4(%rbp)
.LBB14_14:                              # %for.cond34
                                        #   Parent Loop BB14_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB14_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB14_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB14_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB14_18
.LBB14_17:                              # %if.else52
                                        #   in Loop: Header=BB14_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB14_18:                              # %if.end66
                                        #   in Loop: Header=BB14_14 Depth=2
	jmp	.LBB14_19
.LBB14_19:                              # %for.inc67
                                        #   in Loop: Header=BB14_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_14
.LBB14_20:                              # %for.end69
                                        #   in Loop: Header=BB14_12 Depth=1
	jmp	.LBB14_21
.LBB14_21:                              # %for.inc70
                                        #   in Loop: Header=BB14_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_12
.LBB14_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB14_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB14_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB14_23 Depth=1
	movl	$0, -4(%rbp)
.LBB14_25:                              # %for.cond76
                                        #   Parent Loop BB14_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB14_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB14_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB14_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB14_29
.LBB14_28:                              # %if.else94
                                        #   in Loop: Header=BB14_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB14_29:                              # %if.end108
                                        #   in Loop: Header=BB14_25 Depth=2
	jmp	.LBB14_30
.LBB14_30:                              # %for.inc109
                                        #   in Loop: Header=BB14_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_25
.LBB14_31:                              # %for.end111
                                        #   in Loop: Header=BB14_23 Depth=1
	jmp	.LBB14_32
.LBB14_32:                              # %for.inc112
                                        #   in Loop: Header=BB14_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_23
.LBB14_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB14_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB14_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB14_34 Depth=1
	movl	$0, -4(%rbp)
.LBB14_36:                              # %for.cond118
                                        #   Parent Loop BB14_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB14_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB14_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB14_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB14_40
.LBB14_39:                              # %if.else136
                                        #   in Loop: Header=BB14_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB14_40:                              # %if.end150
                                        #   in Loop: Header=BB14_36 Depth=2
	jmp	.LBB14_41
.LBB14_41:                              # %for.inc151
                                        #   in Loop: Header=BB14_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_36
.LBB14_42:                              # %for.end153
                                        #   in Loop: Header=BB14_34 Depth=1
	jmp	.LBB14_43
.LBB14_43:                              # %for.inc154
                                        #   in Loop: Header=BB14_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_34
.LBB14_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB14_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB14_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB14_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB14_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB14_49
.LBB14_48:                              # %if.else172
                                        #   in Loop: Header=BB14_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB14_49:                              # %if.end183
                                        #   in Loop: Header=BB14_45 Depth=1
	jmp	.LBB14_50
.LBB14_50:                              # %for.inc184
                                        #   in Loop: Header=BB14_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_45
.LBB14_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB14_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB14_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB14_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB14_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB14_56
.LBB14_55:                              # %if.else202
                                        #   in Loop: Header=BB14_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB14_56:                              # %if.end213
                                        #   in Loop: Header=BB14_52 Depth=1
	jmp	.LBB14_57
.LBB14_57:                              # %for.inc214
                                        #   in Loop: Header=BB14_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_52
.LBB14_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB14_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB14_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB14_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB14_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB14_63
.LBB14_62:                              # %if.else232
                                        #   in Loop: Header=BB14_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB14_63:                              # %if.end243
                                        #   in Loop: Header=BB14_59 Depth=1
	jmp	.LBB14_64
.LBB14_64:                              # %for.inc244
                                        #   in Loop: Header=BB14_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_59
.LBB14_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB14_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB14_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB14_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB14_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB14_70
.LBB14_69:                              # %if.else262
                                        #   in Loop: Header=BB14_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB14_70:                              # %if.end273
                                        #   in Loop: Header=BB14_66 Depth=1
	jmp	.LBB14_71
.LBB14_71:                              # %for.inc274
                                        #   in Loop: Header=BB14_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_66
.LBB14_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB14_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB14_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB14_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB14_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB14_77
.LBB14_76:                              # %if.else292
                                        #   in Loop: Header=BB14_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB14_77:                              # %if.end303
                                        #   in Loop: Header=BB14_73 Depth=1
	jmp	.LBB14_78
.LBB14_78:                              # %for.inc304
                                        #   in Loop: Header=BB14_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_73
.LBB14_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB14_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB14_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB14_80 Depth=1
	movl	$0, -4(%rbp)
.LBB14_82:                              # %for.cond310
                                        #   Parent Loop BB14_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB14_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB14_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB14_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB14_86
.LBB14_85:                              # %if.else328
                                        #   in Loop: Header=BB14_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB14_86:                              # %if.end342
                                        #   in Loop: Header=BB14_82 Depth=2
	jmp	.LBB14_87
.LBB14_87:                              # %for.inc343
                                        #   in Loop: Header=BB14_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_82
.LBB14_88:                              # %for.end345
                                        #   in Loop: Header=BB14_80 Depth=1
	jmp	.LBB14_89
.LBB14_89:                              # %for.inc346
                                        #   in Loop: Header=BB14_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_80
.LBB14_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB14_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB14_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB14_91 Depth=1
	movl	$0, -4(%rbp)
.LBB14_93:                              # %for.cond352
                                        #   Parent Loop BB14_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB14_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB14_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB14_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB14_97
.LBB14_96:                              # %if.else370
                                        #   in Loop: Header=BB14_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB14_97:                              # %if.end384
                                        #   in Loop: Header=BB14_93 Depth=2
	jmp	.LBB14_98
.LBB14_98:                              # %for.inc385
                                        #   in Loop: Header=BB14_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_93
.LBB14_99:                              # %for.end387
                                        #   in Loop: Header=BB14_91 Depth=1
	jmp	.LBB14_100
.LBB14_100:                             # %for.inc388
                                        #   in Loop: Header=BB14_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_91
.LBB14_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB14_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB14_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB14_102 Depth=1
	movl	$0, -4(%rbp)
.LBB14_104:                             # %for.cond394
                                        #   Parent Loop BB14_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB14_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB14_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB14_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB14_108
.LBB14_107:                             # %if.else412
                                        #   in Loop: Header=BB14_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB14_108:                             # %if.end426
                                        #   in Loop: Header=BB14_104 Depth=2
	jmp	.LBB14_109
.LBB14_109:                             # %for.inc427
                                        #   in Loop: Header=BB14_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_104
.LBB14_110:                             # %for.end429
                                        #   in Loop: Header=BB14_102 Depth=1
	jmp	.LBB14_111
.LBB14_111:                             # %for.inc430
                                        #   in Loop: Header=BB14_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_102
.LBB14_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB14_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB14_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB14_113 Depth=1
	movl	$0, -4(%rbp)
.LBB14_115:                             # %for.cond436
                                        #   Parent Loop BB14_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB14_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB14_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB14_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB14_119
.LBB14_118:                             # %if.else454
                                        #   in Loop: Header=BB14_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB14_119:                             # %if.end468
                                        #   in Loop: Header=BB14_115 Depth=2
	jmp	.LBB14_120
.LBB14_120:                             # %for.inc469
                                        #   in Loop: Header=BB14_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_115
.LBB14_121:                             # %for.end471
                                        #   in Loop: Header=BB14_113 Depth=1
	jmp	.LBB14_122
.LBB14_122:                             # %for.inc472
                                        #   in Loop: Header=BB14_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_113
.LBB14_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB14_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB14_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB14_124 Depth=1
	movl	$0, -4(%rbp)
.LBB14_126:                             # %for.cond478
                                        #   Parent Loop BB14_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB14_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB14_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB14_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB14_130
.LBB14_129:                             # %if.else496
                                        #   in Loop: Header=BB14_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB14_130:                             # %if.end510
                                        #   in Loop: Header=BB14_126 Depth=2
	jmp	.LBB14_131
.LBB14_131:                             # %for.inc511
                                        #   in Loop: Header=BB14_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_126
.LBB14_132:                             # %for.end513
                                        #   in Loop: Header=BB14_124 Depth=1
	jmp	.LBB14_133
.LBB14_133:                             # %for.inc514
                                        #   in Loop: Header=BB14_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_124
.LBB14_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB14_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB14_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB14_135 Depth=1
	movl	$0, -4(%rbp)
.LBB14_137:                             # %for.cond520
                                        #   Parent Loop BB14_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB14_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB14_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB14_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB14_141
.LBB14_140:                             # %if.else538
                                        #   in Loop: Header=BB14_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB14_141:                             # %if.end552
                                        #   in Loop: Header=BB14_137 Depth=2
	jmp	.LBB14_142
.LBB14_142:                             # %for.inc553
                                        #   in Loop: Header=BB14_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_137
.LBB14_143:                             # %for.end555
                                        #   in Loop: Header=BB14_135 Depth=1
	jmp	.LBB14_144
.LBB14_144:                             # %for.inc556
                                        #   in Loop: Header=BB14_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_135
.LBB14_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB14_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB14_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB14_146 Depth=1
	movl	$0, -4(%rbp)
.LBB14_148:                             # %for.cond562
                                        #   Parent Loop BB14_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB14_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB14_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB14_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB14_152
.LBB14_151:                             # %if.else580
                                        #   in Loop: Header=BB14_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB14_152:                             # %if.end594
                                        #   in Loop: Header=BB14_148 Depth=2
	jmp	.LBB14_153
.LBB14_153:                             # %for.inc595
                                        #   in Loop: Header=BB14_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_148
.LBB14_154:                             # %for.end597
                                        #   in Loop: Header=BB14_146 Depth=1
	jmp	.LBB14_155
.LBB14_155:                             # %for.inc598
                                        #   in Loop: Header=BB14_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_146
.LBB14_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB14_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB14_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB14_157 Depth=1
	movl	$0, -4(%rbp)
.LBB14_159:                             # %for.cond604
                                        #   Parent Loop BB14_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB14_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB14_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB14_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB14_163
.LBB14_162:                             # %if.else622
                                        #   in Loop: Header=BB14_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB14_163:                             # %if.end636
                                        #   in Loop: Header=BB14_159 Depth=2
	jmp	.LBB14_164
.LBB14_164:                             # %for.inc637
                                        #   in Loop: Header=BB14_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_159
.LBB14_165:                             # %for.end639
                                        #   in Loop: Header=BB14_157 Depth=1
	jmp	.LBB14_166
.LBB14_166:                             # %for.inc640
                                        #   in Loop: Header=BB14_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_157
.LBB14_167:                             # %for.end642
	cmpl	$1500156411, -28(%rbp)  # imm = 0x596A91FB
	jne	.LBB14_169
.LBB14_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB14_168
.Lfunc_end14:
	.size	init_contexts.7, .Lfunc_end14-init_contexts.7
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.8         # -- Begin function init_contexts.8
	.p2align	4, 0x90
	.type	init_contexts.8,@function
init_contexts.8:                        # @init_contexts.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$157877458, -28(%rbp)   # imm = 0x96904D2
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB15_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB15_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	$0, -4(%rbp)
.LBB15_3:                               # %for.cond2
                                        #   Parent Loop BB15_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB15_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB15_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB15_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB15_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB15_7
.LBB15_6:                               # %if.else
                                        #   in Loop: Header=BB15_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB15_7:                               # %if.end
                                        #   in Loop: Header=BB15_3 Depth=2
	jmp	.LBB15_8
.LBB15_8:                               # %for.inc
                                        #   in Loop: Header=BB15_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_3
.LBB15_9:                               # %for.end
                                        #   in Loop: Header=BB15_1 Depth=1
	jmp	.LBB15_10
.LBB15_10:                              # %for.inc28
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_1
.LBB15_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB15_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB15_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB15_12 Depth=1
	movl	$0, -4(%rbp)
.LBB15_14:                              # %for.cond34
                                        #   Parent Loop BB15_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB15_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB15_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB15_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB15_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB15_18
.LBB15_17:                              # %if.else52
                                        #   in Loop: Header=BB15_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB15_18:                              # %if.end66
                                        #   in Loop: Header=BB15_14 Depth=2
	jmp	.LBB15_19
.LBB15_19:                              # %for.inc67
                                        #   in Loop: Header=BB15_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_14
.LBB15_20:                              # %for.end69
                                        #   in Loop: Header=BB15_12 Depth=1
	jmp	.LBB15_21
.LBB15_21:                              # %for.inc70
                                        #   in Loop: Header=BB15_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_12
.LBB15_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB15_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB15_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB15_23 Depth=1
	movl	$0, -4(%rbp)
.LBB15_25:                              # %for.cond76
                                        #   Parent Loop BB15_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB15_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB15_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB15_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB15_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB15_29
.LBB15_28:                              # %if.else94
                                        #   in Loop: Header=BB15_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB15_29:                              # %if.end108
                                        #   in Loop: Header=BB15_25 Depth=2
	jmp	.LBB15_30
.LBB15_30:                              # %for.inc109
                                        #   in Loop: Header=BB15_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_25
.LBB15_31:                              # %for.end111
                                        #   in Loop: Header=BB15_23 Depth=1
	jmp	.LBB15_32
.LBB15_32:                              # %for.inc112
                                        #   in Loop: Header=BB15_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_23
.LBB15_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB15_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB15_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB15_34 Depth=1
	movl	$0, -4(%rbp)
.LBB15_36:                              # %for.cond118
                                        #   Parent Loop BB15_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB15_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB15_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB15_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB15_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB15_40
.LBB15_39:                              # %if.else136
                                        #   in Loop: Header=BB15_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB15_40:                              # %if.end150
                                        #   in Loop: Header=BB15_36 Depth=2
	jmp	.LBB15_41
.LBB15_41:                              # %for.inc151
                                        #   in Loop: Header=BB15_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_36
.LBB15_42:                              # %for.end153
                                        #   in Loop: Header=BB15_34 Depth=1
	jmp	.LBB15_43
.LBB15_43:                              # %for.inc154
                                        #   in Loop: Header=BB15_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_34
.LBB15_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB15_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB15_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB15_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB15_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB15_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB15_49
.LBB15_48:                              # %if.else172
                                        #   in Loop: Header=BB15_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB15_49:                              # %if.end183
                                        #   in Loop: Header=BB15_45 Depth=1
	jmp	.LBB15_50
.LBB15_50:                              # %for.inc184
                                        #   in Loop: Header=BB15_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_45
.LBB15_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB15_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB15_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB15_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB15_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB15_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB15_56
.LBB15_55:                              # %if.else202
                                        #   in Loop: Header=BB15_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB15_56:                              # %if.end213
                                        #   in Loop: Header=BB15_52 Depth=1
	jmp	.LBB15_57
.LBB15_57:                              # %for.inc214
                                        #   in Loop: Header=BB15_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_52
.LBB15_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB15_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB15_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB15_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB15_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB15_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB15_63
.LBB15_62:                              # %if.else232
                                        #   in Loop: Header=BB15_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB15_63:                              # %if.end243
                                        #   in Loop: Header=BB15_59 Depth=1
	jmp	.LBB15_64
.LBB15_64:                              # %for.inc244
                                        #   in Loop: Header=BB15_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_59
.LBB15_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB15_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB15_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB15_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB15_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB15_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB15_70
.LBB15_69:                              # %if.else262
                                        #   in Loop: Header=BB15_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB15_70:                              # %if.end273
                                        #   in Loop: Header=BB15_66 Depth=1
	jmp	.LBB15_71
.LBB15_71:                              # %for.inc274
                                        #   in Loop: Header=BB15_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_66
.LBB15_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB15_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB15_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB15_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB15_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB15_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB15_77
.LBB15_76:                              # %if.else292
                                        #   in Loop: Header=BB15_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB15_77:                              # %if.end303
                                        #   in Loop: Header=BB15_73 Depth=1
	jmp	.LBB15_78
.LBB15_78:                              # %for.inc304
                                        #   in Loop: Header=BB15_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_73
.LBB15_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB15_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB15_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB15_80 Depth=1
	movl	$0, -4(%rbp)
.LBB15_82:                              # %for.cond310
                                        #   Parent Loop BB15_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB15_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB15_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB15_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB15_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB15_86
.LBB15_85:                              # %if.else328
                                        #   in Loop: Header=BB15_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB15_86:                              # %if.end342
                                        #   in Loop: Header=BB15_82 Depth=2
	jmp	.LBB15_87
.LBB15_87:                              # %for.inc343
                                        #   in Loop: Header=BB15_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_82
.LBB15_88:                              # %for.end345
                                        #   in Loop: Header=BB15_80 Depth=1
	jmp	.LBB15_89
.LBB15_89:                              # %for.inc346
                                        #   in Loop: Header=BB15_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_80
.LBB15_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB15_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB15_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB15_91 Depth=1
	movl	$0, -4(%rbp)
.LBB15_93:                              # %for.cond352
                                        #   Parent Loop BB15_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB15_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB15_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB15_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB15_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB15_97
.LBB15_96:                              # %if.else370
                                        #   in Loop: Header=BB15_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB15_97:                              # %if.end384
                                        #   in Loop: Header=BB15_93 Depth=2
	jmp	.LBB15_98
.LBB15_98:                              # %for.inc385
                                        #   in Loop: Header=BB15_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_93
.LBB15_99:                              # %for.end387
                                        #   in Loop: Header=BB15_91 Depth=1
	jmp	.LBB15_100
.LBB15_100:                             # %for.inc388
                                        #   in Loop: Header=BB15_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_91
.LBB15_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB15_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB15_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB15_102 Depth=1
	movl	$0, -4(%rbp)
.LBB15_104:                             # %for.cond394
                                        #   Parent Loop BB15_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB15_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB15_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB15_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB15_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB15_108
.LBB15_107:                             # %if.else412
                                        #   in Loop: Header=BB15_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB15_108:                             # %if.end426
                                        #   in Loop: Header=BB15_104 Depth=2
	jmp	.LBB15_109
.LBB15_109:                             # %for.inc427
                                        #   in Loop: Header=BB15_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_104
.LBB15_110:                             # %for.end429
                                        #   in Loop: Header=BB15_102 Depth=1
	jmp	.LBB15_111
.LBB15_111:                             # %for.inc430
                                        #   in Loop: Header=BB15_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_102
.LBB15_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB15_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB15_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB15_113 Depth=1
	movl	$0, -4(%rbp)
.LBB15_115:                             # %for.cond436
                                        #   Parent Loop BB15_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB15_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB15_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB15_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB15_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB15_119
.LBB15_118:                             # %if.else454
                                        #   in Loop: Header=BB15_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB15_119:                             # %if.end468
                                        #   in Loop: Header=BB15_115 Depth=2
	jmp	.LBB15_120
.LBB15_120:                             # %for.inc469
                                        #   in Loop: Header=BB15_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_115
.LBB15_121:                             # %for.end471
                                        #   in Loop: Header=BB15_113 Depth=1
	jmp	.LBB15_122
.LBB15_122:                             # %for.inc472
                                        #   in Loop: Header=BB15_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_113
.LBB15_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB15_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB15_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB15_124 Depth=1
	movl	$0, -4(%rbp)
.LBB15_126:                             # %for.cond478
                                        #   Parent Loop BB15_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB15_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB15_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB15_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB15_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB15_130
.LBB15_129:                             # %if.else496
                                        #   in Loop: Header=BB15_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB15_130:                             # %if.end510
                                        #   in Loop: Header=BB15_126 Depth=2
	jmp	.LBB15_131
.LBB15_131:                             # %for.inc511
                                        #   in Loop: Header=BB15_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_126
.LBB15_132:                             # %for.end513
                                        #   in Loop: Header=BB15_124 Depth=1
	jmp	.LBB15_133
.LBB15_133:                             # %for.inc514
                                        #   in Loop: Header=BB15_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_124
.LBB15_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB15_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB15_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB15_135 Depth=1
	movl	$0, -4(%rbp)
.LBB15_137:                             # %for.cond520
                                        #   Parent Loop BB15_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB15_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB15_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB15_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB15_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB15_141
.LBB15_140:                             # %if.else538
                                        #   in Loop: Header=BB15_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB15_141:                             # %if.end552
                                        #   in Loop: Header=BB15_137 Depth=2
	jmp	.LBB15_142
.LBB15_142:                             # %for.inc553
                                        #   in Loop: Header=BB15_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_137
.LBB15_143:                             # %for.end555
                                        #   in Loop: Header=BB15_135 Depth=1
	jmp	.LBB15_144
.LBB15_144:                             # %for.inc556
                                        #   in Loop: Header=BB15_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_135
.LBB15_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB15_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB15_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB15_146 Depth=1
	movl	$0, -4(%rbp)
.LBB15_148:                             # %for.cond562
                                        #   Parent Loop BB15_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB15_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB15_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB15_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB15_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB15_152
.LBB15_151:                             # %if.else580
                                        #   in Loop: Header=BB15_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB15_152:                             # %if.end594
                                        #   in Loop: Header=BB15_148 Depth=2
	jmp	.LBB15_153
.LBB15_153:                             # %for.inc595
                                        #   in Loop: Header=BB15_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_148
.LBB15_154:                             # %for.end597
                                        #   in Loop: Header=BB15_146 Depth=1
	jmp	.LBB15_155
.LBB15_155:                             # %for.inc598
                                        #   in Loop: Header=BB15_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_146
.LBB15_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB15_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB15_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB15_157 Depth=1
	movl	$0, -4(%rbp)
.LBB15_159:                             # %for.cond604
                                        #   Parent Loop BB15_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB15_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB15_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB15_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB15_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB15_163
.LBB15_162:                             # %if.else622
                                        #   in Loop: Header=BB15_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB15_163:                             # %if.end636
                                        #   in Loop: Header=BB15_159 Depth=2
	jmp	.LBB15_164
.LBB15_164:                             # %for.inc637
                                        #   in Loop: Header=BB15_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_159
.LBB15_165:                             # %for.end639
                                        #   in Loop: Header=BB15_157 Depth=1
	jmp	.LBB15_166
.LBB15_166:                             # %for.inc640
                                        #   in Loop: Header=BB15_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_157
.LBB15_167:                             # %for.end642
	cmpl	$157877458, -28(%rbp)   # imm = 0x96904D2
	jne	.LBB15_169
.LBB15_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB15_168
.Lfunc_end15:
	.size	init_contexts.8, .Lfunc_end15-init_contexts.8
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.9         # -- Begin function init_contexts.9
	.p2align	4, 0x90
	.type	init_contexts.9,@function
init_contexts.9:                        # @init_contexts.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$74927498, -28(%rbp)    # imm = 0x4774D8A
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB16_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB16_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -4(%rbp)
.LBB16_3:                               # %for.cond2
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB16_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB16_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB16_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB16_7
.LBB16_6:                               # %if.else
                                        #   in Loop: Header=BB16_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB16_7:                               # %if.end
                                        #   in Loop: Header=BB16_3 Depth=2
	jmp	.LBB16_8
.LBB16_8:                               # %for.inc
                                        #   in Loop: Header=BB16_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_3
.LBB16_9:                               # %for.end
                                        #   in Loop: Header=BB16_1 Depth=1
	jmp	.LBB16_10
.LBB16_10:                              # %for.inc28
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_1
.LBB16_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB16_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB16_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB16_12 Depth=1
	movl	$0, -4(%rbp)
.LBB16_14:                              # %for.cond34
                                        #   Parent Loop BB16_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB16_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB16_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB16_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB16_18
.LBB16_17:                              # %if.else52
                                        #   in Loop: Header=BB16_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB16_18:                              # %if.end66
                                        #   in Loop: Header=BB16_14 Depth=2
	jmp	.LBB16_19
.LBB16_19:                              # %for.inc67
                                        #   in Loop: Header=BB16_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_14
.LBB16_20:                              # %for.end69
                                        #   in Loop: Header=BB16_12 Depth=1
	jmp	.LBB16_21
.LBB16_21:                              # %for.inc70
                                        #   in Loop: Header=BB16_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_12
.LBB16_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB16_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB16_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB16_23 Depth=1
	movl	$0, -4(%rbp)
.LBB16_25:                              # %for.cond76
                                        #   Parent Loop BB16_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB16_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB16_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB16_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB16_29
.LBB16_28:                              # %if.else94
                                        #   in Loop: Header=BB16_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB16_29:                              # %if.end108
                                        #   in Loop: Header=BB16_25 Depth=2
	jmp	.LBB16_30
.LBB16_30:                              # %for.inc109
                                        #   in Loop: Header=BB16_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_25
.LBB16_31:                              # %for.end111
                                        #   in Loop: Header=BB16_23 Depth=1
	jmp	.LBB16_32
.LBB16_32:                              # %for.inc112
                                        #   in Loop: Header=BB16_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_23
.LBB16_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB16_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB16_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB16_34 Depth=1
	movl	$0, -4(%rbp)
.LBB16_36:                              # %for.cond118
                                        #   Parent Loop BB16_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB16_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB16_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB16_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB16_40
.LBB16_39:                              # %if.else136
                                        #   in Loop: Header=BB16_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB16_40:                              # %if.end150
                                        #   in Loop: Header=BB16_36 Depth=2
	jmp	.LBB16_41
.LBB16_41:                              # %for.inc151
                                        #   in Loop: Header=BB16_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_36
.LBB16_42:                              # %for.end153
                                        #   in Loop: Header=BB16_34 Depth=1
	jmp	.LBB16_43
.LBB16_43:                              # %for.inc154
                                        #   in Loop: Header=BB16_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_34
.LBB16_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB16_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB16_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB16_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB16_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB16_49
.LBB16_48:                              # %if.else172
                                        #   in Loop: Header=BB16_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB16_49:                              # %if.end183
                                        #   in Loop: Header=BB16_45 Depth=1
	jmp	.LBB16_50
.LBB16_50:                              # %for.inc184
                                        #   in Loop: Header=BB16_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_45
.LBB16_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB16_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB16_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB16_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB16_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB16_56
.LBB16_55:                              # %if.else202
                                        #   in Loop: Header=BB16_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB16_56:                              # %if.end213
                                        #   in Loop: Header=BB16_52 Depth=1
	jmp	.LBB16_57
.LBB16_57:                              # %for.inc214
                                        #   in Loop: Header=BB16_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_52
.LBB16_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB16_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB16_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB16_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB16_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB16_63
.LBB16_62:                              # %if.else232
                                        #   in Loop: Header=BB16_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB16_63:                              # %if.end243
                                        #   in Loop: Header=BB16_59 Depth=1
	jmp	.LBB16_64
.LBB16_64:                              # %for.inc244
                                        #   in Loop: Header=BB16_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_59
.LBB16_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB16_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB16_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB16_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB16_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB16_70
.LBB16_69:                              # %if.else262
                                        #   in Loop: Header=BB16_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB16_70:                              # %if.end273
                                        #   in Loop: Header=BB16_66 Depth=1
	jmp	.LBB16_71
.LBB16_71:                              # %for.inc274
                                        #   in Loop: Header=BB16_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_66
.LBB16_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB16_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB16_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB16_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB16_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB16_77
.LBB16_76:                              # %if.else292
                                        #   in Loop: Header=BB16_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB16_77:                              # %if.end303
                                        #   in Loop: Header=BB16_73 Depth=1
	jmp	.LBB16_78
.LBB16_78:                              # %for.inc304
                                        #   in Loop: Header=BB16_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_73
.LBB16_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB16_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB16_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB16_80 Depth=1
	movl	$0, -4(%rbp)
.LBB16_82:                              # %for.cond310
                                        #   Parent Loop BB16_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB16_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB16_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB16_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB16_86
.LBB16_85:                              # %if.else328
                                        #   in Loop: Header=BB16_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB16_86:                              # %if.end342
                                        #   in Loop: Header=BB16_82 Depth=2
	jmp	.LBB16_87
.LBB16_87:                              # %for.inc343
                                        #   in Loop: Header=BB16_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_82
.LBB16_88:                              # %for.end345
                                        #   in Loop: Header=BB16_80 Depth=1
	jmp	.LBB16_89
.LBB16_89:                              # %for.inc346
                                        #   in Loop: Header=BB16_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_80
.LBB16_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB16_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB16_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB16_91 Depth=1
	movl	$0, -4(%rbp)
.LBB16_93:                              # %for.cond352
                                        #   Parent Loop BB16_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB16_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB16_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB16_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB16_97
.LBB16_96:                              # %if.else370
                                        #   in Loop: Header=BB16_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB16_97:                              # %if.end384
                                        #   in Loop: Header=BB16_93 Depth=2
	jmp	.LBB16_98
.LBB16_98:                              # %for.inc385
                                        #   in Loop: Header=BB16_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_93
.LBB16_99:                              # %for.end387
                                        #   in Loop: Header=BB16_91 Depth=1
	jmp	.LBB16_100
.LBB16_100:                             # %for.inc388
                                        #   in Loop: Header=BB16_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_91
.LBB16_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB16_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB16_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB16_102 Depth=1
	movl	$0, -4(%rbp)
.LBB16_104:                             # %for.cond394
                                        #   Parent Loop BB16_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB16_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB16_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB16_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB16_108
.LBB16_107:                             # %if.else412
                                        #   in Loop: Header=BB16_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB16_108:                             # %if.end426
                                        #   in Loop: Header=BB16_104 Depth=2
	jmp	.LBB16_109
.LBB16_109:                             # %for.inc427
                                        #   in Loop: Header=BB16_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_104
.LBB16_110:                             # %for.end429
                                        #   in Loop: Header=BB16_102 Depth=1
	jmp	.LBB16_111
.LBB16_111:                             # %for.inc430
                                        #   in Loop: Header=BB16_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_102
.LBB16_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB16_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB16_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB16_113 Depth=1
	movl	$0, -4(%rbp)
.LBB16_115:                             # %for.cond436
                                        #   Parent Loop BB16_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB16_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB16_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB16_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB16_119
.LBB16_118:                             # %if.else454
                                        #   in Loop: Header=BB16_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB16_119:                             # %if.end468
                                        #   in Loop: Header=BB16_115 Depth=2
	jmp	.LBB16_120
.LBB16_120:                             # %for.inc469
                                        #   in Loop: Header=BB16_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_115
.LBB16_121:                             # %for.end471
                                        #   in Loop: Header=BB16_113 Depth=1
	jmp	.LBB16_122
.LBB16_122:                             # %for.inc472
                                        #   in Loop: Header=BB16_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_113
.LBB16_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB16_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB16_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB16_124 Depth=1
	movl	$0, -4(%rbp)
.LBB16_126:                             # %for.cond478
                                        #   Parent Loop BB16_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB16_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB16_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB16_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB16_130
.LBB16_129:                             # %if.else496
                                        #   in Loop: Header=BB16_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB16_130:                             # %if.end510
                                        #   in Loop: Header=BB16_126 Depth=2
	jmp	.LBB16_131
.LBB16_131:                             # %for.inc511
                                        #   in Loop: Header=BB16_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_126
.LBB16_132:                             # %for.end513
                                        #   in Loop: Header=BB16_124 Depth=1
	jmp	.LBB16_133
.LBB16_133:                             # %for.inc514
                                        #   in Loop: Header=BB16_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_124
.LBB16_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB16_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB16_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB16_135 Depth=1
	movl	$0, -4(%rbp)
.LBB16_137:                             # %for.cond520
                                        #   Parent Loop BB16_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB16_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB16_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB16_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB16_141
.LBB16_140:                             # %if.else538
                                        #   in Loop: Header=BB16_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB16_141:                             # %if.end552
                                        #   in Loop: Header=BB16_137 Depth=2
	jmp	.LBB16_142
.LBB16_142:                             # %for.inc553
                                        #   in Loop: Header=BB16_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_137
.LBB16_143:                             # %for.end555
                                        #   in Loop: Header=BB16_135 Depth=1
	jmp	.LBB16_144
.LBB16_144:                             # %for.inc556
                                        #   in Loop: Header=BB16_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_135
.LBB16_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB16_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB16_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB16_146 Depth=1
	movl	$0, -4(%rbp)
.LBB16_148:                             # %for.cond562
                                        #   Parent Loop BB16_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB16_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB16_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB16_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB16_152
.LBB16_151:                             # %if.else580
                                        #   in Loop: Header=BB16_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB16_152:                             # %if.end594
                                        #   in Loop: Header=BB16_148 Depth=2
	jmp	.LBB16_153
.LBB16_153:                             # %for.inc595
                                        #   in Loop: Header=BB16_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_148
.LBB16_154:                             # %for.end597
                                        #   in Loop: Header=BB16_146 Depth=1
	jmp	.LBB16_155
.LBB16_155:                             # %for.inc598
                                        #   in Loop: Header=BB16_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_146
.LBB16_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB16_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB16_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB16_157 Depth=1
	movl	$0, -4(%rbp)
.LBB16_159:                             # %for.cond604
                                        #   Parent Loop BB16_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB16_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB16_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB16_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB16_163
.LBB16_162:                             # %if.else622
                                        #   in Loop: Header=BB16_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB16_163:                             # %if.end636
                                        #   in Loop: Header=BB16_159 Depth=2
	jmp	.LBB16_164
.LBB16_164:                             # %for.inc637
                                        #   in Loop: Header=BB16_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_159
.LBB16_165:                             # %for.end639
                                        #   in Loop: Header=BB16_157 Depth=1
	jmp	.LBB16_166
.LBB16_166:                             # %for.inc640
                                        #   in Loop: Header=BB16_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_157
.LBB16_167:                             # %for.end642
	cmpl	$74927498, -28(%rbp)    # imm = 0x4774D8A
	jne	.LBB16_169
.LBB16_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB16_168
.Lfunc_end16:
	.size	init_contexts.9, .Lfunc_end16-init_contexts.9
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.10 # -- Begin function update_field_frame_contexts.10
	.p2align	4, 0x90
	.type	update_field_frame_contexts.10,@function
update_field_frame_contexts.10:         # @update_field_frame_contexts.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$783580118, -12(%rbp)   # imm = 0x2EB47BD6
	movl	%edi, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB17_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB17_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_4 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB17_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB17_2 Depth=1
	movl	$0, -4(%rbp)
.LBB17_4:                               # %for.cond1
                                        #   Parent Loop BB17_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB17_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB17_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB17_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_4
.LBB17_7:                               # %for.end
                                        #   in Loop: Header=BB17_2 Depth=1
	jmp	.LBB17_8
.LBB17_8:                               # %for.inc23
                                        #   in Loop: Header=BB17_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_2
.LBB17_9:                               # %for.end25
	jmp	.LBB17_19
.LBB17_10:                              # %if.else
	movl	$0, -8(%rbp)
.LBB17_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB17_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB17_11 Depth=1
	movl	$0, -4(%rbp)
.LBB17_13:                              # %for.cond29
                                        #   Parent Loop BB17_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB17_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB17_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_13
.LBB17_16:                              # %for.end56
                                        #   in Loop: Header=BB17_11 Depth=1
	jmp	.LBB17_17
.LBB17_17:                              # %for.inc57
                                        #   in Loop: Header=BB17_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_11
.LBB17_18:                              # %for.end59
	jmp	.LBB17_19
.LBB17_19:                              # %if.end
	cmpl	$783580118, -12(%rbp)   # imm = 0x2EB47BD6
	jne	.LBB17_21
.LBB17_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB17_20
.Lfunc_end17:
	.size	update_field_frame_contexts.10, .Lfunc_end17-update_field_frame_contexts.10
	.cfi_endproc
                                        # -- End function
	.globl	free_context_memory.11  # -- Begin function free_context_memory.11
	.p2align	4, 0x90
	.type	free_context_memory.11,@function
free_context_memory.11:                 # @free_context_memory.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$178652875, -12(%rbp)   # imm = 0xAA606CB
	movl	$0, -4(%rbp)
.LBB18_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_3 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB18_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	$0, -8(%rbp)
.LBB18_3:                               # %for.cond1
                                        #   Parent Loop BB18_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB18_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB18_3 Depth=2
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB18_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_3
.LBB18_6:                               # %for.end
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.7:                                # %for.inc14
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_1
.LBB18_8:                               # %for.end16
	movq	initialized, %rdi
	callq	free
	movq	model_number, %rdi
	callq	free
	cmpl	$178652875, -12(%rbp)   # imm = 0xAA606CB
	jne	.LBB18_10
.LBB18_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB18_9
.Lfunc_end18:
	.size	free_context_memory.11, .Lfunc_end18-free_context_memory.11
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.12 # -- Begin function update_field_frame_contexts.12
	.p2align	4, 0x90
	.type	update_field_frame_contexts.12,@function
update_field_frame_contexts.12:         # @update_field_frame_contexts.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$478394999, -16(%rbp)   # imm = 0x1C83BA77
	movl	%edi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB19_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB19_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_4 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB19_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB19_2 Depth=1
	movl	$0, -8(%rbp)
.LBB19_4:                               # %for.cond1
                                        #   Parent Loop BB19_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB19_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB19_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB19_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_4
.LBB19_7:                               # %for.end
                                        #   in Loop: Header=BB19_2 Depth=1
	jmp	.LBB19_8
.LBB19_8:                               # %for.inc23
                                        #   in Loop: Header=BB19_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_2
.LBB19_9:                               # %for.end25
	jmp	.LBB19_19
.LBB19_10:                              # %if.else
	movl	$0, -4(%rbp)
.LBB19_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_13 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB19_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB19_11 Depth=1
	movl	$0, -8(%rbp)
.LBB19_13:                              # %for.cond29
                                        #   Parent Loop BB19_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB19_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB19_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_13
.LBB19_16:                              # %for.end56
                                        #   in Loop: Header=BB19_11 Depth=1
	jmp	.LBB19_17
.LBB19_17:                              # %for.inc57
                                        #   in Loop: Header=BB19_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_11
.LBB19_18:                              # %for.end59
	jmp	.LBB19_19
.LBB19_19:                              # %if.end
	cmpl	$478394999, -16(%rbp)   # imm = 0x1C83BA77
	jne	.LBB19_21
.LBB19_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB19_20
.Lfunc_end19:
	.size	update_field_frame_contexts.12, .Lfunc_end19-update_field_frame_contexts.12
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.13        # -- Begin function init_contexts.13
	.p2align	4, 0x90
	.type	init_contexts.13,@function
init_contexts.13:                       # @init_contexts.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$83101086, -28(%rbp)    # imm = 0x4F4059E
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB20_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB20_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB20_1 Depth=1
	movl	$0, -4(%rbp)
.LBB20_3:                               # %for.cond2
                                        #   Parent Loop BB20_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB20_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB20_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB20_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB20_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB20_7
.LBB20_6:                               # %if.else
                                        #   in Loop: Header=BB20_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB20_7:                               # %if.end
                                        #   in Loop: Header=BB20_3 Depth=2
	jmp	.LBB20_8
.LBB20_8:                               # %for.inc
                                        #   in Loop: Header=BB20_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_3
.LBB20_9:                               # %for.end
                                        #   in Loop: Header=BB20_1 Depth=1
	jmp	.LBB20_10
.LBB20_10:                              # %for.inc28
                                        #   in Loop: Header=BB20_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_1
.LBB20_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB20_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB20_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB20_12 Depth=1
	movl	$0, -4(%rbp)
.LBB20_14:                              # %for.cond34
                                        #   Parent Loop BB20_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB20_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB20_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB20_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB20_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB20_18
.LBB20_17:                              # %if.else52
                                        #   in Loop: Header=BB20_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB20_18:                              # %if.end66
                                        #   in Loop: Header=BB20_14 Depth=2
	jmp	.LBB20_19
.LBB20_19:                              # %for.inc67
                                        #   in Loop: Header=BB20_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_14
.LBB20_20:                              # %for.end69
                                        #   in Loop: Header=BB20_12 Depth=1
	jmp	.LBB20_21
.LBB20_21:                              # %for.inc70
                                        #   in Loop: Header=BB20_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_12
.LBB20_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB20_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB20_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB20_23 Depth=1
	movl	$0, -4(%rbp)
.LBB20_25:                              # %for.cond76
                                        #   Parent Loop BB20_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB20_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB20_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB20_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB20_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB20_29
.LBB20_28:                              # %if.else94
                                        #   in Loop: Header=BB20_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB20_29:                              # %if.end108
                                        #   in Loop: Header=BB20_25 Depth=2
	jmp	.LBB20_30
.LBB20_30:                              # %for.inc109
                                        #   in Loop: Header=BB20_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_25
.LBB20_31:                              # %for.end111
                                        #   in Loop: Header=BB20_23 Depth=1
	jmp	.LBB20_32
.LBB20_32:                              # %for.inc112
                                        #   in Loop: Header=BB20_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_23
.LBB20_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB20_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB20_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB20_34 Depth=1
	movl	$0, -4(%rbp)
.LBB20_36:                              # %for.cond118
                                        #   Parent Loop BB20_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB20_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB20_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB20_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB20_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB20_40
.LBB20_39:                              # %if.else136
                                        #   in Loop: Header=BB20_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB20_40:                              # %if.end150
                                        #   in Loop: Header=BB20_36 Depth=2
	jmp	.LBB20_41
.LBB20_41:                              # %for.inc151
                                        #   in Loop: Header=BB20_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_36
.LBB20_42:                              # %for.end153
                                        #   in Loop: Header=BB20_34 Depth=1
	jmp	.LBB20_43
.LBB20_43:                              # %for.inc154
                                        #   in Loop: Header=BB20_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_34
.LBB20_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB20_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB20_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB20_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB20_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB20_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB20_49
.LBB20_48:                              # %if.else172
                                        #   in Loop: Header=BB20_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB20_49:                              # %if.end183
                                        #   in Loop: Header=BB20_45 Depth=1
	jmp	.LBB20_50
.LBB20_50:                              # %for.inc184
                                        #   in Loop: Header=BB20_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_45
.LBB20_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB20_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB20_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB20_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB20_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB20_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB20_56
.LBB20_55:                              # %if.else202
                                        #   in Loop: Header=BB20_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB20_56:                              # %if.end213
                                        #   in Loop: Header=BB20_52 Depth=1
	jmp	.LBB20_57
.LBB20_57:                              # %for.inc214
                                        #   in Loop: Header=BB20_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_52
.LBB20_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB20_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB20_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB20_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB20_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB20_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB20_63
.LBB20_62:                              # %if.else232
                                        #   in Loop: Header=BB20_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB20_63:                              # %if.end243
                                        #   in Loop: Header=BB20_59 Depth=1
	jmp	.LBB20_64
.LBB20_64:                              # %for.inc244
                                        #   in Loop: Header=BB20_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_59
.LBB20_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB20_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB20_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB20_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB20_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB20_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB20_70
.LBB20_69:                              # %if.else262
                                        #   in Loop: Header=BB20_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB20_70:                              # %if.end273
                                        #   in Loop: Header=BB20_66 Depth=1
	jmp	.LBB20_71
.LBB20_71:                              # %for.inc274
                                        #   in Loop: Header=BB20_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_66
.LBB20_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB20_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB20_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB20_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB20_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB20_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB20_77
.LBB20_76:                              # %if.else292
                                        #   in Loop: Header=BB20_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB20_77:                              # %if.end303
                                        #   in Loop: Header=BB20_73 Depth=1
	jmp	.LBB20_78
.LBB20_78:                              # %for.inc304
                                        #   in Loop: Header=BB20_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_73
.LBB20_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB20_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB20_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB20_80 Depth=1
	movl	$0, -4(%rbp)
.LBB20_82:                              # %for.cond310
                                        #   Parent Loop BB20_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB20_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB20_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB20_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB20_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB20_86
.LBB20_85:                              # %if.else328
                                        #   in Loop: Header=BB20_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB20_86:                              # %if.end342
                                        #   in Loop: Header=BB20_82 Depth=2
	jmp	.LBB20_87
.LBB20_87:                              # %for.inc343
                                        #   in Loop: Header=BB20_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_82
.LBB20_88:                              # %for.end345
                                        #   in Loop: Header=BB20_80 Depth=1
	jmp	.LBB20_89
.LBB20_89:                              # %for.inc346
                                        #   in Loop: Header=BB20_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_80
.LBB20_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB20_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB20_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB20_91 Depth=1
	movl	$0, -4(%rbp)
.LBB20_93:                              # %for.cond352
                                        #   Parent Loop BB20_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB20_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB20_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB20_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB20_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB20_97
.LBB20_96:                              # %if.else370
                                        #   in Loop: Header=BB20_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB20_97:                              # %if.end384
                                        #   in Loop: Header=BB20_93 Depth=2
	jmp	.LBB20_98
.LBB20_98:                              # %for.inc385
                                        #   in Loop: Header=BB20_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_93
.LBB20_99:                              # %for.end387
                                        #   in Loop: Header=BB20_91 Depth=1
	jmp	.LBB20_100
.LBB20_100:                             # %for.inc388
                                        #   in Loop: Header=BB20_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_91
.LBB20_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB20_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB20_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB20_102 Depth=1
	movl	$0, -4(%rbp)
.LBB20_104:                             # %for.cond394
                                        #   Parent Loop BB20_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB20_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB20_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB20_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB20_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB20_108
.LBB20_107:                             # %if.else412
                                        #   in Loop: Header=BB20_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB20_108:                             # %if.end426
                                        #   in Loop: Header=BB20_104 Depth=2
	jmp	.LBB20_109
.LBB20_109:                             # %for.inc427
                                        #   in Loop: Header=BB20_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_104
.LBB20_110:                             # %for.end429
                                        #   in Loop: Header=BB20_102 Depth=1
	jmp	.LBB20_111
.LBB20_111:                             # %for.inc430
                                        #   in Loop: Header=BB20_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_102
.LBB20_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB20_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB20_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB20_113 Depth=1
	movl	$0, -4(%rbp)
.LBB20_115:                             # %for.cond436
                                        #   Parent Loop BB20_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB20_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB20_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB20_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB20_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB20_119
.LBB20_118:                             # %if.else454
                                        #   in Loop: Header=BB20_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB20_119:                             # %if.end468
                                        #   in Loop: Header=BB20_115 Depth=2
	jmp	.LBB20_120
.LBB20_120:                             # %for.inc469
                                        #   in Loop: Header=BB20_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_115
.LBB20_121:                             # %for.end471
                                        #   in Loop: Header=BB20_113 Depth=1
	jmp	.LBB20_122
.LBB20_122:                             # %for.inc472
                                        #   in Loop: Header=BB20_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_113
.LBB20_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB20_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB20_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB20_124 Depth=1
	movl	$0, -4(%rbp)
.LBB20_126:                             # %for.cond478
                                        #   Parent Loop BB20_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB20_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB20_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB20_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB20_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB20_130
.LBB20_129:                             # %if.else496
                                        #   in Loop: Header=BB20_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB20_130:                             # %if.end510
                                        #   in Loop: Header=BB20_126 Depth=2
	jmp	.LBB20_131
.LBB20_131:                             # %for.inc511
                                        #   in Loop: Header=BB20_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_126
.LBB20_132:                             # %for.end513
                                        #   in Loop: Header=BB20_124 Depth=1
	jmp	.LBB20_133
.LBB20_133:                             # %for.inc514
                                        #   in Loop: Header=BB20_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_124
.LBB20_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB20_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB20_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB20_135 Depth=1
	movl	$0, -4(%rbp)
.LBB20_137:                             # %for.cond520
                                        #   Parent Loop BB20_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB20_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB20_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB20_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB20_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB20_141
.LBB20_140:                             # %if.else538
                                        #   in Loop: Header=BB20_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB20_141:                             # %if.end552
                                        #   in Loop: Header=BB20_137 Depth=2
	jmp	.LBB20_142
.LBB20_142:                             # %for.inc553
                                        #   in Loop: Header=BB20_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_137
.LBB20_143:                             # %for.end555
                                        #   in Loop: Header=BB20_135 Depth=1
	jmp	.LBB20_144
.LBB20_144:                             # %for.inc556
                                        #   in Loop: Header=BB20_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_135
.LBB20_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB20_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB20_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB20_146 Depth=1
	movl	$0, -4(%rbp)
.LBB20_148:                             # %for.cond562
                                        #   Parent Loop BB20_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB20_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB20_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB20_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB20_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB20_152
.LBB20_151:                             # %if.else580
                                        #   in Loop: Header=BB20_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB20_152:                             # %if.end594
                                        #   in Loop: Header=BB20_148 Depth=2
	jmp	.LBB20_153
.LBB20_153:                             # %for.inc595
                                        #   in Loop: Header=BB20_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_148
.LBB20_154:                             # %for.end597
                                        #   in Loop: Header=BB20_146 Depth=1
	jmp	.LBB20_155
.LBB20_155:                             # %for.inc598
                                        #   in Loop: Header=BB20_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_146
.LBB20_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB20_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB20_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB20_157 Depth=1
	movl	$0, -4(%rbp)
.LBB20_159:                             # %for.cond604
                                        #   Parent Loop BB20_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB20_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB20_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB20_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB20_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB20_163
.LBB20_162:                             # %if.else622
                                        #   in Loop: Header=BB20_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB20_163:                             # %if.end636
                                        #   in Loop: Header=BB20_159 Depth=2
	jmp	.LBB20_164
.LBB20_164:                             # %for.inc637
                                        #   in Loop: Header=BB20_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_159
.LBB20_165:                             # %for.end639
                                        #   in Loop: Header=BB20_157 Depth=1
	jmp	.LBB20_166
.LBB20_166:                             # %for.inc640
                                        #   in Loop: Header=BB20_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_157
.LBB20_167:                             # %for.end642
	cmpl	$83101086, -28(%rbp)    # imm = 0x4F4059E
	jne	.LBB20_169
.LBB20_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB20_168
.Lfunc_end20:
	.size	init_contexts.13, .Lfunc_end20-init_contexts.13
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.14
.LCPI21_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.14
	.p2align	4, 0x90
	.type	GetCtxModelNumber.14,@function
GetCtxModelNumber.14:                   # @GetCtxModelNumber.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI21_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$200891312, -48(%rbp)   # imm = 0xBF95BB0
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB21_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_3 Depth 2
                                        #       Child Loop BB21_5 Depth 3
                                        #     Child Loop BB21_14 Depth 2
                                        #       Child Loop BB21_16 Depth 3
                                        #     Child Loop BB21_25 Depth 2
                                        #       Child Loop BB21_27 Depth 3
                                        #     Child Loop BB21_36 Depth 2
                                        #       Child Loop BB21_38 Depth 3
                                        #     Child Loop BB21_47 Depth 2
                                        #     Child Loop BB21_54 Depth 2
                                        #     Child Loop BB21_61 Depth 2
                                        #     Child Loop BB21_68 Depth 2
                                        #     Child Loop BB21_75 Depth 2
                                        #     Child Loop BB21_82 Depth 2
                                        #       Child Loop BB21_84 Depth 3
                                        #     Child Loop BB21_93 Depth 2
                                        #       Child Loop BB21_95 Depth 3
                                        #     Child Loop BB21_104 Depth 2
                                        #       Child Loop BB21_106 Depth 3
                                        #     Child Loop BB21_115 Depth 2
                                        #       Child Loop BB21_117 Depth 3
                                        #     Child Loop BB21_126 Depth 2
                                        #       Child Loop BB21_128 Depth 3
                                        #     Child Loop BB21_137 Depth 2
                                        #       Child Loop BB21_139 Depth 3
                                        #     Child Loop BB21_148 Depth 2
                                        #       Child Loop BB21_150 Depth 3
                                        #     Child Loop BB21_159 Depth 2
                                        #       Child Loop BB21_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB21_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB21_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB21_3:                               # %for.cond2
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB21_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB21_3 Depth=2
	movl	$0, -4(%rbp)
.LBB21_5:                               # %for.cond5
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB21_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB21_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB21_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_9
.LBB21_8:                               # %if.else
                                        #   in Loop: Header=BB21_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_9:                               # %if.end
                                        #   in Loop: Header=BB21_5 Depth=3
	jmp	.LBB21_10
.LBB21_10:                              # %for.inc
                                        #   in Loop: Header=BB21_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_5
.LBB21_11:                              # %for.end
                                        #   in Loop: Header=BB21_3 Depth=2
	jmp	.LBB21_12
.LBB21_12:                              # %for.inc33
                                        #   in Loop: Header=BB21_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_3
.LBB21_13:                              # %for.end35
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_14:                              # %for.cond36
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB21_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB21_14 Depth=2
	movl	$0, -4(%rbp)
.LBB21_16:                              # %for.cond39
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB21_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB21_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB21_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_20
.LBB21_19:                              # %if.else58
                                        #   in Loop: Header=BB21_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_20:                              # %if.end73
                                        #   in Loop: Header=BB21_16 Depth=3
	jmp	.LBB21_21
.LBB21_21:                              # %for.inc74
                                        #   in Loop: Header=BB21_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_16
.LBB21_22:                              # %for.end76
                                        #   in Loop: Header=BB21_14 Depth=2
	jmp	.LBB21_23
.LBB21_23:                              # %for.inc77
                                        #   in Loop: Header=BB21_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_14
.LBB21_24:                              # %for.end79
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_25:                              # %for.cond80
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB21_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB21_25 Depth=2
	movl	$0, -4(%rbp)
.LBB21_27:                              # %for.cond83
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB21_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB21_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB21_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_31
.LBB21_30:                              # %if.else102
                                        #   in Loop: Header=BB21_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_31:                              # %if.end117
                                        #   in Loop: Header=BB21_27 Depth=3
	jmp	.LBB21_32
.LBB21_32:                              # %for.inc118
                                        #   in Loop: Header=BB21_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_27
.LBB21_33:                              # %for.end120
                                        #   in Loop: Header=BB21_25 Depth=2
	jmp	.LBB21_34
.LBB21_34:                              # %for.inc121
                                        #   in Loop: Header=BB21_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_25
.LBB21_35:                              # %for.end123
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_36:                              # %for.cond124
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB21_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB21_36 Depth=2
	movl	$0, -4(%rbp)
.LBB21_38:                              # %for.cond127
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB21_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB21_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB21_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_42
.LBB21_41:                              # %if.else146
                                        #   in Loop: Header=BB21_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_42:                              # %if.end161
                                        #   in Loop: Header=BB21_38 Depth=3
	jmp	.LBB21_43
.LBB21_43:                              # %for.inc162
                                        #   in Loop: Header=BB21_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_38
.LBB21_44:                              # %for.end164
                                        #   in Loop: Header=BB21_36 Depth=2
	jmp	.LBB21_45
.LBB21_45:                              # %for.inc165
                                        #   in Loop: Header=BB21_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_36
.LBB21_46:                              # %for.end167
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -4(%rbp)
.LBB21_47:                              # %for.cond168
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB21_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB21_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB21_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_51
.LBB21_50:                              # %if.else184
                                        #   in Loop: Header=BB21_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_51:                              # %if.end196
                                        #   in Loop: Header=BB21_47 Depth=2
	jmp	.LBB21_52
.LBB21_52:                              # %for.inc197
                                        #   in Loop: Header=BB21_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_47
.LBB21_53:                              # %for.end199
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -4(%rbp)
.LBB21_54:                              # %for.cond200
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB21_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB21_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB21_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_58
.LBB21_57:                              # %if.else216
                                        #   in Loop: Header=BB21_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_58:                              # %if.end228
                                        #   in Loop: Header=BB21_54 Depth=2
	jmp	.LBB21_59
.LBB21_59:                              # %for.inc229
                                        #   in Loop: Header=BB21_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_54
.LBB21_60:                              # %for.end231
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -4(%rbp)
.LBB21_61:                              # %for.cond232
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB21_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB21_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB21_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_65
.LBB21_64:                              # %if.else248
                                        #   in Loop: Header=BB21_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_65:                              # %if.end260
                                        #   in Loop: Header=BB21_61 Depth=2
	jmp	.LBB21_66
.LBB21_66:                              # %for.inc261
                                        #   in Loop: Header=BB21_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_61
.LBB21_67:                              # %for.end263
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -4(%rbp)
.LBB21_68:                              # %for.cond264
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB21_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB21_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB21_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_72
.LBB21_71:                              # %if.else280
                                        #   in Loop: Header=BB21_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_72:                              # %if.end292
                                        #   in Loop: Header=BB21_68 Depth=2
	jmp	.LBB21_73
.LBB21_73:                              # %for.inc293
                                        #   in Loop: Header=BB21_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_68
.LBB21_74:                              # %for.end295
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -4(%rbp)
.LBB21_75:                              # %for.cond296
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB21_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB21_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB21_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_79
.LBB21_78:                              # %if.else312
                                        #   in Loop: Header=BB21_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_79:                              # %if.end324
                                        #   in Loop: Header=BB21_75 Depth=2
	jmp	.LBB21_80
.LBB21_80:                              # %for.inc325
                                        #   in Loop: Header=BB21_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_75
.LBB21_81:                              # %for.end327
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_82:                              # %for.cond328
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB21_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB21_82 Depth=2
	movl	$0, -4(%rbp)
.LBB21_84:                              # %for.cond331
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB21_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB21_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB21_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_88
.LBB21_87:                              # %if.else350
                                        #   in Loop: Header=BB21_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_88:                              # %if.end365
                                        #   in Loop: Header=BB21_84 Depth=3
	jmp	.LBB21_89
.LBB21_89:                              # %for.inc366
                                        #   in Loop: Header=BB21_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_84
.LBB21_90:                              # %for.end368
                                        #   in Loop: Header=BB21_82 Depth=2
	jmp	.LBB21_91
.LBB21_91:                              # %for.inc369
                                        #   in Loop: Header=BB21_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_82
.LBB21_92:                              # %for.end371
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_93:                              # %for.cond372
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB21_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB21_93 Depth=2
	movl	$0, -4(%rbp)
.LBB21_95:                              # %for.cond375
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB21_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB21_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB21_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_99
.LBB21_98:                              # %if.else394
                                        #   in Loop: Header=BB21_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_99:                              # %if.end409
                                        #   in Loop: Header=BB21_95 Depth=3
	jmp	.LBB21_100
.LBB21_100:                             # %for.inc410
                                        #   in Loop: Header=BB21_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_95
.LBB21_101:                             # %for.end412
                                        #   in Loop: Header=BB21_93 Depth=2
	jmp	.LBB21_102
.LBB21_102:                             # %for.inc413
                                        #   in Loop: Header=BB21_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_93
.LBB21_103:                             # %for.end415
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_104:                             # %for.cond416
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB21_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB21_104 Depth=2
	movl	$0, -4(%rbp)
.LBB21_106:                             # %for.cond419
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB21_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB21_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB21_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_110
.LBB21_109:                             # %if.else438
                                        #   in Loop: Header=BB21_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_110:                             # %if.end453
                                        #   in Loop: Header=BB21_106 Depth=3
	jmp	.LBB21_111
.LBB21_111:                             # %for.inc454
                                        #   in Loop: Header=BB21_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_106
.LBB21_112:                             # %for.end456
                                        #   in Loop: Header=BB21_104 Depth=2
	jmp	.LBB21_113
.LBB21_113:                             # %for.inc457
                                        #   in Loop: Header=BB21_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_104
.LBB21_114:                             # %for.end459
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_115:                             # %for.cond460
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB21_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB21_115 Depth=2
	movl	$0, -4(%rbp)
.LBB21_117:                             # %for.cond463
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB21_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB21_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB21_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_121
.LBB21_120:                             # %if.else482
                                        #   in Loop: Header=BB21_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_121:                             # %if.end497
                                        #   in Loop: Header=BB21_117 Depth=3
	jmp	.LBB21_122
.LBB21_122:                             # %for.inc498
                                        #   in Loop: Header=BB21_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_117
.LBB21_123:                             # %for.end500
                                        #   in Loop: Header=BB21_115 Depth=2
	jmp	.LBB21_124
.LBB21_124:                             # %for.inc501
                                        #   in Loop: Header=BB21_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_115
.LBB21_125:                             # %for.end503
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_126:                             # %for.cond504
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB21_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB21_126 Depth=2
	movl	$0, -4(%rbp)
.LBB21_128:                             # %for.cond507
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB21_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB21_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB21_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_132
.LBB21_131:                             # %if.else526
                                        #   in Loop: Header=BB21_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_132:                             # %if.end541
                                        #   in Loop: Header=BB21_128 Depth=3
	jmp	.LBB21_133
.LBB21_133:                             # %for.inc542
                                        #   in Loop: Header=BB21_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_128
.LBB21_134:                             # %for.end544
                                        #   in Loop: Header=BB21_126 Depth=2
	jmp	.LBB21_135
.LBB21_135:                             # %for.inc545
                                        #   in Loop: Header=BB21_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_126
.LBB21_136:                             # %for.end547
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_137:                             # %for.cond548
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB21_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB21_137 Depth=2
	movl	$0, -4(%rbp)
.LBB21_139:                             # %for.cond551
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB21_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB21_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB21_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_143
.LBB21_142:                             # %if.else570
                                        #   in Loop: Header=BB21_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_143:                             # %if.end585
                                        #   in Loop: Header=BB21_139 Depth=3
	jmp	.LBB21_144
.LBB21_144:                             # %for.inc586
                                        #   in Loop: Header=BB21_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_139
.LBB21_145:                             # %for.end588
                                        #   in Loop: Header=BB21_137 Depth=2
	jmp	.LBB21_146
.LBB21_146:                             # %for.inc589
                                        #   in Loop: Header=BB21_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_137
.LBB21_147:                             # %for.end591
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_148:                             # %for.cond592
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB21_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB21_148 Depth=2
	movl	$0, -4(%rbp)
.LBB21_150:                             # %for.cond595
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB21_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB21_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB21_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_154
.LBB21_153:                             # %if.else614
                                        #   in Loop: Header=BB21_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_154:                             # %if.end629
                                        #   in Loop: Header=BB21_150 Depth=3
	jmp	.LBB21_155
.LBB21_155:                             # %for.inc630
                                        #   in Loop: Header=BB21_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_150
.LBB21_156:                             # %for.end632
                                        #   in Loop: Header=BB21_148 Depth=2
	jmp	.LBB21_157
.LBB21_157:                             # %for.inc633
                                        #   in Loop: Header=BB21_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_148
.LBB21_158:                             # %for.end635
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_159:                             # %for.cond636
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB21_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB21_159 Depth=2
	movl	$0, -4(%rbp)
.LBB21_161:                             # %for.cond639
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB21_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB21_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB21_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_165
.LBB21_164:                             # %if.else658
                                        #   in Loop: Header=BB21_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_165:                             # %if.end673
                                        #   in Loop: Header=BB21_161 Depth=3
	jmp	.LBB21_166
.LBB21_166:                             # %for.inc674
                                        #   in Loop: Header=BB21_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_161
.LBB21_167:                             # %for.end676
                                        #   in Loop: Header=BB21_159 Depth=2
	jmp	.LBB21_168
.LBB21_168:                             # %for.inc677
                                        #   in Loop: Header=BB21_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_159
.LBB21_169:                             # %for.end679
                                        #   in Loop: Header=BB21_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB21_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB21_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB21_171:                             # %if.end682
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_172
.LBB21_172:                             # %for.inc683
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_1
.LBB21_173:                             # %for.end685
	cmpl	$200891312, -48(%rbp)   # imm = 0xBF95BB0
	jne	.LBB21_175
.LBB21_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB21_174
.Lfunc_end21:
	.size	GetCtxModelNumber.14, .Lfunc_end21-GetCtxModelNumber.14
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.15
.LCPI22_0:
	.quad	4607182418800017408     # double 1
.LCPI22_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI22_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI22_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.15
	.p2align	4, 0x90
	.type	XRate.15,@function
XRate.15:                               # @XRate.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$991049008, -32(%rbp)   # imm = 0x3B123530
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB22_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB22_3
.LBB22_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB22_3:                               # %cond.end
	vmovsd	.LCPI22_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI22_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI22_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI22_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB22_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI22_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB22_6
.LBB22_5:                               # %cond.false6
	vmovsd	.LCPI22_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI22_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI22_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB22_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB22_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB22_9
.LBB22_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB22_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB22_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB22_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB22_13
.LBB22_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB22_13:                              # %cond.end26
	jmp	.LBB22_15
.LBB22_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB22_15
.LBB22_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB22_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB22_18
.LBB22_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB22_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$991049008, -32(%rbp)   # imm = 0x3B123530
	jne	.LBB22_20
.LBB22_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB22_19
.Lfunc_end22:
	.size	XRate.15, .Lfunc_end22-XRate.15
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.16       # -- Begin function store_contexts.16
	.p2align	4, 0x90
	.type	store_contexts.16,@function
store_contexts.16:                      # @store_contexts.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$685038706, -16(%rbp)   # imm = 0x28D4DC72
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB23_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-4(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB23_3
.LBB23_2:                               # %if.else
	jmp	.LBB23_3
.LBB23_3:                               # %if.end
	cmpl	$685038706, -16(%rbp)   # imm = 0x28D4DC72
	jne	.LBB23_5
.LBB23_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB23_4
.Lfunc_end23:
	.size	store_contexts.16, .Lfunc_end23-store_contexts.16
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.17
.LCPI24_0:
	.quad	4607182418800017408     # double 1
.LCPI24_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI24_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI24_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.17
	.p2align	4, 0x90
	.type	XRate.17,@function
XRate.17:                               # @XRate.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1520229304, -36(%rbp)  # imm = 0x5A9CDBB8
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB24_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB24_3
.LBB24_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB24_3:                               # %cond.end
	vmovsd	.LCPI24_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI24_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI24_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI24_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB24_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI24_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB24_6
.LBB24_5:                               # %cond.false6
	vmovsd	.LCPI24_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI24_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI24_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB24_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB24_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB24_9
.LBB24_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB24_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB24_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB24_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB24_13
.LBB24_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB24_13:                              # %cond.end26
	jmp	.LBB24_15
.LBB24_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB24_15
.LBB24_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB24_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB24_18
.LBB24_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB24_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1520229304, -36(%rbp)  # imm = 0x5A9CDBB8
	jne	.LBB24_20
.LBB24_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB24_19
.Lfunc_end24:
	.size	XRate.17, .Lfunc_end24-XRate.17
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.18
.LCPI25_0:
	.quad	4607182418800017408     # double 1
.LCPI25_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI25_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI25_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.18
	.p2align	4, 0x90
	.type	XRate.18,@function
XRate.18:                               # @XRate.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1032611606, -36(%rbp)  # imm = 0x3D8C6716
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB25_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB25_3
.LBB25_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB25_3:                               # %cond.end
	vmovsd	.LCPI25_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI25_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI25_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI25_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB25_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI25_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB25_6
.LBB25_5:                               # %cond.false6
	vmovsd	.LCPI25_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI25_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI25_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB25_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB25_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB25_9
.LBB25_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB25_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB25_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB25_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB25_13
.LBB25_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB25_13:                              # %cond.end26
	jmp	.LBB25_15
.LBB25_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB25_15
.LBB25_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB25_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB25_18
.LBB25_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB25_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1032611606, -36(%rbp)  # imm = 0x3D8C6716
	jne	.LBB25_20
.LBB25_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB25_19
.Lfunc_end25:
	.size	XRate.18, .Lfunc_end25-XRate.18
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.19
.LCPI26_0:
	.quad	4607182418800017408     # double 1
.LCPI26_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI26_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI26_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.19
	.p2align	4, 0x90
	.type	XRate.19,@function
XRate.19:                               # @XRate.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1100484695, -36(%rbp)  # imm = 0x41981057
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB26_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB26_3
.LBB26_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB26_3:                               # %cond.end
	vmovsd	.LCPI26_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI26_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI26_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI26_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB26_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI26_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB26_6
.LBB26_5:                               # %cond.false6
	vmovsd	.LCPI26_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI26_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI26_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB26_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB26_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB26_9
.LBB26_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB26_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB26_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB26_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB26_13
.LBB26_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB26_13:                              # %cond.end26
	jmp	.LBB26_15
.LBB26_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB26_15
.LBB26_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB26_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB26_18
.LBB26_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB26_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1100484695, -36(%rbp)  # imm = 0x41981057
	jne	.LBB26_20
.LBB26_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB26_19
.Lfunc_end26:
	.size	XRate.19, .Lfunc_end26-XRate.19
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.20        # -- Begin function init_contexts.20
	.p2align	4, 0x90
	.type	init_contexts.20,@function
init_contexts.20:                       # @init_contexts.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1724812129, -28(%rbp)  # imm = 0x66CE8B61
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB27_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB27_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	$0, -4(%rbp)
.LBB27_3:                               # %for.cond2
                                        #   Parent Loop BB27_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB27_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB27_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB27_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_7
.LBB27_6:                               # %if.else
                                        #   in Loop: Header=BB27_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_7:                               # %if.end
                                        #   in Loop: Header=BB27_3 Depth=2
	jmp	.LBB27_8
.LBB27_8:                               # %for.inc
                                        #   in Loop: Header=BB27_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_3
.LBB27_9:                               # %for.end
                                        #   in Loop: Header=BB27_1 Depth=1
	jmp	.LBB27_10
.LBB27_10:                              # %for.inc28
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_1
.LBB27_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB27_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB27_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB27_12 Depth=1
	movl	$0, -4(%rbp)
.LBB27_14:                              # %for.cond34
                                        #   Parent Loop BB27_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB27_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB27_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB27_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_18
.LBB27_17:                              # %if.else52
                                        #   in Loop: Header=BB27_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_18:                              # %if.end66
                                        #   in Loop: Header=BB27_14 Depth=2
	jmp	.LBB27_19
.LBB27_19:                              # %for.inc67
                                        #   in Loop: Header=BB27_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_14
.LBB27_20:                              # %for.end69
                                        #   in Loop: Header=BB27_12 Depth=1
	jmp	.LBB27_21
.LBB27_21:                              # %for.inc70
                                        #   in Loop: Header=BB27_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_12
.LBB27_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB27_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB27_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB27_23 Depth=1
	movl	$0, -4(%rbp)
.LBB27_25:                              # %for.cond76
                                        #   Parent Loop BB27_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB27_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB27_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB27_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_29
.LBB27_28:                              # %if.else94
                                        #   in Loop: Header=BB27_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_29:                              # %if.end108
                                        #   in Loop: Header=BB27_25 Depth=2
	jmp	.LBB27_30
.LBB27_30:                              # %for.inc109
                                        #   in Loop: Header=BB27_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_25
.LBB27_31:                              # %for.end111
                                        #   in Loop: Header=BB27_23 Depth=1
	jmp	.LBB27_32
.LBB27_32:                              # %for.inc112
                                        #   in Loop: Header=BB27_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_23
.LBB27_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB27_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB27_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB27_34 Depth=1
	movl	$0, -4(%rbp)
.LBB27_36:                              # %for.cond118
                                        #   Parent Loop BB27_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB27_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB27_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB27_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_40
.LBB27_39:                              # %if.else136
                                        #   in Loop: Header=BB27_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_40:                              # %if.end150
                                        #   in Loop: Header=BB27_36 Depth=2
	jmp	.LBB27_41
.LBB27_41:                              # %for.inc151
                                        #   in Loop: Header=BB27_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_36
.LBB27_42:                              # %for.end153
                                        #   in Loop: Header=BB27_34 Depth=1
	jmp	.LBB27_43
.LBB27_43:                              # %for.inc154
                                        #   in Loop: Header=BB27_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_34
.LBB27_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB27_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB27_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB27_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB27_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_49
.LBB27_48:                              # %if.else172
                                        #   in Loop: Header=BB27_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_49:                              # %if.end183
                                        #   in Loop: Header=BB27_45 Depth=1
	jmp	.LBB27_50
.LBB27_50:                              # %for.inc184
                                        #   in Loop: Header=BB27_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_45
.LBB27_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB27_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB27_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB27_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB27_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_56
.LBB27_55:                              # %if.else202
                                        #   in Loop: Header=BB27_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_56:                              # %if.end213
                                        #   in Loop: Header=BB27_52 Depth=1
	jmp	.LBB27_57
.LBB27_57:                              # %for.inc214
                                        #   in Loop: Header=BB27_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_52
.LBB27_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB27_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB27_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB27_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB27_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_63
.LBB27_62:                              # %if.else232
                                        #   in Loop: Header=BB27_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_63:                              # %if.end243
                                        #   in Loop: Header=BB27_59 Depth=1
	jmp	.LBB27_64
.LBB27_64:                              # %for.inc244
                                        #   in Loop: Header=BB27_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_59
.LBB27_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB27_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB27_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB27_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB27_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_70
.LBB27_69:                              # %if.else262
                                        #   in Loop: Header=BB27_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_70:                              # %if.end273
                                        #   in Loop: Header=BB27_66 Depth=1
	jmp	.LBB27_71
.LBB27_71:                              # %for.inc274
                                        #   in Loop: Header=BB27_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_66
.LBB27_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB27_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB27_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB27_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB27_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_77
.LBB27_76:                              # %if.else292
                                        #   in Loop: Header=BB27_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_77:                              # %if.end303
                                        #   in Loop: Header=BB27_73 Depth=1
	jmp	.LBB27_78
.LBB27_78:                              # %for.inc304
                                        #   in Loop: Header=BB27_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_73
.LBB27_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB27_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB27_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB27_80 Depth=1
	movl	$0, -4(%rbp)
.LBB27_82:                              # %for.cond310
                                        #   Parent Loop BB27_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB27_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB27_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB27_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_86
.LBB27_85:                              # %if.else328
                                        #   in Loop: Header=BB27_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_86:                              # %if.end342
                                        #   in Loop: Header=BB27_82 Depth=2
	jmp	.LBB27_87
.LBB27_87:                              # %for.inc343
                                        #   in Loop: Header=BB27_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_82
.LBB27_88:                              # %for.end345
                                        #   in Loop: Header=BB27_80 Depth=1
	jmp	.LBB27_89
.LBB27_89:                              # %for.inc346
                                        #   in Loop: Header=BB27_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_80
.LBB27_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB27_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB27_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB27_91 Depth=1
	movl	$0, -4(%rbp)
.LBB27_93:                              # %for.cond352
                                        #   Parent Loop BB27_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB27_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB27_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB27_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_97
.LBB27_96:                              # %if.else370
                                        #   in Loop: Header=BB27_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_97:                              # %if.end384
                                        #   in Loop: Header=BB27_93 Depth=2
	jmp	.LBB27_98
.LBB27_98:                              # %for.inc385
                                        #   in Loop: Header=BB27_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_93
.LBB27_99:                              # %for.end387
                                        #   in Loop: Header=BB27_91 Depth=1
	jmp	.LBB27_100
.LBB27_100:                             # %for.inc388
                                        #   in Loop: Header=BB27_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_91
.LBB27_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB27_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB27_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB27_102 Depth=1
	movl	$0, -4(%rbp)
.LBB27_104:                             # %for.cond394
                                        #   Parent Loop BB27_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB27_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB27_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB27_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_108
.LBB27_107:                             # %if.else412
                                        #   in Loop: Header=BB27_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_108:                             # %if.end426
                                        #   in Loop: Header=BB27_104 Depth=2
	jmp	.LBB27_109
.LBB27_109:                             # %for.inc427
                                        #   in Loop: Header=BB27_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_104
.LBB27_110:                             # %for.end429
                                        #   in Loop: Header=BB27_102 Depth=1
	jmp	.LBB27_111
.LBB27_111:                             # %for.inc430
                                        #   in Loop: Header=BB27_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_102
.LBB27_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB27_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB27_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB27_113 Depth=1
	movl	$0, -4(%rbp)
.LBB27_115:                             # %for.cond436
                                        #   Parent Loop BB27_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB27_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB27_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB27_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_119
.LBB27_118:                             # %if.else454
                                        #   in Loop: Header=BB27_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_119:                             # %if.end468
                                        #   in Loop: Header=BB27_115 Depth=2
	jmp	.LBB27_120
.LBB27_120:                             # %for.inc469
                                        #   in Loop: Header=BB27_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_115
.LBB27_121:                             # %for.end471
                                        #   in Loop: Header=BB27_113 Depth=1
	jmp	.LBB27_122
.LBB27_122:                             # %for.inc472
                                        #   in Loop: Header=BB27_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_113
.LBB27_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB27_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB27_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB27_124 Depth=1
	movl	$0, -4(%rbp)
.LBB27_126:                             # %for.cond478
                                        #   Parent Loop BB27_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB27_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB27_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB27_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_130
.LBB27_129:                             # %if.else496
                                        #   in Loop: Header=BB27_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_130:                             # %if.end510
                                        #   in Loop: Header=BB27_126 Depth=2
	jmp	.LBB27_131
.LBB27_131:                             # %for.inc511
                                        #   in Loop: Header=BB27_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_126
.LBB27_132:                             # %for.end513
                                        #   in Loop: Header=BB27_124 Depth=1
	jmp	.LBB27_133
.LBB27_133:                             # %for.inc514
                                        #   in Loop: Header=BB27_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_124
.LBB27_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB27_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB27_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB27_135 Depth=1
	movl	$0, -4(%rbp)
.LBB27_137:                             # %for.cond520
                                        #   Parent Loop BB27_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB27_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB27_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB27_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_141
.LBB27_140:                             # %if.else538
                                        #   in Loop: Header=BB27_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_141:                             # %if.end552
                                        #   in Loop: Header=BB27_137 Depth=2
	jmp	.LBB27_142
.LBB27_142:                             # %for.inc553
                                        #   in Loop: Header=BB27_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_137
.LBB27_143:                             # %for.end555
                                        #   in Loop: Header=BB27_135 Depth=1
	jmp	.LBB27_144
.LBB27_144:                             # %for.inc556
                                        #   in Loop: Header=BB27_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_135
.LBB27_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB27_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB27_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB27_146 Depth=1
	movl	$0, -4(%rbp)
.LBB27_148:                             # %for.cond562
                                        #   Parent Loop BB27_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB27_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB27_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB27_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_152
.LBB27_151:                             # %if.else580
                                        #   in Loop: Header=BB27_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_152:                             # %if.end594
                                        #   in Loop: Header=BB27_148 Depth=2
	jmp	.LBB27_153
.LBB27_153:                             # %for.inc595
                                        #   in Loop: Header=BB27_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_148
.LBB27_154:                             # %for.end597
                                        #   in Loop: Header=BB27_146 Depth=1
	jmp	.LBB27_155
.LBB27_155:                             # %for.inc598
                                        #   in Loop: Header=BB27_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_146
.LBB27_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB27_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB27_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB27_157 Depth=1
	movl	$0, -4(%rbp)
.LBB27_159:                             # %for.cond604
                                        #   Parent Loop BB27_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB27_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB27_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB27_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_163
.LBB27_162:                             # %if.else622
                                        #   in Loop: Header=BB27_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_163:                             # %if.end636
                                        #   in Loop: Header=BB27_159 Depth=2
	jmp	.LBB27_164
.LBB27_164:                             # %for.inc637
                                        #   in Loop: Header=BB27_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_159
.LBB27_165:                             # %for.end639
                                        #   in Loop: Header=BB27_157 Depth=1
	jmp	.LBB27_166
.LBB27_166:                             # %for.inc640
                                        #   in Loop: Header=BB27_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_157
.LBB27_167:                             # %for.end642
	cmpl	$1724812129, -28(%rbp)  # imm = 0x66CE8B61
	jne	.LBB27_169
.LBB27_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB27_168
.Lfunc_end27:
	.size	init_contexts.20, .Lfunc_end27-init_contexts.20
	.cfi_endproc
                                        # -- End function
	.globl	free_context_memory.21  # -- Begin function free_context_memory.21
	.p2align	4, 0x90
	.type	free_context_memory.21,@function
free_context_memory.21:                 # @free_context_memory.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$439180243, -12(%rbp)   # imm = 0x1A2D5BD3
	movl	$0, -4(%rbp)
.LBB28_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_3 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB28_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB28_1 Depth=1
	movl	$0, -8(%rbp)
.LBB28_3:                               # %for.cond1
                                        #   Parent Loop BB28_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB28_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB28_3 Depth=2
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB28_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_3
.LBB28_6:                               # %for.end
                                        #   in Loop: Header=BB28_1 Depth=1
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.7:                                # %for.inc14
                                        #   in Loop: Header=BB28_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_1
.LBB28_8:                               # %for.end16
	movq	initialized, %rdi
	callq	free
	movq	model_number, %rdi
	callq	free
	cmpl	$439180243, -12(%rbp)   # imm = 0x1A2D5BD3
	jne	.LBB28_10
.LBB28_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB28_9
.Lfunc_end28:
	.size	free_context_memory.21, .Lfunc_end28-free_context_memory.21
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.22    # -- Begin function SetCtxModelNumber.22
	.p2align	4, 0x90
	.type	SetCtxModelNumber.22,@function
SetCtxModelNumber.22:                   # @SetCtxModelNumber.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1073082462, -16(%rbp)  # imm = 0x3FF5F05E
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB29_11
.LBB29_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB29_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB29_11
.LBB29_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB29_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB29_11
.LBB29_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB29_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB29_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB29_10
.LBB29_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB29_10:                              # %if.end38
	jmp	.LBB29_11
.LBB29_11:                              # %if.end39
	cmpl	$1073082462, -16(%rbp)  # imm = 0x3FF5F05E
	jne	.LBB29_13
.LBB29_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB29_12
.Lfunc_end29:
	.size	SetCtxModelNumber.22, .Lfunc_end29-SetCtxModelNumber.22
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.23
.LCPI30_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.23
	.p2align	4, 0x90
	.type	GetCtxModelNumber.23,@function
GetCtxModelNumber.23:                   # @GetCtxModelNumber.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI30_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1789011209, -44(%rbp)  # imm = 0x6AA22509
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB30_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_3 Depth 2
                                        #       Child Loop BB30_5 Depth 3
                                        #     Child Loop BB30_14 Depth 2
                                        #       Child Loop BB30_16 Depth 3
                                        #     Child Loop BB30_25 Depth 2
                                        #       Child Loop BB30_27 Depth 3
                                        #     Child Loop BB30_36 Depth 2
                                        #       Child Loop BB30_38 Depth 3
                                        #     Child Loop BB30_47 Depth 2
                                        #     Child Loop BB30_54 Depth 2
                                        #     Child Loop BB30_61 Depth 2
                                        #     Child Loop BB30_68 Depth 2
                                        #     Child Loop BB30_75 Depth 2
                                        #     Child Loop BB30_82 Depth 2
                                        #       Child Loop BB30_84 Depth 3
                                        #     Child Loop BB30_93 Depth 2
                                        #       Child Loop BB30_95 Depth 3
                                        #     Child Loop BB30_104 Depth 2
                                        #       Child Loop BB30_106 Depth 3
                                        #     Child Loop BB30_115 Depth 2
                                        #       Child Loop BB30_117 Depth 3
                                        #     Child Loop BB30_126 Depth 2
                                        #       Child Loop BB30_128 Depth 3
                                        #     Child Loop BB30_137 Depth 2
                                        #       Child Loop BB30_139 Depth 3
                                        #     Child Loop BB30_148 Depth 2
                                        #       Child Loop BB30_150 Depth 3
                                        #     Child Loop BB30_159 Depth 2
                                        #       Child Loop BB30_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB30_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB30_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB30_3:                               # %for.cond2
                                        #   Parent Loop BB30_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB30_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB30_3 Depth=2
	movl	$0, -4(%rbp)
.LBB30_5:                               # %for.cond5
                                        #   Parent Loop BB30_1 Depth=1
                                        #     Parent Loop BB30_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB30_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB30_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB30_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB30_9
.LBB30_8:                               # %if.else
                                        #   in Loop: Header=BB30_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB30_9:                               # %if.end
                                        #   in Loop: Header=BB30_5 Depth=3
	jmp	.LBB30_10
.LBB30_10:                              # %for.inc
                                        #   in Loop: Header=BB30_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_5
.LBB30_11:                              # %for.end
                                        #   in Loop: Header=BB30_3 Depth=2
	jmp	.LBB30_12
.LBB30_12:                              # %for.inc33
                                        #   in Loop: Header=BB30_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_3
.LBB30_13:                              # %for.end35
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	$0, -8(%rbp)
.LBB30_14:                              # %for.cond36
                                        #   Parent Loop BB30_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB30_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB30_14 Depth=2
	movl	$0, -4(%rbp)
.LBB30_16:                              # %for.cond39
                                        #   Parent Loop BB30_1 Depth=1
                                        #     Parent Loop BB30_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB30_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB30_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB30_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB30_20
.LBB30_19:                              # %if.else58
                                        #   in Loop: Header=BB30_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB30_20:                              # %if.end73
                                        #   in Loop: Header=BB30_16 Depth=3
	jmp	.LBB30_21
.LBB30_21:                              # %for.inc74
                                        #   in Loop: Header=BB30_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_16
.LBB30_22:                              # %for.end76
                                        #   in Loop: Header=BB30_14 Depth=2
	jmp	.LBB30_23
.LBB30_23:                              # %for.inc77
                                        #   in Loop: Header=BB30_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_14
.LBB30_24:                              # %for.end79
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	$0, -8(%rbp)
.LBB30_25:                              # %for.cond80
                                        #   Parent Loop BB30_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB30_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB30_25 Depth=2
	movl	$0, -4(%rbp)
.LBB30_27:                              # %for.cond83
                                        #   Parent Loop BB30_1 Depth=1
                                        #     Parent Loop BB30_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB30_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB30_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB30_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB30_31
.LBB30_30:                              # %if.else102
                                        #   in Loop: Header=BB30_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB30_31:                              # %if.end117
                                        #   in Loop: Header=BB30_27 Depth=3
	jmp	.LBB30_32
.LBB30_32:                              # %for.inc118
                                        #   in Loop: Header=BB30_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_27
.LBB30_33:                              # %for.end120
                                        #   in Loop: Header=BB30_25 Depth=2
	jmp	.LBB30_34
.LBB30_34:                              # %for.inc121
                                        #   in Loop: Header=BB30_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_25
.LBB30_35:                              # %for.end123
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	$0, -8(%rbp)
.LBB30_36:                              # %for.cond124
                                        #   Parent Loop BB30_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB30_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB30_36 Depth=2
	movl	$0, -4(%rbp)
.LBB30_38:                              # %for.cond127
                                        #   Parent Loop BB30_1 Depth=1
                                        #     Parent Loop BB30_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB30_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB30_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB30_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB30_42
.LBB30_41:                              # %if.else146
                                        #   in Loop: Header=BB30_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB30_42:                              # %if.end161
                                        #   in Loop: Header=BB30_38 Depth=3
	jmp	.LBB30_43
.LBB30_43:                              # %for.inc162
                                        #   in Loop: Header=BB30_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_38
.LBB30_44:                              # %for.end164
                                        #   in Loop: Header=BB30_36 Depth=2
	jmp	.LBB30_45
.LBB30_45:                              # %for.inc165
                                        #   in Loop: Header=BB30_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_36
.LBB30_46:                              # %for.end167
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	$0, -4(%rbp)
.LBB30_47:                              # %for.cond168
                                        #   Parent Loop BB30_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB30_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB30_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB30_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB30_51
.LBB30_50:                              # %if.else184
                                        #   in Loop: Header=BB30_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB30_51:                              # %if.end196
                                        #   in Loop: Header=BB30_47 Depth=2
	jmp	.LBB30_52
.LBB30_52:                              # %for.inc197
                                        #   in Loop: Header=BB30_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_47
.LBB30_53:                              # %for.end199
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	$0, -4(%rbp)
.LBB30_54:                              # %for.cond200
                                        #   Parent Loop BB30_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB30_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB30_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB30_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB30_58
.LBB30_57:                              # %if.else216
                                        #   in Loop: Header=BB30_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB30_58:                              # %if.end228
                                        #   in Loop: Header=BB30_54 Depth=2
	jmp	.LBB30_59
.LBB30_59:                              # %for.inc229
                                        #   in Loop: Header=BB30_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_54
.LBB30_60:                              # %for.end231
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	$0, -4(%rbp)
.LBB30_61:                              # %for.cond232
                                        #   Parent Loop BB30_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB30_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB30_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB30_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB30_65
.LBB30_64:                              # %if.else248
                                        #   in Loop: Header=BB30_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB30_65:                              # %if.end260
                                        #   in Loop: Header=BB30_61 Depth=2
	jmp	.LBB30_66
.LBB30_66:                              # %for.inc261
                                        #   in Loop: Header=BB30_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_61
.LBB30_67:                              # %for.end263
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	$0, -4(%rbp)
.LBB30_68:                              # %for.cond264
                                        #   Parent Loop BB30_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB30_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB30_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB30_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB30_72
.LBB30_71:                              # %if.else280
                                        #   in Loop: Header=BB30_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB30_72:                              # %if.end292
                                        #   in Loop: Header=BB30_68 Depth=2
	jmp	.LBB30_73
.LBB30_73:                              # %for.inc293
                                        #   in Loop: Header=BB30_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_68
.LBB30_74:                              # %for.end295
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	$0, -4(%rbp)
.LBB30_75:                              # %for.cond296
                                        #   Parent Loop BB30_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB30_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB30_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB30_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB30_79
.LBB30_78:                              # %if.else312
                                        #   in Loop: Header=BB30_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB30_79:                              # %if.end324
                                        #   in Loop: Header=BB30_75 Depth=2
	jmp	.LBB30_80
.LBB30_80:                              # %for.inc325
                                        #   in Loop: Header=BB30_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_75
.LBB30_81:                              # %for.end327
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	$0, -8(%rbp)
.LBB30_82:                              # %for.cond328
                                        #   Parent Loop BB30_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB30_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB30_82 Depth=2
	movl	$0, -4(%rbp)
.LBB30_84:                              # %for.cond331
                                        #   Parent Loop BB30_1 Depth=1
                                        #     Parent Loop BB30_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB30_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB30_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB30_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB30_88
.LBB30_87:                              # %if.else350
                                        #   in Loop: Header=BB30_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB30_88:                              # %if.end365
                                        #   in Loop: Header=BB30_84 Depth=3
	jmp	.LBB30_89
.LBB30_89:                              # %for.inc366
                                        #   in Loop: Header=BB30_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_84
.LBB30_90:                              # %for.end368
                                        #   in Loop: Header=BB30_82 Depth=2
	jmp	.LBB30_91
.LBB30_91:                              # %for.inc369
                                        #   in Loop: Header=BB30_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_82
.LBB30_92:                              # %for.end371
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	$0, -8(%rbp)
.LBB30_93:                              # %for.cond372
                                        #   Parent Loop BB30_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB30_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB30_93 Depth=2
	movl	$0, -4(%rbp)
.LBB30_95:                              # %for.cond375
                                        #   Parent Loop BB30_1 Depth=1
                                        #     Parent Loop BB30_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB30_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB30_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB30_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB30_99
.LBB30_98:                              # %if.else394
                                        #   in Loop: Header=BB30_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB30_99:                              # %if.end409
                                        #   in Loop: Header=BB30_95 Depth=3
	jmp	.LBB30_100
.LBB30_100:                             # %for.inc410
                                        #   in Loop: Header=BB30_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_95
.LBB30_101:                             # %for.end412
                                        #   in Loop: Header=BB30_93 Depth=2
	jmp	.LBB30_102
.LBB30_102:                             # %for.inc413
                                        #   in Loop: Header=BB30_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_93
.LBB30_103:                             # %for.end415
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	$0, -8(%rbp)
.LBB30_104:                             # %for.cond416
                                        #   Parent Loop BB30_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB30_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB30_104 Depth=2
	movl	$0, -4(%rbp)
.LBB30_106:                             # %for.cond419
                                        #   Parent Loop BB30_1 Depth=1
                                        #     Parent Loop BB30_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB30_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB30_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB30_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB30_110
.LBB30_109:                             # %if.else438
                                        #   in Loop: Header=BB30_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB30_110:                             # %if.end453
                                        #   in Loop: Header=BB30_106 Depth=3
	jmp	.LBB30_111
.LBB30_111:                             # %for.inc454
                                        #   in Loop: Header=BB30_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_106
.LBB30_112:                             # %for.end456
                                        #   in Loop: Header=BB30_104 Depth=2
	jmp	.LBB30_113
.LBB30_113:                             # %for.inc457
                                        #   in Loop: Header=BB30_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_104
.LBB30_114:                             # %for.end459
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	$0, -8(%rbp)
.LBB30_115:                             # %for.cond460
                                        #   Parent Loop BB30_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB30_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB30_115 Depth=2
	movl	$0, -4(%rbp)
.LBB30_117:                             # %for.cond463
                                        #   Parent Loop BB30_1 Depth=1
                                        #     Parent Loop BB30_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB30_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB30_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB30_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB30_121
.LBB30_120:                             # %if.else482
                                        #   in Loop: Header=BB30_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB30_121:                             # %if.end497
                                        #   in Loop: Header=BB30_117 Depth=3
	jmp	.LBB30_122
.LBB30_122:                             # %for.inc498
                                        #   in Loop: Header=BB30_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_117
.LBB30_123:                             # %for.end500
                                        #   in Loop: Header=BB30_115 Depth=2
	jmp	.LBB30_124
.LBB30_124:                             # %for.inc501
                                        #   in Loop: Header=BB30_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_115
.LBB30_125:                             # %for.end503
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	$0, -8(%rbp)
.LBB30_126:                             # %for.cond504
                                        #   Parent Loop BB30_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB30_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB30_126 Depth=2
	movl	$0, -4(%rbp)
.LBB30_128:                             # %for.cond507
                                        #   Parent Loop BB30_1 Depth=1
                                        #     Parent Loop BB30_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB30_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB30_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB30_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB30_132
.LBB30_131:                             # %if.else526
                                        #   in Loop: Header=BB30_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB30_132:                             # %if.end541
                                        #   in Loop: Header=BB30_128 Depth=3
	jmp	.LBB30_133
.LBB30_133:                             # %for.inc542
                                        #   in Loop: Header=BB30_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_128
.LBB30_134:                             # %for.end544
                                        #   in Loop: Header=BB30_126 Depth=2
	jmp	.LBB30_135
.LBB30_135:                             # %for.inc545
                                        #   in Loop: Header=BB30_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_126
.LBB30_136:                             # %for.end547
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	$0, -8(%rbp)
.LBB30_137:                             # %for.cond548
                                        #   Parent Loop BB30_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB30_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB30_137 Depth=2
	movl	$0, -4(%rbp)
.LBB30_139:                             # %for.cond551
                                        #   Parent Loop BB30_1 Depth=1
                                        #     Parent Loop BB30_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB30_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB30_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB30_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB30_143
.LBB30_142:                             # %if.else570
                                        #   in Loop: Header=BB30_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB30_143:                             # %if.end585
                                        #   in Loop: Header=BB30_139 Depth=3
	jmp	.LBB30_144
.LBB30_144:                             # %for.inc586
                                        #   in Loop: Header=BB30_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_139
.LBB30_145:                             # %for.end588
                                        #   in Loop: Header=BB30_137 Depth=2
	jmp	.LBB30_146
.LBB30_146:                             # %for.inc589
                                        #   in Loop: Header=BB30_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_137
.LBB30_147:                             # %for.end591
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	$0, -8(%rbp)
.LBB30_148:                             # %for.cond592
                                        #   Parent Loop BB30_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB30_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB30_148 Depth=2
	movl	$0, -4(%rbp)
.LBB30_150:                             # %for.cond595
                                        #   Parent Loop BB30_1 Depth=1
                                        #     Parent Loop BB30_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB30_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB30_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB30_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB30_154
.LBB30_153:                             # %if.else614
                                        #   in Loop: Header=BB30_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB30_154:                             # %if.end629
                                        #   in Loop: Header=BB30_150 Depth=3
	jmp	.LBB30_155
.LBB30_155:                             # %for.inc630
                                        #   in Loop: Header=BB30_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_150
.LBB30_156:                             # %for.end632
                                        #   in Loop: Header=BB30_148 Depth=2
	jmp	.LBB30_157
.LBB30_157:                             # %for.inc633
                                        #   in Loop: Header=BB30_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_148
.LBB30_158:                             # %for.end635
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	$0, -8(%rbp)
.LBB30_159:                             # %for.cond636
                                        #   Parent Loop BB30_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB30_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB30_159 Depth=2
	movl	$0, -4(%rbp)
.LBB30_161:                             # %for.cond639
                                        #   Parent Loop BB30_1 Depth=1
                                        #     Parent Loop BB30_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB30_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB30_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB30_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB30_165
.LBB30_164:                             # %if.else658
                                        #   in Loop: Header=BB30_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB30_165:                             # %if.end673
                                        #   in Loop: Header=BB30_161 Depth=3
	jmp	.LBB30_166
.LBB30_166:                             # %for.inc674
                                        #   in Loop: Header=BB30_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_161
.LBB30_167:                             # %for.end676
                                        #   in Loop: Header=BB30_159 Depth=2
	jmp	.LBB30_168
.LBB30_168:                             # %for.inc677
                                        #   in Loop: Header=BB30_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_159
.LBB30_169:                             # %for.end679
                                        #   in Loop: Header=BB30_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB30_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB30_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB30_171:                             # %if.end682
                                        #   in Loop: Header=BB30_1 Depth=1
	jmp	.LBB30_172
.LBB30_172:                             # %for.inc683
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_1
.LBB30_173:                             # %for.end685
	cmpl	$1789011209, -44(%rbp)  # imm = 0x6AA22509
	jne	.LBB30_175
.LBB30_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_174
.Lfunc_end30:
	.size	GetCtxModelNumber.23, .Lfunc_end30-GetCtxModelNumber.23
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.24
.LCPI31_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.24
	.p2align	4, 0x90
	.type	GetCtxModelNumber.24,@function
GetCtxModelNumber.24:                   # @GetCtxModelNumber.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI31_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$48587702, -44(%rbp)    # imm = 0x2E563B6
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB31_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_3 Depth 2
                                        #       Child Loop BB31_5 Depth 3
                                        #     Child Loop BB31_14 Depth 2
                                        #       Child Loop BB31_16 Depth 3
                                        #     Child Loop BB31_25 Depth 2
                                        #       Child Loop BB31_27 Depth 3
                                        #     Child Loop BB31_36 Depth 2
                                        #       Child Loop BB31_38 Depth 3
                                        #     Child Loop BB31_47 Depth 2
                                        #     Child Loop BB31_54 Depth 2
                                        #     Child Loop BB31_61 Depth 2
                                        #     Child Loop BB31_68 Depth 2
                                        #     Child Loop BB31_75 Depth 2
                                        #     Child Loop BB31_82 Depth 2
                                        #       Child Loop BB31_84 Depth 3
                                        #     Child Loop BB31_93 Depth 2
                                        #       Child Loop BB31_95 Depth 3
                                        #     Child Loop BB31_104 Depth 2
                                        #       Child Loop BB31_106 Depth 3
                                        #     Child Loop BB31_115 Depth 2
                                        #       Child Loop BB31_117 Depth 3
                                        #     Child Loop BB31_126 Depth 2
                                        #       Child Loop BB31_128 Depth 3
                                        #     Child Loop BB31_137 Depth 2
                                        #       Child Loop BB31_139 Depth 3
                                        #     Child Loop BB31_148 Depth 2
                                        #       Child Loop BB31_150 Depth 3
                                        #     Child Loop BB31_159 Depth 2
                                        #       Child Loop BB31_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB31_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB31_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB31_3:                               # %for.cond2
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB31_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB31_3 Depth=2
	movl	$0, -4(%rbp)
.LBB31_5:                               # %for.cond5
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB31_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB31_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB31_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_9
.LBB31_8:                               # %if.else
                                        #   in Loop: Header=BB31_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_9:                               # %if.end
                                        #   in Loop: Header=BB31_5 Depth=3
	jmp	.LBB31_10
.LBB31_10:                              # %for.inc
                                        #   in Loop: Header=BB31_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_5
.LBB31_11:                              # %for.end
                                        #   in Loop: Header=BB31_3 Depth=2
	jmp	.LBB31_12
.LBB31_12:                              # %for.inc33
                                        #   in Loop: Header=BB31_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_3
.LBB31_13:                              # %for.end35
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_14:                              # %for.cond36
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB31_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB31_14 Depth=2
	movl	$0, -4(%rbp)
.LBB31_16:                              # %for.cond39
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB31_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB31_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB31_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_20
.LBB31_19:                              # %if.else58
                                        #   in Loop: Header=BB31_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_20:                              # %if.end73
                                        #   in Loop: Header=BB31_16 Depth=3
	jmp	.LBB31_21
.LBB31_21:                              # %for.inc74
                                        #   in Loop: Header=BB31_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_16
.LBB31_22:                              # %for.end76
                                        #   in Loop: Header=BB31_14 Depth=2
	jmp	.LBB31_23
.LBB31_23:                              # %for.inc77
                                        #   in Loop: Header=BB31_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_14
.LBB31_24:                              # %for.end79
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_25:                              # %for.cond80
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB31_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB31_25 Depth=2
	movl	$0, -4(%rbp)
.LBB31_27:                              # %for.cond83
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB31_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB31_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB31_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_31
.LBB31_30:                              # %if.else102
                                        #   in Loop: Header=BB31_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_31:                              # %if.end117
                                        #   in Loop: Header=BB31_27 Depth=3
	jmp	.LBB31_32
.LBB31_32:                              # %for.inc118
                                        #   in Loop: Header=BB31_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_27
.LBB31_33:                              # %for.end120
                                        #   in Loop: Header=BB31_25 Depth=2
	jmp	.LBB31_34
.LBB31_34:                              # %for.inc121
                                        #   in Loop: Header=BB31_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_25
.LBB31_35:                              # %for.end123
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_36:                              # %for.cond124
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB31_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB31_36 Depth=2
	movl	$0, -4(%rbp)
.LBB31_38:                              # %for.cond127
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB31_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB31_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB31_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_42
.LBB31_41:                              # %if.else146
                                        #   in Loop: Header=BB31_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_42:                              # %if.end161
                                        #   in Loop: Header=BB31_38 Depth=3
	jmp	.LBB31_43
.LBB31_43:                              # %for.inc162
                                        #   in Loop: Header=BB31_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_38
.LBB31_44:                              # %for.end164
                                        #   in Loop: Header=BB31_36 Depth=2
	jmp	.LBB31_45
.LBB31_45:                              # %for.inc165
                                        #   in Loop: Header=BB31_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_36
.LBB31_46:                              # %for.end167
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -4(%rbp)
.LBB31_47:                              # %for.cond168
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB31_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB31_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB31_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_51
.LBB31_50:                              # %if.else184
                                        #   in Loop: Header=BB31_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_51:                              # %if.end196
                                        #   in Loop: Header=BB31_47 Depth=2
	jmp	.LBB31_52
.LBB31_52:                              # %for.inc197
                                        #   in Loop: Header=BB31_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_47
.LBB31_53:                              # %for.end199
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -4(%rbp)
.LBB31_54:                              # %for.cond200
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB31_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB31_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB31_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_58
.LBB31_57:                              # %if.else216
                                        #   in Loop: Header=BB31_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_58:                              # %if.end228
                                        #   in Loop: Header=BB31_54 Depth=2
	jmp	.LBB31_59
.LBB31_59:                              # %for.inc229
                                        #   in Loop: Header=BB31_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_54
.LBB31_60:                              # %for.end231
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -4(%rbp)
.LBB31_61:                              # %for.cond232
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB31_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB31_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB31_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_65
.LBB31_64:                              # %if.else248
                                        #   in Loop: Header=BB31_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_65:                              # %if.end260
                                        #   in Loop: Header=BB31_61 Depth=2
	jmp	.LBB31_66
.LBB31_66:                              # %for.inc261
                                        #   in Loop: Header=BB31_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_61
.LBB31_67:                              # %for.end263
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -4(%rbp)
.LBB31_68:                              # %for.cond264
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB31_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB31_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB31_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_72
.LBB31_71:                              # %if.else280
                                        #   in Loop: Header=BB31_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_72:                              # %if.end292
                                        #   in Loop: Header=BB31_68 Depth=2
	jmp	.LBB31_73
.LBB31_73:                              # %for.inc293
                                        #   in Loop: Header=BB31_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_68
.LBB31_74:                              # %for.end295
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -4(%rbp)
.LBB31_75:                              # %for.cond296
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB31_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB31_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB31_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_79
.LBB31_78:                              # %if.else312
                                        #   in Loop: Header=BB31_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_79:                              # %if.end324
                                        #   in Loop: Header=BB31_75 Depth=2
	jmp	.LBB31_80
.LBB31_80:                              # %for.inc325
                                        #   in Loop: Header=BB31_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_75
.LBB31_81:                              # %for.end327
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_82:                              # %for.cond328
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB31_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB31_82 Depth=2
	movl	$0, -4(%rbp)
.LBB31_84:                              # %for.cond331
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB31_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB31_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB31_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_88
.LBB31_87:                              # %if.else350
                                        #   in Loop: Header=BB31_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_88:                              # %if.end365
                                        #   in Loop: Header=BB31_84 Depth=3
	jmp	.LBB31_89
.LBB31_89:                              # %for.inc366
                                        #   in Loop: Header=BB31_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_84
.LBB31_90:                              # %for.end368
                                        #   in Loop: Header=BB31_82 Depth=2
	jmp	.LBB31_91
.LBB31_91:                              # %for.inc369
                                        #   in Loop: Header=BB31_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_82
.LBB31_92:                              # %for.end371
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_93:                              # %for.cond372
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB31_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB31_93 Depth=2
	movl	$0, -4(%rbp)
.LBB31_95:                              # %for.cond375
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB31_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB31_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB31_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_99
.LBB31_98:                              # %if.else394
                                        #   in Loop: Header=BB31_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_99:                              # %if.end409
                                        #   in Loop: Header=BB31_95 Depth=3
	jmp	.LBB31_100
.LBB31_100:                             # %for.inc410
                                        #   in Loop: Header=BB31_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_95
.LBB31_101:                             # %for.end412
                                        #   in Loop: Header=BB31_93 Depth=2
	jmp	.LBB31_102
.LBB31_102:                             # %for.inc413
                                        #   in Loop: Header=BB31_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_93
.LBB31_103:                             # %for.end415
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_104:                             # %for.cond416
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB31_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB31_104 Depth=2
	movl	$0, -4(%rbp)
.LBB31_106:                             # %for.cond419
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB31_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB31_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB31_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_110
.LBB31_109:                             # %if.else438
                                        #   in Loop: Header=BB31_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_110:                             # %if.end453
                                        #   in Loop: Header=BB31_106 Depth=3
	jmp	.LBB31_111
.LBB31_111:                             # %for.inc454
                                        #   in Loop: Header=BB31_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_106
.LBB31_112:                             # %for.end456
                                        #   in Loop: Header=BB31_104 Depth=2
	jmp	.LBB31_113
.LBB31_113:                             # %for.inc457
                                        #   in Loop: Header=BB31_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_104
.LBB31_114:                             # %for.end459
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_115:                             # %for.cond460
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB31_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB31_115 Depth=2
	movl	$0, -4(%rbp)
.LBB31_117:                             # %for.cond463
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB31_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB31_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB31_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_121
.LBB31_120:                             # %if.else482
                                        #   in Loop: Header=BB31_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_121:                             # %if.end497
                                        #   in Loop: Header=BB31_117 Depth=3
	jmp	.LBB31_122
.LBB31_122:                             # %for.inc498
                                        #   in Loop: Header=BB31_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_117
.LBB31_123:                             # %for.end500
                                        #   in Loop: Header=BB31_115 Depth=2
	jmp	.LBB31_124
.LBB31_124:                             # %for.inc501
                                        #   in Loop: Header=BB31_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_115
.LBB31_125:                             # %for.end503
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_126:                             # %for.cond504
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB31_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB31_126 Depth=2
	movl	$0, -4(%rbp)
.LBB31_128:                             # %for.cond507
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB31_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB31_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB31_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_132
.LBB31_131:                             # %if.else526
                                        #   in Loop: Header=BB31_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_132:                             # %if.end541
                                        #   in Loop: Header=BB31_128 Depth=3
	jmp	.LBB31_133
.LBB31_133:                             # %for.inc542
                                        #   in Loop: Header=BB31_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_128
.LBB31_134:                             # %for.end544
                                        #   in Loop: Header=BB31_126 Depth=2
	jmp	.LBB31_135
.LBB31_135:                             # %for.inc545
                                        #   in Loop: Header=BB31_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_126
.LBB31_136:                             # %for.end547
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_137:                             # %for.cond548
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB31_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB31_137 Depth=2
	movl	$0, -4(%rbp)
.LBB31_139:                             # %for.cond551
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB31_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB31_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB31_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_143
.LBB31_142:                             # %if.else570
                                        #   in Loop: Header=BB31_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_143:                             # %if.end585
                                        #   in Loop: Header=BB31_139 Depth=3
	jmp	.LBB31_144
.LBB31_144:                             # %for.inc586
                                        #   in Loop: Header=BB31_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_139
.LBB31_145:                             # %for.end588
                                        #   in Loop: Header=BB31_137 Depth=2
	jmp	.LBB31_146
.LBB31_146:                             # %for.inc589
                                        #   in Loop: Header=BB31_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_137
.LBB31_147:                             # %for.end591
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_148:                             # %for.cond592
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB31_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB31_148 Depth=2
	movl	$0, -4(%rbp)
.LBB31_150:                             # %for.cond595
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB31_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB31_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB31_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_154
.LBB31_153:                             # %if.else614
                                        #   in Loop: Header=BB31_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_154:                             # %if.end629
                                        #   in Loop: Header=BB31_150 Depth=3
	jmp	.LBB31_155
.LBB31_155:                             # %for.inc630
                                        #   in Loop: Header=BB31_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_150
.LBB31_156:                             # %for.end632
                                        #   in Loop: Header=BB31_148 Depth=2
	jmp	.LBB31_157
.LBB31_157:                             # %for.inc633
                                        #   in Loop: Header=BB31_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_148
.LBB31_158:                             # %for.end635
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_159:                             # %for.cond636
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB31_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB31_159 Depth=2
	movl	$0, -4(%rbp)
.LBB31_161:                             # %for.cond639
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB31_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB31_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB31_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_165
.LBB31_164:                             # %if.else658
                                        #   in Loop: Header=BB31_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_165:                             # %if.end673
                                        #   in Loop: Header=BB31_161 Depth=3
	jmp	.LBB31_166
.LBB31_166:                             # %for.inc674
                                        #   in Loop: Header=BB31_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_161
.LBB31_167:                             # %for.end676
                                        #   in Loop: Header=BB31_159 Depth=2
	jmp	.LBB31_168
.LBB31_168:                             # %for.inc677
                                        #   in Loop: Header=BB31_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_159
.LBB31_169:                             # %for.end679
                                        #   in Loop: Header=BB31_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB31_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB31_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB31_171:                             # %if.end682
                                        #   in Loop: Header=BB31_1 Depth=1
	jmp	.LBB31_172
.LBB31_172:                             # %for.inc683
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_1
.LBB31_173:                             # %for.end685
	cmpl	$48587702, -44(%rbp)    # imm = 0x2E563B6
	jne	.LBB31_175
.LBB31_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_174
.Lfunc_end31:
	.size	GetCtxModelNumber.24, .Lfunc_end31-GetCtxModelNumber.24
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.25        # -- Begin function init_contexts.25
	.p2align	4, 0x90
	.type	init_contexts.25,@function
init_contexts.25:                       # @init_contexts.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1182511854, -28(%rbp)  # imm = 0x467BB2EE
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB32_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB32_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	$0, -4(%rbp)
.LBB32_3:                               # %for.cond2
                                        #   Parent Loop BB32_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB32_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB32_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB32_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB32_7
.LBB32_6:                               # %if.else
                                        #   in Loop: Header=BB32_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB32_7:                               # %if.end
                                        #   in Loop: Header=BB32_3 Depth=2
	jmp	.LBB32_8
.LBB32_8:                               # %for.inc
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_3
.LBB32_9:                               # %for.end
                                        #   in Loop: Header=BB32_1 Depth=1
	jmp	.LBB32_10
.LBB32_10:                              # %for.inc28
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_1
.LBB32_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB32_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB32_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB32_12 Depth=1
	movl	$0, -4(%rbp)
.LBB32_14:                              # %for.cond34
                                        #   Parent Loop BB32_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB32_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB32_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB32_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB32_18
.LBB32_17:                              # %if.else52
                                        #   in Loop: Header=BB32_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB32_18:                              # %if.end66
                                        #   in Loop: Header=BB32_14 Depth=2
	jmp	.LBB32_19
.LBB32_19:                              # %for.inc67
                                        #   in Loop: Header=BB32_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_14
.LBB32_20:                              # %for.end69
                                        #   in Loop: Header=BB32_12 Depth=1
	jmp	.LBB32_21
.LBB32_21:                              # %for.inc70
                                        #   in Loop: Header=BB32_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_12
.LBB32_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB32_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB32_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB32_23 Depth=1
	movl	$0, -4(%rbp)
.LBB32_25:                              # %for.cond76
                                        #   Parent Loop BB32_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB32_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB32_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB32_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB32_29
.LBB32_28:                              # %if.else94
                                        #   in Loop: Header=BB32_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB32_29:                              # %if.end108
                                        #   in Loop: Header=BB32_25 Depth=2
	jmp	.LBB32_30
.LBB32_30:                              # %for.inc109
                                        #   in Loop: Header=BB32_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_25
.LBB32_31:                              # %for.end111
                                        #   in Loop: Header=BB32_23 Depth=1
	jmp	.LBB32_32
.LBB32_32:                              # %for.inc112
                                        #   in Loop: Header=BB32_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_23
.LBB32_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB32_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB32_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB32_34 Depth=1
	movl	$0, -4(%rbp)
.LBB32_36:                              # %for.cond118
                                        #   Parent Loop BB32_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB32_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB32_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB32_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB32_40
.LBB32_39:                              # %if.else136
                                        #   in Loop: Header=BB32_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB32_40:                              # %if.end150
                                        #   in Loop: Header=BB32_36 Depth=2
	jmp	.LBB32_41
.LBB32_41:                              # %for.inc151
                                        #   in Loop: Header=BB32_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_36
.LBB32_42:                              # %for.end153
                                        #   in Loop: Header=BB32_34 Depth=1
	jmp	.LBB32_43
.LBB32_43:                              # %for.inc154
                                        #   in Loop: Header=BB32_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_34
.LBB32_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB32_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB32_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB32_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB32_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB32_49
.LBB32_48:                              # %if.else172
                                        #   in Loop: Header=BB32_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB32_49:                              # %if.end183
                                        #   in Loop: Header=BB32_45 Depth=1
	jmp	.LBB32_50
.LBB32_50:                              # %for.inc184
                                        #   in Loop: Header=BB32_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_45
.LBB32_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB32_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB32_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB32_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB32_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB32_56
.LBB32_55:                              # %if.else202
                                        #   in Loop: Header=BB32_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB32_56:                              # %if.end213
                                        #   in Loop: Header=BB32_52 Depth=1
	jmp	.LBB32_57
.LBB32_57:                              # %for.inc214
                                        #   in Loop: Header=BB32_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_52
.LBB32_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB32_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB32_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB32_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB32_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB32_63
.LBB32_62:                              # %if.else232
                                        #   in Loop: Header=BB32_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB32_63:                              # %if.end243
                                        #   in Loop: Header=BB32_59 Depth=1
	jmp	.LBB32_64
.LBB32_64:                              # %for.inc244
                                        #   in Loop: Header=BB32_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_59
.LBB32_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB32_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB32_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB32_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB32_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB32_70
.LBB32_69:                              # %if.else262
                                        #   in Loop: Header=BB32_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB32_70:                              # %if.end273
                                        #   in Loop: Header=BB32_66 Depth=1
	jmp	.LBB32_71
.LBB32_71:                              # %for.inc274
                                        #   in Loop: Header=BB32_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_66
.LBB32_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB32_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB32_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB32_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB32_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB32_77
.LBB32_76:                              # %if.else292
                                        #   in Loop: Header=BB32_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB32_77:                              # %if.end303
                                        #   in Loop: Header=BB32_73 Depth=1
	jmp	.LBB32_78
.LBB32_78:                              # %for.inc304
                                        #   in Loop: Header=BB32_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_73
.LBB32_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB32_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB32_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB32_80 Depth=1
	movl	$0, -4(%rbp)
.LBB32_82:                              # %for.cond310
                                        #   Parent Loop BB32_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB32_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB32_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB32_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB32_86
.LBB32_85:                              # %if.else328
                                        #   in Loop: Header=BB32_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB32_86:                              # %if.end342
                                        #   in Loop: Header=BB32_82 Depth=2
	jmp	.LBB32_87
.LBB32_87:                              # %for.inc343
                                        #   in Loop: Header=BB32_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_82
.LBB32_88:                              # %for.end345
                                        #   in Loop: Header=BB32_80 Depth=1
	jmp	.LBB32_89
.LBB32_89:                              # %for.inc346
                                        #   in Loop: Header=BB32_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_80
.LBB32_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB32_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB32_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB32_91 Depth=1
	movl	$0, -4(%rbp)
.LBB32_93:                              # %for.cond352
                                        #   Parent Loop BB32_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB32_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB32_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB32_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB32_97
.LBB32_96:                              # %if.else370
                                        #   in Loop: Header=BB32_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB32_97:                              # %if.end384
                                        #   in Loop: Header=BB32_93 Depth=2
	jmp	.LBB32_98
.LBB32_98:                              # %for.inc385
                                        #   in Loop: Header=BB32_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_93
.LBB32_99:                              # %for.end387
                                        #   in Loop: Header=BB32_91 Depth=1
	jmp	.LBB32_100
.LBB32_100:                             # %for.inc388
                                        #   in Loop: Header=BB32_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_91
.LBB32_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB32_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB32_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB32_102 Depth=1
	movl	$0, -4(%rbp)
.LBB32_104:                             # %for.cond394
                                        #   Parent Loop BB32_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB32_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB32_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB32_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB32_108
.LBB32_107:                             # %if.else412
                                        #   in Loop: Header=BB32_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB32_108:                             # %if.end426
                                        #   in Loop: Header=BB32_104 Depth=2
	jmp	.LBB32_109
.LBB32_109:                             # %for.inc427
                                        #   in Loop: Header=BB32_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_104
.LBB32_110:                             # %for.end429
                                        #   in Loop: Header=BB32_102 Depth=1
	jmp	.LBB32_111
.LBB32_111:                             # %for.inc430
                                        #   in Loop: Header=BB32_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_102
.LBB32_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB32_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB32_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB32_113 Depth=1
	movl	$0, -4(%rbp)
.LBB32_115:                             # %for.cond436
                                        #   Parent Loop BB32_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB32_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB32_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB32_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB32_119
.LBB32_118:                             # %if.else454
                                        #   in Loop: Header=BB32_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB32_119:                             # %if.end468
                                        #   in Loop: Header=BB32_115 Depth=2
	jmp	.LBB32_120
.LBB32_120:                             # %for.inc469
                                        #   in Loop: Header=BB32_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_115
.LBB32_121:                             # %for.end471
                                        #   in Loop: Header=BB32_113 Depth=1
	jmp	.LBB32_122
.LBB32_122:                             # %for.inc472
                                        #   in Loop: Header=BB32_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_113
.LBB32_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB32_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB32_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB32_124 Depth=1
	movl	$0, -4(%rbp)
.LBB32_126:                             # %for.cond478
                                        #   Parent Loop BB32_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB32_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB32_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB32_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB32_130
.LBB32_129:                             # %if.else496
                                        #   in Loop: Header=BB32_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB32_130:                             # %if.end510
                                        #   in Loop: Header=BB32_126 Depth=2
	jmp	.LBB32_131
.LBB32_131:                             # %for.inc511
                                        #   in Loop: Header=BB32_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_126
.LBB32_132:                             # %for.end513
                                        #   in Loop: Header=BB32_124 Depth=1
	jmp	.LBB32_133
.LBB32_133:                             # %for.inc514
                                        #   in Loop: Header=BB32_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_124
.LBB32_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB32_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB32_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB32_135 Depth=1
	movl	$0, -4(%rbp)
.LBB32_137:                             # %for.cond520
                                        #   Parent Loop BB32_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB32_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB32_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB32_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB32_141
.LBB32_140:                             # %if.else538
                                        #   in Loop: Header=BB32_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB32_141:                             # %if.end552
                                        #   in Loop: Header=BB32_137 Depth=2
	jmp	.LBB32_142
.LBB32_142:                             # %for.inc553
                                        #   in Loop: Header=BB32_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_137
.LBB32_143:                             # %for.end555
                                        #   in Loop: Header=BB32_135 Depth=1
	jmp	.LBB32_144
.LBB32_144:                             # %for.inc556
                                        #   in Loop: Header=BB32_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_135
.LBB32_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB32_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB32_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB32_146 Depth=1
	movl	$0, -4(%rbp)
.LBB32_148:                             # %for.cond562
                                        #   Parent Loop BB32_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB32_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB32_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB32_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB32_152
.LBB32_151:                             # %if.else580
                                        #   in Loop: Header=BB32_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB32_152:                             # %if.end594
                                        #   in Loop: Header=BB32_148 Depth=2
	jmp	.LBB32_153
.LBB32_153:                             # %for.inc595
                                        #   in Loop: Header=BB32_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_148
.LBB32_154:                             # %for.end597
                                        #   in Loop: Header=BB32_146 Depth=1
	jmp	.LBB32_155
.LBB32_155:                             # %for.inc598
                                        #   in Loop: Header=BB32_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_146
.LBB32_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB32_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB32_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB32_157 Depth=1
	movl	$0, -4(%rbp)
.LBB32_159:                             # %for.cond604
                                        #   Parent Loop BB32_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB32_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB32_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB32_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB32_163
.LBB32_162:                             # %if.else622
                                        #   in Loop: Header=BB32_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB32_163:                             # %if.end636
                                        #   in Loop: Header=BB32_159 Depth=2
	jmp	.LBB32_164
.LBB32_164:                             # %for.inc637
                                        #   in Loop: Header=BB32_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_159
.LBB32_165:                             # %for.end639
                                        #   in Loop: Header=BB32_157 Depth=1
	jmp	.LBB32_166
.LBB32_166:                             # %for.inc640
                                        #   in Loop: Header=BB32_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_157
.LBB32_167:                             # %for.end642
	cmpl	$1182511854, -28(%rbp)  # imm = 0x467BB2EE
	jne	.LBB32_169
.LBB32_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_168
.Lfunc_end32:
	.size	init_contexts.25, .Lfunc_end32-init_contexts.25
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.26    # -- Begin function SetCtxModelNumber.26
	.p2align	4, 0x90
	.type	SetCtxModelNumber.26,@function
SetCtxModelNumber.26:                   # @SetCtxModelNumber.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1934240211, -16(%rbp)  # imm = 0x734A29D3
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB33_11
.LBB33_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB33_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB33_11
.LBB33_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB33_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB33_11
.LBB33_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB33_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB33_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB33_10
.LBB33_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB33_10:                              # %if.end38
	jmp	.LBB33_11
.LBB33_11:                              # %if.end39
	cmpl	$1934240211, -16(%rbp)  # imm = 0x734A29D3
	jne	.LBB33_13
.LBB33_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_12
.Lfunc_end33:
	.size	SetCtxModelNumber.26, .Lfunc_end33-SetCtxModelNumber.26
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.27    # -- Begin function SetCtxModelNumber.27
	.p2align	4, 0x90
	.type	SetCtxModelNumber.27,@function
SetCtxModelNumber.27:                   # @SetCtxModelNumber.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1954416248, -16(%rbp)  # imm = 0x747E0678
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB34_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB34_11
.LBB34_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB34_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB34_11
.LBB34_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB34_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB34_11
.LBB34_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB34_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB34_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB34_10
.LBB34_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB34_10:                              # %if.end38
	jmp	.LBB34_11
.LBB34_11:                              # %if.end39
	cmpl	$1954416248, -16(%rbp)  # imm = 0x747E0678
	jne	.LBB34_13
.LBB34_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_12
.Lfunc_end34:
	.size	SetCtxModelNumber.27, .Lfunc_end34-SetCtxModelNumber.27
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.28
.LCPI35_0:
	.quad	4607182418800017408     # double 1
.LCPI35_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI35_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI35_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.28
	.p2align	4, 0x90
	.type	XRate.28,@function
XRate.28:                               # @XRate.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$2117907307, -36(%rbp)  # imm = 0x7E3CB36B
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB35_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB35_3
.LBB35_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB35_3:                               # %cond.end
	vmovsd	.LCPI35_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI35_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI35_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI35_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB35_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI35_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB35_6
.LBB35_5:                               # %cond.false6
	vmovsd	.LCPI35_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI35_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI35_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB35_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB35_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB35_9
.LBB35_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB35_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB35_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB35_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB35_13
.LBB35_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB35_13:                              # %cond.end26
	jmp	.LBB35_15
.LBB35_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB35_15
.LBB35_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB35_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB35_18
.LBB35_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB35_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$2117907307, -36(%rbp)  # imm = 0x7E3CB36B
	jne	.LBB35_20
.LBB35_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB35_19
.Lfunc_end35:
	.size	XRate.28, .Lfunc_end35-XRate.28
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.29
.LCPI36_0:
	.quad	4607182418800017408     # double 1
.LCPI36_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI36_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI36_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.29
	.p2align	4, 0x90
	.type	XRate.29,@function
XRate.29:                               # @XRate.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1633260019, -32(%rbp)  # imm = 0x615991F3
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB36_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB36_3
.LBB36_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB36_3:                               # %cond.end
	vmovsd	.LCPI36_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI36_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI36_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI36_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB36_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI36_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB36_6
.LBB36_5:                               # %cond.false6
	vmovsd	.LCPI36_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI36_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI36_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB36_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB36_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB36_9
.LBB36_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB36_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB36_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB36_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB36_13
.LBB36_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB36_13:                              # %cond.end26
	jmp	.LBB36_15
.LBB36_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB36_15
.LBB36_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB36_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB36_18
.LBB36_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB36_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1633260019, -32(%rbp)  # imm = 0x615991F3
	jne	.LBB36_20
.LBB36_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB36_19
.Lfunc_end36:
	.size	XRate.29, .Lfunc_end36-XRate.29
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.30
.LCPI37_0:
	.quad	4611686018427387904     # double 2
.LCPI37_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.30
	.p2align	4, 0x90
	.type	create_context_memory.30,@function
create_context_memory.30:               # @create_context_memory.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$138770967, -20(%rbp)   # imm = 0x8457A17
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB37_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB37_3
.LBB37_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB37_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB37_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB37_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB37_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB37_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB37_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB37_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB37_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB37_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB37_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB37_11:                              # %if.end10
                                        #   in Loop: Header=BB37_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB37_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB37_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB37_13:                              # %if.end16
                                        #   in Loop: Header=BB37_8 Depth=1
	movl	$0, -8(%rbp)
.LBB37_14:                              # %for.cond17
                                        #   Parent Loop BB37_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB37_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB37_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB37_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB37_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB37_17:                              # %if.end28
                                        #   in Loop: Header=BB37_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB37_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB37_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB37_19:                              # %if.end39
                                        #   in Loop: Header=BB37_14 Depth=2
	jmp	.LBB37_20
.LBB37_20:                              # %for.inc
                                        #   in Loop: Header=BB37_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_14
.LBB37_21:                              # %for.end
                                        #   in Loop: Header=BB37_8 Depth=1
	jmp	.LBB37_22
.LBB37_22:                              # %for.inc40
                                        #   in Loop: Header=BB37_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_8
.LBB37_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB37_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_26 Depth 2
                                        #       Child Loop BB37_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB37_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB37_24 Depth=1
	movl	$0, -8(%rbp)
.LBB37_26:                              # %for.cond47
                                        #   Parent Loop BB37_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB37_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB37_26 Depth=2
	movl	$0, -12(%rbp)
.LBB37_28:                              # %for.cond51
                                        #   Parent Loop BB37_24 Depth=1
                                        #     Parent Loop BB37_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB37_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB37_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB37_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_28
.LBB37_31:                              # %for.end63
                                        #   in Loop: Header=BB37_26 Depth=2
	jmp	.LBB37_32
.LBB37_32:                              # %for.inc64
                                        #   in Loop: Header=BB37_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_26
.LBB37_33:                              # %for.end66
                                        #   in Loop: Header=BB37_24 Depth=1
	jmp	.LBB37_34
.LBB37_34:                              # %for.inc67
                                        #   in Loop: Header=BB37_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_24
.LBB37_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB37_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB37_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB37_36 Depth=1
	vmovsd	.LCPI37_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI37_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI37_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB37_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_36
.LBB37_39:                              # %for.end98
	cmpl	$138770967, -20(%rbp)   # imm = 0x8457A17
	jne	.LBB37_41
.LBB37_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_40
.Lfunc_end37:
	.size	create_context_memory.30, .Lfunc_end37-create_context_memory.30
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.31 # -- Begin function update_field_frame_contexts.31
	.p2align	4, 0x90
	.type	update_field_frame_contexts.31,@function
update_field_frame_contexts.31:         # @update_field_frame_contexts.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$504278738, -16(%rbp)   # imm = 0x1E0EAED2
	movl	%edi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB38_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB38_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_4 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB38_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB38_2 Depth=1
	movl	$0, -8(%rbp)
.LBB38_4:                               # %for.cond1
                                        #   Parent Loop BB38_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB38_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB38_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB38_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_4
.LBB38_7:                               # %for.end
                                        #   in Loop: Header=BB38_2 Depth=1
	jmp	.LBB38_8
.LBB38_8:                               # %for.inc23
                                        #   in Loop: Header=BB38_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_2
.LBB38_9:                               # %for.end25
	jmp	.LBB38_19
.LBB38_10:                              # %if.else
	movl	$0, -4(%rbp)
.LBB38_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_13 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB38_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB38_11 Depth=1
	movl	$0, -8(%rbp)
.LBB38_13:                              # %for.cond29
                                        #   Parent Loop BB38_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB38_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB38_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_13
.LBB38_16:                              # %for.end56
                                        #   in Loop: Header=BB38_11 Depth=1
	jmp	.LBB38_17
.LBB38_17:                              # %for.inc57
                                        #   in Loop: Header=BB38_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_11
.LBB38_18:                              # %for.end59
	jmp	.LBB38_19
.LBB38_19:                              # %if.end
	cmpl	$504278738, -16(%rbp)   # imm = 0x1E0EAED2
	jne	.LBB38_21
.LBB38_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_20
.Lfunc_end38:
	.size	update_field_frame_contexts.31, .Lfunc_end38-update_field_frame_contexts.31
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.32
.LCPI39_0:
	.quad	4611686018427387904     # double 2
.LCPI39_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.32
	.p2align	4, 0x90
	.type	create_context_memory.32,@function
create_context_memory.32:               # @create_context_memory.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1154792993, -20(%rbp)  # imm = 0x44D4BE21
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB39_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB39_3
.LBB39_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB39_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB39_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB39_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB39_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB39_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB39_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB39_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB39_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB39_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB39_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB39_11:                              # %if.end10
                                        #   in Loop: Header=BB39_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB39_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB39_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB39_13:                              # %if.end16
                                        #   in Loop: Header=BB39_8 Depth=1
	movl	$0, -8(%rbp)
.LBB39_14:                              # %for.cond17
                                        #   Parent Loop BB39_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB39_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB39_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB39_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB39_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB39_17:                              # %if.end28
                                        #   in Loop: Header=BB39_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB39_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB39_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB39_19:                              # %if.end39
                                        #   in Loop: Header=BB39_14 Depth=2
	jmp	.LBB39_20
.LBB39_20:                              # %for.inc
                                        #   in Loop: Header=BB39_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_14
.LBB39_21:                              # %for.end
                                        #   in Loop: Header=BB39_8 Depth=1
	jmp	.LBB39_22
.LBB39_22:                              # %for.inc40
                                        #   in Loop: Header=BB39_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_8
.LBB39_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB39_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_26 Depth 2
                                        #       Child Loop BB39_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB39_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB39_24 Depth=1
	movl	$0, -8(%rbp)
.LBB39_26:                              # %for.cond47
                                        #   Parent Loop BB39_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB39_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB39_26 Depth=2
	movl	$0, -12(%rbp)
.LBB39_28:                              # %for.cond51
                                        #   Parent Loop BB39_24 Depth=1
                                        #     Parent Loop BB39_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB39_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB39_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB39_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_28
.LBB39_31:                              # %for.end63
                                        #   in Loop: Header=BB39_26 Depth=2
	jmp	.LBB39_32
.LBB39_32:                              # %for.inc64
                                        #   in Loop: Header=BB39_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_26
.LBB39_33:                              # %for.end66
                                        #   in Loop: Header=BB39_24 Depth=1
	jmp	.LBB39_34
.LBB39_34:                              # %for.inc67
                                        #   in Loop: Header=BB39_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_24
.LBB39_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB39_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB39_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB39_36 Depth=1
	vmovsd	.LCPI39_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI39_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI39_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB39_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_36
.LBB39_39:                              # %for.end98
	cmpl	$1154792993, -20(%rbp)  # imm = 0x44D4BE21
	jne	.LBB39_41
.LBB39_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_40
.Lfunc_end39:
	.size	create_context_memory.32, .Lfunc_end39-create_context_memory.32
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.33
.LCPI40_0:
	.quad	4611686018427387904     # double 2
.LCPI40_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.33
	.p2align	4, 0x90
	.type	create_context_memory.33,@function
create_context_memory.33:               # @create_context_memory.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$33345162, -20(%rbp)    # imm = 0x1FCCE8A
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB40_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB40_3
.LBB40_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB40_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB40_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB40_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB40_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB40_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB40_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB40_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB40_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB40_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB40_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB40_11:                              # %if.end10
                                        #   in Loop: Header=BB40_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB40_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB40_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB40_13:                              # %if.end16
                                        #   in Loop: Header=BB40_8 Depth=1
	movl	$0, -8(%rbp)
.LBB40_14:                              # %for.cond17
                                        #   Parent Loop BB40_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB40_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB40_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB40_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB40_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB40_17:                              # %if.end28
                                        #   in Loop: Header=BB40_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB40_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB40_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB40_19:                              # %if.end39
                                        #   in Loop: Header=BB40_14 Depth=2
	jmp	.LBB40_20
.LBB40_20:                              # %for.inc
                                        #   in Loop: Header=BB40_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_14
.LBB40_21:                              # %for.end
                                        #   in Loop: Header=BB40_8 Depth=1
	jmp	.LBB40_22
.LBB40_22:                              # %for.inc40
                                        #   in Loop: Header=BB40_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_8
.LBB40_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB40_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_26 Depth 2
                                        #       Child Loop BB40_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB40_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB40_24 Depth=1
	movl	$0, -8(%rbp)
.LBB40_26:                              # %for.cond47
                                        #   Parent Loop BB40_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB40_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB40_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB40_26 Depth=2
	movl	$0, -12(%rbp)
.LBB40_28:                              # %for.cond51
                                        #   Parent Loop BB40_24 Depth=1
                                        #     Parent Loop BB40_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB40_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB40_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB40_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB40_28
.LBB40_31:                              # %for.end63
                                        #   in Loop: Header=BB40_26 Depth=2
	jmp	.LBB40_32
.LBB40_32:                              # %for.inc64
                                        #   in Loop: Header=BB40_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_26
.LBB40_33:                              # %for.end66
                                        #   in Loop: Header=BB40_24 Depth=1
	jmp	.LBB40_34
.LBB40_34:                              # %for.inc67
                                        #   in Loop: Header=BB40_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_24
.LBB40_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB40_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB40_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB40_36 Depth=1
	vmovsd	.LCPI40_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI40_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI40_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB40_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_36
.LBB40_39:                              # %for.end98
	cmpl	$33345162, -20(%rbp)    # imm = 0x1FCCE8A
	jne	.LBB40_41
.LBB40_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_40
.Lfunc_end40:
	.size	create_context_memory.33, .Lfunc_end40-create_context_memory.33
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.34
.LCPI41_0:
	.quad	4607182418800017408     # double 1
.LCPI41_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI41_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI41_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.34
	.p2align	4, 0x90
	.type	XRate.34,@function
XRate.34:                               # @XRate.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$962246897, -36(%rbp)   # imm = 0x395AB8F1
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB41_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB41_3
.LBB41_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB41_3:                               # %cond.end
	vmovsd	.LCPI41_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI41_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI41_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI41_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB41_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI41_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB41_6
.LBB41_5:                               # %cond.false6
	vmovsd	.LCPI41_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI41_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI41_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB41_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB41_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB41_9
.LBB41_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB41_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB41_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB41_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB41_13
.LBB41_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB41_13:                              # %cond.end26
	jmp	.LBB41_15
.LBB41_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB41_15
.LBB41_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB41_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB41_18
.LBB41_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB41_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$962246897, -36(%rbp)   # imm = 0x395AB8F1
	jne	.LBB41_20
.LBB41_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB41_19
.Lfunc_end41:
	.size	XRate.34, .Lfunc_end41-XRate.34
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.35
.LCPI42_0:
	.quad	4607182418800017408     # double 1
.LCPI42_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI42_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI42_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.35
	.p2align	4, 0x90
	.type	XRate.35,@function
XRate.35:                               # @XRate.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$657323464, -32(%rbp)   # imm = 0x272DF5C8
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB42_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB42_3
.LBB42_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB42_3:                               # %cond.end
	vmovsd	.LCPI42_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI42_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI42_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI42_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB42_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI42_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB42_6
.LBB42_5:                               # %cond.false6
	vmovsd	.LCPI42_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI42_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI42_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB42_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB42_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB42_9
.LBB42_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB42_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB42_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB42_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB42_13
.LBB42_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB42_13:                              # %cond.end26
	jmp	.LBB42_15
.LBB42_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB42_15
.LBB42_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB42_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB42_18
.LBB42_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB42_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$657323464, -32(%rbp)   # imm = 0x272DF5C8
	jne	.LBB42_20
.LBB42_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB42_19
.Lfunc_end42:
	.size	XRate.35, .Lfunc_end42-XRate.35
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.36
.LCPI43_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.36
	.p2align	4, 0x90
	.type	GetCtxModelNumber.36,@function
GetCtxModelNumber.36:                   # @GetCtxModelNumber.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI43_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$969536956, -48(%rbp)   # imm = 0x39C9F5BC
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB43_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_3 Depth 2
                                        #       Child Loop BB43_5 Depth 3
                                        #     Child Loop BB43_14 Depth 2
                                        #       Child Loop BB43_16 Depth 3
                                        #     Child Loop BB43_25 Depth 2
                                        #       Child Loop BB43_27 Depth 3
                                        #     Child Loop BB43_36 Depth 2
                                        #       Child Loop BB43_38 Depth 3
                                        #     Child Loop BB43_47 Depth 2
                                        #     Child Loop BB43_54 Depth 2
                                        #     Child Loop BB43_61 Depth 2
                                        #     Child Loop BB43_68 Depth 2
                                        #     Child Loop BB43_75 Depth 2
                                        #     Child Loop BB43_82 Depth 2
                                        #       Child Loop BB43_84 Depth 3
                                        #     Child Loop BB43_93 Depth 2
                                        #       Child Loop BB43_95 Depth 3
                                        #     Child Loop BB43_104 Depth 2
                                        #       Child Loop BB43_106 Depth 3
                                        #     Child Loop BB43_115 Depth 2
                                        #       Child Loop BB43_117 Depth 3
                                        #     Child Loop BB43_126 Depth 2
                                        #       Child Loop BB43_128 Depth 3
                                        #     Child Loop BB43_137 Depth 2
                                        #       Child Loop BB43_139 Depth 3
                                        #     Child Loop BB43_148 Depth 2
                                        #       Child Loop BB43_150 Depth 3
                                        #     Child Loop BB43_159 Depth 2
                                        #       Child Loop BB43_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB43_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB43_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB43_3:                               # %for.cond2
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB43_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB43_3 Depth=2
	movl	$0, -4(%rbp)
.LBB43_5:                               # %for.cond5
                                        #   Parent Loop BB43_1 Depth=1
                                        #     Parent Loop BB43_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB43_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB43_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB43_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB43_9
.LBB43_8:                               # %if.else
                                        #   in Loop: Header=BB43_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB43_9:                               # %if.end
                                        #   in Loop: Header=BB43_5 Depth=3
	jmp	.LBB43_10
.LBB43_10:                              # %for.inc
                                        #   in Loop: Header=BB43_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_5
.LBB43_11:                              # %for.end
                                        #   in Loop: Header=BB43_3 Depth=2
	jmp	.LBB43_12
.LBB43_12:                              # %for.inc33
                                        #   in Loop: Header=BB43_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_3
.LBB43_13:                              # %for.end35
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -8(%rbp)
.LBB43_14:                              # %for.cond36
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB43_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB43_14 Depth=2
	movl	$0, -4(%rbp)
.LBB43_16:                              # %for.cond39
                                        #   Parent Loop BB43_1 Depth=1
                                        #     Parent Loop BB43_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB43_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB43_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB43_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB43_20
.LBB43_19:                              # %if.else58
                                        #   in Loop: Header=BB43_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB43_20:                              # %if.end73
                                        #   in Loop: Header=BB43_16 Depth=3
	jmp	.LBB43_21
.LBB43_21:                              # %for.inc74
                                        #   in Loop: Header=BB43_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_16
.LBB43_22:                              # %for.end76
                                        #   in Loop: Header=BB43_14 Depth=2
	jmp	.LBB43_23
.LBB43_23:                              # %for.inc77
                                        #   in Loop: Header=BB43_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_14
.LBB43_24:                              # %for.end79
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -8(%rbp)
.LBB43_25:                              # %for.cond80
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB43_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB43_25 Depth=2
	movl	$0, -4(%rbp)
.LBB43_27:                              # %for.cond83
                                        #   Parent Loop BB43_1 Depth=1
                                        #     Parent Loop BB43_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB43_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB43_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB43_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB43_31
.LBB43_30:                              # %if.else102
                                        #   in Loop: Header=BB43_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB43_31:                              # %if.end117
                                        #   in Loop: Header=BB43_27 Depth=3
	jmp	.LBB43_32
.LBB43_32:                              # %for.inc118
                                        #   in Loop: Header=BB43_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_27
.LBB43_33:                              # %for.end120
                                        #   in Loop: Header=BB43_25 Depth=2
	jmp	.LBB43_34
.LBB43_34:                              # %for.inc121
                                        #   in Loop: Header=BB43_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_25
.LBB43_35:                              # %for.end123
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -8(%rbp)
.LBB43_36:                              # %for.cond124
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB43_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB43_36 Depth=2
	movl	$0, -4(%rbp)
.LBB43_38:                              # %for.cond127
                                        #   Parent Loop BB43_1 Depth=1
                                        #     Parent Loop BB43_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB43_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB43_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB43_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB43_42
.LBB43_41:                              # %if.else146
                                        #   in Loop: Header=BB43_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB43_42:                              # %if.end161
                                        #   in Loop: Header=BB43_38 Depth=3
	jmp	.LBB43_43
.LBB43_43:                              # %for.inc162
                                        #   in Loop: Header=BB43_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_38
.LBB43_44:                              # %for.end164
                                        #   in Loop: Header=BB43_36 Depth=2
	jmp	.LBB43_45
.LBB43_45:                              # %for.inc165
                                        #   in Loop: Header=BB43_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_36
.LBB43_46:                              # %for.end167
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -4(%rbp)
.LBB43_47:                              # %for.cond168
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB43_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB43_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB43_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB43_51
.LBB43_50:                              # %if.else184
                                        #   in Loop: Header=BB43_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB43_51:                              # %if.end196
                                        #   in Loop: Header=BB43_47 Depth=2
	jmp	.LBB43_52
.LBB43_52:                              # %for.inc197
                                        #   in Loop: Header=BB43_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_47
.LBB43_53:                              # %for.end199
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -4(%rbp)
.LBB43_54:                              # %for.cond200
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB43_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB43_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB43_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB43_58
.LBB43_57:                              # %if.else216
                                        #   in Loop: Header=BB43_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB43_58:                              # %if.end228
                                        #   in Loop: Header=BB43_54 Depth=2
	jmp	.LBB43_59
.LBB43_59:                              # %for.inc229
                                        #   in Loop: Header=BB43_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_54
.LBB43_60:                              # %for.end231
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -4(%rbp)
.LBB43_61:                              # %for.cond232
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB43_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB43_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB43_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB43_65
.LBB43_64:                              # %if.else248
                                        #   in Loop: Header=BB43_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB43_65:                              # %if.end260
                                        #   in Loop: Header=BB43_61 Depth=2
	jmp	.LBB43_66
.LBB43_66:                              # %for.inc261
                                        #   in Loop: Header=BB43_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_61
.LBB43_67:                              # %for.end263
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -4(%rbp)
.LBB43_68:                              # %for.cond264
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB43_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB43_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB43_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB43_72
.LBB43_71:                              # %if.else280
                                        #   in Loop: Header=BB43_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB43_72:                              # %if.end292
                                        #   in Loop: Header=BB43_68 Depth=2
	jmp	.LBB43_73
.LBB43_73:                              # %for.inc293
                                        #   in Loop: Header=BB43_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_68
.LBB43_74:                              # %for.end295
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -4(%rbp)
.LBB43_75:                              # %for.cond296
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB43_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB43_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB43_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB43_79
.LBB43_78:                              # %if.else312
                                        #   in Loop: Header=BB43_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB43_79:                              # %if.end324
                                        #   in Loop: Header=BB43_75 Depth=2
	jmp	.LBB43_80
.LBB43_80:                              # %for.inc325
                                        #   in Loop: Header=BB43_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_75
.LBB43_81:                              # %for.end327
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -8(%rbp)
.LBB43_82:                              # %for.cond328
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB43_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB43_82 Depth=2
	movl	$0, -4(%rbp)
.LBB43_84:                              # %for.cond331
                                        #   Parent Loop BB43_1 Depth=1
                                        #     Parent Loop BB43_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB43_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB43_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB43_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB43_88
.LBB43_87:                              # %if.else350
                                        #   in Loop: Header=BB43_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB43_88:                              # %if.end365
                                        #   in Loop: Header=BB43_84 Depth=3
	jmp	.LBB43_89
.LBB43_89:                              # %for.inc366
                                        #   in Loop: Header=BB43_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_84
.LBB43_90:                              # %for.end368
                                        #   in Loop: Header=BB43_82 Depth=2
	jmp	.LBB43_91
.LBB43_91:                              # %for.inc369
                                        #   in Loop: Header=BB43_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_82
.LBB43_92:                              # %for.end371
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -8(%rbp)
.LBB43_93:                              # %for.cond372
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB43_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB43_93 Depth=2
	movl	$0, -4(%rbp)
.LBB43_95:                              # %for.cond375
                                        #   Parent Loop BB43_1 Depth=1
                                        #     Parent Loop BB43_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB43_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB43_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB43_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB43_99
.LBB43_98:                              # %if.else394
                                        #   in Loop: Header=BB43_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB43_99:                              # %if.end409
                                        #   in Loop: Header=BB43_95 Depth=3
	jmp	.LBB43_100
.LBB43_100:                             # %for.inc410
                                        #   in Loop: Header=BB43_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_95
.LBB43_101:                             # %for.end412
                                        #   in Loop: Header=BB43_93 Depth=2
	jmp	.LBB43_102
.LBB43_102:                             # %for.inc413
                                        #   in Loop: Header=BB43_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_93
.LBB43_103:                             # %for.end415
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -8(%rbp)
.LBB43_104:                             # %for.cond416
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB43_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB43_104 Depth=2
	movl	$0, -4(%rbp)
.LBB43_106:                             # %for.cond419
                                        #   Parent Loop BB43_1 Depth=1
                                        #     Parent Loop BB43_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB43_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB43_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB43_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB43_110
.LBB43_109:                             # %if.else438
                                        #   in Loop: Header=BB43_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB43_110:                             # %if.end453
                                        #   in Loop: Header=BB43_106 Depth=3
	jmp	.LBB43_111
.LBB43_111:                             # %for.inc454
                                        #   in Loop: Header=BB43_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_106
.LBB43_112:                             # %for.end456
                                        #   in Loop: Header=BB43_104 Depth=2
	jmp	.LBB43_113
.LBB43_113:                             # %for.inc457
                                        #   in Loop: Header=BB43_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_104
.LBB43_114:                             # %for.end459
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -8(%rbp)
.LBB43_115:                             # %for.cond460
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB43_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB43_115 Depth=2
	movl	$0, -4(%rbp)
.LBB43_117:                             # %for.cond463
                                        #   Parent Loop BB43_1 Depth=1
                                        #     Parent Loop BB43_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB43_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB43_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB43_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB43_121
.LBB43_120:                             # %if.else482
                                        #   in Loop: Header=BB43_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB43_121:                             # %if.end497
                                        #   in Loop: Header=BB43_117 Depth=3
	jmp	.LBB43_122
.LBB43_122:                             # %for.inc498
                                        #   in Loop: Header=BB43_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_117
.LBB43_123:                             # %for.end500
                                        #   in Loop: Header=BB43_115 Depth=2
	jmp	.LBB43_124
.LBB43_124:                             # %for.inc501
                                        #   in Loop: Header=BB43_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_115
.LBB43_125:                             # %for.end503
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -8(%rbp)
.LBB43_126:                             # %for.cond504
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB43_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB43_126 Depth=2
	movl	$0, -4(%rbp)
.LBB43_128:                             # %for.cond507
                                        #   Parent Loop BB43_1 Depth=1
                                        #     Parent Loop BB43_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB43_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB43_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB43_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB43_132
.LBB43_131:                             # %if.else526
                                        #   in Loop: Header=BB43_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB43_132:                             # %if.end541
                                        #   in Loop: Header=BB43_128 Depth=3
	jmp	.LBB43_133
.LBB43_133:                             # %for.inc542
                                        #   in Loop: Header=BB43_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_128
.LBB43_134:                             # %for.end544
                                        #   in Loop: Header=BB43_126 Depth=2
	jmp	.LBB43_135
.LBB43_135:                             # %for.inc545
                                        #   in Loop: Header=BB43_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_126
.LBB43_136:                             # %for.end547
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -8(%rbp)
.LBB43_137:                             # %for.cond548
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB43_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB43_137 Depth=2
	movl	$0, -4(%rbp)
.LBB43_139:                             # %for.cond551
                                        #   Parent Loop BB43_1 Depth=1
                                        #     Parent Loop BB43_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB43_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB43_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB43_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB43_143
.LBB43_142:                             # %if.else570
                                        #   in Loop: Header=BB43_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB43_143:                             # %if.end585
                                        #   in Loop: Header=BB43_139 Depth=3
	jmp	.LBB43_144
.LBB43_144:                             # %for.inc586
                                        #   in Loop: Header=BB43_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_139
.LBB43_145:                             # %for.end588
                                        #   in Loop: Header=BB43_137 Depth=2
	jmp	.LBB43_146
.LBB43_146:                             # %for.inc589
                                        #   in Loop: Header=BB43_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_137
.LBB43_147:                             # %for.end591
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -8(%rbp)
.LBB43_148:                             # %for.cond592
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB43_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB43_148 Depth=2
	movl	$0, -4(%rbp)
.LBB43_150:                             # %for.cond595
                                        #   Parent Loop BB43_1 Depth=1
                                        #     Parent Loop BB43_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB43_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB43_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB43_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB43_154
.LBB43_153:                             # %if.else614
                                        #   in Loop: Header=BB43_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB43_154:                             # %if.end629
                                        #   in Loop: Header=BB43_150 Depth=3
	jmp	.LBB43_155
.LBB43_155:                             # %for.inc630
                                        #   in Loop: Header=BB43_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_150
.LBB43_156:                             # %for.end632
                                        #   in Loop: Header=BB43_148 Depth=2
	jmp	.LBB43_157
.LBB43_157:                             # %for.inc633
                                        #   in Loop: Header=BB43_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_148
.LBB43_158:                             # %for.end635
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -8(%rbp)
.LBB43_159:                             # %for.cond636
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB43_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB43_159 Depth=2
	movl	$0, -4(%rbp)
.LBB43_161:                             # %for.cond639
                                        #   Parent Loop BB43_1 Depth=1
                                        #     Parent Loop BB43_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB43_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB43_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB43_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB43_165
.LBB43_164:                             # %if.else658
                                        #   in Loop: Header=BB43_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB43_165:                             # %if.end673
                                        #   in Loop: Header=BB43_161 Depth=3
	jmp	.LBB43_166
.LBB43_166:                             # %for.inc674
                                        #   in Loop: Header=BB43_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_161
.LBB43_167:                             # %for.end676
                                        #   in Loop: Header=BB43_159 Depth=2
	jmp	.LBB43_168
.LBB43_168:                             # %for.inc677
                                        #   in Loop: Header=BB43_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_159
.LBB43_169:                             # %for.end679
                                        #   in Loop: Header=BB43_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB43_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB43_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB43_171:                             # %if.end682
                                        #   in Loop: Header=BB43_1 Depth=1
	jmp	.LBB43_172
.LBB43_172:                             # %for.inc683
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_1
.LBB43_173:                             # %for.end685
	cmpl	$969536956, -48(%rbp)   # imm = 0x39C9F5BC
	jne	.LBB43_175
.LBB43_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_174
.Lfunc_end43:
	.size	GetCtxModelNumber.36, .Lfunc_end43-GetCtxModelNumber.36
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.37
.LCPI44_0:
	.quad	4607182418800017408     # double 1
.LCPI44_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI44_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI44_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.37
	.p2align	4, 0x90
	.type	XRate.37,@function
XRate.37:                               # @XRate.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1063518387, -36(%rbp)  # imm = 0x3F6400B3
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB44_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB44_3
.LBB44_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB44_3:                               # %cond.end
	vmovsd	.LCPI44_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI44_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI44_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI44_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB44_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI44_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB44_6
.LBB44_5:                               # %cond.false6
	vmovsd	.LCPI44_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI44_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI44_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB44_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB44_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB44_9
.LBB44_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB44_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB44_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB44_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB44_13
.LBB44_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB44_13:                              # %cond.end26
	jmp	.LBB44_15
.LBB44_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB44_15
.LBB44_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB44_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB44_18
.LBB44_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB44_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1063518387, -36(%rbp)  # imm = 0x3F6400B3
	jne	.LBB44_20
.LBB44_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB44_19
.Lfunc_end44:
	.size	XRate.37, .Lfunc_end44-XRate.37
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.38 # -- Begin function update_field_frame_contexts.38
	.p2align	4, 0x90
	.type	update_field_frame_contexts.38,@function
update_field_frame_contexts.38:         # @update_field_frame_contexts.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1769780554, -12(%rbp)  # imm = 0x697CB54A
	movl	%edi, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB45_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB45_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_4 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB45_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB45_2 Depth=1
	movl	$0, -4(%rbp)
.LBB45_4:                               # %for.cond1
                                        #   Parent Loop BB45_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB45_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB45_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB45_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_4
.LBB45_7:                               # %for.end
                                        #   in Loop: Header=BB45_2 Depth=1
	jmp	.LBB45_8
.LBB45_8:                               # %for.inc23
                                        #   in Loop: Header=BB45_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_2
.LBB45_9:                               # %for.end25
	jmp	.LBB45_19
.LBB45_10:                              # %if.else
	movl	$0, -8(%rbp)
.LBB45_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB45_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB45_11 Depth=1
	movl	$0, -4(%rbp)
.LBB45_13:                              # %for.cond29
                                        #   Parent Loop BB45_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB45_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB45_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_13
.LBB45_16:                              # %for.end56
                                        #   in Loop: Header=BB45_11 Depth=1
	jmp	.LBB45_17
.LBB45_17:                              # %for.inc57
                                        #   in Loop: Header=BB45_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_11
.LBB45_18:                              # %for.end59
	jmp	.LBB45_19
.LBB45_19:                              # %if.end
	cmpl	$1769780554, -12(%rbp)  # imm = 0x697CB54A
	jne	.LBB45_21
.LBB45_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_20
.Lfunc_end45:
	.size	update_field_frame_contexts.38, .Lfunc_end45-update_field_frame_contexts.38
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.39
.LCPI46_0:
	.quad	4611686018427387904     # double 2
.LCPI46_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.39
	.p2align	4, 0x90
	.type	create_context_memory.39,@function
create_context_memory.39:               # @create_context_memory.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$954278519, -20(%rbp)   # imm = 0x38E12277
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB46_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB46_3
.LBB46_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB46_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB46_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB46_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB46_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB46_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB46_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB46_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB46_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB46_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB46_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB46_11:                              # %if.end10
                                        #   in Loop: Header=BB46_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB46_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB46_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB46_13:                              # %if.end16
                                        #   in Loop: Header=BB46_8 Depth=1
	movl	$0, -8(%rbp)
.LBB46_14:                              # %for.cond17
                                        #   Parent Loop BB46_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB46_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB46_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB46_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB46_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB46_17:                              # %if.end28
                                        #   in Loop: Header=BB46_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB46_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB46_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB46_19:                              # %if.end39
                                        #   in Loop: Header=BB46_14 Depth=2
	jmp	.LBB46_20
.LBB46_20:                              # %for.inc
                                        #   in Loop: Header=BB46_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_14
.LBB46_21:                              # %for.end
                                        #   in Loop: Header=BB46_8 Depth=1
	jmp	.LBB46_22
.LBB46_22:                              # %for.inc40
                                        #   in Loop: Header=BB46_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_8
.LBB46_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB46_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_26 Depth 2
                                        #       Child Loop BB46_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB46_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB46_24 Depth=1
	movl	$0, -8(%rbp)
.LBB46_26:                              # %for.cond47
                                        #   Parent Loop BB46_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB46_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB46_26 Depth=2
	movl	$0, -12(%rbp)
.LBB46_28:                              # %for.cond51
                                        #   Parent Loop BB46_24 Depth=1
                                        #     Parent Loop BB46_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB46_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB46_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB46_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_28
.LBB46_31:                              # %for.end63
                                        #   in Loop: Header=BB46_26 Depth=2
	jmp	.LBB46_32
.LBB46_32:                              # %for.inc64
                                        #   in Loop: Header=BB46_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_26
.LBB46_33:                              # %for.end66
                                        #   in Loop: Header=BB46_24 Depth=1
	jmp	.LBB46_34
.LBB46_34:                              # %for.inc67
                                        #   in Loop: Header=BB46_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_24
.LBB46_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB46_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB46_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB46_36 Depth=1
	vmovsd	.LCPI46_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI46_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI46_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB46_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_36
.LBB46_39:                              # %for.end98
	cmpl	$954278519, -20(%rbp)   # imm = 0x38E12277
	jne	.LBB46_41
.LBB46_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_40
.Lfunc_end46:
	.size	create_context_memory.39, .Lfunc_end46-create_context_memory.39
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.40
.LCPI47_0:
	.quad	4611686018427387904     # double 2
.LCPI47_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.40
	.p2align	4, 0x90
	.type	create_context_memory.40,@function
create_context_memory.40:               # @create_context_memory.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$241314217, -20(%rbp)   # imm = 0xE6229A9
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB47_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB47_3
.LBB47_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB47_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB47_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB47_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB47_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB47_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB47_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB47_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB47_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB47_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB47_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB47_11:                              # %if.end10
                                        #   in Loop: Header=BB47_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB47_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB47_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB47_13:                              # %if.end16
                                        #   in Loop: Header=BB47_8 Depth=1
	movl	$0, -8(%rbp)
.LBB47_14:                              # %for.cond17
                                        #   Parent Loop BB47_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB47_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB47_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB47_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB47_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB47_17:                              # %if.end28
                                        #   in Loop: Header=BB47_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB47_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB47_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB47_19:                              # %if.end39
                                        #   in Loop: Header=BB47_14 Depth=2
	jmp	.LBB47_20
.LBB47_20:                              # %for.inc
                                        #   in Loop: Header=BB47_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_14
.LBB47_21:                              # %for.end
                                        #   in Loop: Header=BB47_8 Depth=1
	jmp	.LBB47_22
.LBB47_22:                              # %for.inc40
                                        #   in Loop: Header=BB47_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_8
.LBB47_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB47_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_26 Depth 2
                                        #       Child Loop BB47_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB47_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB47_24 Depth=1
	movl	$0, -8(%rbp)
.LBB47_26:                              # %for.cond47
                                        #   Parent Loop BB47_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB47_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB47_26 Depth=2
	movl	$0, -12(%rbp)
.LBB47_28:                              # %for.cond51
                                        #   Parent Loop BB47_24 Depth=1
                                        #     Parent Loop BB47_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB47_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB47_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB47_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_28
.LBB47_31:                              # %for.end63
                                        #   in Loop: Header=BB47_26 Depth=2
	jmp	.LBB47_32
.LBB47_32:                              # %for.inc64
                                        #   in Loop: Header=BB47_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_26
.LBB47_33:                              # %for.end66
                                        #   in Loop: Header=BB47_24 Depth=1
	jmp	.LBB47_34
.LBB47_34:                              # %for.inc67
                                        #   in Loop: Header=BB47_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_24
.LBB47_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB47_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB47_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB47_36 Depth=1
	vmovsd	.LCPI47_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI47_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI47_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB47_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_36
.LBB47_39:                              # %for.end98
	cmpl	$241314217, -20(%rbp)   # imm = 0xE6229A9
	jne	.LBB47_41
.LBB47_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_40
.Lfunc_end47:
	.size	create_context_memory.40, .Lfunc_end47-create_context_memory.40
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.41 # -- Begin function update_field_frame_contexts.41
	.p2align	4, 0x90
	.type	update_field_frame_contexts.41,@function
update_field_frame_contexts.41:         # @update_field_frame_contexts.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$422075544, -16(%rbp)   # imm = 0x19285C98
	movl	%edi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB48_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB48_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_4 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB48_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB48_2 Depth=1
	movl	$0, -4(%rbp)
.LBB48_4:                               # %for.cond1
                                        #   Parent Loop BB48_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB48_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB48_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB48_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_4
.LBB48_7:                               # %for.end
                                        #   in Loop: Header=BB48_2 Depth=1
	jmp	.LBB48_8
.LBB48_8:                               # %for.inc23
                                        #   in Loop: Header=BB48_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_2
.LBB48_9:                               # %for.end25
	jmp	.LBB48_19
.LBB48_10:                              # %if.else
	movl	$0, -8(%rbp)
.LBB48_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB48_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB48_11 Depth=1
	movl	$0, -4(%rbp)
.LBB48_13:                              # %for.cond29
                                        #   Parent Loop BB48_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB48_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB48_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_13
.LBB48_16:                              # %for.end56
                                        #   in Loop: Header=BB48_11 Depth=1
	jmp	.LBB48_17
.LBB48_17:                              # %for.inc57
                                        #   in Loop: Header=BB48_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_11
.LBB48_18:                              # %for.end59
	jmp	.LBB48_19
.LBB48_19:                              # %if.end
	cmpl	$422075544, -16(%rbp)   # imm = 0x19285C98
	jne	.LBB48_21
.LBB48_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_20
.Lfunc_end48:
	.size	update_field_frame_contexts.41, .Lfunc_end48-update_field_frame_contexts.41
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.42 # -- Begin function update_field_frame_contexts.42
	.p2align	4, 0x90
	.type	update_field_frame_contexts.42,@function
update_field_frame_contexts.42:         # @update_field_frame_contexts.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$434668405, -16(%rbp)   # imm = 0x19E88375
	movl	%edi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB49_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB49_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_4 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB49_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB49_2 Depth=1
	movl	$0, -8(%rbp)
.LBB49_4:                               # %for.cond1
                                        #   Parent Loop BB49_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB49_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB49_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB49_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_4
.LBB49_7:                               # %for.end
                                        #   in Loop: Header=BB49_2 Depth=1
	jmp	.LBB49_8
.LBB49_8:                               # %for.inc23
                                        #   in Loop: Header=BB49_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_2
.LBB49_9:                               # %for.end25
	jmp	.LBB49_19
.LBB49_10:                              # %if.else
	movl	$0, -4(%rbp)
.LBB49_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_13 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB49_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB49_11 Depth=1
	movl	$0, -8(%rbp)
.LBB49_13:                              # %for.cond29
                                        #   Parent Loop BB49_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB49_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB49_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_13
.LBB49_16:                              # %for.end56
                                        #   in Loop: Header=BB49_11 Depth=1
	jmp	.LBB49_17
.LBB49_17:                              # %for.inc57
                                        #   in Loop: Header=BB49_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_11
.LBB49_18:                              # %for.end59
	jmp	.LBB49_19
.LBB49_19:                              # %if.end
	cmpl	$434668405, -16(%rbp)   # imm = 0x19E88375
	jne	.LBB49_21
.LBB49_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_20
.Lfunc_end49:
	.size	update_field_frame_contexts.42, .Lfunc_end49-update_field_frame_contexts.42
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.43    # -- Begin function SetCtxModelNumber.43
	.p2align	4, 0x90
	.type	SetCtxModelNumber.43,@function
SetCtxModelNumber.43:                   # @SetCtxModelNumber.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1964886042, -16(%rbp)  # imm = 0x751DC81A
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB50_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB50_11
.LBB50_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB50_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB50_11
.LBB50_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB50_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB50_11
.LBB50_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB50_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB50_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB50_10
.LBB50_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB50_10:                              # %if.end38
	jmp	.LBB50_11
.LBB50_11:                              # %if.end39
	cmpl	$1964886042, -16(%rbp)  # imm = 0x751DC81A
	jne	.LBB50_13
.LBB50_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_12
.Lfunc_end50:
	.size	SetCtxModelNumber.43, .Lfunc_end50-SetCtxModelNumber.43
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.44        # -- Begin function init_contexts.44
	.p2align	4, 0x90
	.type	init_contexts.44,@function
init_contexts.44:                       # @init_contexts.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1766930589, -28(%rbp)  # imm = 0x6951389D
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB51_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB51_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -4(%rbp)
.LBB51_3:                               # %for.cond2
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB51_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB51_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB51_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB51_7
.LBB51_6:                               # %if.else
                                        #   in Loop: Header=BB51_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB51_7:                               # %if.end
                                        #   in Loop: Header=BB51_3 Depth=2
	jmp	.LBB51_8
.LBB51_8:                               # %for.inc
                                        #   in Loop: Header=BB51_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_3
.LBB51_9:                               # %for.end
                                        #   in Loop: Header=BB51_1 Depth=1
	jmp	.LBB51_10
.LBB51_10:                              # %for.inc28
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_1
.LBB51_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB51_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB51_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB51_12 Depth=1
	movl	$0, -4(%rbp)
.LBB51_14:                              # %for.cond34
                                        #   Parent Loop BB51_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB51_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB51_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB51_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB51_18
.LBB51_17:                              # %if.else52
                                        #   in Loop: Header=BB51_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB51_18:                              # %if.end66
                                        #   in Loop: Header=BB51_14 Depth=2
	jmp	.LBB51_19
.LBB51_19:                              # %for.inc67
                                        #   in Loop: Header=BB51_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_14
.LBB51_20:                              # %for.end69
                                        #   in Loop: Header=BB51_12 Depth=1
	jmp	.LBB51_21
.LBB51_21:                              # %for.inc70
                                        #   in Loop: Header=BB51_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_12
.LBB51_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB51_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB51_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB51_23 Depth=1
	movl	$0, -4(%rbp)
.LBB51_25:                              # %for.cond76
                                        #   Parent Loop BB51_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB51_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB51_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB51_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB51_29
.LBB51_28:                              # %if.else94
                                        #   in Loop: Header=BB51_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB51_29:                              # %if.end108
                                        #   in Loop: Header=BB51_25 Depth=2
	jmp	.LBB51_30
.LBB51_30:                              # %for.inc109
                                        #   in Loop: Header=BB51_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_25
.LBB51_31:                              # %for.end111
                                        #   in Loop: Header=BB51_23 Depth=1
	jmp	.LBB51_32
.LBB51_32:                              # %for.inc112
                                        #   in Loop: Header=BB51_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_23
.LBB51_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB51_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB51_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB51_34 Depth=1
	movl	$0, -4(%rbp)
.LBB51_36:                              # %for.cond118
                                        #   Parent Loop BB51_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB51_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB51_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB51_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB51_40
.LBB51_39:                              # %if.else136
                                        #   in Loop: Header=BB51_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB51_40:                              # %if.end150
                                        #   in Loop: Header=BB51_36 Depth=2
	jmp	.LBB51_41
.LBB51_41:                              # %for.inc151
                                        #   in Loop: Header=BB51_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_36
.LBB51_42:                              # %for.end153
                                        #   in Loop: Header=BB51_34 Depth=1
	jmp	.LBB51_43
.LBB51_43:                              # %for.inc154
                                        #   in Loop: Header=BB51_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_34
.LBB51_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB51_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB51_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB51_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB51_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB51_49
.LBB51_48:                              # %if.else172
                                        #   in Loop: Header=BB51_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB51_49:                              # %if.end183
                                        #   in Loop: Header=BB51_45 Depth=1
	jmp	.LBB51_50
.LBB51_50:                              # %for.inc184
                                        #   in Loop: Header=BB51_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_45
.LBB51_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB51_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB51_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB51_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB51_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB51_56
.LBB51_55:                              # %if.else202
                                        #   in Loop: Header=BB51_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB51_56:                              # %if.end213
                                        #   in Loop: Header=BB51_52 Depth=1
	jmp	.LBB51_57
.LBB51_57:                              # %for.inc214
                                        #   in Loop: Header=BB51_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_52
.LBB51_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB51_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB51_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB51_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB51_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB51_63
.LBB51_62:                              # %if.else232
                                        #   in Loop: Header=BB51_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB51_63:                              # %if.end243
                                        #   in Loop: Header=BB51_59 Depth=1
	jmp	.LBB51_64
.LBB51_64:                              # %for.inc244
                                        #   in Loop: Header=BB51_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_59
.LBB51_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB51_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB51_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB51_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB51_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB51_70
.LBB51_69:                              # %if.else262
                                        #   in Loop: Header=BB51_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB51_70:                              # %if.end273
                                        #   in Loop: Header=BB51_66 Depth=1
	jmp	.LBB51_71
.LBB51_71:                              # %for.inc274
                                        #   in Loop: Header=BB51_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_66
.LBB51_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB51_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB51_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB51_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB51_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB51_77
.LBB51_76:                              # %if.else292
                                        #   in Loop: Header=BB51_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB51_77:                              # %if.end303
                                        #   in Loop: Header=BB51_73 Depth=1
	jmp	.LBB51_78
.LBB51_78:                              # %for.inc304
                                        #   in Loop: Header=BB51_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_73
.LBB51_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB51_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB51_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB51_80 Depth=1
	movl	$0, -4(%rbp)
.LBB51_82:                              # %for.cond310
                                        #   Parent Loop BB51_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB51_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB51_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB51_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB51_86
.LBB51_85:                              # %if.else328
                                        #   in Loop: Header=BB51_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB51_86:                              # %if.end342
                                        #   in Loop: Header=BB51_82 Depth=2
	jmp	.LBB51_87
.LBB51_87:                              # %for.inc343
                                        #   in Loop: Header=BB51_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_82
.LBB51_88:                              # %for.end345
                                        #   in Loop: Header=BB51_80 Depth=1
	jmp	.LBB51_89
.LBB51_89:                              # %for.inc346
                                        #   in Loop: Header=BB51_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_80
.LBB51_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB51_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB51_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB51_91 Depth=1
	movl	$0, -4(%rbp)
.LBB51_93:                              # %for.cond352
                                        #   Parent Loop BB51_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB51_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB51_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB51_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB51_97
.LBB51_96:                              # %if.else370
                                        #   in Loop: Header=BB51_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB51_97:                              # %if.end384
                                        #   in Loop: Header=BB51_93 Depth=2
	jmp	.LBB51_98
.LBB51_98:                              # %for.inc385
                                        #   in Loop: Header=BB51_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_93
.LBB51_99:                              # %for.end387
                                        #   in Loop: Header=BB51_91 Depth=1
	jmp	.LBB51_100
.LBB51_100:                             # %for.inc388
                                        #   in Loop: Header=BB51_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_91
.LBB51_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB51_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB51_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB51_102 Depth=1
	movl	$0, -4(%rbp)
.LBB51_104:                             # %for.cond394
                                        #   Parent Loop BB51_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB51_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB51_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB51_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB51_108
.LBB51_107:                             # %if.else412
                                        #   in Loop: Header=BB51_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB51_108:                             # %if.end426
                                        #   in Loop: Header=BB51_104 Depth=2
	jmp	.LBB51_109
.LBB51_109:                             # %for.inc427
                                        #   in Loop: Header=BB51_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_104
.LBB51_110:                             # %for.end429
                                        #   in Loop: Header=BB51_102 Depth=1
	jmp	.LBB51_111
.LBB51_111:                             # %for.inc430
                                        #   in Loop: Header=BB51_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_102
.LBB51_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB51_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB51_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB51_113 Depth=1
	movl	$0, -4(%rbp)
.LBB51_115:                             # %for.cond436
                                        #   Parent Loop BB51_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB51_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB51_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB51_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB51_119
.LBB51_118:                             # %if.else454
                                        #   in Loop: Header=BB51_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB51_119:                             # %if.end468
                                        #   in Loop: Header=BB51_115 Depth=2
	jmp	.LBB51_120
.LBB51_120:                             # %for.inc469
                                        #   in Loop: Header=BB51_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_115
.LBB51_121:                             # %for.end471
                                        #   in Loop: Header=BB51_113 Depth=1
	jmp	.LBB51_122
.LBB51_122:                             # %for.inc472
                                        #   in Loop: Header=BB51_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_113
.LBB51_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB51_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB51_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB51_124 Depth=1
	movl	$0, -4(%rbp)
.LBB51_126:                             # %for.cond478
                                        #   Parent Loop BB51_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB51_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB51_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB51_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB51_130
.LBB51_129:                             # %if.else496
                                        #   in Loop: Header=BB51_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB51_130:                             # %if.end510
                                        #   in Loop: Header=BB51_126 Depth=2
	jmp	.LBB51_131
.LBB51_131:                             # %for.inc511
                                        #   in Loop: Header=BB51_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_126
.LBB51_132:                             # %for.end513
                                        #   in Loop: Header=BB51_124 Depth=1
	jmp	.LBB51_133
.LBB51_133:                             # %for.inc514
                                        #   in Loop: Header=BB51_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_124
.LBB51_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB51_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB51_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB51_135 Depth=1
	movl	$0, -4(%rbp)
.LBB51_137:                             # %for.cond520
                                        #   Parent Loop BB51_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB51_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB51_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB51_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB51_141
.LBB51_140:                             # %if.else538
                                        #   in Loop: Header=BB51_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB51_141:                             # %if.end552
                                        #   in Loop: Header=BB51_137 Depth=2
	jmp	.LBB51_142
.LBB51_142:                             # %for.inc553
                                        #   in Loop: Header=BB51_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_137
.LBB51_143:                             # %for.end555
                                        #   in Loop: Header=BB51_135 Depth=1
	jmp	.LBB51_144
.LBB51_144:                             # %for.inc556
                                        #   in Loop: Header=BB51_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_135
.LBB51_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB51_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB51_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB51_146 Depth=1
	movl	$0, -4(%rbp)
.LBB51_148:                             # %for.cond562
                                        #   Parent Loop BB51_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB51_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB51_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB51_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB51_152
.LBB51_151:                             # %if.else580
                                        #   in Loop: Header=BB51_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB51_152:                             # %if.end594
                                        #   in Loop: Header=BB51_148 Depth=2
	jmp	.LBB51_153
.LBB51_153:                             # %for.inc595
                                        #   in Loop: Header=BB51_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_148
.LBB51_154:                             # %for.end597
                                        #   in Loop: Header=BB51_146 Depth=1
	jmp	.LBB51_155
.LBB51_155:                             # %for.inc598
                                        #   in Loop: Header=BB51_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_146
.LBB51_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB51_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB51_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB51_157 Depth=1
	movl	$0, -4(%rbp)
.LBB51_159:                             # %for.cond604
                                        #   Parent Loop BB51_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB51_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB51_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB51_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB51_163
.LBB51_162:                             # %if.else622
                                        #   in Loop: Header=BB51_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB51_163:                             # %if.end636
                                        #   in Loop: Header=BB51_159 Depth=2
	jmp	.LBB51_164
.LBB51_164:                             # %for.inc637
                                        #   in Loop: Header=BB51_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_159
.LBB51_165:                             # %for.end639
                                        #   in Loop: Header=BB51_157 Depth=1
	jmp	.LBB51_166
.LBB51_166:                             # %for.inc640
                                        #   in Loop: Header=BB51_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_157
.LBB51_167:                             # %for.end642
	cmpl	$1766930589, -28(%rbp)  # imm = 0x6951389D
	jne	.LBB51_169
.LBB51_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_168
.Lfunc_end51:
	.size	init_contexts.44, .Lfunc_end51-init_contexts.44
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.45
.LCPI52_0:
	.quad	4611686018427387904     # double 2
.LCPI52_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.45
	.p2align	4, 0x90
	.type	create_context_memory.45,@function
create_context_memory.45:               # @create_context_memory.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$580570115, -20(%rbp)   # imm = 0x229ACC03
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB52_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB52_3
.LBB52_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB52_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB52_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB52_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB52_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB52_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB52_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB52_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB52_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB52_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB52_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB52_11:                              # %if.end10
                                        #   in Loop: Header=BB52_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB52_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB52_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB52_13:                              # %if.end16
                                        #   in Loop: Header=BB52_8 Depth=1
	movl	$0, -8(%rbp)
.LBB52_14:                              # %for.cond17
                                        #   Parent Loop BB52_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB52_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB52_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB52_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB52_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB52_17:                              # %if.end28
                                        #   in Loop: Header=BB52_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB52_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB52_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB52_19:                              # %if.end39
                                        #   in Loop: Header=BB52_14 Depth=2
	jmp	.LBB52_20
.LBB52_20:                              # %for.inc
                                        #   in Loop: Header=BB52_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_14
.LBB52_21:                              # %for.end
                                        #   in Loop: Header=BB52_8 Depth=1
	jmp	.LBB52_22
.LBB52_22:                              # %for.inc40
                                        #   in Loop: Header=BB52_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_8
.LBB52_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB52_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_26 Depth 2
                                        #       Child Loop BB52_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB52_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB52_24 Depth=1
	movl	$0, -8(%rbp)
.LBB52_26:                              # %for.cond47
                                        #   Parent Loop BB52_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB52_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB52_26 Depth=2
	movl	$0, -12(%rbp)
.LBB52_28:                              # %for.cond51
                                        #   Parent Loop BB52_24 Depth=1
                                        #     Parent Loop BB52_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB52_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB52_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB52_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_28
.LBB52_31:                              # %for.end63
                                        #   in Loop: Header=BB52_26 Depth=2
	jmp	.LBB52_32
.LBB52_32:                              # %for.inc64
                                        #   in Loop: Header=BB52_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_26
.LBB52_33:                              # %for.end66
                                        #   in Loop: Header=BB52_24 Depth=1
	jmp	.LBB52_34
.LBB52_34:                              # %for.inc67
                                        #   in Loop: Header=BB52_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_24
.LBB52_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB52_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB52_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB52_36 Depth=1
	vmovsd	.LCPI52_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI52_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI52_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB52_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_36
.LBB52_39:                              # %for.end98
	cmpl	$580570115, -20(%rbp)   # imm = 0x229ACC03
	jne	.LBB52_41
.LBB52_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_40
.Lfunc_end52:
	.size	create_context_memory.45, .Lfunc_end52-create_context_memory.45
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.46        # -- Begin function init_contexts.46
	.p2align	4, 0x90
	.type	init_contexts.46,@function
init_contexts.46:                       # @init_contexts.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1599177776, -28(%rbp)  # imm = 0x5F518430
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB53_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB53_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -4(%rbp)
.LBB53_3:                               # %for.cond2
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB53_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB53_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB53_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB53_7
.LBB53_6:                               # %if.else
                                        #   in Loop: Header=BB53_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB53_7:                               # %if.end
                                        #   in Loop: Header=BB53_3 Depth=2
	jmp	.LBB53_8
.LBB53_8:                               # %for.inc
                                        #   in Loop: Header=BB53_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_3
.LBB53_9:                               # %for.end
                                        #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_10
.LBB53_10:                              # %for.inc28
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_1
.LBB53_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB53_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB53_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB53_12 Depth=1
	movl	$0, -4(%rbp)
.LBB53_14:                              # %for.cond34
                                        #   Parent Loop BB53_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB53_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB53_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB53_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB53_18
.LBB53_17:                              # %if.else52
                                        #   in Loop: Header=BB53_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB53_18:                              # %if.end66
                                        #   in Loop: Header=BB53_14 Depth=2
	jmp	.LBB53_19
.LBB53_19:                              # %for.inc67
                                        #   in Loop: Header=BB53_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_14
.LBB53_20:                              # %for.end69
                                        #   in Loop: Header=BB53_12 Depth=1
	jmp	.LBB53_21
.LBB53_21:                              # %for.inc70
                                        #   in Loop: Header=BB53_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_12
.LBB53_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB53_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB53_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB53_23 Depth=1
	movl	$0, -4(%rbp)
.LBB53_25:                              # %for.cond76
                                        #   Parent Loop BB53_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB53_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB53_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB53_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB53_29
.LBB53_28:                              # %if.else94
                                        #   in Loop: Header=BB53_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB53_29:                              # %if.end108
                                        #   in Loop: Header=BB53_25 Depth=2
	jmp	.LBB53_30
.LBB53_30:                              # %for.inc109
                                        #   in Loop: Header=BB53_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_25
.LBB53_31:                              # %for.end111
                                        #   in Loop: Header=BB53_23 Depth=1
	jmp	.LBB53_32
.LBB53_32:                              # %for.inc112
                                        #   in Loop: Header=BB53_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_23
.LBB53_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB53_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB53_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB53_34 Depth=1
	movl	$0, -4(%rbp)
.LBB53_36:                              # %for.cond118
                                        #   Parent Loop BB53_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB53_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB53_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB53_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB53_40
.LBB53_39:                              # %if.else136
                                        #   in Loop: Header=BB53_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB53_40:                              # %if.end150
                                        #   in Loop: Header=BB53_36 Depth=2
	jmp	.LBB53_41
.LBB53_41:                              # %for.inc151
                                        #   in Loop: Header=BB53_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_36
.LBB53_42:                              # %for.end153
                                        #   in Loop: Header=BB53_34 Depth=1
	jmp	.LBB53_43
.LBB53_43:                              # %for.inc154
                                        #   in Loop: Header=BB53_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_34
.LBB53_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB53_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB53_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB53_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB53_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB53_49
.LBB53_48:                              # %if.else172
                                        #   in Loop: Header=BB53_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB53_49:                              # %if.end183
                                        #   in Loop: Header=BB53_45 Depth=1
	jmp	.LBB53_50
.LBB53_50:                              # %for.inc184
                                        #   in Loop: Header=BB53_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_45
.LBB53_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB53_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB53_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB53_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB53_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB53_56
.LBB53_55:                              # %if.else202
                                        #   in Loop: Header=BB53_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB53_56:                              # %if.end213
                                        #   in Loop: Header=BB53_52 Depth=1
	jmp	.LBB53_57
.LBB53_57:                              # %for.inc214
                                        #   in Loop: Header=BB53_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_52
.LBB53_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB53_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB53_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB53_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB53_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB53_63
.LBB53_62:                              # %if.else232
                                        #   in Loop: Header=BB53_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB53_63:                              # %if.end243
                                        #   in Loop: Header=BB53_59 Depth=1
	jmp	.LBB53_64
.LBB53_64:                              # %for.inc244
                                        #   in Loop: Header=BB53_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_59
.LBB53_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB53_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB53_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB53_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB53_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB53_70
.LBB53_69:                              # %if.else262
                                        #   in Loop: Header=BB53_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB53_70:                              # %if.end273
                                        #   in Loop: Header=BB53_66 Depth=1
	jmp	.LBB53_71
.LBB53_71:                              # %for.inc274
                                        #   in Loop: Header=BB53_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_66
.LBB53_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB53_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB53_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB53_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB53_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB53_77
.LBB53_76:                              # %if.else292
                                        #   in Loop: Header=BB53_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB53_77:                              # %if.end303
                                        #   in Loop: Header=BB53_73 Depth=1
	jmp	.LBB53_78
.LBB53_78:                              # %for.inc304
                                        #   in Loop: Header=BB53_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_73
.LBB53_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB53_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB53_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB53_80 Depth=1
	movl	$0, -4(%rbp)
.LBB53_82:                              # %for.cond310
                                        #   Parent Loop BB53_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB53_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB53_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB53_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB53_86
.LBB53_85:                              # %if.else328
                                        #   in Loop: Header=BB53_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB53_86:                              # %if.end342
                                        #   in Loop: Header=BB53_82 Depth=2
	jmp	.LBB53_87
.LBB53_87:                              # %for.inc343
                                        #   in Loop: Header=BB53_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_82
.LBB53_88:                              # %for.end345
                                        #   in Loop: Header=BB53_80 Depth=1
	jmp	.LBB53_89
.LBB53_89:                              # %for.inc346
                                        #   in Loop: Header=BB53_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_80
.LBB53_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB53_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB53_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB53_91 Depth=1
	movl	$0, -4(%rbp)
.LBB53_93:                              # %for.cond352
                                        #   Parent Loop BB53_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB53_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB53_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB53_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB53_97
.LBB53_96:                              # %if.else370
                                        #   in Loop: Header=BB53_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB53_97:                              # %if.end384
                                        #   in Loop: Header=BB53_93 Depth=2
	jmp	.LBB53_98
.LBB53_98:                              # %for.inc385
                                        #   in Loop: Header=BB53_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_93
.LBB53_99:                              # %for.end387
                                        #   in Loop: Header=BB53_91 Depth=1
	jmp	.LBB53_100
.LBB53_100:                             # %for.inc388
                                        #   in Loop: Header=BB53_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_91
.LBB53_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB53_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB53_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB53_102 Depth=1
	movl	$0, -4(%rbp)
.LBB53_104:                             # %for.cond394
                                        #   Parent Loop BB53_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB53_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB53_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB53_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB53_108
.LBB53_107:                             # %if.else412
                                        #   in Loop: Header=BB53_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB53_108:                             # %if.end426
                                        #   in Loop: Header=BB53_104 Depth=2
	jmp	.LBB53_109
.LBB53_109:                             # %for.inc427
                                        #   in Loop: Header=BB53_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_104
.LBB53_110:                             # %for.end429
                                        #   in Loop: Header=BB53_102 Depth=1
	jmp	.LBB53_111
.LBB53_111:                             # %for.inc430
                                        #   in Loop: Header=BB53_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_102
.LBB53_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB53_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB53_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB53_113 Depth=1
	movl	$0, -4(%rbp)
.LBB53_115:                             # %for.cond436
                                        #   Parent Loop BB53_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB53_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB53_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB53_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB53_119
.LBB53_118:                             # %if.else454
                                        #   in Loop: Header=BB53_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB53_119:                             # %if.end468
                                        #   in Loop: Header=BB53_115 Depth=2
	jmp	.LBB53_120
.LBB53_120:                             # %for.inc469
                                        #   in Loop: Header=BB53_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_115
.LBB53_121:                             # %for.end471
                                        #   in Loop: Header=BB53_113 Depth=1
	jmp	.LBB53_122
.LBB53_122:                             # %for.inc472
                                        #   in Loop: Header=BB53_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_113
.LBB53_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB53_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB53_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB53_124 Depth=1
	movl	$0, -4(%rbp)
.LBB53_126:                             # %for.cond478
                                        #   Parent Loop BB53_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB53_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB53_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB53_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB53_130
.LBB53_129:                             # %if.else496
                                        #   in Loop: Header=BB53_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB53_130:                             # %if.end510
                                        #   in Loop: Header=BB53_126 Depth=2
	jmp	.LBB53_131
.LBB53_131:                             # %for.inc511
                                        #   in Loop: Header=BB53_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_126
.LBB53_132:                             # %for.end513
                                        #   in Loop: Header=BB53_124 Depth=1
	jmp	.LBB53_133
.LBB53_133:                             # %for.inc514
                                        #   in Loop: Header=BB53_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_124
.LBB53_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB53_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB53_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB53_135 Depth=1
	movl	$0, -4(%rbp)
.LBB53_137:                             # %for.cond520
                                        #   Parent Loop BB53_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB53_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB53_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB53_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB53_141
.LBB53_140:                             # %if.else538
                                        #   in Loop: Header=BB53_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB53_141:                             # %if.end552
                                        #   in Loop: Header=BB53_137 Depth=2
	jmp	.LBB53_142
.LBB53_142:                             # %for.inc553
                                        #   in Loop: Header=BB53_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_137
.LBB53_143:                             # %for.end555
                                        #   in Loop: Header=BB53_135 Depth=1
	jmp	.LBB53_144
.LBB53_144:                             # %for.inc556
                                        #   in Loop: Header=BB53_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_135
.LBB53_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB53_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB53_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB53_146 Depth=1
	movl	$0, -4(%rbp)
.LBB53_148:                             # %for.cond562
                                        #   Parent Loop BB53_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB53_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB53_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB53_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB53_152
.LBB53_151:                             # %if.else580
                                        #   in Loop: Header=BB53_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB53_152:                             # %if.end594
                                        #   in Loop: Header=BB53_148 Depth=2
	jmp	.LBB53_153
.LBB53_153:                             # %for.inc595
                                        #   in Loop: Header=BB53_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_148
.LBB53_154:                             # %for.end597
                                        #   in Loop: Header=BB53_146 Depth=1
	jmp	.LBB53_155
.LBB53_155:                             # %for.inc598
                                        #   in Loop: Header=BB53_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_146
.LBB53_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB53_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB53_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB53_157 Depth=1
	movl	$0, -4(%rbp)
.LBB53_159:                             # %for.cond604
                                        #   Parent Loop BB53_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB53_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB53_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB53_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB53_163
.LBB53_162:                             # %if.else622
                                        #   in Loop: Header=BB53_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB53_163:                             # %if.end636
                                        #   in Loop: Header=BB53_159 Depth=2
	jmp	.LBB53_164
.LBB53_164:                             # %for.inc637
                                        #   in Loop: Header=BB53_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_159
.LBB53_165:                             # %for.end639
                                        #   in Loop: Header=BB53_157 Depth=1
	jmp	.LBB53_166
.LBB53_166:                             # %for.inc640
                                        #   in Loop: Header=BB53_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_157
.LBB53_167:                             # %for.end642
	cmpl	$1599177776, -28(%rbp)  # imm = 0x5F518430
	jne	.LBB53_169
.LBB53_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_168
.Lfunc_end53:
	.size	init_contexts.46, .Lfunc_end53-init_contexts.46
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.47
.LCPI54_0:
	.quad	4607182418800017408     # double 1
.LCPI54_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI54_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI54_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.47
	.p2align	4, 0x90
	.type	XRate.47,@function
XRate.47:                               # @XRate.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$863331717, -32(%rbp)   # imm = 0x33756585
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB54_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB54_3
.LBB54_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB54_3:                               # %cond.end
	vmovsd	.LCPI54_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI54_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI54_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI54_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB54_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI54_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB54_6
.LBB54_5:                               # %cond.false6
	vmovsd	.LCPI54_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI54_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI54_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB54_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB54_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB54_9
.LBB54_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB54_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB54_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB54_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB54_13
.LBB54_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB54_13:                              # %cond.end26
	jmp	.LBB54_15
.LBB54_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB54_15
.LBB54_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB54_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB54_18
.LBB54_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB54_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$863331717, -32(%rbp)   # imm = 0x33756585
	jne	.LBB54_20
.LBB54_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB54_19
.Lfunc_end54:
	.size	XRate.47, .Lfunc_end54-XRate.47
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.48       # -- Begin function store_contexts.48
	.p2align	4, 0x90
	.type	store_contexts.48,@function
store_contexts.48:                      # @store_contexts.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1789310602, -16(%rbp)  # imm = 0x6AA6B68A
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -8(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB55_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-8(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB55_3
.LBB55_2:                               # %if.else
	jmp	.LBB55_3
.LBB55_3:                               # %if.end
	cmpl	$1789310602, -16(%rbp)  # imm = 0x6AA6B68A
	jne	.LBB55_5
.LBB55_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_4
.Lfunc_end55:
	.size	store_contexts.48, .Lfunc_end55-store_contexts.48
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.49       # -- Begin function store_contexts.49
	.p2align	4, 0x90
	.type	store_contexts.49,@function
store_contexts.49:                      # @store_contexts.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$399342111, -16(%rbp)   # imm = 0x17CD7A1F
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -12(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB56_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-12(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB56_3
.LBB56_2:                               # %if.else
	jmp	.LBB56_3
.LBB56_3:                               # %if.end
	cmpl	$399342111, -16(%rbp)   # imm = 0x17CD7A1F
	jne	.LBB56_5
.LBB56_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_4
.Lfunc_end56:
	.size	store_contexts.49, .Lfunc_end56-store_contexts.49
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.50
.LCPI57_0:
	.quad	4607182418800017408     # double 1
.LCPI57_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI57_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI57_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.50
	.p2align	4, 0x90
	.type	XRate.50,@function
XRate.50:                               # @XRate.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1750543459, -36(%rbp)  # imm = 0x68572C63
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB57_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB57_3
.LBB57_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB57_3:                               # %cond.end
	vmovsd	.LCPI57_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI57_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI57_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI57_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB57_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI57_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB57_6
.LBB57_5:                               # %cond.false6
	vmovsd	.LCPI57_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI57_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI57_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB57_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB57_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB57_9
.LBB57_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB57_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB57_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB57_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB57_13
.LBB57_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB57_13:                              # %cond.end26
	jmp	.LBB57_15
.LBB57_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB57_15
.LBB57_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB57_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB57_18
.LBB57_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB57_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1750543459, -36(%rbp)  # imm = 0x68572C63
	jne	.LBB57_20
.LBB57_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB57_19
.Lfunc_end57:
	.size	XRate.50, .Lfunc_end57-XRate.50
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.51       # -- Begin function store_contexts.51
	.p2align	4, 0x90
	.type	store_contexts.51,@function
store_contexts.51:                      # @store_contexts.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$778374592, -16(%rbp)   # imm = 0x2E650DC0
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB58_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-4(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB58_3
.LBB58_2:                               # %if.else
	jmp	.LBB58_3
.LBB58_3:                               # %if.end
	cmpl	$778374592, -16(%rbp)   # imm = 0x2E650DC0
	jne	.LBB58_5
.LBB58_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_4
.Lfunc_end58:
	.size	store_contexts.51, .Lfunc_end58-store_contexts.51
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.52       # -- Begin function store_contexts.52
	.p2align	4, 0x90
	.type	store_contexts.52,@function
store_contexts.52:                      # @store_contexts.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1109224371, -16(%rbp)  # imm = 0x421D6BB3
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -8(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB59_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-8(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB59_3
.LBB59_2:                               # %if.else
	jmp	.LBB59_3
.LBB59_3:                               # %if.end
	cmpl	$1109224371, -16(%rbp)  # imm = 0x421D6BB3
	jne	.LBB59_5
.LBB59_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_4
.Lfunc_end59:
	.size	store_contexts.52, .Lfunc_end59-store_contexts.52
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.53
.LCPI60_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.53
	.p2align	4, 0x90
	.type	GetCtxModelNumber.53,@function
GetCtxModelNumber.53:                   # @GetCtxModelNumber.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI60_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1375339049, -44(%rbp)  # imm = 0x51FA0229
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB60_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_3 Depth 2
                                        #       Child Loop BB60_5 Depth 3
                                        #     Child Loop BB60_14 Depth 2
                                        #       Child Loop BB60_16 Depth 3
                                        #     Child Loop BB60_25 Depth 2
                                        #       Child Loop BB60_27 Depth 3
                                        #     Child Loop BB60_36 Depth 2
                                        #       Child Loop BB60_38 Depth 3
                                        #     Child Loop BB60_47 Depth 2
                                        #     Child Loop BB60_54 Depth 2
                                        #     Child Loop BB60_61 Depth 2
                                        #     Child Loop BB60_68 Depth 2
                                        #     Child Loop BB60_75 Depth 2
                                        #     Child Loop BB60_82 Depth 2
                                        #       Child Loop BB60_84 Depth 3
                                        #     Child Loop BB60_93 Depth 2
                                        #       Child Loop BB60_95 Depth 3
                                        #     Child Loop BB60_104 Depth 2
                                        #       Child Loop BB60_106 Depth 3
                                        #     Child Loop BB60_115 Depth 2
                                        #       Child Loop BB60_117 Depth 3
                                        #     Child Loop BB60_126 Depth 2
                                        #       Child Loop BB60_128 Depth 3
                                        #     Child Loop BB60_137 Depth 2
                                        #       Child Loop BB60_139 Depth 3
                                        #     Child Loop BB60_148 Depth 2
                                        #       Child Loop BB60_150 Depth 3
                                        #     Child Loop BB60_159 Depth 2
                                        #       Child Loop BB60_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB60_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB60_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB60_3:                               # %for.cond2
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB60_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB60_3 Depth=2
	movl	$0, -4(%rbp)
.LBB60_5:                               # %for.cond5
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB60_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB60_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB60_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_9
.LBB60_8:                               # %if.else
                                        #   in Loop: Header=BB60_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_9:                               # %if.end
                                        #   in Loop: Header=BB60_5 Depth=3
	jmp	.LBB60_10
.LBB60_10:                              # %for.inc
                                        #   in Loop: Header=BB60_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_5
.LBB60_11:                              # %for.end
                                        #   in Loop: Header=BB60_3 Depth=2
	jmp	.LBB60_12
.LBB60_12:                              # %for.inc33
                                        #   in Loop: Header=BB60_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_3
.LBB60_13:                              # %for.end35
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_14:                              # %for.cond36
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB60_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB60_14 Depth=2
	movl	$0, -4(%rbp)
.LBB60_16:                              # %for.cond39
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB60_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB60_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB60_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_20
.LBB60_19:                              # %if.else58
                                        #   in Loop: Header=BB60_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_20:                              # %if.end73
                                        #   in Loop: Header=BB60_16 Depth=3
	jmp	.LBB60_21
.LBB60_21:                              # %for.inc74
                                        #   in Loop: Header=BB60_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_16
.LBB60_22:                              # %for.end76
                                        #   in Loop: Header=BB60_14 Depth=2
	jmp	.LBB60_23
.LBB60_23:                              # %for.inc77
                                        #   in Loop: Header=BB60_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_14
.LBB60_24:                              # %for.end79
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_25:                              # %for.cond80
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB60_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB60_25 Depth=2
	movl	$0, -4(%rbp)
.LBB60_27:                              # %for.cond83
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB60_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB60_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB60_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_31
.LBB60_30:                              # %if.else102
                                        #   in Loop: Header=BB60_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_31:                              # %if.end117
                                        #   in Loop: Header=BB60_27 Depth=3
	jmp	.LBB60_32
.LBB60_32:                              # %for.inc118
                                        #   in Loop: Header=BB60_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_27
.LBB60_33:                              # %for.end120
                                        #   in Loop: Header=BB60_25 Depth=2
	jmp	.LBB60_34
.LBB60_34:                              # %for.inc121
                                        #   in Loop: Header=BB60_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_25
.LBB60_35:                              # %for.end123
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_36:                              # %for.cond124
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB60_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB60_36 Depth=2
	movl	$0, -4(%rbp)
.LBB60_38:                              # %for.cond127
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB60_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB60_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB60_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_42
.LBB60_41:                              # %if.else146
                                        #   in Loop: Header=BB60_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_42:                              # %if.end161
                                        #   in Loop: Header=BB60_38 Depth=3
	jmp	.LBB60_43
.LBB60_43:                              # %for.inc162
                                        #   in Loop: Header=BB60_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_38
.LBB60_44:                              # %for.end164
                                        #   in Loop: Header=BB60_36 Depth=2
	jmp	.LBB60_45
.LBB60_45:                              # %for.inc165
                                        #   in Loop: Header=BB60_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_36
.LBB60_46:                              # %for.end167
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -4(%rbp)
.LBB60_47:                              # %for.cond168
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB60_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB60_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB60_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_51
.LBB60_50:                              # %if.else184
                                        #   in Loop: Header=BB60_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_51:                              # %if.end196
                                        #   in Loop: Header=BB60_47 Depth=2
	jmp	.LBB60_52
.LBB60_52:                              # %for.inc197
                                        #   in Loop: Header=BB60_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_47
.LBB60_53:                              # %for.end199
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -4(%rbp)
.LBB60_54:                              # %for.cond200
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB60_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB60_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB60_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_58
.LBB60_57:                              # %if.else216
                                        #   in Loop: Header=BB60_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_58:                              # %if.end228
                                        #   in Loop: Header=BB60_54 Depth=2
	jmp	.LBB60_59
.LBB60_59:                              # %for.inc229
                                        #   in Loop: Header=BB60_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_54
.LBB60_60:                              # %for.end231
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -4(%rbp)
.LBB60_61:                              # %for.cond232
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB60_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB60_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB60_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_65
.LBB60_64:                              # %if.else248
                                        #   in Loop: Header=BB60_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_65:                              # %if.end260
                                        #   in Loop: Header=BB60_61 Depth=2
	jmp	.LBB60_66
.LBB60_66:                              # %for.inc261
                                        #   in Loop: Header=BB60_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_61
.LBB60_67:                              # %for.end263
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -4(%rbp)
.LBB60_68:                              # %for.cond264
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB60_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB60_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB60_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_72
.LBB60_71:                              # %if.else280
                                        #   in Loop: Header=BB60_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_72:                              # %if.end292
                                        #   in Loop: Header=BB60_68 Depth=2
	jmp	.LBB60_73
.LBB60_73:                              # %for.inc293
                                        #   in Loop: Header=BB60_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_68
.LBB60_74:                              # %for.end295
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -4(%rbp)
.LBB60_75:                              # %for.cond296
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB60_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB60_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB60_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_79
.LBB60_78:                              # %if.else312
                                        #   in Loop: Header=BB60_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_79:                              # %if.end324
                                        #   in Loop: Header=BB60_75 Depth=2
	jmp	.LBB60_80
.LBB60_80:                              # %for.inc325
                                        #   in Loop: Header=BB60_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_75
.LBB60_81:                              # %for.end327
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_82:                              # %for.cond328
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB60_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB60_82 Depth=2
	movl	$0, -4(%rbp)
.LBB60_84:                              # %for.cond331
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB60_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB60_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB60_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_88
.LBB60_87:                              # %if.else350
                                        #   in Loop: Header=BB60_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_88:                              # %if.end365
                                        #   in Loop: Header=BB60_84 Depth=3
	jmp	.LBB60_89
.LBB60_89:                              # %for.inc366
                                        #   in Loop: Header=BB60_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_84
.LBB60_90:                              # %for.end368
                                        #   in Loop: Header=BB60_82 Depth=2
	jmp	.LBB60_91
.LBB60_91:                              # %for.inc369
                                        #   in Loop: Header=BB60_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_82
.LBB60_92:                              # %for.end371
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_93:                              # %for.cond372
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB60_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB60_93 Depth=2
	movl	$0, -4(%rbp)
.LBB60_95:                              # %for.cond375
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB60_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB60_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB60_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_99
.LBB60_98:                              # %if.else394
                                        #   in Loop: Header=BB60_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_99:                              # %if.end409
                                        #   in Loop: Header=BB60_95 Depth=3
	jmp	.LBB60_100
.LBB60_100:                             # %for.inc410
                                        #   in Loop: Header=BB60_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_95
.LBB60_101:                             # %for.end412
                                        #   in Loop: Header=BB60_93 Depth=2
	jmp	.LBB60_102
.LBB60_102:                             # %for.inc413
                                        #   in Loop: Header=BB60_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_93
.LBB60_103:                             # %for.end415
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_104:                             # %for.cond416
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB60_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB60_104 Depth=2
	movl	$0, -4(%rbp)
.LBB60_106:                             # %for.cond419
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB60_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB60_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB60_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_110
.LBB60_109:                             # %if.else438
                                        #   in Loop: Header=BB60_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_110:                             # %if.end453
                                        #   in Loop: Header=BB60_106 Depth=3
	jmp	.LBB60_111
.LBB60_111:                             # %for.inc454
                                        #   in Loop: Header=BB60_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_106
.LBB60_112:                             # %for.end456
                                        #   in Loop: Header=BB60_104 Depth=2
	jmp	.LBB60_113
.LBB60_113:                             # %for.inc457
                                        #   in Loop: Header=BB60_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_104
.LBB60_114:                             # %for.end459
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_115:                             # %for.cond460
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB60_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB60_115 Depth=2
	movl	$0, -4(%rbp)
.LBB60_117:                             # %for.cond463
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB60_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB60_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB60_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_121
.LBB60_120:                             # %if.else482
                                        #   in Loop: Header=BB60_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_121:                             # %if.end497
                                        #   in Loop: Header=BB60_117 Depth=3
	jmp	.LBB60_122
.LBB60_122:                             # %for.inc498
                                        #   in Loop: Header=BB60_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_117
.LBB60_123:                             # %for.end500
                                        #   in Loop: Header=BB60_115 Depth=2
	jmp	.LBB60_124
.LBB60_124:                             # %for.inc501
                                        #   in Loop: Header=BB60_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_115
.LBB60_125:                             # %for.end503
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_126:                             # %for.cond504
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB60_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB60_126 Depth=2
	movl	$0, -4(%rbp)
.LBB60_128:                             # %for.cond507
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB60_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB60_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB60_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_132
.LBB60_131:                             # %if.else526
                                        #   in Loop: Header=BB60_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_132:                             # %if.end541
                                        #   in Loop: Header=BB60_128 Depth=3
	jmp	.LBB60_133
.LBB60_133:                             # %for.inc542
                                        #   in Loop: Header=BB60_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_128
.LBB60_134:                             # %for.end544
                                        #   in Loop: Header=BB60_126 Depth=2
	jmp	.LBB60_135
.LBB60_135:                             # %for.inc545
                                        #   in Loop: Header=BB60_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_126
.LBB60_136:                             # %for.end547
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_137:                             # %for.cond548
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB60_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB60_137 Depth=2
	movl	$0, -4(%rbp)
.LBB60_139:                             # %for.cond551
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB60_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB60_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB60_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_143
.LBB60_142:                             # %if.else570
                                        #   in Loop: Header=BB60_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_143:                             # %if.end585
                                        #   in Loop: Header=BB60_139 Depth=3
	jmp	.LBB60_144
.LBB60_144:                             # %for.inc586
                                        #   in Loop: Header=BB60_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_139
.LBB60_145:                             # %for.end588
                                        #   in Loop: Header=BB60_137 Depth=2
	jmp	.LBB60_146
.LBB60_146:                             # %for.inc589
                                        #   in Loop: Header=BB60_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_137
.LBB60_147:                             # %for.end591
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_148:                             # %for.cond592
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB60_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB60_148 Depth=2
	movl	$0, -4(%rbp)
.LBB60_150:                             # %for.cond595
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB60_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB60_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB60_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_154
.LBB60_153:                             # %if.else614
                                        #   in Loop: Header=BB60_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_154:                             # %if.end629
                                        #   in Loop: Header=BB60_150 Depth=3
	jmp	.LBB60_155
.LBB60_155:                             # %for.inc630
                                        #   in Loop: Header=BB60_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_150
.LBB60_156:                             # %for.end632
                                        #   in Loop: Header=BB60_148 Depth=2
	jmp	.LBB60_157
.LBB60_157:                             # %for.inc633
                                        #   in Loop: Header=BB60_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_148
.LBB60_158:                             # %for.end635
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_159:                             # %for.cond636
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB60_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB60_159 Depth=2
	movl	$0, -4(%rbp)
.LBB60_161:                             # %for.cond639
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB60_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB60_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB60_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_165
.LBB60_164:                             # %if.else658
                                        #   in Loop: Header=BB60_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_165:                             # %if.end673
                                        #   in Loop: Header=BB60_161 Depth=3
	jmp	.LBB60_166
.LBB60_166:                             # %for.inc674
                                        #   in Loop: Header=BB60_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_161
.LBB60_167:                             # %for.end676
                                        #   in Loop: Header=BB60_159 Depth=2
	jmp	.LBB60_168
.LBB60_168:                             # %for.inc677
                                        #   in Loop: Header=BB60_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_159
.LBB60_169:                             # %for.end679
                                        #   in Loop: Header=BB60_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB60_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB60_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB60_171:                             # %if.end682
                                        #   in Loop: Header=BB60_1 Depth=1
	jmp	.LBB60_172
.LBB60_172:                             # %for.inc683
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_1
.LBB60_173:                             # %for.end685
	cmpl	$1375339049, -44(%rbp)  # imm = 0x51FA0229
	jne	.LBB60_175
.LBB60_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_174
.Lfunc_end60:
	.size	GetCtxModelNumber.53, .Lfunc_end60-GetCtxModelNumber.53
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.54    # -- Begin function SetCtxModelNumber.54
	.p2align	4, 0x90
	.type	SetCtxModelNumber.54,@function
SetCtxModelNumber.54:                   # @SetCtxModelNumber.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$607382684, -16(%rbp)   # imm = 0x2433EC9C
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB61_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB61_11
.LBB61_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB61_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB61_11
.LBB61_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB61_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB61_11
.LBB61_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB61_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB61_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB61_10
.LBB61_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB61_10:                              # %if.end38
	jmp	.LBB61_11
.LBB61_11:                              # %if.end39
	cmpl	$607382684, -16(%rbp)   # imm = 0x2433EC9C
	jne	.LBB61_13
.LBB61_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_12
.Lfunc_end61:
	.size	SetCtxModelNumber.54, .Lfunc_end61-SetCtxModelNumber.54
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.55
.LCPI62_0:
	.quad	4607182418800017408     # double 1
.LCPI62_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI62_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI62_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.55
	.p2align	4, 0x90
	.type	XRate.55,@function
XRate.55:                               # @XRate.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$366392886, -36(%rbp)   # imm = 0x15D6B636
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB62_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB62_3
.LBB62_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB62_3:                               # %cond.end
	vmovsd	.LCPI62_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI62_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI62_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI62_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB62_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI62_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB62_6
.LBB62_5:                               # %cond.false6
	vmovsd	.LCPI62_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI62_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI62_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB62_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB62_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB62_9
.LBB62_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB62_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB62_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB62_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB62_13
.LBB62_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB62_13:                              # %cond.end26
	jmp	.LBB62_15
.LBB62_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB62_15
.LBB62_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB62_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB62_18
.LBB62_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB62_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$366392886, -36(%rbp)   # imm = 0x15D6B636
	jne	.LBB62_20
.LBB62_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB62_19
.Lfunc_end62:
	.size	XRate.55, .Lfunc_end62-XRate.55
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.56    # -- Begin function SetCtxModelNumber.56
	.p2align	4, 0x90
	.type	SetCtxModelNumber.56,@function
SetCtxModelNumber.56:                   # @SetCtxModelNumber.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$733286367, -16(%rbp)   # imm = 0x2BB50FDF
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB63_11
.LBB63_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB63_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB63_11
.LBB63_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB63_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB63_11
.LBB63_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB63_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB63_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB63_10
.LBB63_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB63_10:                              # %if.end38
	jmp	.LBB63_11
.LBB63_11:                              # %if.end39
	cmpl	$733286367, -16(%rbp)   # imm = 0x2BB50FDF
	jne	.LBB63_13
.LBB63_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_12
.Lfunc_end63:
	.size	SetCtxModelNumber.56, .Lfunc_end63-SetCtxModelNumber.56
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.57
.LCPI64_0:
	.quad	4611686018427387904     # double 2
.LCPI64_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.57
	.p2align	4, 0x90
	.type	create_context_memory.57,@function
create_context_memory.57:               # @create_context_memory.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1740793030, -20(%rbp)  # imm = 0x67C264C6
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB64_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB64_3
.LBB64_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB64_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB64_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB64_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB64_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB64_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB64_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB64_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB64_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB64_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB64_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB64_11:                              # %if.end10
                                        #   in Loop: Header=BB64_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB64_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB64_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB64_13:                              # %if.end16
                                        #   in Loop: Header=BB64_8 Depth=1
	movl	$0, -8(%rbp)
.LBB64_14:                              # %for.cond17
                                        #   Parent Loop BB64_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB64_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB64_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB64_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB64_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB64_17:                              # %if.end28
                                        #   in Loop: Header=BB64_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB64_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB64_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB64_19:                              # %if.end39
                                        #   in Loop: Header=BB64_14 Depth=2
	jmp	.LBB64_20
.LBB64_20:                              # %for.inc
                                        #   in Loop: Header=BB64_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_14
.LBB64_21:                              # %for.end
                                        #   in Loop: Header=BB64_8 Depth=1
	jmp	.LBB64_22
.LBB64_22:                              # %for.inc40
                                        #   in Loop: Header=BB64_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_8
.LBB64_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB64_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_26 Depth 2
                                        #       Child Loop BB64_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB64_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB64_24 Depth=1
	movl	$0, -8(%rbp)
.LBB64_26:                              # %for.cond47
                                        #   Parent Loop BB64_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB64_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB64_26 Depth=2
	movl	$0, -12(%rbp)
.LBB64_28:                              # %for.cond51
                                        #   Parent Loop BB64_24 Depth=1
                                        #     Parent Loop BB64_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB64_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB64_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB64_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_28
.LBB64_31:                              # %for.end63
                                        #   in Loop: Header=BB64_26 Depth=2
	jmp	.LBB64_32
.LBB64_32:                              # %for.inc64
                                        #   in Loop: Header=BB64_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_26
.LBB64_33:                              # %for.end66
                                        #   in Loop: Header=BB64_24 Depth=1
	jmp	.LBB64_34
.LBB64_34:                              # %for.inc67
                                        #   in Loop: Header=BB64_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_24
.LBB64_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB64_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB64_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB64_36 Depth=1
	vmovsd	.LCPI64_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI64_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI64_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB64_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_36
.LBB64_39:                              # %for.end98
	cmpl	$1740793030, -20(%rbp)  # imm = 0x67C264C6
	jne	.LBB64_41
.LBB64_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_40
.Lfunc_end64:
	.size	create_context_memory.57, .Lfunc_end64-create_context_memory.57
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.58
.LCPI65_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.58
	.p2align	4, 0x90
	.type	GetCtxModelNumber.58,@function
GetCtxModelNumber.58:                   # @GetCtxModelNumber.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI65_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1565756215, -48(%rbp)  # imm = 0x5D538B37
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB65_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_3 Depth 2
                                        #       Child Loop BB65_5 Depth 3
                                        #     Child Loop BB65_14 Depth 2
                                        #       Child Loop BB65_16 Depth 3
                                        #     Child Loop BB65_25 Depth 2
                                        #       Child Loop BB65_27 Depth 3
                                        #     Child Loop BB65_36 Depth 2
                                        #       Child Loop BB65_38 Depth 3
                                        #     Child Loop BB65_47 Depth 2
                                        #     Child Loop BB65_54 Depth 2
                                        #     Child Loop BB65_61 Depth 2
                                        #     Child Loop BB65_68 Depth 2
                                        #     Child Loop BB65_75 Depth 2
                                        #     Child Loop BB65_82 Depth 2
                                        #       Child Loop BB65_84 Depth 3
                                        #     Child Loop BB65_93 Depth 2
                                        #       Child Loop BB65_95 Depth 3
                                        #     Child Loop BB65_104 Depth 2
                                        #       Child Loop BB65_106 Depth 3
                                        #     Child Loop BB65_115 Depth 2
                                        #       Child Loop BB65_117 Depth 3
                                        #     Child Loop BB65_126 Depth 2
                                        #       Child Loop BB65_128 Depth 3
                                        #     Child Loop BB65_137 Depth 2
                                        #       Child Loop BB65_139 Depth 3
                                        #     Child Loop BB65_148 Depth 2
                                        #       Child Loop BB65_150 Depth 3
                                        #     Child Loop BB65_159 Depth 2
                                        #       Child Loop BB65_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB65_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB65_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB65_3:                               # %for.cond2
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB65_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB65_3 Depth=2
	movl	$0, -4(%rbp)
.LBB65_5:                               # %for.cond5
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB65_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB65_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB65_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_9
.LBB65_8:                               # %if.else
                                        #   in Loop: Header=BB65_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_9:                               # %if.end
                                        #   in Loop: Header=BB65_5 Depth=3
	jmp	.LBB65_10
.LBB65_10:                              # %for.inc
                                        #   in Loop: Header=BB65_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_5
.LBB65_11:                              # %for.end
                                        #   in Loop: Header=BB65_3 Depth=2
	jmp	.LBB65_12
.LBB65_12:                              # %for.inc33
                                        #   in Loop: Header=BB65_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_3
.LBB65_13:                              # %for.end35
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_14:                              # %for.cond36
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB65_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB65_14 Depth=2
	movl	$0, -4(%rbp)
.LBB65_16:                              # %for.cond39
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB65_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB65_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB65_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_20
.LBB65_19:                              # %if.else58
                                        #   in Loop: Header=BB65_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_20:                              # %if.end73
                                        #   in Loop: Header=BB65_16 Depth=3
	jmp	.LBB65_21
.LBB65_21:                              # %for.inc74
                                        #   in Loop: Header=BB65_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_16
.LBB65_22:                              # %for.end76
                                        #   in Loop: Header=BB65_14 Depth=2
	jmp	.LBB65_23
.LBB65_23:                              # %for.inc77
                                        #   in Loop: Header=BB65_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_14
.LBB65_24:                              # %for.end79
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_25:                              # %for.cond80
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB65_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB65_25 Depth=2
	movl	$0, -4(%rbp)
.LBB65_27:                              # %for.cond83
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB65_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB65_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB65_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_31
.LBB65_30:                              # %if.else102
                                        #   in Loop: Header=BB65_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_31:                              # %if.end117
                                        #   in Loop: Header=BB65_27 Depth=3
	jmp	.LBB65_32
.LBB65_32:                              # %for.inc118
                                        #   in Loop: Header=BB65_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_27
.LBB65_33:                              # %for.end120
                                        #   in Loop: Header=BB65_25 Depth=2
	jmp	.LBB65_34
.LBB65_34:                              # %for.inc121
                                        #   in Loop: Header=BB65_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_25
.LBB65_35:                              # %for.end123
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_36:                              # %for.cond124
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB65_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB65_36 Depth=2
	movl	$0, -4(%rbp)
.LBB65_38:                              # %for.cond127
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB65_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB65_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB65_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_42
.LBB65_41:                              # %if.else146
                                        #   in Loop: Header=BB65_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_42:                              # %if.end161
                                        #   in Loop: Header=BB65_38 Depth=3
	jmp	.LBB65_43
.LBB65_43:                              # %for.inc162
                                        #   in Loop: Header=BB65_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_38
.LBB65_44:                              # %for.end164
                                        #   in Loop: Header=BB65_36 Depth=2
	jmp	.LBB65_45
.LBB65_45:                              # %for.inc165
                                        #   in Loop: Header=BB65_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_36
.LBB65_46:                              # %for.end167
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -4(%rbp)
.LBB65_47:                              # %for.cond168
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB65_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB65_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB65_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_51
.LBB65_50:                              # %if.else184
                                        #   in Loop: Header=BB65_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_51:                              # %if.end196
                                        #   in Loop: Header=BB65_47 Depth=2
	jmp	.LBB65_52
.LBB65_52:                              # %for.inc197
                                        #   in Loop: Header=BB65_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_47
.LBB65_53:                              # %for.end199
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -4(%rbp)
.LBB65_54:                              # %for.cond200
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB65_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB65_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB65_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_58
.LBB65_57:                              # %if.else216
                                        #   in Loop: Header=BB65_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_58:                              # %if.end228
                                        #   in Loop: Header=BB65_54 Depth=2
	jmp	.LBB65_59
.LBB65_59:                              # %for.inc229
                                        #   in Loop: Header=BB65_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_54
.LBB65_60:                              # %for.end231
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -4(%rbp)
.LBB65_61:                              # %for.cond232
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB65_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB65_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB65_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_65
.LBB65_64:                              # %if.else248
                                        #   in Loop: Header=BB65_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_65:                              # %if.end260
                                        #   in Loop: Header=BB65_61 Depth=2
	jmp	.LBB65_66
.LBB65_66:                              # %for.inc261
                                        #   in Loop: Header=BB65_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_61
.LBB65_67:                              # %for.end263
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -4(%rbp)
.LBB65_68:                              # %for.cond264
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB65_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB65_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB65_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_72
.LBB65_71:                              # %if.else280
                                        #   in Loop: Header=BB65_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_72:                              # %if.end292
                                        #   in Loop: Header=BB65_68 Depth=2
	jmp	.LBB65_73
.LBB65_73:                              # %for.inc293
                                        #   in Loop: Header=BB65_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_68
.LBB65_74:                              # %for.end295
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -4(%rbp)
.LBB65_75:                              # %for.cond296
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB65_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB65_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB65_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_79
.LBB65_78:                              # %if.else312
                                        #   in Loop: Header=BB65_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_79:                              # %if.end324
                                        #   in Loop: Header=BB65_75 Depth=2
	jmp	.LBB65_80
.LBB65_80:                              # %for.inc325
                                        #   in Loop: Header=BB65_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_75
.LBB65_81:                              # %for.end327
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_82:                              # %for.cond328
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB65_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB65_82 Depth=2
	movl	$0, -4(%rbp)
.LBB65_84:                              # %for.cond331
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB65_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB65_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB65_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_88
.LBB65_87:                              # %if.else350
                                        #   in Loop: Header=BB65_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_88:                              # %if.end365
                                        #   in Loop: Header=BB65_84 Depth=3
	jmp	.LBB65_89
.LBB65_89:                              # %for.inc366
                                        #   in Loop: Header=BB65_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_84
.LBB65_90:                              # %for.end368
                                        #   in Loop: Header=BB65_82 Depth=2
	jmp	.LBB65_91
.LBB65_91:                              # %for.inc369
                                        #   in Loop: Header=BB65_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_82
.LBB65_92:                              # %for.end371
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_93:                              # %for.cond372
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB65_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB65_93 Depth=2
	movl	$0, -4(%rbp)
.LBB65_95:                              # %for.cond375
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB65_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB65_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB65_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_99
.LBB65_98:                              # %if.else394
                                        #   in Loop: Header=BB65_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_99:                              # %if.end409
                                        #   in Loop: Header=BB65_95 Depth=3
	jmp	.LBB65_100
.LBB65_100:                             # %for.inc410
                                        #   in Loop: Header=BB65_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_95
.LBB65_101:                             # %for.end412
                                        #   in Loop: Header=BB65_93 Depth=2
	jmp	.LBB65_102
.LBB65_102:                             # %for.inc413
                                        #   in Loop: Header=BB65_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_93
.LBB65_103:                             # %for.end415
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_104:                             # %for.cond416
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB65_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB65_104 Depth=2
	movl	$0, -4(%rbp)
.LBB65_106:                             # %for.cond419
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB65_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB65_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB65_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_110
.LBB65_109:                             # %if.else438
                                        #   in Loop: Header=BB65_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_110:                             # %if.end453
                                        #   in Loop: Header=BB65_106 Depth=3
	jmp	.LBB65_111
.LBB65_111:                             # %for.inc454
                                        #   in Loop: Header=BB65_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_106
.LBB65_112:                             # %for.end456
                                        #   in Loop: Header=BB65_104 Depth=2
	jmp	.LBB65_113
.LBB65_113:                             # %for.inc457
                                        #   in Loop: Header=BB65_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_104
.LBB65_114:                             # %for.end459
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_115:                             # %for.cond460
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB65_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB65_115 Depth=2
	movl	$0, -4(%rbp)
.LBB65_117:                             # %for.cond463
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB65_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB65_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB65_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_121
.LBB65_120:                             # %if.else482
                                        #   in Loop: Header=BB65_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_121:                             # %if.end497
                                        #   in Loop: Header=BB65_117 Depth=3
	jmp	.LBB65_122
.LBB65_122:                             # %for.inc498
                                        #   in Loop: Header=BB65_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_117
.LBB65_123:                             # %for.end500
                                        #   in Loop: Header=BB65_115 Depth=2
	jmp	.LBB65_124
.LBB65_124:                             # %for.inc501
                                        #   in Loop: Header=BB65_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_115
.LBB65_125:                             # %for.end503
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_126:                             # %for.cond504
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB65_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB65_126 Depth=2
	movl	$0, -4(%rbp)
.LBB65_128:                             # %for.cond507
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB65_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB65_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB65_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_132
.LBB65_131:                             # %if.else526
                                        #   in Loop: Header=BB65_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_132:                             # %if.end541
                                        #   in Loop: Header=BB65_128 Depth=3
	jmp	.LBB65_133
.LBB65_133:                             # %for.inc542
                                        #   in Loop: Header=BB65_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_128
.LBB65_134:                             # %for.end544
                                        #   in Loop: Header=BB65_126 Depth=2
	jmp	.LBB65_135
.LBB65_135:                             # %for.inc545
                                        #   in Loop: Header=BB65_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_126
.LBB65_136:                             # %for.end547
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_137:                             # %for.cond548
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB65_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB65_137 Depth=2
	movl	$0, -4(%rbp)
.LBB65_139:                             # %for.cond551
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB65_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB65_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB65_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_143
.LBB65_142:                             # %if.else570
                                        #   in Loop: Header=BB65_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_143:                             # %if.end585
                                        #   in Loop: Header=BB65_139 Depth=3
	jmp	.LBB65_144
.LBB65_144:                             # %for.inc586
                                        #   in Loop: Header=BB65_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_139
.LBB65_145:                             # %for.end588
                                        #   in Loop: Header=BB65_137 Depth=2
	jmp	.LBB65_146
.LBB65_146:                             # %for.inc589
                                        #   in Loop: Header=BB65_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_137
.LBB65_147:                             # %for.end591
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_148:                             # %for.cond592
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB65_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB65_148 Depth=2
	movl	$0, -4(%rbp)
.LBB65_150:                             # %for.cond595
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB65_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB65_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB65_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_154
.LBB65_153:                             # %if.else614
                                        #   in Loop: Header=BB65_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_154:                             # %if.end629
                                        #   in Loop: Header=BB65_150 Depth=3
	jmp	.LBB65_155
.LBB65_155:                             # %for.inc630
                                        #   in Loop: Header=BB65_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_150
.LBB65_156:                             # %for.end632
                                        #   in Loop: Header=BB65_148 Depth=2
	jmp	.LBB65_157
.LBB65_157:                             # %for.inc633
                                        #   in Loop: Header=BB65_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_148
.LBB65_158:                             # %for.end635
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_159:                             # %for.cond636
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB65_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB65_159 Depth=2
	movl	$0, -4(%rbp)
.LBB65_161:                             # %for.cond639
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB65_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB65_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB65_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_165
.LBB65_164:                             # %if.else658
                                        #   in Loop: Header=BB65_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_165:                             # %if.end673
                                        #   in Loop: Header=BB65_161 Depth=3
	jmp	.LBB65_166
.LBB65_166:                             # %for.inc674
                                        #   in Loop: Header=BB65_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_161
.LBB65_167:                             # %for.end676
                                        #   in Loop: Header=BB65_159 Depth=2
	jmp	.LBB65_168
.LBB65_168:                             # %for.inc677
                                        #   in Loop: Header=BB65_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_159
.LBB65_169:                             # %for.end679
                                        #   in Loop: Header=BB65_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB65_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB65_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB65_171:                             # %if.end682
                                        #   in Loop: Header=BB65_1 Depth=1
	jmp	.LBB65_172
.LBB65_172:                             # %for.inc683
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_1
.LBB65_173:                             # %for.end685
	cmpl	$1565756215, -48(%rbp)  # imm = 0x5D538B37
	jne	.LBB65_175
.LBB65_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_174
.Lfunc_end65:
	.size	GetCtxModelNumber.58, .Lfunc_end65-GetCtxModelNumber.58
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.59       # -- Begin function store_contexts.59
	.p2align	4, 0x90
	.type	store_contexts.59,@function
store_contexts.59:                      # @store_contexts.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1910229462, -16(%rbp)  # imm = 0x71DBC9D6
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -12(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB66_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-12(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB66_3
.LBB66_2:                               # %if.else
	jmp	.LBB66_3
.LBB66_3:                               # %if.end
	cmpl	$1910229462, -16(%rbp)  # imm = 0x71DBC9D6
	jne	.LBB66_5
.LBB66_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_4
.Lfunc_end66:
	.size	store_contexts.59, .Lfunc_end66-store_contexts.59
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.60
.LCPI67_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.60
	.p2align	4, 0x90
	.type	GetCtxModelNumber.60,@function
GetCtxModelNumber.60:                   # @GetCtxModelNumber.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI67_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$16339211, -48(%rbp)    # imm = 0xF9510B
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB67_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_3 Depth 2
                                        #       Child Loop BB67_5 Depth 3
                                        #     Child Loop BB67_14 Depth 2
                                        #       Child Loop BB67_16 Depth 3
                                        #     Child Loop BB67_25 Depth 2
                                        #       Child Loop BB67_27 Depth 3
                                        #     Child Loop BB67_36 Depth 2
                                        #       Child Loop BB67_38 Depth 3
                                        #     Child Loop BB67_47 Depth 2
                                        #     Child Loop BB67_54 Depth 2
                                        #     Child Loop BB67_61 Depth 2
                                        #     Child Loop BB67_68 Depth 2
                                        #     Child Loop BB67_75 Depth 2
                                        #     Child Loop BB67_82 Depth 2
                                        #       Child Loop BB67_84 Depth 3
                                        #     Child Loop BB67_93 Depth 2
                                        #       Child Loop BB67_95 Depth 3
                                        #     Child Loop BB67_104 Depth 2
                                        #       Child Loop BB67_106 Depth 3
                                        #     Child Loop BB67_115 Depth 2
                                        #       Child Loop BB67_117 Depth 3
                                        #     Child Loop BB67_126 Depth 2
                                        #       Child Loop BB67_128 Depth 3
                                        #     Child Loop BB67_137 Depth 2
                                        #       Child Loop BB67_139 Depth 3
                                        #     Child Loop BB67_148 Depth 2
                                        #       Child Loop BB67_150 Depth 3
                                        #     Child Loop BB67_159 Depth 2
                                        #       Child Loop BB67_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB67_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB67_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB67_3:                               # %for.cond2
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB67_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB67_3 Depth=2
	movl	$0, -4(%rbp)
.LBB67_5:                               # %for.cond5
                                        #   Parent Loop BB67_1 Depth=1
                                        #     Parent Loop BB67_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB67_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB67_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB67_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB67_9
.LBB67_8:                               # %if.else
                                        #   in Loop: Header=BB67_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB67_9:                               # %if.end
                                        #   in Loop: Header=BB67_5 Depth=3
	jmp	.LBB67_10
.LBB67_10:                              # %for.inc
                                        #   in Loop: Header=BB67_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_5
.LBB67_11:                              # %for.end
                                        #   in Loop: Header=BB67_3 Depth=2
	jmp	.LBB67_12
.LBB67_12:                              # %for.inc33
                                        #   in Loop: Header=BB67_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_3
.LBB67_13:                              # %for.end35
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -8(%rbp)
.LBB67_14:                              # %for.cond36
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB67_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB67_14 Depth=2
	movl	$0, -4(%rbp)
.LBB67_16:                              # %for.cond39
                                        #   Parent Loop BB67_1 Depth=1
                                        #     Parent Loop BB67_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB67_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB67_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB67_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB67_20
.LBB67_19:                              # %if.else58
                                        #   in Loop: Header=BB67_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB67_20:                              # %if.end73
                                        #   in Loop: Header=BB67_16 Depth=3
	jmp	.LBB67_21
.LBB67_21:                              # %for.inc74
                                        #   in Loop: Header=BB67_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_16
.LBB67_22:                              # %for.end76
                                        #   in Loop: Header=BB67_14 Depth=2
	jmp	.LBB67_23
.LBB67_23:                              # %for.inc77
                                        #   in Loop: Header=BB67_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_14
.LBB67_24:                              # %for.end79
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -8(%rbp)
.LBB67_25:                              # %for.cond80
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB67_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB67_25 Depth=2
	movl	$0, -4(%rbp)
.LBB67_27:                              # %for.cond83
                                        #   Parent Loop BB67_1 Depth=1
                                        #     Parent Loop BB67_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB67_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB67_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB67_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB67_31
.LBB67_30:                              # %if.else102
                                        #   in Loop: Header=BB67_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB67_31:                              # %if.end117
                                        #   in Loop: Header=BB67_27 Depth=3
	jmp	.LBB67_32
.LBB67_32:                              # %for.inc118
                                        #   in Loop: Header=BB67_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_27
.LBB67_33:                              # %for.end120
                                        #   in Loop: Header=BB67_25 Depth=2
	jmp	.LBB67_34
.LBB67_34:                              # %for.inc121
                                        #   in Loop: Header=BB67_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_25
.LBB67_35:                              # %for.end123
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -8(%rbp)
.LBB67_36:                              # %for.cond124
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB67_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB67_36 Depth=2
	movl	$0, -4(%rbp)
.LBB67_38:                              # %for.cond127
                                        #   Parent Loop BB67_1 Depth=1
                                        #     Parent Loop BB67_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB67_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB67_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB67_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB67_42
.LBB67_41:                              # %if.else146
                                        #   in Loop: Header=BB67_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB67_42:                              # %if.end161
                                        #   in Loop: Header=BB67_38 Depth=3
	jmp	.LBB67_43
.LBB67_43:                              # %for.inc162
                                        #   in Loop: Header=BB67_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_38
.LBB67_44:                              # %for.end164
                                        #   in Loop: Header=BB67_36 Depth=2
	jmp	.LBB67_45
.LBB67_45:                              # %for.inc165
                                        #   in Loop: Header=BB67_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_36
.LBB67_46:                              # %for.end167
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -4(%rbp)
.LBB67_47:                              # %for.cond168
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB67_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB67_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB67_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB67_51
.LBB67_50:                              # %if.else184
                                        #   in Loop: Header=BB67_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB67_51:                              # %if.end196
                                        #   in Loop: Header=BB67_47 Depth=2
	jmp	.LBB67_52
.LBB67_52:                              # %for.inc197
                                        #   in Loop: Header=BB67_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_47
.LBB67_53:                              # %for.end199
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -4(%rbp)
.LBB67_54:                              # %for.cond200
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB67_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB67_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB67_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB67_58
.LBB67_57:                              # %if.else216
                                        #   in Loop: Header=BB67_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB67_58:                              # %if.end228
                                        #   in Loop: Header=BB67_54 Depth=2
	jmp	.LBB67_59
.LBB67_59:                              # %for.inc229
                                        #   in Loop: Header=BB67_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_54
.LBB67_60:                              # %for.end231
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -4(%rbp)
.LBB67_61:                              # %for.cond232
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB67_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB67_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB67_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB67_65
.LBB67_64:                              # %if.else248
                                        #   in Loop: Header=BB67_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB67_65:                              # %if.end260
                                        #   in Loop: Header=BB67_61 Depth=2
	jmp	.LBB67_66
.LBB67_66:                              # %for.inc261
                                        #   in Loop: Header=BB67_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_61
.LBB67_67:                              # %for.end263
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -4(%rbp)
.LBB67_68:                              # %for.cond264
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB67_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB67_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB67_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB67_72
.LBB67_71:                              # %if.else280
                                        #   in Loop: Header=BB67_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB67_72:                              # %if.end292
                                        #   in Loop: Header=BB67_68 Depth=2
	jmp	.LBB67_73
.LBB67_73:                              # %for.inc293
                                        #   in Loop: Header=BB67_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_68
.LBB67_74:                              # %for.end295
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -4(%rbp)
.LBB67_75:                              # %for.cond296
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB67_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB67_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB67_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB67_79
.LBB67_78:                              # %if.else312
                                        #   in Loop: Header=BB67_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB67_79:                              # %if.end324
                                        #   in Loop: Header=BB67_75 Depth=2
	jmp	.LBB67_80
.LBB67_80:                              # %for.inc325
                                        #   in Loop: Header=BB67_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_75
.LBB67_81:                              # %for.end327
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -8(%rbp)
.LBB67_82:                              # %for.cond328
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB67_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB67_82 Depth=2
	movl	$0, -4(%rbp)
.LBB67_84:                              # %for.cond331
                                        #   Parent Loop BB67_1 Depth=1
                                        #     Parent Loop BB67_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB67_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB67_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB67_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB67_88
.LBB67_87:                              # %if.else350
                                        #   in Loop: Header=BB67_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB67_88:                              # %if.end365
                                        #   in Loop: Header=BB67_84 Depth=3
	jmp	.LBB67_89
.LBB67_89:                              # %for.inc366
                                        #   in Loop: Header=BB67_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_84
.LBB67_90:                              # %for.end368
                                        #   in Loop: Header=BB67_82 Depth=2
	jmp	.LBB67_91
.LBB67_91:                              # %for.inc369
                                        #   in Loop: Header=BB67_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_82
.LBB67_92:                              # %for.end371
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -8(%rbp)
.LBB67_93:                              # %for.cond372
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB67_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB67_93 Depth=2
	movl	$0, -4(%rbp)
.LBB67_95:                              # %for.cond375
                                        #   Parent Loop BB67_1 Depth=1
                                        #     Parent Loop BB67_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB67_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB67_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB67_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB67_99
.LBB67_98:                              # %if.else394
                                        #   in Loop: Header=BB67_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB67_99:                              # %if.end409
                                        #   in Loop: Header=BB67_95 Depth=3
	jmp	.LBB67_100
.LBB67_100:                             # %for.inc410
                                        #   in Loop: Header=BB67_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_95
.LBB67_101:                             # %for.end412
                                        #   in Loop: Header=BB67_93 Depth=2
	jmp	.LBB67_102
.LBB67_102:                             # %for.inc413
                                        #   in Loop: Header=BB67_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_93
.LBB67_103:                             # %for.end415
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -8(%rbp)
.LBB67_104:                             # %for.cond416
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB67_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB67_104 Depth=2
	movl	$0, -4(%rbp)
.LBB67_106:                             # %for.cond419
                                        #   Parent Loop BB67_1 Depth=1
                                        #     Parent Loop BB67_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB67_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB67_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB67_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB67_110
.LBB67_109:                             # %if.else438
                                        #   in Loop: Header=BB67_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB67_110:                             # %if.end453
                                        #   in Loop: Header=BB67_106 Depth=3
	jmp	.LBB67_111
.LBB67_111:                             # %for.inc454
                                        #   in Loop: Header=BB67_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_106
.LBB67_112:                             # %for.end456
                                        #   in Loop: Header=BB67_104 Depth=2
	jmp	.LBB67_113
.LBB67_113:                             # %for.inc457
                                        #   in Loop: Header=BB67_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_104
.LBB67_114:                             # %for.end459
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -8(%rbp)
.LBB67_115:                             # %for.cond460
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB67_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB67_115 Depth=2
	movl	$0, -4(%rbp)
.LBB67_117:                             # %for.cond463
                                        #   Parent Loop BB67_1 Depth=1
                                        #     Parent Loop BB67_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB67_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB67_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB67_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB67_121
.LBB67_120:                             # %if.else482
                                        #   in Loop: Header=BB67_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB67_121:                             # %if.end497
                                        #   in Loop: Header=BB67_117 Depth=3
	jmp	.LBB67_122
.LBB67_122:                             # %for.inc498
                                        #   in Loop: Header=BB67_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_117
.LBB67_123:                             # %for.end500
                                        #   in Loop: Header=BB67_115 Depth=2
	jmp	.LBB67_124
.LBB67_124:                             # %for.inc501
                                        #   in Loop: Header=BB67_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_115
.LBB67_125:                             # %for.end503
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -8(%rbp)
.LBB67_126:                             # %for.cond504
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB67_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB67_126 Depth=2
	movl	$0, -4(%rbp)
.LBB67_128:                             # %for.cond507
                                        #   Parent Loop BB67_1 Depth=1
                                        #     Parent Loop BB67_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB67_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB67_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB67_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB67_132
.LBB67_131:                             # %if.else526
                                        #   in Loop: Header=BB67_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB67_132:                             # %if.end541
                                        #   in Loop: Header=BB67_128 Depth=3
	jmp	.LBB67_133
.LBB67_133:                             # %for.inc542
                                        #   in Loop: Header=BB67_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_128
.LBB67_134:                             # %for.end544
                                        #   in Loop: Header=BB67_126 Depth=2
	jmp	.LBB67_135
.LBB67_135:                             # %for.inc545
                                        #   in Loop: Header=BB67_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_126
.LBB67_136:                             # %for.end547
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -8(%rbp)
.LBB67_137:                             # %for.cond548
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB67_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB67_137 Depth=2
	movl	$0, -4(%rbp)
.LBB67_139:                             # %for.cond551
                                        #   Parent Loop BB67_1 Depth=1
                                        #     Parent Loop BB67_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB67_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB67_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB67_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB67_143
.LBB67_142:                             # %if.else570
                                        #   in Loop: Header=BB67_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB67_143:                             # %if.end585
                                        #   in Loop: Header=BB67_139 Depth=3
	jmp	.LBB67_144
.LBB67_144:                             # %for.inc586
                                        #   in Loop: Header=BB67_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_139
.LBB67_145:                             # %for.end588
                                        #   in Loop: Header=BB67_137 Depth=2
	jmp	.LBB67_146
.LBB67_146:                             # %for.inc589
                                        #   in Loop: Header=BB67_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_137
.LBB67_147:                             # %for.end591
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -8(%rbp)
.LBB67_148:                             # %for.cond592
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB67_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB67_148 Depth=2
	movl	$0, -4(%rbp)
.LBB67_150:                             # %for.cond595
                                        #   Parent Loop BB67_1 Depth=1
                                        #     Parent Loop BB67_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB67_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB67_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB67_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB67_154
.LBB67_153:                             # %if.else614
                                        #   in Loop: Header=BB67_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB67_154:                             # %if.end629
                                        #   in Loop: Header=BB67_150 Depth=3
	jmp	.LBB67_155
.LBB67_155:                             # %for.inc630
                                        #   in Loop: Header=BB67_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_150
.LBB67_156:                             # %for.end632
                                        #   in Loop: Header=BB67_148 Depth=2
	jmp	.LBB67_157
.LBB67_157:                             # %for.inc633
                                        #   in Loop: Header=BB67_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_148
.LBB67_158:                             # %for.end635
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -8(%rbp)
.LBB67_159:                             # %for.cond636
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB67_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB67_159 Depth=2
	movl	$0, -4(%rbp)
.LBB67_161:                             # %for.cond639
                                        #   Parent Loop BB67_1 Depth=1
                                        #     Parent Loop BB67_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB67_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB67_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB67_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB67_165
.LBB67_164:                             # %if.else658
                                        #   in Loop: Header=BB67_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB67_165:                             # %if.end673
                                        #   in Loop: Header=BB67_161 Depth=3
	jmp	.LBB67_166
.LBB67_166:                             # %for.inc674
                                        #   in Loop: Header=BB67_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_161
.LBB67_167:                             # %for.end676
                                        #   in Loop: Header=BB67_159 Depth=2
	jmp	.LBB67_168
.LBB67_168:                             # %for.inc677
                                        #   in Loop: Header=BB67_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_159
.LBB67_169:                             # %for.end679
                                        #   in Loop: Header=BB67_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB67_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB67_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB67_171:                             # %if.end682
                                        #   in Loop: Header=BB67_1 Depth=1
	jmp	.LBB67_172
.LBB67_172:                             # %for.inc683
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_1
.LBB67_173:                             # %for.end685
	cmpl	$16339211, -48(%rbp)    # imm = 0xF9510B
	jne	.LBB67_175
.LBB67_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_174
.Lfunc_end67:
	.size	GetCtxModelNumber.60, .Lfunc_end67-GetCtxModelNumber.60
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.61
.LCPI68_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.61
	.p2align	4, 0x90
	.type	GetCtxModelNumber.61,@function
GetCtxModelNumber.61:                   # @GetCtxModelNumber.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI68_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$643332635, -44(%rbp)   # imm = 0x26587A1B
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB68_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_3 Depth 2
                                        #       Child Loop BB68_5 Depth 3
                                        #     Child Loop BB68_14 Depth 2
                                        #       Child Loop BB68_16 Depth 3
                                        #     Child Loop BB68_25 Depth 2
                                        #       Child Loop BB68_27 Depth 3
                                        #     Child Loop BB68_36 Depth 2
                                        #       Child Loop BB68_38 Depth 3
                                        #     Child Loop BB68_47 Depth 2
                                        #     Child Loop BB68_54 Depth 2
                                        #     Child Loop BB68_61 Depth 2
                                        #     Child Loop BB68_68 Depth 2
                                        #     Child Loop BB68_75 Depth 2
                                        #     Child Loop BB68_82 Depth 2
                                        #       Child Loop BB68_84 Depth 3
                                        #     Child Loop BB68_93 Depth 2
                                        #       Child Loop BB68_95 Depth 3
                                        #     Child Loop BB68_104 Depth 2
                                        #       Child Loop BB68_106 Depth 3
                                        #     Child Loop BB68_115 Depth 2
                                        #       Child Loop BB68_117 Depth 3
                                        #     Child Loop BB68_126 Depth 2
                                        #       Child Loop BB68_128 Depth 3
                                        #     Child Loop BB68_137 Depth 2
                                        #       Child Loop BB68_139 Depth 3
                                        #     Child Loop BB68_148 Depth 2
                                        #       Child Loop BB68_150 Depth 3
                                        #     Child Loop BB68_159 Depth 2
                                        #       Child Loop BB68_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB68_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB68_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB68_3:                               # %for.cond2
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB68_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB68_3 Depth=2
	movl	$0, -4(%rbp)
.LBB68_5:                               # %for.cond5
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB68_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB68_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB68_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_9
.LBB68_8:                               # %if.else
                                        #   in Loop: Header=BB68_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_9:                               # %if.end
                                        #   in Loop: Header=BB68_5 Depth=3
	jmp	.LBB68_10
.LBB68_10:                              # %for.inc
                                        #   in Loop: Header=BB68_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_5
.LBB68_11:                              # %for.end
                                        #   in Loop: Header=BB68_3 Depth=2
	jmp	.LBB68_12
.LBB68_12:                              # %for.inc33
                                        #   in Loop: Header=BB68_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_3
.LBB68_13:                              # %for.end35
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_14:                              # %for.cond36
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB68_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB68_14 Depth=2
	movl	$0, -4(%rbp)
.LBB68_16:                              # %for.cond39
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB68_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB68_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB68_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_20
.LBB68_19:                              # %if.else58
                                        #   in Loop: Header=BB68_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_20:                              # %if.end73
                                        #   in Loop: Header=BB68_16 Depth=3
	jmp	.LBB68_21
.LBB68_21:                              # %for.inc74
                                        #   in Loop: Header=BB68_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_16
.LBB68_22:                              # %for.end76
                                        #   in Loop: Header=BB68_14 Depth=2
	jmp	.LBB68_23
.LBB68_23:                              # %for.inc77
                                        #   in Loop: Header=BB68_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_14
.LBB68_24:                              # %for.end79
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_25:                              # %for.cond80
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB68_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB68_25 Depth=2
	movl	$0, -4(%rbp)
.LBB68_27:                              # %for.cond83
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB68_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB68_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB68_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_31
.LBB68_30:                              # %if.else102
                                        #   in Loop: Header=BB68_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_31:                              # %if.end117
                                        #   in Loop: Header=BB68_27 Depth=3
	jmp	.LBB68_32
.LBB68_32:                              # %for.inc118
                                        #   in Loop: Header=BB68_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_27
.LBB68_33:                              # %for.end120
                                        #   in Loop: Header=BB68_25 Depth=2
	jmp	.LBB68_34
.LBB68_34:                              # %for.inc121
                                        #   in Loop: Header=BB68_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_25
.LBB68_35:                              # %for.end123
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_36:                              # %for.cond124
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB68_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB68_36 Depth=2
	movl	$0, -4(%rbp)
.LBB68_38:                              # %for.cond127
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB68_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB68_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB68_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_42
.LBB68_41:                              # %if.else146
                                        #   in Loop: Header=BB68_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_42:                              # %if.end161
                                        #   in Loop: Header=BB68_38 Depth=3
	jmp	.LBB68_43
.LBB68_43:                              # %for.inc162
                                        #   in Loop: Header=BB68_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_38
.LBB68_44:                              # %for.end164
                                        #   in Loop: Header=BB68_36 Depth=2
	jmp	.LBB68_45
.LBB68_45:                              # %for.inc165
                                        #   in Loop: Header=BB68_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_36
.LBB68_46:                              # %for.end167
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -4(%rbp)
.LBB68_47:                              # %for.cond168
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB68_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB68_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB68_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_51
.LBB68_50:                              # %if.else184
                                        #   in Loop: Header=BB68_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_51:                              # %if.end196
                                        #   in Loop: Header=BB68_47 Depth=2
	jmp	.LBB68_52
.LBB68_52:                              # %for.inc197
                                        #   in Loop: Header=BB68_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_47
.LBB68_53:                              # %for.end199
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -4(%rbp)
.LBB68_54:                              # %for.cond200
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB68_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB68_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB68_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_58
.LBB68_57:                              # %if.else216
                                        #   in Loop: Header=BB68_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_58:                              # %if.end228
                                        #   in Loop: Header=BB68_54 Depth=2
	jmp	.LBB68_59
.LBB68_59:                              # %for.inc229
                                        #   in Loop: Header=BB68_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_54
.LBB68_60:                              # %for.end231
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -4(%rbp)
.LBB68_61:                              # %for.cond232
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB68_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB68_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB68_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_65
.LBB68_64:                              # %if.else248
                                        #   in Loop: Header=BB68_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_65:                              # %if.end260
                                        #   in Loop: Header=BB68_61 Depth=2
	jmp	.LBB68_66
.LBB68_66:                              # %for.inc261
                                        #   in Loop: Header=BB68_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_61
.LBB68_67:                              # %for.end263
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -4(%rbp)
.LBB68_68:                              # %for.cond264
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB68_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB68_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB68_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_72
.LBB68_71:                              # %if.else280
                                        #   in Loop: Header=BB68_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_72:                              # %if.end292
                                        #   in Loop: Header=BB68_68 Depth=2
	jmp	.LBB68_73
.LBB68_73:                              # %for.inc293
                                        #   in Loop: Header=BB68_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_68
.LBB68_74:                              # %for.end295
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -4(%rbp)
.LBB68_75:                              # %for.cond296
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB68_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB68_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB68_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_79
.LBB68_78:                              # %if.else312
                                        #   in Loop: Header=BB68_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_79:                              # %if.end324
                                        #   in Loop: Header=BB68_75 Depth=2
	jmp	.LBB68_80
.LBB68_80:                              # %for.inc325
                                        #   in Loop: Header=BB68_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_75
.LBB68_81:                              # %for.end327
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_82:                              # %for.cond328
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB68_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB68_82 Depth=2
	movl	$0, -4(%rbp)
.LBB68_84:                              # %for.cond331
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB68_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB68_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB68_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_88
.LBB68_87:                              # %if.else350
                                        #   in Loop: Header=BB68_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_88:                              # %if.end365
                                        #   in Loop: Header=BB68_84 Depth=3
	jmp	.LBB68_89
.LBB68_89:                              # %for.inc366
                                        #   in Loop: Header=BB68_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_84
.LBB68_90:                              # %for.end368
                                        #   in Loop: Header=BB68_82 Depth=2
	jmp	.LBB68_91
.LBB68_91:                              # %for.inc369
                                        #   in Loop: Header=BB68_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_82
.LBB68_92:                              # %for.end371
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_93:                              # %for.cond372
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB68_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB68_93 Depth=2
	movl	$0, -4(%rbp)
.LBB68_95:                              # %for.cond375
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB68_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB68_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB68_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_99
.LBB68_98:                              # %if.else394
                                        #   in Loop: Header=BB68_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_99:                              # %if.end409
                                        #   in Loop: Header=BB68_95 Depth=3
	jmp	.LBB68_100
.LBB68_100:                             # %for.inc410
                                        #   in Loop: Header=BB68_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_95
.LBB68_101:                             # %for.end412
                                        #   in Loop: Header=BB68_93 Depth=2
	jmp	.LBB68_102
.LBB68_102:                             # %for.inc413
                                        #   in Loop: Header=BB68_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_93
.LBB68_103:                             # %for.end415
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_104:                             # %for.cond416
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB68_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB68_104 Depth=2
	movl	$0, -4(%rbp)
.LBB68_106:                             # %for.cond419
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB68_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB68_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB68_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_110
.LBB68_109:                             # %if.else438
                                        #   in Loop: Header=BB68_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_110:                             # %if.end453
                                        #   in Loop: Header=BB68_106 Depth=3
	jmp	.LBB68_111
.LBB68_111:                             # %for.inc454
                                        #   in Loop: Header=BB68_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_106
.LBB68_112:                             # %for.end456
                                        #   in Loop: Header=BB68_104 Depth=2
	jmp	.LBB68_113
.LBB68_113:                             # %for.inc457
                                        #   in Loop: Header=BB68_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_104
.LBB68_114:                             # %for.end459
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_115:                             # %for.cond460
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB68_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB68_115 Depth=2
	movl	$0, -4(%rbp)
.LBB68_117:                             # %for.cond463
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB68_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB68_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB68_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_121
.LBB68_120:                             # %if.else482
                                        #   in Loop: Header=BB68_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_121:                             # %if.end497
                                        #   in Loop: Header=BB68_117 Depth=3
	jmp	.LBB68_122
.LBB68_122:                             # %for.inc498
                                        #   in Loop: Header=BB68_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_117
.LBB68_123:                             # %for.end500
                                        #   in Loop: Header=BB68_115 Depth=2
	jmp	.LBB68_124
.LBB68_124:                             # %for.inc501
                                        #   in Loop: Header=BB68_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_115
.LBB68_125:                             # %for.end503
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_126:                             # %for.cond504
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB68_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB68_126 Depth=2
	movl	$0, -4(%rbp)
.LBB68_128:                             # %for.cond507
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB68_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB68_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB68_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_132
.LBB68_131:                             # %if.else526
                                        #   in Loop: Header=BB68_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_132:                             # %if.end541
                                        #   in Loop: Header=BB68_128 Depth=3
	jmp	.LBB68_133
.LBB68_133:                             # %for.inc542
                                        #   in Loop: Header=BB68_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_128
.LBB68_134:                             # %for.end544
                                        #   in Loop: Header=BB68_126 Depth=2
	jmp	.LBB68_135
.LBB68_135:                             # %for.inc545
                                        #   in Loop: Header=BB68_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_126
.LBB68_136:                             # %for.end547
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_137:                             # %for.cond548
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB68_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB68_137 Depth=2
	movl	$0, -4(%rbp)
.LBB68_139:                             # %for.cond551
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB68_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB68_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB68_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_143
.LBB68_142:                             # %if.else570
                                        #   in Loop: Header=BB68_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_143:                             # %if.end585
                                        #   in Loop: Header=BB68_139 Depth=3
	jmp	.LBB68_144
.LBB68_144:                             # %for.inc586
                                        #   in Loop: Header=BB68_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_139
.LBB68_145:                             # %for.end588
                                        #   in Loop: Header=BB68_137 Depth=2
	jmp	.LBB68_146
.LBB68_146:                             # %for.inc589
                                        #   in Loop: Header=BB68_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_137
.LBB68_147:                             # %for.end591
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_148:                             # %for.cond592
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB68_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB68_148 Depth=2
	movl	$0, -4(%rbp)
.LBB68_150:                             # %for.cond595
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB68_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB68_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB68_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_154
.LBB68_153:                             # %if.else614
                                        #   in Loop: Header=BB68_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_154:                             # %if.end629
                                        #   in Loop: Header=BB68_150 Depth=3
	jmp	.LBB68_155
.LBB68_155:                             # %for.inc630
                                        #   in Loop: Header=BB68_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_150
.LBB68_156:                             # %for.end632
                                        #   in Loop: Header=BB68_148 Depth=2
	jmp	.LBB68_157
.LBB68_157:                             # %for.inc633
                                        #   in Loop: Header=BB68_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_148
.LBB68_158:                             # %for.end635
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_159:                             # %for.cond636
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB68_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB68_159 Depth=2
	movl	$0, -4(%rbp)
.LBB68_161:                             # %for.cond639
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB68_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB68_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB68_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_165
.LBB68_164:                             # %if.else658
                                        #   in Loop: Header=BB68_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_165:                             # %if.end673
                                        #   in Loop: Header=BB68_161 Depth=3
	jmp	.LBB68_166
.LBB68_166:                             # %for.inc674
                                        #   in Loop: Header=BB68_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_161
.LBB68_167:                             # %for.end676
                                        #   in Loop: Header=BB68_159 Depth=2
	jmp	.LBB68_168
.LBB68_168:                             # %for.inc677
                                        #   in Loop: Header=BB68_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_159
.LBB68_169:                             # %for.end679
                                        #   in Loop: Header=BB68_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB68_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB68_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB68_171:                             # %if.end682
                                        #   in Loop: Header=BB68_1 Depth=1
	jmp	.LBB68_172
.LBB68_172:                             # %for.inc683
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_1
.LBB68_173:                             # %for.end685
	cmpl	$643332635, -44(%rbp)   # imm = 0x26587A1B
	jne	.LBB68_175
.LBB68_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_174
.Lfunc_end68:
	.size	GetCtxModelNumber.61, .Lfunc_end68-GetCtxModelNumber.61
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.62
.LCPI69_0:
	.quad	4607182418800017408     # double 1
.LCPI69_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI69_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI69_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.62
	.p2align	4, 0x90
	.type	XRate.62,@function
XRate.62:                               # @XRate.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1711295504, -32(%rbp)  # imm = 0x66004C10
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB69_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB69_3
.LBB69_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB69_3:                               # %cond.end
	vmovsd	.LCPI69_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI69_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI69_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI69_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB69_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI69_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB69_6
.LBB69_5:                               # %cond.false6
	vmovsd	.LCPI69_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI69_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI69_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB69_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB69_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB69_9
.LBB69_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB69_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB69_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB69_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB69_13
.LBB69_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB69_13:                              # %cond.end26
	jmp	.LBB69_15
.LBB69_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB69_15
.LBB69_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB69_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB69_18
.LBB69_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB69_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1711295504, -32(%rbp)  # imm = 0x66004C10
	jne	.LBB69_20
.LBB69_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB69_19
.Lfunc_end69:
	.size	XRate.62, .Lfunc_end69-XRate.62
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.63
.LCPI70_0:
	.quad	4611686018427387904     # double 2
.LCPI70_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.63
	.p2align	4, 0x90
	.type	create_context_memory.63,@function
create_context_memory.63:               # @create_context_memory.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$320668345, -20(%rbp)   # imm = 0x131D02B9
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB70_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB70_3
.LBB70_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB70_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB70_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB70_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB70_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB70_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB70_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB70_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB70_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB70_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB70_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB70_11:                              # %if.end10
                                        #   in Loop: Header=BB70_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB70_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB70_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB70_13:                              # %if.end16
                                        #   in Loop: Header=BB70_8 Depth=1
	movl	$0, -8(%rbp)
.LBB70_14:                              # %for.cond17
                                        #   Parent Loop BB70_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB70_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB70_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB70_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB70_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB70_17:                              # %if.end28
                                        #   in Loop: Header=BB70_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB70_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB70_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB70_19:                              # %if.end39
                                        #   in Loop: Header=BB70_14 Depth=2
	jmp	.LBB70_20
.LBB70_20:                              # %for.inc
                                        #   in Loop: Header=BB70_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_14
.LBB70_21:                              # %for.end
                                        #   in Loop: Header=BB70_8 Depth=1
	jmp	.LBB70_22
.LBB70_22:                              # %for.inc40
                                        #   in Loop: Header=BB70_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_8
.LBB70_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB70_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_26 Depth 2
                                        #       Child Loop BB70_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB70_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB70_24 Depth=1
	movl	$0, -8(%rbp)
.LBB70_26:                              # %for.cond47
                                        #   Parent Loop BB70_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB70_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB70_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB70_26 Depth=2
	movl	$0, -12(%rbp)
.LBB70_28:                              # %for.cond51
                                        #   Parent Loop BB70_24 Depth=1
                                        #     Parent Loop BB70_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB70_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB70_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB70_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_28
.LBB70_31:                              # %for.end63
                                        #   in Loop: Header=BB70_26 Depth=2
	jmp	.LBB70_32
.LBB70_32:                              # %for.inc64
                                        #   in Loop: Header=BB70_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_26
.LBB70_33:                              # %for.end66
                                        #   in Loop: Header=BB70_24 Depth=1
	jmp	.LBB70_34
.LBB70_34:                              # %for.inc67
                                        #   in Loop: Header=BB70_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_24
.LBB70_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB70_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB70_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB70_36 Depth=1
	vmovsd	.LCPI70_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI70_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI70_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB70_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_36
.LBB70_39:                              # %for.end98
	cmpl	$320668345, -20(%rbp)   # imm = 0x131D02B9
	jne	.LBB70_41
.LBB70_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_40
.Lfunc_end70:
	.size	create_context_memory.63, .Lfunc_end70-create_context_memory.63
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.64
.LCPI71_0:
	.quad	4611686018427387904     # double 2
.LCPI71_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.64
	.p2align	4, 0x90
	.type	create_context_memory.64,@function
create_context_memory.64:               # @create_context_memory.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$162597636, -20(%rbp)   # imm = 0x9B10B04
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB71_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB71_3
.LBB71_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB71_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB71_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB71_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB71_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB71_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB71_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB71_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB71_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB71_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB71_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB71_11:                              # %if.end10
                                        #   in Loop: Header=BB71_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB71_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB71_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB71_13:                              # %if.end16
                                        #   in Loop: Header=BB71_8 Depth=1
	movl	$0, -8(%rbp)
.LBB71_14:                              # %for.cond17
                                        #   Parent Loop BB71_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB71_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB71_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB71_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB71_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB71_17:                              # %if.end28
                                        #   in Loop: Header=BB71_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB71_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB71_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB71_19:                              # %if.end39
                                        #   in Loop: Header=BB71_14 Depth=2
	jmp	.LBB71_20
.LBB71_20:                              # %for.inc
                                        #   in Loop: Header=BB71_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_14
.LBB71_21:                              # %for.end
                                        #   in Loop: Header=BB71_8 Depth=1
	jmp	.LBB71_22
.LBB71_22:                              # %for.inc40
                                        #   in Loop: Header=BB71_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_8
.LBB71_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB71_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_26 Depth 2
                                        #       Child Loop BB71_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB71_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB71_24 Depth=1
	movl	$0, -8(%rbp)
.LBB71_26:                              # %for.cond47
                                        #   Parent Loop BB71_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB71_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB71_26 Depth=2
	movl	$0, -12(%rbp)
.LBB71_28:                              # %for.cond51
                                        #   Parent Loop BB71_24 Depth=1
                                        #     Parent Loop BB71_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB71_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB71_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB71_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_28
.LBB71_31:                              # %for.end63
                                        #   in Loop: Header=BB71_26 Depth=2
	jmp	.LBB71_32
.LBB71_32:                              # %for.inc64
                                        #   in Loop: Header=BB71_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_26
.LBB71_33:                              # %for.end66
                                        #   in Loop: Header=BB71_24 Depth=1
	jmp	.LBB71_34
.LBB71_34:                              # %for.inc67
                                        #   in Loop: Header=BB71_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_24
.LBB71_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB71_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB71_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB71_36 Depth=1
	vmovsd	.LCPI71_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI71_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI71_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB71_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_36
.LBB71_39:                              # %for.end98
	cmpl	$162597636, -20(%rbp)   # imm = 0x9B10B04
	jne	.LBB71_41
.LBB71_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_40
.Lfunc_end71:
	.size	create_context_memory.64, .Lfunc_end71-create_context_memory.64
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.65
.LCPI72_0:
	.quad	4611686018427387904     # double 2
.LCPI72_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.65
	.p2align	4, 0x90
	.type	create_context_memory.65,@function
create_context_memory.65:               # @create_context_memory.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$173070968, -20(%rbp)   # imm = 0xA50DA78
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB72_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB72_3
.LBB72_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB72_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB72_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB72_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB72_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB72_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB72_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB72_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB72_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB72_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB72_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB72_11:                              # %if.end10
                                        #   in Loop: Header=BB72_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB72_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB72_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB72_13:                              # %if.end16
                                        #   in Loop: Header=BB72_8 Depth=1
	movl	$0, -8(%rbp)
.LBB72_14:                              # %for.cond17
                                        #   Parent Loop BB72_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB72_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB72_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB72_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB72_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB72_17:                              # %if.end28
                                        #   in Loop: Header=BB72_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB72_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB72_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB72_19:                              # %if.end39
                                        #   in Loop: Header=BB72_14 Depth=2
	jmp	.LBB72_20
.LBB72_20:                              # %for.inc
                                        #   in Loop: Header=BB72_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_14
.LBB72_21:                              # %for.end
                                        #   in Loop: Header=BB72_8 Depth=1
	jmp	.LBB72_22
.LBB72_22:                              # %for.inc40
                                        #   in Loop: Header=BB72_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_8
.LBB72_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB72_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_26 Depth 2
                                        #       Child Loop BB72_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB72_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB72_24 Depth=1
	movl	$0, -8(%rbp)
.LBB72_26:                              # %for.cond47
                                        #   Parent Loop BB72_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB72_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB72_26 Depth=2
	movl	$0, -12(%rbp)
.LBB72_28:                              # %for.cond51
                                        #   Parent Loop BB72_24 Depth=1
                                        #     Parent Loop BB72_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB72_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB72_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB72_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_28
.LBB72_31:                              # %for.end63
                                        #   in Loop: Header=BB72_26 Depth=2
	jmp	.LBB72_32
.LBB72_32:                              # %for.inc64
                                        #   in Loop: Header=BB72_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_26
.LBB72_33:                              # %for.end66
                                        #   in Loop: Header=BB72_24 Depth=1
	jmp	.LBB72_34
.LBB72_34:                              # %for.inc67
                                        #   in Loop: Header=BB72_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_24
.LBB72_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB72_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB72_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB72_36 Depth=1
	vmovsd	.LCPI72_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI72_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI72_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB72_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_36
.LBB72_39:                              # %for.end98
	cmpl	$173070968, -20(%rbp)   # imm = 0xA50DA78
	jne	.LBB72_41
.LBB72_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_40
.Lfunc_end72:
	.size	create_context_memory.65, .Lfunc_end72-create_context_memory.65
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.66        # -- Begin function init_contexts.66
	.p2align	4, 0x90
	.type	init_contexts.66,@function
init_contexts.66:                       # @init_contexts.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1615758418, -28(%rbp)  # imm = 0x604E8452
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB73_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB73_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -4(%rbp)
.LBB73_3:                               # %for.cond2
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB73_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB73_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB73_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_7
.LBB73_6:                               # %if.else
                                        #   in Loop: Header=BB73_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_7:                               # %if.end
                                        #   in Loop: Header=BB73_3 Depth=2
	jmp	.LBB73_8
.LBB73_8:                               # %for.inc
                                        #   in Loop: Header=BB73_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_3
.LBB73_9:                               # %for.end
                                        #   in Loop: Header=BB73_1 Depth=1
	jmp	.LBB73_10
.LBB73_10:                              # %for.inc28
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_1
.LBB73_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB73_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB73_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB73_12 Depth=1
	movl	$0, -4(%rbp)
.LBB73_14:                              # %for.cond34
                                        #   Parent Loop BB73_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB73_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB73_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB73_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_18
.LBB73_17:                              # %if.else52
                                        #   in Loop: Header=BB73_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_18:                              # %if.end66
                                        #   in Loop: Header=BB73_14 Depth=2
	jmp	.LBB73_19
.LBB73_19:                              # %for.inc67
                                        #   in Loop: Header=BB73_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_14
.LBB73_20:                              # %for.end69
                                        #   in Loop: Header=BB73_12 Depth=1
	jmp	.LBB73_21
.LBB73_21:                              # %for.inc70
                                        #   in Loop: Header=BB73_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_12
.LBB73_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB73_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB73_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB73_23 Depth=1
	movl	$0, -4(%rbp)
.LBB73_25:                              # %for.cond76
                                        #   Parent Loop BB73_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB73_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB73_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB73_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_29
.LBB73_28:                              # %if.else94
                                        #   in Loop: Header=BB73_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_29:                              # %if.end108
                                        #   in Loop: Header=BB73_25 Depth=2
	jmp	.LBB73_30
.LBB73_30:                              # %for.inc109
                                        #   in Loop: Header=BB73_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_25
.LBB73_31:                              # %for.end111
                                        #   in Loop: Header=BB73_23 Depth=1
	jmp	.LBB73_32
.LBB73_32:                              # %for.inc112
                                        #   in Loop: Header=BB73_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_23
.LBB73_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB73_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB73_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB73_34 Depth=1
	movl	$0, -4(%rbp)
.LBB73_36:                              # %for.cond118
                                        #   Parent Loop BB73_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB73_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB73_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB73_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_40
.LBB73_39:                              # %if.else136
                                        #   in Loop: Header=BB73_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_40:                              # %if.end150
                                        #   in Loop: Header=BB73_36 Depth=2
	jmp	.LBB73_41
.LBB73_41:                              # %for.inc151
                                        #   in Loop: Header=BB73_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_36
.LBB73_42:                              # %for.end153
                                        #   in Loop: Header=BB73_34 Depth=1
	jmp	.LBB73_43
.LBB73_43:                              # %for.inc154
                                        #   in Loop: Header=BB73_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_34
.LBB73_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB73_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB73_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB73_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB73_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_49
.LBB73_48:                              # %if.else172
                                        #   in Loop: Header=BB73_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_49:                              # %if.end183
                                        #   in Loop: Header=BB73_45 Depth=1
	jmp	.LBB73_50
.LBB73_50:                              # %for.inc184
                                        #   in Loop: Header=BB73_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_45
.LBB73_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB73_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB73_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB73_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB73_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_56
.LBB73_55:                              # %if.else202
                                        #   in Loop: Header=BB73_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_56:                              # %if.end213
                                        #   in Loop: Header=BB73_52 Depth=1
	jmp	.LBB73_57
.LBB73_57:                              # %for.inc214
                                        #   in Loop: Header=BB73_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_52
.LBB73_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB73_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB73_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB73_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB73_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_63
.LBB73_62:                              # %if.else232
                                        #   in Loop: Header=BB73_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_63:                              # %if.end243
                                        #   in Loop: Header=BB73_59 Depth=1
	jmp	.LBB73_64
.LBB73_64:                              # %for.inc244
                                        #   in Loop: Header=BB73_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_59
.LBB73_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB73_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB73_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB73_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB73_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_70
.LBB73_69:                              # %if.else262
                                        #   in Loop: Header=BB73_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_70:                              # %if.end273
                                        #   in Loop: Header=BB73_66 Depth=1
	jmp	.LBB73_71
.LBB73_71:                              # %for.inc274
                                        #   in Loop: Header=BB73_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_66
.LBB73_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB73_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB73_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB73_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB73_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_77
.LBB73_76:                              # %if.else292
                                        #   in Loop: Header=BB73_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_77:                              # %if.end303
                                        #   in Loop: Header=BB73_73 Depth=1
	jmp	.LBB73_78
.LBB73_78:                              # %for.inc304
                                        #   in Loop: Header=BB73_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_73
.LBB73_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB73_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB73_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB73_80 Depth=1
	movl	$0, -4(%rbp)
.LBB73_82:                              # %for.cond310
                                        #   Parent Loop BB73_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB73_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB73_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB73_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_86
.LBB73_85:                              # %if.else328
                                        #   in Loop: Header=BB73_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_86:                              # %if.end342
                                        #   in Loop: Header=BB73_82 Depth=2
	jmp	.LBB73_87
.LBB73_87:                              # %for.inc343
                                        #   in Loop: Header=BB73_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_82
.LBB73_88:                              # %for.end345
                                        #   in Loop: Header=BB73_80 Depth=1
	jmp	.LBB73_89
.LBB73_89:                              # %for.inc346
                                        #   in Loop: Header=BB73_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_80
.LBB73_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB73_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB73_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB73_91 Depth=1
	movl	$0, -4(%rbp)
.LBB73_93:                              # %for.cond352
                                        #   Parent Loop BB73_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB73_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB73_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB73_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_97
.LBB73_96:                              # %if.else370
                                        #   in Loop: Header=BB73_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_97:                              # %if.end384
                                        #   in Loop: Header=BB73_93 Depth=2
	jmp	.LBB73_98
.LBB73_98:                              # %for.inc385
                                        #   in Loop: Header=BB73_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_93
.LBB73_99:                              # %for.end387
                                        #   in Loop: Header=BB73_91 Depth=1
	jmp	.LBB73_100
.LBB73_100:                             # %for.inc388
                                        #   in Loop: Header=BB73_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_91
.LBB73_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB73_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB73_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB73_102 Depth=1
	movl	$0, -4(%rbp)
.LBB73_104:                             # %for.cond394
                                        #   Parent Loop BB73_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB73_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB73_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB73_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_108
.LBB73_107:                             # %if.else412
                                        #   in Loop: Header=BB73_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_108:                             # %if.end426
                                        #   in Loop: Header=BB73_104 Depth=2
	jmp	.LBB73_109
.LBB73_109:                             # %for.inc427
                                        #   in Loop: Header=BB73_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_104
.LBB73_110:                             # %for.end429
                                        #   in Loop: Header=BB73_102 Depth=1
	jmp	.LBB73_111
.LBB73_111:                             # %for.inc430
                                        #   in Loop: Header=BB73_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_102
.LBB73_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB73_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB73_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB73_113 Depth=1
	movl	$0, -4(%rbp)
.LBB73_115:                             # %for.cond436
                                        #   Parent Loop BB73_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB73_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB73_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB73_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_119
.LBB73_118:                             # %if.else454
                                        #   in Loop: Header=BB73_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_119:                             # %if.end468
                                        #   in Loop: Header=BB73_115 Depth=2
	jmp	.LBB73_120
.LBB73_120:                             # %for.inc469
                                        #   in Loop: Header=BB73_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_115
.LBB73_121:                             # %for.end471
                                        #   in Loop: Header=BB73_113 Depth=1
	jmp	.LBB73_122
.LBB73_122:                             # %for.inc472
                                        #   in Loop: Header=BB73_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_113
.LBB73_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB73_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB73_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB73_124 Depth=1
	movl	$0, -4(%rbp)
.LBB73_126:                             # %for.cond478
                                        #   Parent Loop BB73_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB73_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB73_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB73_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_130
.LBB73_129:                             # %if.else496
                                        #   in Loop: Header=BB73_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_130:                             # %if.end510
                                        #   in Loop: Header=BB73_126 Depth=2
	jmp	.LBB73_131
.LBB73_131:                             # %for.inc511
                                        #   in Loop: Header=BB73_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_126
.LBB73_132:                             # %for.end513
                                        #   in Loop: Header=BB73_124 Depth=1
	jmp	.LBB73_133
.LBB73_133:                             # %for.inc514
                                        #   in Loop: Header=BB73_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_124
.LBB73_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB73_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB73_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB73_135 Depth=1
	movl	$0, -4(%rbp)
.LBB73_137:                             # %for.cond520
                                        #   Parent Loop BB73_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB73_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB73_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB73_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_141
.LBB73_140:                             # %if.else538
                                        #   in Loop: Header=BB73_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_141:                             # %if.end552
                                        #   in Loop: Header=BB73_137 Depth=2
	jmp	.LBB73_142
.LBB73_142:                             # %for.inc553
                                        #   in Loop: Header=BB73_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_137
.LBB73_143:                             # %for.end555
                                        #   in Loop: Header=BB73_135 Depth=1
	jmp	.LBB73_144
.LBB73_144:                             # %for.inc556
                                        #   in Loop: Header=BB73_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_135
.LBB73_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB73_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB73_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB73_146 Depth=1
	movl	$0, -4(%rbp)
.LBB73_148:                             # %for.cond562
                                        #   Parent Loop BB73_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB73_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB73_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB73_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_152
.LBB73_151:                             # %if.else580
                                        #   in Loop: Header=BB73_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_152:                             # %if.end594
                                        #   in Loop: Header=BB73_148 Depth=2
	jmp	.LBB73_153
.LBB73_153:                             # %for.inc595
                                        #   in Loop: Header=BB73_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_148
.LBB73_154:                             # %for.end597
                                        #   in Loop: Header=BB73_146 Depth=1
	jmp	.LBB73_155
.LBB73_155:                             # %for.inc598
                                        #   in Loop: Header=BB73_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_146
.LBB73_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB73_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB73_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB73_157 Depth=1
	movl	$0, -4(%rbp)
.LBB73_159:                             # %for.cond604
                                        #   Parent Loop BB73_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB73_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB73_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB73_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB73_163
.LBB73_162:                             # %if.else622
                                        #   in Loop: Header=BB73_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB73_163:                             # %if.end636
                                        #   in Loop: Header=BB73_159 Depth=2
	jmp	.LBB73_164
.LBB73_164:                             # %for.inc637
                                        #   in Loop: Header=BB73_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_159
.LBB73_165:                             # %for.end639
                                        #   in Loop: Header=BB73_157 Depth=1
	jmp	.LBB73_166
.LBB73_166:                             # %for.inc640
                                        #   in Loop: Header=BB73_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_157
.LBB73_167:                             # %for.end642
	cmpl	$1615758418, -28(%rbp)  # imm = 0x604E8452
	jne	.LBB73_169
.LBB73_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_168
.Lfunc_end73:
	.size	init_contexts.66, .Lfunc_end73-init_contexts.66
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.67
.LCPI74_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.67
	.p2align	4, 0x90
	.type	GetCtxModelNumber.67,@function
GetCtxModelNumber.67:                   # @GetCtxModelNumber.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI74_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$462739173, -48(%rbp)   # imm = 0x1B94D6E5
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB74_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_3 Depth 2
                                        #       Child Loop BB74_5 Depth 3
                                        #     Child Loop BB74_14 Depth 2
                                        #       Child Loop BB74_16 Depth 3
                                        #     Child Loop BB74_25 Depth 2
                                        #       Child Loop BB74_27 Depth 3
                                        #     Child Loop BB74_36 Depth 2
                                        #       Child Loop BB74_38 Depth 3
                                        #     Child Loop BB74_47 Depth 2
                                        #     Child Loop BB74_54 Depth 2
                                        #     Child Loop BB74_61 Depth 2
                                        #     Child Loop BB74_68 Depth 2
                                        #     Child Loop BB74_75 Depth 2
                                        #     Child Loop BB74_82 Depth 2
                                        #       Child Loop BB74_84 Depth 3
                                        #     Child Loop BB74_93 Depth 2
                                        #       Child Loop BB74_95 Depth 3
                                        #     Child Loop BB74_104 Depth 2
                                        #       Child Loop BB74_106 Depth 3
                                        #     Child Loop BB74_115 Depth 2
                                        #       Child Loop BB74_117 Depth 3
                                        #     Child Loop BB74_126 Depth 2
                                        #       Child Loop BB74_128 Depth 3
                                        #     Child Loop BB74_137 Depth 2
                                        #       Child Loop BB74_139 Depth 3
                                        #     Child Loop BB74_148 Depth 2
                                        #       Child Loop BB74_150 Depth 3
                                        #     Child Loop BB74_159 Depth 2
                                        #       Child Loop BB74_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB74_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB74_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB74_3:                               # %for.cond2
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB74_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB74_3 Depth=2
	movl	$0, -4(%rbp)
.LBB74_5:                               # %for.cond5
                                        #   Parent Loop BB74_1 Depth=1
                                        #     Parent Loop BB74_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB74_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB74_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB74_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB74_9
.LBB74_8:                               # %if.else
                                        #   in Loop: Header=BB74_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB74_9:                               # %if.end
                                        #   in Loop: Header=BB74_5 Depth=3
	jmp	.LBB74_10
.LBB74_10:                              # %for.inc
                                        #   in Loop: Header=BB74_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_5
.LBB74_11:                              # %for.end
                                        #   in Loop: Header=BB74_3 Depth=2
	jmp	.LBB74_12
.LBB74_12:                              # %for.inc33
                                        #   in Loop: Header=BB74_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_3
.LBB74_13:                              # %for.end35
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -8(%rbp)
.LBB74_14:                              # %for.cond36
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB74_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB74_14 Depth=2
	movl	$0, -4(%rbp)
.LBB74_16:                              # %for.cond39
                                        #   Parent Loop BB74_1 Depth=1
                                        #     Parent Loop BB74_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB74_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB74_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB74_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB74_20
.LBB74_19:                              # %if.else58
                                        #   in Loop: Header=BB74_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB74_20:                              # %if.end73
                                        #   in Loop: Header=BB74_16 Depth=3
	jmp	.LBB74_21
.LBB74_21:                              # %for.inc74
                                        #   in Loop: Header=BB74_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_16
.LBB74_22:                              # %for.end76
                                        #   in Loop: Header=BB74_14 Depth=2
	jmp	.LBB74_23
.LBB74_23:                              # %for.inc77
                                        #   in Loop: Header=BB74_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_14
.LBB74_24:                              # %for.end79
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -8(%rbp)
.LBB74_25:                              # %for.cond80
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB74_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB74_25 Depth=2
	movl	$0, -4(%rbp)
.LBB74_27:                              # %for.cond83
                                        #   Parent Loop BB74_1 Depth=1
                                        #     Parent Loop BB74_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB74_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB74_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB74_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB74_31
.LBB74_30:                              # %if.else102
                                        #   in Loop: Header=BB74_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB74_31:                              # %if.end117
                                        #   in Loop: Header=BB74_27 Depth=3
	jmp	.LBB74_32
.LBB74_32:                              # %for.inc118
                                        #   in Loop: Header=BB74_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_27
.LBB74_33:                              # %for.end120
                                        #   in Loop: Header=BB74_25 Depth=2
	jmp	.LBB74_34
.LBB74_34:                              # %for.inc121
                                        #   in Loop: Header=BB74_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_25
.LBB74_35:                              # %for.end123
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -8(%rbp)
.LBB74_36:                              # %for.cond124
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB74_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB74_36 Depth=2
	movl	$0, -4(%rbp)
.LBB74_38:                              # %for.cond127
                                        #   Parent Loop BB74_1 Depth=1
                                        #     Parent Loop BB74_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB74_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB74_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB74_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB74_42
.LBB74_41:                              # %if.else146
                                        #   in Loop: Header=BB74_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB74_42:                              # %if.end161
                                        #   in Loop: Header=BB74_38 Depth=3
	jmp	.LBB74_43
.LBB74_43:                              # %for.inc162
                                        #   in Loop: Header=BB74_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_38
.LBB74_44:                              # %for.end164
                                        #   in Loop: Header=BB74_36 Depth=2
	jmp	.LBB74_45
.LBB74_45:                              # %for.inc165
                                        #   in Loop: Header=BB74_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_36
.LBB74_46:                              # %for.end167
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -4(%rbp)
.LBB74_47:                              # %for.cond168
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB74_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB74_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB74_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB74_51
.LBB74_50:                              # %if.else184
                                        #   in Loop: Header=BB74_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB74_51:                              # %if.end196
                                        #   in Loop: Header=BB74_47 Depth=2
	jmp	.LBB74_52
.LBB74_52:                              # %for.inc197
                                        #   in Loop: Header=BB74_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_47
.LBB74_53:                              # %for.end199
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -4(%rbp)
.LBB74_54:                              # %for.cond200
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB74_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB74_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB74_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB74_58
.LBB74_57:                              # %if.else216
                                        #   in Loop: Header=BB74_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB74_58:                              # %if.end228
                                        #   in Loop: Header=BB74_54 Depth=2
	jmp	.LBB74_59
.LBB74_59:                              # %for.inc229
                                        #   in Loop: Header=BB74_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_54
.LBB74_60:                              # %for.end231
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -4(%rbp)
.LBB74_61:                              # %for.cond232
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB74_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB74_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB74_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB74_65
.LBB74_64:                              # %if.else248
                                        #   in Loop: Header=BB74_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB74_65:                              # %if.end260
                                        #   in Loop: Header=BB74_61 Depth=2
	jmp	.LBB74_66
.LBB74_66:                              # %for.inc261
                                        #   in Loop: Header=BB74_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_61
.LBB74_67:                              # %for.end263
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -4(%rbp)
.LBB74_68:                              # %for.cond264
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB74_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB74_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB74_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB74_72
.LBB74_71:                              # %if.else280
                                        #   in Loop: Header=BB74_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB74_72:                              # %if.end292
                                        #   in Loop: Header=BB74_68 Depth=2
	jmp	.LBB74_73
.LBB74_73:                              # %for.inc293
                                        #   in Loop: Header=BB74_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_68
.LBB74_74:                              # %for.end295
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -4(%rbp)
.LBB74_75:                              # %for.cond296
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB74_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB74_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB74_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB74_79
.LBB74_78:                              # %if.else312
                                        #   in Loop: Header=BB74_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB74_79:                              # %if.end324
                                        #   in Loop: Header=BB74_75 Depth=2
	jmp	.LBB74_80
.LBB74_80:                              # %for.inc325
                                        #   in Loop: Header=BB74_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_75
.LBB74_81:                              # %for.end327
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -8(%rbp)
.LBB74_82:                              # %for.cond328
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB74_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB74_82 Depth=2
	movl	$0, -4(%rbp)
.LBB74_84:                              # %for.cond331
                                        #   Parent Loop BB74_1 Depth=1
                                        #     Parent Loop BB74_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB74_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB74_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB74_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB74_88
.LBB74_87:                              # %if.else350
                                        #   in Loop: Header=BB74_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB74_88:                              # %if.end365
                                        #   in Loop: Header=BB74_84 Depth=3
	jmp	.LBB74_89
.LBB74_89:                              # %for.inc366
                                        #   in Loop: Header=BB74_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_84
.LBB74_90:                              # %for.end368
                                        #   in Loop: Header=BB74_82 Depth=2
	jmp	.LBB74_91
.LBB74_91:                              # %for.inc369
                                        #   in Loop: Header=BB74_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_82
.LBB74_92:                              # %for.end371
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -8(%rbp)
.LBB74_93:                              # %for.cond372
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB74_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB74_93 Depth=2
	movl	$0, -4(%rbp)
.LBB74_95:                              # %for.cond375
                                        #   Parent Loop BB74_1 Depth=1
                                        #     Parent Loop BB74_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB74_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB74_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB74_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB74_99
.LBB74_98:                              # %if.else394
                                        #   in Loop: Header=BB74_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB74_99:                              # %if.end409
                                        #   in Loop: Header=BB74_95 Depth=3
	jmp	.LBB74_100
.LBB74_100:                             # %for.inc410
                                        #   in Loop: Header=BB74_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_95
.LBB74_101:                             # %for.end412
                                        #   in Loop: Header=BB74_93 Depth=2
	jmp	.LBB74_102
.LBB74_102:                             # %for.inc413
                                        #   in Loop: Header=BB74_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_93
.LBB74_103:                             # %for.end415
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -8(%rbp)
.LBB74_104:                             # %for.cond416
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB74_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB74_104 Depth=2
	movl	$0, -4(%rbp)
.LBB74_106:                             # %for.cond419
                                        #   Parent Loop BB74_1 Depth=1
                                        #     Parent Loop BB74_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB74_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB74_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB74_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB74_110
.LBB74_109:                             # %if.else438
                                        #   in Loop: Header=BB74_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB74_110:                             # %if.end453
                                        #   in Loop: Header=BB74_106 Depth=3
	jmp	.LBB74_111
.LBB74_111:                             # %for.inc454
                                        #   in Loop: Header=BB74_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_106
.LBB74_112:                             # %for.end456
                                        #   in Loop: Header=BB74_104 Depth=2
	jmp	.LBB74_113
.LBB74_113:                             # %for.inc457
                                        #   in Loop: Header=BB74_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_104
.LBB74_114:                             # %for.end459
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -8(%rbp)
.LBB74_115:                             # %for.cond460
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB74_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB74_115 Depth=2
	movl	$0, -4(%rbp)
.LBB74_117:                             # %for.cond463
                                        #   Parent Loop BB74_1 Depth=1
                                        #     Parent Loop BB74_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB74_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB74_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB74_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB74_121
.LBB74_120:                             # %if.else482
                                        #   in Loop: Header=BB74_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB74_121:                             # %if.end497
                                        #   in Loop: Header=BB74_117 Depth=3
	jmp	.LBB74_122
.LBB74_122:                             # %for.inc498
                                        #   in Loop: Header=BB74_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_117
.LBB74_123:                             # %for.end500
                                        #   in Loop: Header=BB74_115 Depth=2
	jmp	.LBB74_124
.LBB74_124:                             # %for.inc501
                                        #   in Loop: Header=BB74_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_115
.LBB74_125:                             # %for.end503
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -8(%rbp)
.LBB74_126:                             # %for.cond504
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB74_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB74_126 Depth=2
	movl	$0, -4(%rbp)
.LBB74_128:                             # %for.cond507
                                        #   Parent Loop BB74_1 Depth=1
                                        #     Parent Loop BB74_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB74_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB74_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB74_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB74_132
.LBB74_131:                             # %if.else526
                                        #   in Loop: Header=BB74_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB74_132:                             # %if.end541
                                        #   in Loop: Header=BB74_128 Depth=3
	jmp	.LBB74_133
.LBB74_133:                             # %for.inc542
                                        #   in Loop: Header=BB74_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_128
.LBB74_134:                             # %for.end544
                                        #   in Loop: Header=BB74_126 Depth=2
	jmp	.LBB74_135
.LBB74_135:                             # %for.inc545
                                        #   in Loop: Header=BB74_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_126
.LBB74_136:                             # %for.end547
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -8(%rbp)
.LBB74_137:                             # %for.cond548
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB74_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB74_137 Depth=2
	movl	$0, -4(%rbp)
.LBB74_139:                             # %for.cond551
                                        #   Parent Loop BB74_1 Depth=1
                                        #     Parent Loop BB74_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB74_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB74_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB74_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB74_143
.LBB74_142:                             # %if.else570
                                        #   in Loop: Header=BB74_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB74_143:                             # %if.end585
                                        #   in Loop: Header=BB74_139 Depth=3
	jmp	.LBB74_144
.LBB74_144:                             # %for.inc586
                                        #   in Loop: Header=BB74_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_139
.LBB74_145:                             # %for.end588
                                        #   in Loop: Header=BB74_137 Depth=2
	jmp	.LBB74_146
.LBB74_146:                             # %for.inc589
                                        #   in Loop: Header=BB74_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_137
.LBB74_147:                             # %for.end591
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -8(%rbp)
.LBB74_148:                             # %for.cond592
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB74_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB74_148 Depth=2
	movl	$0, -4(%rbp)
.LBB74_150:                             # %for.cond595
                                        #   Parent Loop BB74_1 Depth=1
                                        #     Parent Loop BB74_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB74_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB74_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB74_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB74_154
.LBB74_153:                             # %if.else614
                                        #   in Loop: Header=BB74_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB74_154:                             # %if.end629
                                        #   in Loop: Header=BB74_150 Depth=3
	jmp	.LBB74_155
.LBB74_155:                             # %for.inc630
                                        #   in Loop: Header=BB74_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_150
.LBB74_156:                             # %for.end632
                                        #   in Loop: Header=BB74_148 Depth=2
	jmp	.LBB74_157
.LBB74_157:                             # %for.inc633
                                        #   in Loop: Header=BB74_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_148
.LBB74_158:                             # %for.end635
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -8(%rbp)
.LBB74_159:                             # %for.cond636
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB74_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB74_159 Depth=2
	movl	$0, -4(%rbp)
.LBB74_161:                             # %for.cond639
                                        #   Parent Loop BB74_1 Depth=1
                                        #     Parent Loop BB74_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB74_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB74_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB74_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB74_165
.LBB74_164:                             # %if.else658
                                        #   in Loop: Header=BB74_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB74_165:                             # %if.end673
                                        #   in Loop: Header=BB74_161 Depth=3
	jmp	.LBB74_166
.LBB74_166:                             # %for.inc674
                                        #   in Loop: Header=BB74_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_161
.LBB74_167:                             # %for.end676
                                        #   in Loop: Header=BB74_159 Depth=2
	jmp	.LBB74_168
.LBB74_168:                             # %for.inc677
                                        #   in Loop: Header=BB74_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_159
.LBB74_169:                             # %for.end679
                                        #   in Loop: Header=BB74_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB74_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB74_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB74_171:                             # %if.end682
                                        #   in Loop: Header=BB74_1 Depth=1
	jmp	.LBB74_172
.LBB74_172:                             # %for.inc683
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_1
.LBB74_173:                             # %for.end685
	cmpl	$462739173, -48(%rbp)   # imm = 0x1B94D6E5
	jne	.LBB74_175
.LBB74_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_174
.Lfunc_end74:
	.size	GetCtxModelNumber.67, .Lfunc_end74-GetCtxModelNumber.67
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.68        # -- Begin function init_contexts.68
	.p2align	4, 0x90
	.type	init_contexts.68,@function
init_contexts.68:                       # @init_contexts.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$397852034, -28(%rbp)   # imm = 0x17B6BD82
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB75_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB75_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	$0, -4(%rbp)
.LBB75_3:                               # %for.cond2
                                        #   Parent Loop BB75_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB75_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB75_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB75_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB75_7
.LBB75_6:                               # %if.else
                                        #   in Loop: Header=BB75_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB75_7:                               # %if.end
                                        #   in Loop: Header=BB75_3 Depth=2
	jmp	.LBB75_8
.LBB75_8:                               # %for.inc
                                        #   in Loop: Header=BB75_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_3
.LBB75_9:                               # %for.end
                                        #   in Loop: Header=BB75_1 Depth=1
	jmp	.LBB75_10
.LBB75_10:                              # %for.inc28
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_1
.LBB75_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB75_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB75_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB75_12 Depth=1
	movl	$0, -4(%rbp)
.LBB75_14:                              # %for.cond34
                                        #   Parent Loop BB75_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB75_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB75_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB75_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB75_18
.LBB75_17:                              # %if.else52
                                        #   in Loop: Header=BB75_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB75_18:                              # %if.end66
                                        #   in Loop: Header=BB75_14 Depth=2
	jmp	.LBB75_19
.LBB75_19:                              # %for.inc67
                                        #   in Loop: Header=BB75_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_14
.LBB75_20:                              # %for.end69
                                        #   in Loop: Header=BB75_12 Depth=1
	jmp	.LBB75_21
.LBB75_21:                              # %for.inc70
                                        #   in Loop: Header=BB75_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_12
.LBB75_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB75_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB75_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB75_23 Depth=1
	movl	$0, -4(%rbp)
.LBB75_25:                              # %for.cond76
                                        #   Parent Loop BB75_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB75_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB75_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB75_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB75_29
.LBB75_28:                              # %if.else94
                                        #   in Loop: Header=BB75_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB75_29:                              # %if.end108
                                        #   in Loop: Header=BB75_25 Depth=2
	jmp	.LBB75_30
.LBB75_30:                              # %for.inc109
                                        #   in Loop: Header=BB75_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_25
.LBB75_31:                              # %for.end111
                                        #   in Loop: Header=BB75_23 Depth=1
	jmp	.LBB75_32
.LBB75_32:                              # %for.inc112
                                        #   in Loop: Header=BB75_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_23
.LBB75_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB75_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB75_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB75_34 Depth=1
	movl	$0, -4(%rbp)
.LBB75_36:                              # %for.cond118
                                        #   Parent Loop BB75_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB75_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB75_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB75_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB75_40
.LBB75_39:                              # %if.else136
                                        #   in Loop: Header=BB75_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB75_40:                              # %if.end150
                                        #   in Loop: Header=BB75_36 Depth=2
	jmp	.LBB75_41
.LBB75_41:                              # %for.inc151
                                        #   in Loop: Header=BB75_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_36
.LBB75_42:                              # %for.end153
                                        #   in Loop: Header=BB75_34 Depth=1
	jmp	.LBB75_43
.LBB75_43:                              # %for.inc154
                                        #   in Loop: Header=BB75_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_34
.LBB75_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB75_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB75_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB75_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB75_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB75_49
.LBB75_48:                              # %if.else172
                                        #   in Loop: Header=BB75_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB75_49:                              # %if.end183
                                        #   in Loop: Header=BB75_45 Depth=1
	jmp	.LBB75_50
.LBB75_50:                              # %for.inc184
                                        #   in Loop: Header=BB75_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_45
.LBB75_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB75_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB75_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB75_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB75_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB75_56
.LBB75_55:                              # %if.else202
                                        #   in Loop: Header=BB75_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB75_56:                              # %if.end213
                                        #   in Loop: Header=BB75_52 Depth=1
	jmp	.LBB75_57
.LBB75_57:                              # %for.inc214
                                        #   in Loop: Header=BB75_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_52
.LBB75_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB75_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB75_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB75_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB75_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB75_63
.LBB75_62:                              # %if.else232
                                        #   in Loop: Header=BB75_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB75_63:                              # %if.end243
                                        #   in Loop: Header=BB75_59 Depth=1
	jmp	.LBB75_64
.LBB75_64:                              # %for.inc244
                                        #   in Loop: Header=BB75_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_59
.LBB75_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB75_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB75_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB75_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB75_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB75_70
.LBB75_69:                              # %if.else262
                                        #   in Loop: Header=BB75_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB75_70:                              # %if.end273
                                        #   in Loop: Header=BB75_66 Depth=1
	jmp	.LBB75_71
.LBB75_71:                              # %for.inc274
                                        #   in Loop: Header=BB75_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_66
.LBB75_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB75_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB75_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB75_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB75_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB75_77
.LBB75_76:                              # %if.else292
                                        #   in Loop: Header=BB75_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB75_77:                              # %if.end303
                                        #   in Loop: Header=BB75_73 Depth=1
	jmp	.LBB75_78
.LBB75_78:                              # %for.inc304
                                        #   in Loop: Header=BB75_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_73
.LBB75_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB75_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB75_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB75_80 Depth=1
	movl	$0, -4(%rbp)
.LBB75_82:                              # %for.cond310
                                        #   Parent Loop BB75_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB75_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB75_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB75_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB75_86
.LBB75_85:                              # %if.else328
                                        #   in Loop: Header=BB75_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB75_86:                              # %if.end342
                                        #   in Loop: Header=BB75_82 Depth=2
	jmp	.LBB75_87
.LBB75_87:                              # %for.inc343
                                        #   in Loop: Header=BB75_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_82
.LBB75_88:                              # %for.end345
                                        #   in Loop: Header=BB75_80 Depth=1
	jmp	.LBB75_89
.LBB75_89:                              # %for.inc346
                                        #   in Loop: Header=BB75_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_80
.LBB75_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB75_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB75_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB75_91 Depth=1
	movl	$0, -4(%rbp)
.LBB75_93:                              # %for.cond352
                                        #   Parent Loop BB75_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB75_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB75_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB75_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB75_97
.LBB75_96:                              # %if.else370
                                        #   in Loop: Header=BB75_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB75_97:                              # %if.end384
                                        #   in Loop: Header=BB75_93 Depth=2
	jmp	.LBB75_98
.LBB75_98:                              # %for.inc385
                                        #   in Loop: Header=BB75_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_93
.LBB75_99:                              # %for.end387
                                        #   in Loop: Header=BB75_91 Depth=1
	jmp	.LBB75_100
.LBB75_100:                             # %for.inc388
                                        #   in Loop: Header=BB75_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_91
.LBB75_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB75_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB75_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB75_102 Depth=1
	movl	$0, -4(%rbp)
.LBB75_104:                             # %for.cond394
                                        #   Parent Loop BB75_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB75_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB75_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB75_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB75_108
.LBB75_107:                             # %if.else412
                                        #   in Loop: Header=BB75_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB75_108:                             # %if.end426
                                        #   in Loop: Header=BB75_104 Depth=2
	jmp	.LBB75_109
.LBB75_109:                             # %for.inc427
                                        #   in Loop: Header=BB75_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_104
.LBB75_110:                             # %for.end429
                                        #   in Loop: Header=BB75_102 Depth=1
	jmp	.LBB75_111
.LBB75_111:                             # %for.inc430
                                        #   in Loop: Header=BB75_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_102
.LBB75_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB75_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB75_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB75_113 Depth=1
	movl	$0, -4(%rbp)
.LBB75_115:                             # %for.cond436
                                        #   Parent Loop BB75_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB75_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB75_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB75_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB75_119
.LBB75_118:                             # %if.else454
                                        #   in Loop: Header=BB75_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB75_119:                             # %if.end468
                                        #   in Loop: Header=BB75_115 Depth=2
	jmp	.LBB75_120
.LBB75_120:                             # %for.inc469
                                        #   in Loop: Header=BB75_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_115
.LBB75_121:                             # %for.end471
                                        #   in Loop: Header=BB75_113 Depth=1
	jmp	.LBB75_122
.LBB75_122:                             # %for.inc472
                                        #   in Loop: Header=BB75_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_113
.LBB75_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB75_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB75_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB75_124 Depth=1
	movl	$0, -4(%rbp)
.LBB75_126:                             # %for.cond478
                                        #   Parent Loop BB75_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB75_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB75_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB75_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB75_130
.LBB75_129:                             # %if.else496
                                        #   in Loop: Header=BB75_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB75_130:                             # %if.end510
                                        #   in Loop: Header=BB75_126 Depth=2
	jmp	.LBB75_131
.LBB75_131:                             # %for.inc511
                                        #   in Loop: Header=BB75_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_126
.LBB75_132:                             # %for.end513
                                        #   in Loop: Header=BB75_124 Depth=1
	jmp	.LBB75_133
.LBB75_133:                             # %for.inc514
                                        #   in Loop: Header=BB75_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_124
.LBB75_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB75_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB75_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB75_135 Depth=1
	movl	$0, -4(%rbp)
.LBB75_137:                             # %for.cond520
                                        #   Parent Loop BB75_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB75_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB75_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB75_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB75_141
.LBB75_140:                             # %if.else538
                                        #   in Loop: Header=BB75_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB75_141:                             # %if.end552
                                        #   in Loop: Header=BB75_137 Depth=2
	jmp	.LBB75_142
.LBB75_142:                             # %for.inc553
                                        #   in Loop: Header=BB75_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_137
.LBB75_143:                             # %for.end555
                                        #   in Loop: Header=BB75_135 Depth=1
	jmp	.LBB75_144
.LBB75_144:                             # %for.inc556
                                        #   in Loop: Header=BB75_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_135
.LBB75_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB75_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB75_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB75_146 Depth=1
	movl	$0, -4(%rbp)
.LBB75_148:                             # %for.cond562
                                        #   Parent Loop BB75_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB75_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB75_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB75_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB75_152
.LBB75_151:                             # %if.else580
                                        #   in Loop: Header=BB75_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB75_152:                             # %if.end594
                                        #   in Loop: Header=BB75_148 Depth=2
	jmp	.LBB75_153
.LBB75_153:                             # %for.inc595
                                        #   in Loop: Header=BB75_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_148
.LBB75_154:                             # %for.end597
                                        #   in Loop: Header=BB75_146 Depth=1
	jmp	.LBB75_155
.LBB75_155:                             # %for.inc598
                                        #   in Loop: Header=BB75_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_146
.LBB75_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB75_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB75_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB75_157 Depth=1
	movl	$0, -4(%rbp)
.LBB75_159:                             # %for.cond604
                                        #   Parent Loop BB75_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB75_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB75_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB75_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB75_163
.LBB75_162:                             # %if.else622
                                        #   in Loop: Header=BB75_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB75_163:                             # %if.end636
                                        #   in Loop: Header=BB75_159 Depth=2
	jmp	.LBB75_164
.LBB75_164:                             # %for.inc637
                                        #   in Loop: Header=BB75_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_159
.LBB75_165:                             # %for.end639
                                        #   in Loop: Header=BB75_157 Depth=1
	jmp	.LBB75_166
.LBB75_166:                             # %for.inc640
                                        #   in Loop: Header=BB75_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_157
.LBB75_167:                             # %for.end642
	cmpl	$397852034, -28(%rbp)   # imm = 0x17B6BD82
	jne	.LBB75_169
.LBB75_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_168
.Lfunc_end75:
	.size	init_contexts.68, .Lfunc_end75-init_contexts.68
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.69
.LCPI76_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.69
	.p2align	4, 0x90
	.type	GetCtxModelNumber.69,@function
GetCtxModelNumber.69:                   # @GetCtxModelNumber.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI76_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$139691806, -44(%rbp)   # imm = 0x853871E
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB76_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_3 Depth 2
                                        #       Child Loop BB76_5 Depth 3
                                        #     Child Loop BB76_14 Depth 2
                                        #       Child Loop BB76_16 Depth 3
                                        #     Child Loop BB76_25 Depth 2
                                        #       Child Loop BB76_27 Depth 3
                                        #     Child Loop BB76_36 Depth 2
                                        #       Child Loop BB76_38 Depth 3
                                        #     Child Loop BB76_47 Depth 2
                                        #     Child Loop BB76_54 Depth 2
                                        #     Child Loop BB76_61 Depth 2
                                        #     Child Loop BB76_68 Depth 2
                                        #     Child Loop BB76_75 Depth 2
                                        #     Child Loop BB76_82 Depth 2
                                        #       Child Loop BB76_84 Depth 3
                                        #     Child Loop BB76_93 Depth 2
                                        #       Child Loop BB76_95 Depth 3
                                        #     Child Loop BB76_104 Depth 2
                                        #       Child Loop BB76_106 Depth 3
                                        #     Child Loop BB76_115 Depth 2
                                        #       Child Loop BB76_117 Depth 3
                                        #     Child Loop BB76_126 Depth 2
                                        #       Child Loop BB76_128 Depth 3
                                        #     Child Loop BB76_137 Depth 2
                                        #       Child Loop BB76_139 Depth 3
                                        #     Child Loop BB76_148 Depth 2
                                        #       Child Loop BB76_150 Depth 3
                                        #     Child Loop BB76_159 Depth 2
                                        #       Child Loop BB76_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB76_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB76_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB76_3:                               # %for.cond2
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB76_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB76_3 Depth=2
	movl	$0, -4(%rbp)
.LBB76_5:                               # %for.cond5
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB76_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB76_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB76_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_9
.LBB76_8:                               # %if.else
                                        #   in Loop: Header=BB76_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_9:                               # %if.end
                                        #   in Loop: Header=BB76_5 Depth=3
	jmp	.LBB76_10
.LBB76_10:                              # %for.inc
                                        #   in Loop: Header=BB76_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_5
.LBB76_11:                              # %for.end
                                        #   in Loop: Header=BB76_3 Depth=2
	jmp	.LBB76_12
.LBB76_12:                              # %for.inc33
                                        #   in Loop: Header=BB76_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_3
.LBB76_13:                              # %for.end35
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_14:                              # %for.cond36
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB76_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB76_14 Depth=2
	movl	$0, -4(%rbp)
.LBB76_16:                              # %for.cond39
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB76_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB76_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB76_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_20
.LBB76_19:                              # %if.else58
                                        #   in Loop: Header=BB76_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_20:                              # %if.end73
                                        #   in Loop: Header=BB76_16 Depth=3
	jmp	.LBB76_21
.LBB76_21:                              # %for.inc74
                                        #   in Loop: Header=BB76_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_16
.LBB76_22:                              # %for.end76
                                        #   in Loop: Header=BB76_14 Depth=2
	jmp	.LBB76_23
.LBB76_23:                              # %for.inc77
                                        #   in Loop: Header=BB76_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_14
.LBB76_24:                              # %for.end79
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_25:                              # %for.cond80
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB76_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB76_25 Depth=2
	movl	$0, -4(%rbp)
.LBB76_27:                              # %for.cond83
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB76_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB76_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB76_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_31
.LBB76_30:                              # %if.else102
                                        #   in Loop: Header=BB76_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_31:                              # %if.end117
                                        #   in Loop: Header=BB76_27 Depth=3
	jmp	.LBB76_32
.LBB76_32:                              # %for.inc118
                                        #   in Loop: Header=BB76_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_27
.LBB76_33:                              # %for.end120
                                        #   in Loop: Header=BB76_25 Depth=2
	jmp	.LBB76_34
.LBB76_34:                              # %for.inc121
                                        #   in Loop: Header=BB76_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_25
.LBB76_35:                              # %for.end123
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_36:                              # %for.cond124
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB76_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB76_36 Depth=2
	movl	$0, -4(%rbp)
.LBB76_38:                              # %for.cond127
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB76_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB76_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB76_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_42
.LBB76_41:                              # %if.else146
                                        #   in Loop: Header=BB76_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_42:                              # %if.end161
                                        #   in Loop: Header=BB76_38 Depth=3
	jmp	.LBB76_43
.LBB76_43:                              # %for.inc162
                                        #   in Loop: Header=BB76_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_38
.LBB76_44:                              # %for.end164
                                        #   in Loop: Header=BB76_36 Depth=2
	jmp	.LBB76_45
.LBB76_45:                              # %for.inc165
                                        #   in Loop: Header=BB76_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_36
.LBB76_46:                              # %for.end167
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -4(%rbp)
.LBB76_47:                              # %for.cond168
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB76_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB76_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB76_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_51
.LBB76_50:                              # %if.else184
                                        #   in Loop: Header=BB76_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_51:                              # %if.end196
                                        #   in Loop: Header=BB76_47 Depth=2
	jmp	.LBB76_52
.LBB76_52:                              # %for.inc197
                                        #   in Loop: Header=BB76_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_47
.LBB76_53:                              # %for.end199
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -4(%rbp)
.LBB76_54:                              # %for.cond200
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB76_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB76_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB76_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_58
.LBB76_57:                              # %if.else216
                                        #   in Loop: Header=BB76_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_58:                              # %if.end228
                                        #   in Loop: Header=BB76_54 Depth=2
	jmp	.LBB76_59
.LBB76_59:                              # %for.inc229
                                        #   in Loop: Header=BB76_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_54
.LBB76_60:                              # %for.end231
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -4(%rbp)
.LBB76_61:                              # %for.cond232
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB76_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB76_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB76_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_65
.LBB76_64:                              # %if.else248
                                        #   in Loop: Header=BB76_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_65:                              # %if.end260
                                        #   in Loop: Header=BB76_61 Depth=2
	jmp	.LBB76_66
.LBB76_66:                              # %for.inc261
                                        #   in Loop: Header=BB76_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_61
.LBB76_67:                              # %for.end263
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -4(%rbp)
.LBB76_68:                              # %for.cond264
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB76_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB76_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB76_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_72
.LBB76_71:                              # %if.else280
                                        #   in Loop: Header=BB76_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_72:                              # %if.end292
                                        #   in Loop: Header=BB76_68 Depth=2
	jmp	.LBB76_73
.LBB76_73:                              # %for.inc293
                                        #   in Loop: Header=BB76_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_68
.LBB76_74:                              # %for.end295
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -4(%rbp)
.LBB76_75:                              # %for.cond296
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB76_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB76_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB76_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_79
.LBB76_78:                              # %if.else312
                                        #   in Loop: Header=BB76_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_79:                              # %if.end324
                                        #   in Loop: Header=BB76_75 Depth=2
	jmp	.LBB76_80
.LBB76_80:                              # %for.inc325
                                        #   in Loop: Header=BB76_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_75
.LBB76_81:                              # %for.end327
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_82:                              # %for.cond328
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB76_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB76_82 Depth=2
	movl	$0, -4(%rbp)
.LBB76_84:                              # %for.cond331
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB76_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB76_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB76_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_88
.LBB76_87:                              # %if.else350
                                        #   in Loop: Header=BB76_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_88:                              # %if.end365
                                        #   in Loop: Header=BB76_84 Depth=3
	jmp	.LBB76_89
.LBB76_89:                              # %for.inc366
                                        #   in Loop: Header=BB76_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_84
.LBB76_90:                              # %for.end368
                                        #   in Loop: Header=BB76_82 Depth=2
	jmp	.LBB76_91
.LBB76_91:                              # %for.inc369
                                        #   in Loop: Header=BB76_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_82
.LBB76_92:                              # %for.end371
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_93:                              # %for.cond372
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB76_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB76_93 Depth=2
	movl	$0, -4(%rbp)
.LBB76_95:                              # %for.cond375
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB76_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB76_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB76_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_99
.LBB76_98:                              # %if.else394
                                        #   in Loop: Header=BB76_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_99:                              # %if.end409
                                        #   in Loop: Header=BB76_95 Depth=3
	jmp	.LBB76_100
.LBB76_100:                             # %for.inc410
                                        #   in Loop: Header=BB76_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_95
.LBB76_101:                             # %for.end412
                                        #   in Loop: Header=BB76_93 Depth=2
	jmp	.LBB76_102
.LBB76_102:                             # %for.inc413
                                        #   in Loop: Header=BB76_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_93
.LBB76_103:                             # %for.end415
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_104:                             # %for.cond416
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB76_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB76_104 Depth=2
	movl	$0, -4(%rbp)
.LBB76_106:                             # %for.cond419
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB76_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB76_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB76_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_110
.LBB76_109:                             # %if.else438
                                        #   in Loop: Header=BB76_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_110:                             # %if.end453
                                        #   in Loop: Header=BB76_106 Depth=3
	jmp	.LBB76_111
.LBB76_111:                             # %for.inc454
                                        #   in Loop: Header=BB76_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_106
.LBB76_112:                             # %for.end456
                                        #   in Loop: Header=BB76_104 Depth=2
	jmp	.LBB76_113
.LBB76_113:                             # %for.inc457
                                        #   in Loop: Header=BB76_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_104
.LBB76_114:                             # %for.end459
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_115:                             # %for.cond460
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB76_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB76_115 Depth=2
	movl	$0, -4(%rbp)
.LBB76_117:                             # %for.cond463
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB76_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB76_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB76_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_121
.LBB76_120:                             # %if.else482
                                        #   in Loop: Header=BB76_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_121:                             # %if.end497
                                        #   in Loop: Header=BB76_117 Depth=3
	jmp	.LBB76_122
.LBB76_122:                             # %for.inc498
                                        #   in Loop: Header=BB76_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_117
.LBB76_123:                             # %for.end500
                                        #   in Loop: Header=BB76_115 Depth=2
	jmp	.LBB76_124
.LBB76_124:                             # %for.inc501
                                        #   in Loop: Header=BB76_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_115
.LBB76_125:                             # %for.end503
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_126:                             # %for.cond504
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB76_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB76_126 Depth=2
	movl	$0, -4(%rbp)
.LBB76_128:                             # %for.cond507
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB76_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB76_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB76_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_132
.LBB76_131:                             # %if.else526
                                        #   in Loop: Header=BB76_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_132:                             # %if.end541
                                        #   in Loop: Header=BB76_128 Depth=3
	jmp	.LBB76_133
.LBB76_133:                             # %for.inc542
                                        #   in Loop: Header=BB76_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_128
.LBB76_134:                             # %for.end544
                                        #   in Loop: Header=BB76_126 Depth=2
	jmp	.LBB76_135
.LBB76_135:                             # %for.inc545
                                        #   in Loop: Header=BB76_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_126
.LBB76_136:                             # %for.end547
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_137:                             # %for.cond548
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB76_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB76_137 Depth=2
	movl	$0, -4(%rbp)
.LBB76_139:                             # %for.cond551
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB76_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB76_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB76_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_143
.LBB76_142:                             # %if.else570
                                        #   in Loop: Header=BB76_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_143:                             # %if.end585
                                        #   in Loop: Header=BB76_139 Depth=3
	jmp	.LBB76_144
.LBB76_144:                             # %for.inc586
                                        #   in Loop: Header=BB76_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_139
.LBB76_145:                             # %for.end588
                                        #   in Loop: Header=BB76_137 Depth=2
	jmp	.LBB76_146
.LBB76_146:                             # %for.inc589
                                        #   in Loop: Header=BB76_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_137
.LBB76_147:                             # %for.end591
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_148:                             # %for.cond592
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB76_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB76_148 Depth=2
	movl	$0, -4(%rbp)
.LBB76_150:                             # %for.cond595
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB76_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB76_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB76_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_154
.LBB76_153:                             # %if.else614
                                        #   in Loop: Header=BB76_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_154:                             # %if.end629
                                        #   in Loop: Header=BB76_150 Depth=3
	jmp	.LBB76_155
.LBB76_155:                             # %for.inc630
                                        #   in Loop: Header=BB76_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_150
.LBB76_156:                             # %for.end632
                                        #   in Loop: Header=BB76_148 Depth=2
	jmp	.LBB76_157
.LBB76_157:                             # %for.inc633
                                        #   in Loop: Header=BB76_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_148
.LBB76_158:                             # %for.end635
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -8(%rbp)
.LBB76_159:                             # %for.cond636
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB76_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB76_159 Depth=2
	movl	$0, -4(%rbp)
.LBB76_161:                             # %for.cond639
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB76_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB76_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB76_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB76_165
.LBB76_164:                             # %if.else658
                                        #   in Loop: Header=BB76_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB76_165:                             # %if.end673
                                        #   in Loop: Header=BB76_161 Depth=3
	jmp	.LBB76_166
.LBB76_166:                             # %for.inc674
                                        #   in Loop: Header=BB76_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_161
.LBB76_167:                             # %for.end676
                                        #   in Loop: Header=BB76_159 Depth=2
	jmp	.LBB76_168
.LBB76_168:                             # %for.inc677
                                        #   in Loop: Header=BB76_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_159
.LBB76_169:                             # %for.end679
                                        #   in Loop: Header=BB76_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB76_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB76_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB76_171:                             # %if.end682
                                        #   in Loop: Header=BB76_1 Depth=1
	jmp	.LBB76_172
.LBB76_172:                             # %for.inc683
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_1
.LBB76_173:                             # %for.end685
	cmpl	$139691806, -44(%rbp)   # imm = 0x853871E
	jne	.LBB76_175
.LBB76_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_174
.Lfunc_end76:
	.size	GetCtxModelNumber.69, .Lfunc_end76-GetCtxModelNumber.69
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.70
.LCPI77_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.70
	.p2align	4, 0x90
	.type	GetCtxModelNumber.70,@function
GetCtxModelNumber.70:                   # @GetCtxModelNumber.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI77_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1629594489, -48(%rbp)  # imm = 0x6121A379
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB77_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_3 Depth 2
                                        #       Child Loop BB77_5 Depth 3
                                        #     Child Loop BB77_14 Depth 2
                                        #       Child Loop BB77_16 Depth 3
                                        #     Child Loop BB77_25 Depth 2
                                        #       Child Loop BB77_27 Depth 3
                                        #     Child Loop BB77_36 Depth 2
                                        #       Child Loop BB77_38 Depth 3
                                        #     Child Loop BB77_47 Depth 2
                                        #     Child Loop BB77_54 Depth 2
                                        #     Child Loop BB77_61 Depth 2
                                        #     Child Loop BB77_68 Depth 2
                                        #     Child Loop BB77_75 Depth 2
                                        #     Child Loop BB77_82 Depth 2
                                        #       Child Loop BB77_84 Depth 3
                                        #     Child Loop BB77_93 Depth 2
                                        #       Child Loop BB77_95 Depth 3
                                        #     Child Loop BB77_104 Depth 2
                                        #       Child Loop BB77_106 Depth 3
                                        #     Child Loop BB77_115 Depth 2
                                        #       Child Loop BB77_117 Depth 3
                                        #     Child Loop BB77_126 Depth 2
                                        #       Child Loop BB77_128 Depth 3
                                        #     Child Loop BB77_137 Depth 2
                                        #       Child Loop BB77_139 Depth 3
                                        #     Child Loop BB77_148 Depth 2
                                        #       Child Loop BB77_150 Depth 3
                                        #     Child Loop BB77_159 Depth 2
                                        #       Child Loop BB77_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB77_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB77_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB77_3:                               # %for.cond2
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB77_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	$0, -4(%rbp)
.LBB77_5:                               # %for.cond5
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB77_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB77_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB77_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_9
.LBB77_8:                               # %if.else
                                        #   in Loop: Header=BB77_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_9:                               # %if.end
                                        #   in Loop: Header=BB77_5 Depth=3
	jmp	.LBB77_10
.LBB77_10:                              # %for.inc
                                        #   in Loop: Header=BB77_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_5
.LBB77_11:                              # %for.end
                                        #   in Loop: Header=BB77_3 Depth=2
	jmp	.LBB77_12
.LBB77_12:                              # %for.inc33
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_3
.LBB77_13:                              # %for.end35
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_14:                              # %for.cond36
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB77_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB77_14 Depth=2
	movl	$0, -4(%rbp)
.LBB77_16:                              # %for.cond39
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB77_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB77_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB77_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_20
.LBB77_19:                              # %if.else58
                                        #   in Loop: Header=BB77_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_20:                              # %if.end73
                                        #   in Loop: Header=BB77_16 Depth=3
	jmp	.LBB77_21
.LBB77_21:                              # %for.inc74
                                        #   in Loop: Header=BB77_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_16
.LBB77_22:                              # %for.end76
                                        #   in Loop: Header=BB77_14 Depth=2
	jmp	.LBB77_23
.LBB77_23:                              # %for.inc77
                                        #   in Loop: Header=BB77_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_14
.LBB77_24:                              # %for.end79
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_25:                              # %for.cond80
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB77_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB77_25 Depth=2
	movl	$0, -4(%rbp)
.LBB77_27:                              # %for.cond83
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB77_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB77_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB77_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_31
.LBB77_30:                              # %if.else102
                                        #   in Loop: Header=BB77_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_31:                              # %if.end117
                                        #   in Loop: Header=BB77_27 Depth=3
	jmp	.LBB77_32
.LBB77_32:                              # %for.inc118
                                        #   in Loop: Header=BB77_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_27
.LBB77_33:                              # %for.end120
                                        #   in Loop: Header=BB77_25 Depth=2
	jmp	.LBB77_34
.LBB77_34:                              # %for.inc121
                                        #   in Loop: Header=BB77_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_25
.LBB77_35:                              # %for.end123
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_36:                              # %for.cond124
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB77_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB77_36 Depth=2
	movl	$0, -4(%rbp)
.LBB77_38:                              # %for.cond127
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB77_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB77_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB77_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_42
.LBB77_41:                              # %if.else146
                                        #   in Loop: Header=BB77_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_42:                              # %if.end161
                                        #   in Loop: Header=BB77_38 Depth=3
	jmp	.LBB77_43
.LBB77_43:                              # %for.inc162
                                        #   in Loop: Header=BB77_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_38
.LBB77_44:                              # %for.end164
                                        #   in Loop: Header=BB77_36 Depth=2
	jmp	.LBB77_45
.LBB77_45:                              # %for.inc165
                                        #   in Loop: Header=BB77_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_36
.LBB77_46:                              # %for.end167
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -4(%rbp)
.LBB77_47:                              # %for.cond168
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB77_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB77_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB77_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_51
.LBB77_50:                              # %if.else184
                                        #   in Loop: Header=BB77_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_51:                              # %if.end196
                                        #   in Loop: Header=BB77_47 Depth=2
	jmp	.LBB77_52
.LBB77_52:                              # %for.inc197
                                        #   in Loop: Header=BB77_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_47
.LBB77_53:                              # %for.end199
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -4(%rbp)
.LBB77_54:                              # %for.cond200
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB77_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB77_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB77_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_58
.LBB77_57:                              # %if.else216
                                        #   in Loop: Header=BB77_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_58:                              # %if.end228
                                        #   in Loop: Header=BB77_54 Depth=2
	jmp	.LBB77_59
.LBB77_59:                              # %for.inc229
                                        #   in Loop: Header=BB77_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_54
.LBB77_60:                              # %for.end231
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -4(%rbp)
.LBB77_61:                              # %for.cond232
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB77_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB77_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB77_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_65
.LBB77_64:                              # %if.else248
                                        #   in Loop: Header=BB77_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_65:                              # %if.end260
                                        #   in Loop: Header=BB77_61 Depth=2
	jmp	.LBB77_66
.LBB77_66:                              # %for.inc261
                                        #   in Loop: Header=BB77_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_61
.LBB77_67:                              # %for.end263
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -4(%rbp)
.LBB77_68:                              # %for.cond264
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB77_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB77_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB77_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_72
.LBB77_71:                              # %if.else280
                                        #   in Loop: Header=BB77_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_72:                              # %if.end292
                                        #   in Loop: Header=BB77_68 Depth=2
	jmp	.LBB77_73
.LBB77_73:                              # %for.inc293
                                        #   in Loop: Header=BB77_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_68
.LBB77_74:                              # %for.end295
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -4(%rbp)
.LBB77_75:                              # %for.cond296
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB77_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB77_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB77_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_79
.LBB77_78:                              # %if.else312
                                        #   in Loop: Header=BB77_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_79:                              # %if.end324
                                        #   in Loop: Header=BB77_75 Depth=2
	jmp	.LBB77_80
.LBB77_80:                              # %for.inc325
                                        #   in Loop: Header=BB77_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_75
.LBB77_81:                              # %for.end327
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_82:                              # %for.cond328
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB77_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB77_82 Depth=2
	movl	$0, -4(%rbp)
.LBB77_84:                              # %for.cond331
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB77_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB77_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB77_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_88
.LBB77_87:                              # %if.else350
                                        #   in Loop: Header=BB77_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_88:                              # %if.end365
                                        #   in Loop: Header=BB77_84 Depth=3
	jmp	.LBB77_89
.LBB77_89:                              # %for.inc366
                                        #   in Loop: Header=BB77_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_84
.LBB77_90:                              # %for.end368
                                        #   in Loop: Header=BB77_82 Depth=2
	jmp	.LBB77_91
.LBB77_91:                              # %for.inc369
                                        #   in Loop: Header=BB77_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_82
.LBB77_92:                              # %for.end371
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_93:                              # %for.cond372
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB77_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB77_93 Depth=2
	movl	$0, -4(%rbp)
.LBB77_95:                              # %for.cond375
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB77_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB77_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB77_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_99
.LBB77_98:                              # %if.else394
                                        #   in Loop: Header=BB77_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_99:                              # %if.end409
                                        #   in Loop: Header=BB77_95 Depth=3
	jmp	.LBB77_100
.LBB77_100:                             # %for.inc410
                                        #   in Loop: Header=BB77_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_95
.LBB77_101:                             # %for.end412
                                        #   in Loop: Header=BB77_93 Depth=2
	jmp	.LBB77_102
.LBB77_102:                             # %for.inc413
                                        #   in Loop: Header=BB77_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_93
.LBB77_103:                             # %for.end415
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_104:                             # %for.cond416
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB77_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB77_104 Depth=2
	movl	$0, -4(%rbp)
.LBB77_106:                             # %for.cond419
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB77_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB77_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB77_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_110
.LBB77_109:                             # %if.else438
                                        #   in Loop: Header=BB77_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_110:                             # %if.end453
                                        #   in Loop: Header=BB77_106 Depth=3
	jmp	.LBB77_111
.LBB77_111:                             # %for.inc454
                                        #   in Loop: Header=BB77_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_106
.LBB77_112:                             # %for.end456
                                        #   in Loop: Header=BB77_104 Depth=2
	jmp	.LBB77_113
.LBB77_113:                             # %for.inc457
                                        #   in Loop: Header=BB77_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_104
.LBB77_114:                             # %for.end459
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_115:                             # %for.cond460
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB77_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB77_115 Depth=2
	movl	$0, -4(%rbp)
.LBB77_117:                             # %for.cond463
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB77_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB77_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB77_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_121
.LBB77_120:                             # %if.else482
                                        #   in Loop: Header=BB77_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_121:                             # %if.end497
                                        #   in Loop: Header=BB77_117 Depth=3
	jmp	.LBB77_122
.LBB77_122:                             # %for.inc498
                                        #   in Loop: Header=BB77_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_117
.LBB77_123:                             # %for.end500
                                        #   in Loop: Header=BB77_115 Depth=2
	jmp	.LBB77_124
.LBB77_124:                             # %for.inc501
                                        #   in Loop: Header=BB77_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_115
.LBB77_125:                             # %for.end503
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_126:                             # %for.cond504
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB77_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB77_126 Depth=2
	movl	$0, -4(%rbp)
.LBB77_128:                             # %for.cond507
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB77_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB77_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB77_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_132
.LBB77_131:                             # %if.else526
                                        #   in Loop: Header=BB77_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_132:                             # %if.end541
                                        #   in Loop: Header=BB77_128 Depth=3
	jmp	.LBB77_133
.LBB77_133:                             # %for.inc542
                                        #   in Loop: Header=BB77_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_128
.LBB77_134:                             # %for.end544
                                        #   in Loop: Header=BB77_126 Depth=2
	jmp	.LBB77_135
.LBB77_135:                             # %for.inc545
                                        #   in Loop: Header=BB77_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_126
.LBB77_136:                             # %for.end547
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_137:                             # %for.cond548
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB77_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB77_137 Depth=2
	movl	$0, -4(%rbp)
.LBB77_139:                             # %for.cond551
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB77_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB77_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB77_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_143
.LBB77_142:                             # %if.else570
                                        #   in Loop: Header=BB77_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_143:                             # %if.end585
                                        #   in Loop: Header=BB77_139 Depth=3
	jmp	.LBB77_144
.LBB77_144:                             # %for.inc586
                                        #   in Loop: Header=BB77_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_139
.LBB77_145:                             # %for.end588
                                        #   in Loop: Header=BB77_137 Depth=2
	jmp	.LBB77_146
.LBB77_146:                             # %for.inc589
                                        #   in Loop: Header=BB77_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_137
.LBB77_147:                             # %for.end591
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_148:                             # %for.cond592
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB77_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB77_148 Depth=2
	movl	$0, -4(%rbp)
.LBB77_150:                             # %for.cond595
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB77_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB77_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB77_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_154
.LBB77_153:                             # %if.else614
                                        #   in Loop: Header=BB77_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_154:                             # %if.end629
                                        #   in Loop: Header=BB77_150 Depth=3
	jmp	.LBB77_155
.LBB77_155:                             # %for.inc630
                                        #   in Loop: Header=BB77_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_150
.LBB77_156:                             # %for.end632
                                        #   in Loop: Header=BB77_148 Depth=2
	jmp	.LBB77_157
.LBB77_157:                             # %for.inc633
                                        #   in Loop: Header=BB77_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_148
.LBB77_158:                             # %for.end635
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_159:                             # %for.cond636
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB77_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB77_159 Depth=2
	movl	$0, -4(%rbp)
.LBB77_161:                             # %for.cond639
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB77_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB77_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB77_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_165
.LBB77_164:                             # %if.else658
                                        #   in Loop: Header=BB77_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_165:                             # %if.end673
                                        #   in Loop: Header=BB77_161 Depth=3
	jmp	.LBB77_166
.LBB77_166:                             # %for.inc674
                                        #   in Loop: Header=BB77_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_161
.LBB77_167:                             # %for.end676
                                        #   in Loop: Header=BB77_159 Depth=2
	jmp	.LBB77_168
.LBB77_168:                             # %for.inc677
                                        #   in Loop: Header=BB77_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_159
.LBB77_169:                             # %for.end679
                                        #   in Loop: Header=BB77_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB77_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB77_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB77_171:                             # %if.end682
                                        #   in Loop: Header=BB77_1 Depth=1
	jmp	.LBB77_172
.LBB77_172:                             # %for.inc683
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_1
.LBB77_173:                             # %for.end685
	cmpl	$1629594489, -48(%rbp)  # imm = 0x6121A379
	jne	.LBB77_175
.LBB77_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_174
.Lfunc_end77:
	.size	GetCtxModelNumber.70, .Lfunc_end77-GetCtxModelNumber.70
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.71
.LCPI78_0:
	.quad	4607182418800017408     # double 1
.LCPI78_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI78_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI78_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.71
	.p2align	4, 0x90
	.type	XRate.71,@function
XRate.71:                               # @XRate.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$335984746, -36(%rbp)   # imm = 0x1406B86A
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB78_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB78_3
.LBB78_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB78_3:                               # %cond.end
	vmovsd	.LCPI78_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI78_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI78_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI78_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB78_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI78_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB78_6
.LBB78_5:                               # %cond.false6
	vmovsd	.LCPI78_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI78_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI78_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB78_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB78_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB78_9
.LBB78_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB78_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB78_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB78_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB78_13
.LBB78_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB78_13:                              # %cond.end26
	jmp	.LBB78_15
.LBB78_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB78_15
.LBB78_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB78_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB78_18
.LBB78_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB78_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$335984746, -36(%rbp)   # imm = 0x1406B86A
	jne	.LBB78_20
.LBB78_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB78_19
.Lfunc_end78:
	.size	XRate.71, .Lfunc_end78-XRate.71
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.72
.LCPI79_0:
	.quad	4611686018427387904     # double 2
.LCPI79_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.72
	.p2align	4, 0x90
	.type	create_context_memory.72,@function
create_context_memory.72:               # @create_context_memory.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$958880888, -20(%rbp)   # imm = 0x39275C78
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB79_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB79_3
.LBB79_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB79_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB79_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB79_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB79_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB79_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB79_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB79_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB79_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB79_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB79_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB79_11:                              # %if.end10
                                        #   in Loop: Header=BB79_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB79_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB79_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB79_13:                              # %if.end16
                                        #   in Loop: Header=BB79_8 Depth=1
	movl	$0, -8(%rbp)
.LBB79_14:                              # %for.cond17
                                        #   Parent Loop BB79_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB79_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB79_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB79_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB79_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB79_17:                              # %if.end28
                                        #   in Loop: Header=BB79_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB79_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB79_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB79_19:                              # %if.end39
                                        #   in Loop: Header=BB79_14 Depth=2
	jmp	.LBB79_20
.LBB79_20:                              # %for.inc
                                        #   in Loop: Header=BB79_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_14
.LBB79_21:                              # %for.end
                                        #   in Loop: Header=BB79_8 Depth=1
	jmp	.LBB79_22
.LBB79_22:                              # %for.inc40
                                        #   in Loop: Header=BB79_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_8
.LBB79_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB79_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_26 Depth 2
                                        #       Child Loop BB79_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB79_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB79_24 Depth=1
	movl	$0, -8(%rbp)
.LBB79_26:                              # %for.cond47
                                        #   Parent Loop BB79_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB79_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB79_26 Depth=2
	movl	$0, -12(%rbp)
.LBB79_28:                              # %for.cond51
                                        #   Parent Loop BB79_24 Depth=1
                                        #     Parent Loop BB79_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB79_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB79_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB79_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_28
.LBB79_31:                              # %for.end63
                                        #   in Loop: Header=BB79_26 Depth=2
	jmp	.LBB79_32
.LBB79_32:                              # %for.inc64
                                        #   in Loop: Header=BB79_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_26
.LBB79_33:                              # %for.end66
                                        #   in Loop: Header=BB79_24 Depth=1
	jmp	.LBB79_34
.LBB79_34:                              # %for.inc67
                                        #   in Loop: Header=BB79_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_24
.LBB79_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB79_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB79_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB79_36 Depth=1
	vmovsd	.LCPI79_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI79_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI79_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB79_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_36
.LBB79_39:                              # %for.end98
	cmpl	$958880888, -20(%rbp)   # imm = 0x39275C78
	jne	.LBB79_41
.LBB79_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_40
.Lfunc_end79:
	.size	create_context_memory.72, .Lfunc_end79-create_context_memory.72
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.73
.LCPI80_0:
	.quad	4611686018427387904     # double 2
.LCPI80_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.73
	.p2align	4, 0x90
	.type	create_context_memory.73,@function
create_context_memory.73:               # @create_context_memory.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$498589359, -20(%rbp)   # imm = 0x1DB7DEAF
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB80_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB80_3
.LBB80_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB80_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB80_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB80_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB80_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB80_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB80_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB80_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB80_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB80_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB80_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB80_11:                              # %if.end10
                                        #   in Loop: Header=BB80_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB80_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB80_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB80_13:                              # %if.end16
                                        #   in Loop: Header=BB80_8 Depth=1
	movl	$0, -8(%rbp)
.LBB80_14:                              # %for.cond17
                                        #   Parent Loop BB80_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB80_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB80_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB80_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB80_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB80_17:                              # %if.end28
                                        #   in Loop: Header=BB80_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB80_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB80_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB80_19:                              # %if.end39
                                        #   in Loop: Header=BB80_14 Depth=2
	jmp	.LBB80_20
.LBB80_20:                              # %for.inc
                                        #   in Loop: Header=BB80_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_14
.LBB80_21:                              # %for.end
                                        #   in Loop: Header=BB80_8 Depth=1
	jmp	.LBB80_22
.LBB80_22:                              # %for.inc40
                                        #   in Loop: Header=BB80_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_8
.LBB80_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB80_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_26 Depth 2
                                        #       Child Loop BB80_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB80_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB80_24 Depth=1
	movl	$0, -8(%rbp)
.LBB80_26:                              # %for.cond47
                                        #   Parent Loop BB80_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB80_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB80_26 Depth=2
	movl	$0, -12(%rbp)
.LBB80_28:                              # %for.cond51
                                        #   Parent Loop BB80_24 Depth=1
                                        #     Parent Loop BB80_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB80_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB80_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB80_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_28
.LBB80_31:                              # %for.end63
                                        #   in Loop: Header=BB80_26 Depth=2
	jmp	.LBB80_32
.LBB80_32:                              # %for.inc64
                                        #   in Loop: Header=BB80_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_26
.LBB80_33:                              # %for.end66
                                        #   in Loop: Header=BB80_24 Depth=1
	jmp	.LBB80_34
.LBB80_34:                              # %for.inc67
                                        #   in Loop: Header=BB80_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_24
.LBB80_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB80_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB80_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB80_36 Depth=1
	vmovsd	.LCPI80_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI80_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI80_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB80_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_36
.LBB80_39:                              # %for.end98
	cmpl	$498589359, -20(%rbp)   # imm = 0x1DB7DEAF
	jne	.LBB80_41
.LBB80_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_40
.Lfunc_end80:
	.size	create_context_memory.73, .Lfunc_end80-create_context_memory.73
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.74
.LCPI81_0:
	.quad	4611686018427387904     # double 2
.LCPI81_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.74
	.p2align	4, 0x90
	.type	create_context_memory.74,@function
create_context_memory.74:               # @create_context_memory.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1846624891, -20(%rbp)  # imm = 0x6E11427B
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB81_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB81_3
.LBB81_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB81_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB81_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB81_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB81_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB81_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB81_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB81_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB81_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB81_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB81_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB81_11:                              # %if.end10
                                        #   in Loop: Header=BB81_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB81_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB81_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB81_13:                              # %if.end16
                                        #   in Loop: Header=BB81_8 Depth=1
	movl	$0, -8(%rbp)
.LBB81_14:                              # %for.cond17
                                        #   Parent Loop BB81_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB81_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB81_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB81_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB81_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB81_17:                              # %if.end28
                                        #   in Loop: Header=BB81_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB81_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB81_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB81_19:                              # %if.end39
                                        #   in Loop: Header=BB81_14 Depth=2
	jmp	.LBB81_20
.LBB81_20:                              # %for.inc
                                        #   in Loop: Header=BB81_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_14
.LBB81_21:                              # %for.end
                                        #   in Loop: Header=BB81_8 Depth=1
	jmp	.LBB81_22
.LBB81_22:                              # %for.inc40
                                        #   in Loop: Header=BB81_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_8
.LBB81_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB81_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_26 Depth 2
                                        #       Child Loop BB81_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB81_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB81_24 Depth=1
	movl	$0, -8(%rbp)
.LBB81_26:                              # %for.cond47
                                        #   Parent Loop BB81_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB81_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB81_26 Depth=2
	movl	$0, -12(%rbp)
.LBB81_28:                              # %for.cond51
                                        #   Parent Loop BB81_24 Depth=1
                                        #     Parent Loop BB81_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB81_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB81_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB81_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_28
.LBB81_31:                              # %for.end63
                                        #   in Loop: Header=BB81_26 Depth=2
	jmp	.LBB81_32
.LBB81_32:                              # %for.inc64
                                        #   in Loop: Header=BB81_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_26
.LBB81_33:                              # %for.end66
                                        #   in Loop: Header=BB81_24 Depth=1
	jmp	.LBB81_34
.LBB81_34:                              # %for.inc67
                                        #   in Loop: Header=BB81_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_24
.LBB81_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB81_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB81_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB81_36 Depth=1
	vmovsd	.LCPI81_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI81_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI81_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB81_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_36
.LBB81_39:                              # %for.end98
	cmpl	$1846624891, -20(%rbp)  # imm = 0x6E11427B
	jne	.LBB81_41
.LBB81_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_40
.Lfunc_end81:
	.size	create_context_memory.74, .Lfunc_end81-create_context_memory.74
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.75
.LCPI82_0:
	.quad	4611686018427387904     # double 2
.LCPI82_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.75
	.p2align	4, 0x90
	.type	create_context_memory.75,@function
create_context_memory.75:               # @create_context_memory.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1089219014, -20(%rbp)  # imm = 0x40EC29C6
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB82_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB82_3
.LBB82_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB82_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB82_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB82_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB82_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB82_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB82_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB82_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB82_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB82_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB82_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB82_11:                              # %if.end10
                                        #   in Loop: Header=BB82_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB82_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB82_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB82_13:                              # %if.end16
                                        #   in Loop: Header=BB82_8 Depth=1
	movl	$0, -8(%rbp)
.LBB82_14:                              # %for.cond17
                                        #   Parent Loop BB82_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB82_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB82_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB82_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB82_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB82_17:                              # %if.end28
                                        #   in Loop: Header=BB82_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB82_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB82_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB82_19:                              # %if.end39
                                        #   in Loop: Header=BB82_14 Depth=2
	jmp	.LBB82_20
.LBB82_20:                              # %for.inc
                                        #   in Loop: Header=BB82_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_14
.LBB82_21:                              # %for.end
                                        #   in Loop: Header=BB82_8 Depth=1
	jmp	.LBB82_22
.LBB82_22:                              # %for.inc40
                                        #   in Loop: Header=BB82_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_8
.LBB82_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB82_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_26 Depth 2
                                        #       Child Loop BB82_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB82_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB82_24 Depth=1
	movl	$0, -8(%rbp)
.LBB82_26:                              # %for.cond47
                                        #   Parent Loop BB82_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB82_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB82_26 Depth=2
	movl	$0, -12(%rbp)
.LBB82_28:                              # %for.cond51
                                        #   Parent Loop BB82_24 Depth=1
                                        #     Parent Loop BB82_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB82_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB82_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB82_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_28
.LBB82_31:                              # %for.end63
                                        #   in Loop: Header=BB82_26 Depth=2
	jmp	.LBB82_32
.LBB82_32:                              # %for.inc64
                                        #   in Loop: Header=BB82_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_26
.LBB82_33:                              # %for.end66
                                        #   in Loop: Header=BB82_24 Depth=1
	jmp	.LBB82_34
.LBB82_34:                              # %for.inc67
                                        #   in Loop: Header=BB82_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_24
.LBB82_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB82_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB82_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB82_36 Depth=1
	vmovsd	.LCPI82_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI82_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI82_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB82_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_36
.LBB82_39:                              # %for.end98
	cmpl	$1089219014, -20(%rbp)  # imm = 0x40EC29C6
	jne	.LBB82_41
.LBB82_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_40
.Lfunc_end82:
	.size	create_context_memory.75, .Lfunc_end82-create_context_memory.75
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.76
.LCPI83_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.76
	.p2align	4, 0x90
	.type	GetCtxModelNumber.76,@function
GetCtxModelNumber.76:                   # @GetCtxModelNumber.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI83_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$362321475, -44(%rbp)   # imm = 0x15989643
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB83_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_3 Depth 2
                                        #       Child Loop BB83_5 Depth 3
                                        #     Child Loop BB83_14 Depth 2
                                        #       Child Loop BB83_16 Depth 3
                                        #     Child Loop BB83_25 Depth 2
                                        #       Child Loop BB83_27 Depth 3
                                        #     Child Loop BB83_36 Depth 2
                                        #       Child Loop BB83_38 Depth 3
                                        #     Child Loop BB83_47 Depth 2
                                        #     Child Loop BB83_54 Depth 2
                                        #     Child Loop BB83_61 Depth 2
                                        #     Child Loop BB83_68 Depth 2
                                        #     Child Loop BB83_75 Depth 2
                                        #     Child Loop BB83_82 Depth 2
                                        #       Child Loop BB83_84 Depth 3
                                        #     Child Loop BB83_93 Depth 2
                                        #       Child Loop BB83_95 Depth 3
                                        #     Child Loop BB83_104 Depth 2
                                        #       Child Loop BB83_106 Depth 3
                                        #     Child Loop BB83_115 Depth 2
                                        #       Child Loop BB83_117 Depth 3
                                        #     Child Loop BB83_126 Depth 2
                                        #       Child Loop BB83_128 Depth 3
                                        #     Child Loop BB83_137 Depth 2
                                        #       Child Loop BB83_139 Depth 3
                                        #     Child Loop BB83_148 Depth 2
                                        #       Child Loop BB83_150 Depth 3
                                        #     Child Loop BB83_159 Depth 2
                                        #       Child Loop BB83_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB83_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB83_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB83_3:                               # %for.cond2
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB83_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB83_3 Depth=2
	movl	$0, -4(%rbp)
.LBB83_5:                               # %for.cond5
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB83_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB83_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB83_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_9
.LBB83_8:                               # %if.else
                                        #   in Loop: Header=BB83_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_9:                               # %if.end
                                        #   in Loop: Header=BB83_5 Depth=3
	jmp	.LBB83_10
.LBB83_10:                              # %for.inc
                                        #   in Loop: Header=BB83_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_5
.LBB83_11:                              # %for.end
                                        #   in Loop: Header=BB83_3 Depth=2
	jmp	.LBB83_12
.LBB83_12:                              # %for.inc33
                                        #   in Loop: Header=BB83_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_3
.LBB83_13:                              # %for.end35
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_14:                              # %for.cond36
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB83_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB83_14 Depth=2
	movl	$0, -4(%rbp)
.LBB83_16:                              # %for.cond39
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB83_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB83_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB83_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_20
.LBB83_19:                              # %if.else58
                                        #   in Loop: Header=BB83_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_20:                              # %if.end73
                                        #   in Loop: Header=BB83_16 Depth=3
	jmp	.LBB83_21
.LBB83_21:                              # %for.inc74
                                        #   in Loop: Header=BB83_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_16
.LBB83_22:                              # %for.end76
                                        #   in Loop: Header=BB83_14 Depth=2
	jmp	.LBB83_23
.LBB83_23:                              # %for.inc77
                                        #   in Loop: Header=BB83_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_14
.LBB83_24:                              # %for.end79
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_25:                              # %for.cond80
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB83_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB83_25 Depth=2
	movl	$0, -4(%rbp)
.LBB83_27:                              # %for.cond83
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB83_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB83_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB83_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_31
.LBB83_30:                              # %if.else102
                                        #   in Loop: Header=BB83_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_31:                              # %if.end117
                                        #   in Loop: Header=BB83_27 Depth=3
	jmp	.LBB83_32
.LBB83_32:                              # %for.inc118
                                        #   in Loop: Header=BB83_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_27
.LBB83_33:                              # %for.end120
                                        #   in Loop: Header=BB83_25 Depth=2
	jmp	.LBB83_34
.LBB83_34:                              # %for.inc121
                                        #   in Loop: Header=BB83_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_25
.LBB83_35:                              # %for.end123
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_36:                              # %for.cond124
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB83_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB83_36 Depth=2
	movl	$0, -4(%rbp)
.LBB83_38:                              # %for.cond127
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB83_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB83_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB83_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_42
.LBB83_41:                              # %if.else146
                                        #   in Loop: Header=BB83_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_42:                              # %if.end161
                                        #   in Loop: Header=BB83_38 Depth=3
	jmp	.LBB83_43
.LBB83_43:                              # %for.inc162
                                        #   in Loop: Header=BB83_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_38
.LBB83_44:                              # %for.end164
                                        #   in Loop: Header=BB83_36 Depth=2
	jmp	.LBB83_45
.LBB83_45:                              # %for.inc165
                                        #   in Loop: Header=BB83_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_36
.LBB83_46:                              # %for.end167
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -4(%rbp)
.LBB83_47:                              # %for.cond168
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB83_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB83_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB83_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_51
.LBB83_50:                              # %if.else184
                                        #   in Loop: Header=BB83_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_51:                              # %if.end196
                                        #   in Loop: Header=BB83_47 Depth=2
	jmp	.LBB83_52
.LBB83_52:                              # %for.inc197
                                        #   in Loop: Header=BB83_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_47
.LBB83_53:                              # %for.end199
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -4(%rbp)
.LBB83_54:                              # %for.cond200
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB83_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB83_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB83_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_58
.LBB83_57:                              # %if.else216
                                        #   in Loop: Header=BB83_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_58:                              # %if.end228
                                        #   in Loop: Header=BB83_54 Depth=2
	jmp	.LBB83_59
.LBB83_59:                              # %for.inc229
                                        #   in Loop: Header=BB83_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_54
.LBB83_60:                              # %for.end231
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -4(%rbp)
.LBB83_61:                              # %for.cond232
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB83_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB83_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB83_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_65
.LBB83_64:                              # %if.else248
                                        #   in Loop: Header=BB83_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_65:                              # %if.end260
                                        #   in Loop: Header=BB83_61 Depth=2
	jmp	.LBB83_66
.LBB83_66:                              # %for.inc261
                                        #   in Loop: Header=BB83_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_61
.LBB83_67:                              # %for.end263
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -4(%rbp)
.LBB83_68:                              # %for.cond264
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB83_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB83_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB83_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_72
.LBB83_71:                              # %if.else280
                                        #   in Loop: Header=BB83_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_72:                              # %if.end292
                                        #   in Loop: Header=BB83_68 Depth=2
	jmp	.LBB83_73
.LBB83_73:                              # %for.inc293
                                        #   in Loop: Header=BB83_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_68
.LBB83_74:                              # %for.end295
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -4(%rbp)
.LBB83_75:                              # %for.cond296
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB83_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB83_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB83_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_79
.LBB83_78:                              # %if.else312
                                        #   in Loop: Header=BB83_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_79:                              # %if.end324
                                        #   in Loop: Header=BB83_75 Depth=2
	jmp	.LBB83_80
.LBB83_80:                              # %for.inc325
                                        #   in Loop: Header=BB83_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_75
.LBB83_81:                              # %for.end327
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_82:                              # %for.cond328
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB83_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB83_82 Depth=2
	movl	$0, -4(%rbp)
.LBB83_84:                              # %for.cond331
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB83_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB83_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB83_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_88
.LBB83_87:                              # %if.else350
                                        #   in Loop: Header=BB83_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_88:                              # %if.end365
                                        #   in Loop: Header=BB83_84 Depth=3
	jmp	.LBB83_89
.LBB83_89:                              # %for.inc366
                                        #   in Loop: Header=BB83_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_84
.LBB83_90:                              # %for.end368
                                        #   in Loop: Header=BB83_82 Depth=2
	jmp	.LBB83_91
.LBB83_91:                              # %for.inc369
                                        #   in Loop: Header=BB83_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_82
.LBB83_92:                              # %for.end371
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_93:                              # %for.cond372
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB83_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB83_93 Depth=2
	movl	$0, -4(%rbp)
.LBB83_95:                              # %for.cond375
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB83_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB83_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB83_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_99
.LBB83_98:                              # %if.else394
                                        #   in Loop: Header=BB83_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_99:                              # %if.end409
                                        #   in Loop: Header=BB83_95 Depth=3
	jmp	.LBB83_100
.LBB83_100:                             # %for.inc410
                                        #   in Loop: Header=BB83_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_95
.LBB83_101:                             # %for.end412
                                        #   in Loop: Header=BB83_93 Depth=2
	jmp	.LBB83_102
.LBB83_102:                             # %for.inc413
                                        #   in Loop: Header=BB83_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_93
.LBB83_103:                             # %for.end415
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_104:                             # %for.cond416
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB83_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB83_104 Depth=2
	movl	$0, -4(%rbp)
.LBB83_106:                             # %for.cond419
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB83_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB83_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB83_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_110
.LBB83_109:                             # %if.else438
                                        #   in Loop: Header=BB83_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_110:                             # %if.end453
                                        #   in Loop: Header=BB83_106 Depth=3
	jmp	.LBB83_111
.LBB83_111:                             # %for.inc454
                                        #   in Loop: Header=BB83_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_106
.LBB83_112:                             # %for.end456
                                        #   in Loop: Header=BB83_104 Depth=2
	jmp	.LBB83_113
.LBB83_113:                             # %for.inc457
                                        #   in Loop: Header=BB83_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_104
.LBB83_114:                             # %for.end459
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_115:                             # %for.cond460
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB83_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB83_115 Depth=2
	movl	$0, -4(%rbp)
.LBB83_117:                             # %for.cond463
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB83_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB83_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB83_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_121
.LBB83_120:                             # %if.else482
                                        #   in Loop: Header=BB83_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_121:                             # %if.end497
                                        #   in Loop: Header=BB83_117 Depth=3
	jmp	.LBB83_122
.LBB83_122:                             # %for.inc498
                                        #   in Loop: Header=BB83_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_117
.LBB83_123:                             # %for.end500
                                        #   in Loop: Header=BB83_115 Depth=2
	jmp	.LBB83_124
.LBB83_124:                             # %for.inc501
                                        #   in Loop: Header=BB83_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_115
.LBB83_125:                             # %for.end503
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_126:                             # %for.cond504
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB83_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB83_126 Depth=2
	movl	$0, -4(%rbp)
.LBB83_128:                             # %for.cond507
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB83_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB83_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB83_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_132
.LBB83_131:                             # %if.else526
                                        #   in Loop: Header=BB83_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_132:                             # %if.end541
                                        #   in Loop: Header=BB83_128 Depth=3
	jmp	.LBB83_133
.LBB83_133:                             # %for.inc542
                                        #   in Loop: Header=BB83_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_128
.LBB83_134:                             # %for.end544
                                        #   in Loop: Header=BB83_126 Depth=2
	jmp	.LBB83_135
.LBB83_135:                             # %for.inc545
                                        #   in Loop: Header=BB83_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_126
.LBB83_136:                             # %for.end547
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_137:                             # %for.cond548
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB83_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB83_137 Depth=2
	movl	$0, -4(%rbp)
.LBB83_139:                             # %for.cond551
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB83_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB83_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB83_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_143
.LBB83_142:                             # %if.else570
                                        #   in Loop: Header=BB83_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_143:                             # %if.end585
                                        #   in Loop: Header=BB83_139 Depth=3
	jmp	.LBB83_144
.LBB83_144:                             # %for.inc586
                                        #   in Loop: Header=BB83_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_139
.LBB83_145:                             # %for.end588
                                        #   in Loop: Header=BB83_137 Depth=2
	jmp	.LBB83_146
.LBB83_146:                             # %for.inc589
                                        #   in Loop: Header=BB83_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_137
.LBB83_147:                             # %for.end591
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_148:                             # %for.cond592
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB83_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB83_148 Depth=2
	movl	$0, -4(%rbp)
.LBB83_150:                             # %for.cond595
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB83_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB83_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB83_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_154
.LBB83_153:                             # %if.else614
                                        #   in Loop: Header=BB83_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_154:                             # %if.end629
                                        #   in Loop: Header=BB83_150 Depth=3
	jmp	.LBB83_155
.LBB83_155:                             # %for.inc630
                                        #   in Loop: Header=BB83_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_150
.LBB83_156:                             # %for.end632
                                        #   in Loop: Header=BB83_148 Depth=2
	jmp	.LBB83_157
.LBB83_157:                             # %for.inc633
                                        #   in Loop: Header=BB83_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_148
.LBB83_158:                             # %for.end635
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_159:                             # %for.cond636
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB83_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB83_159 Depth=2
	movl	$0, -4(%rbp)
.LBB83_161:                             # %for.cond639
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB83_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB83_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB83_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB83_165
.LBB83_164:                             # %if.else658
                                        #   in Loop: Header=BB83_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB83_165:                             # %if.end673
                                        #   in Loop: Header=BB83_161 Depth=3
	jmp	.LBB83_166
.LBB83_166:                             # %for.inc674
                                        #   in Loop: Header=BB83_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_161
.LBB83_167:                             # %for.end676
                                        #   in Loop: Header=BB83_159 Depth=2
	jmp	.LBB83_168
.LBB83_168:                             # %for.inc677
                                        #   in Loop: Header=BB83_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_159
.LBB83_169:                             # %for.end679
                                        #   in Loop: Header=BB83_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB83_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB83_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB83_171:                             # %if.end682
                                        #   in Loop: Header=BB83_1 Depth=1
	jmp	.LBB83_172
.LBB83_172:                             # %for.inc683
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_1
.LBB83_173:                             # %for.end685
	cmpl	$362321475, -44(%rbp)   # imm = 0x15989643
	jne	.LBB83_175
.LBB83_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_174
.Lfunc_end83:
	.size	GetCtxModelNumber.76, .Lfunc_end83-GetCtxModelNumber.76
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.77        # -- Begin function init_contexts.77
	.p2align	4, 0x90
	.type	init_contexts.77,@function
init_contexts.77:                       # @init_contexts.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1079178394, -28(%rbp)  # imm = 0x4052F49A
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB84_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB84_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB84_1 Depth=1
	movl	$0, -4(%rbp)
.LBB84_3:                               # %for.cond2
                                        #   Parent Loop BB84_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB84_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB84_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB84_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB84_7
.LBB84_6:                               # %if.else
                                        #   in Loop: Header=BB84_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB84_7:                               # %if.end
                                        #   in Loop: Header=BB84_3 Depth=2
	jmp	.LBB84_8
.LBB84_8:                               # %for.inc
                                        #   in Loop: Header=BB84_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_3
.LBB84_9:                               # %for.end
                                        #   in Loop: Header=BB84_1 Depth=1
	jmp	.LBB84_10
.LBB84_10:                              # %for.inc28
                                        #   in Loop: Header=BB84_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_1
.LBB84_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB84_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB84_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB84_12 Depth=1
	movl	$0, -4(%rbp)
.LBB84_14:                              # %for.cond34
                                        #   Parent Loop BB84_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB84_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB84_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB84_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB84_18
.LBB84_17:                              # %if.else52
                                        #   in Loop: Header=BB84_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB84_18:                              # %if.end66
                                        #   in Loop: Header=BB84_14 Depth=2
	jmp	.LBB84_19
.LBB84_19:                              # %for.inc67
                                        #   in Loop: Header=BB84_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_14
.LBB84_20:                              # %for.end69
                                        #   in Loop: Header=BB84_12 Depth=1
	jmp	.LBB84_21
.LBB84_21:                              # %for.inc70
                                        #   in Loop: Header=BB84_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_12
.LBB84_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB84_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB84_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB84_23 Depth=1
	movl	$0, -4(%rbp)
.LBB84_25:                              # %for.cond76
                                        #   Parent Loop BB84_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB84_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB84_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB84_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB84_29
.LBB84_28:                              # %if.else94
                                        #   in Loop: Header=BB84_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB84_29:                              # %if.end108
                                        #   in Loop: Header=BB84_25 Depth=2
	jmp	.LBB84_30
.LBB84_30:                              # %for.inc109
                                        #   in Loop: Header=BB84_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_25
.LBB84_31:                              # %for.end111
                                        #   in Loop: Header=BB84_23 Depth=1
	jmp	.LBB84_32
.LBB84_32:                              # %for.inc112
                                        #   in Loop: Header=BB84_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_23
.LBB84_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB84_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB84_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB84_34 Depth=1
	movl	$0, -4(%rbp)
.LBB84_36:                              # %for.cond118
                                        #   Parent Loop BB84_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB84_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB84_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB84_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB84_40
.LBB84_39:                              # %if.else136
                                        #   in Loop: Header=BB84_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB84_40:                              # %if.end150
                                        #   in Loop: Header=BB84_36 Depth=2
	jmp	.LBB84_41
.LBB84_41:                              # %for.inc151
                                        #   in Loop: Header=BB84_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_36
.LBB84_42:                              # %for.end153
                                        #   in Loop: Header=BB84_34 Depth=1
	jmp	.LBB84_43
.LBB84_43:                              # %for.inc154
                                        #   in Loop: Header=BB84_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_34
.LBB84_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB84_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB84_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB84_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB84_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB84_49
.LBB84_48:                              # %if.else172
                                        #   in Loop: Header=BB84_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB84_49:                              # %if.end183
                                        #   in Loop: Header=BB84_45 Depth=1
	jmp	.LBB84_50
.LBB84_50:                              # %for.inc184
                                        #   in Loop: Header=BB84_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_45
.LBB84_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB84_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB84_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB84_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB84_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB84_56
.LBB84_55:                              # %if.else202
                                        #   in Loop: Header=BB84_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB84_56:                              # %if.end213
                                        #   in Loop: Header=BB84_52 Depth=1
	jmp	.LBB84_57
.LBB84_57:                              # %for.inc214
                                        #   in Loop: Header=BB84_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_52
.LBB84_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB84_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB84_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB84_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB84_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB84_63
.LBB84_62:                              # %if.else232
                                        #   in Loop: Header=BB84_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB84_63:                              # %if.end243
                                        #   in Loop: Header=BB84_59 Depth=1
	jmp	.LBB84_64
.LBB84_64:                              # %for.inc244
                                        #   in Loop: Header=BB84_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_59
.LBB84_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB84_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB84_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB84_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB84_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB84_70
.LBB84_69:                              # %if.else262
                                        #   in Loop: Header=BB84_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB84_70:                              # %if.end273
                                        #   in Loop: Header=BB84_66 Depth=1
	jmp	.LBB84_71
.LBB84_71:                              # %for.inc274
                                        #   in Loop: Header=BB84_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_66
.LBB84_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB84_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB84_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB84_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB84_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB84_77
.LBB84_76:                              # %if.else292
                                        #   in Loop: Header=BB84_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB84_77:                              # %if.end303
                                        #   in Loop: Header=BB84_73 Depth=1
	jmp	.LBB84_78
.LBB84_78:                              # %for.inc304
                                        #   in Loop: Header=BB84_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_73
.LBB84_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB84_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB84_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB84_80 Depth=1
	movl	$0, -4(%rbp)
.LBB84_82:                              # %for.cond310
                                        #   Parent Loop BB84_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB84_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB84_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB84_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB84_86
.LBB84_85:                              # %if.else328
                                        #   in Loop: Header=BB84_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB84_86:                              # %if.end342
                                        #   in Loop: Header=BB84_82 Depth=2
	jmp	.LBB84_87
.LBB84_87:                              # %for.inc343
                                        #   in Loop: Header=BB84_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_82
.LBB84_88:                              # %for.end345
                                        #   in Loop: Header=BB84_80 Depth=1
	jmp	.LBB84_89
.LBB84_89:                              # %for.inc346
                                        #   in Loop: Header=BB84_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_80
.LBB84_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB84_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB84_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB84_91 Depth=1
	movl	$0, -4(%rbp)
.LBB84_93:                              # %for.cond352
                                        #   Parent Loop BB84_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB84_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB84_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB84_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB84_97
.LBB84_96:                              # %if.else370
                                        #   in Loop: Header=BB84_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB84_97:                              # %if.end384
                                        #   in Loop: Header=BB84_93 Depth=2
	jmp	.LBB84_98
.LBB84_98:                              # %for.inc385
                                        #   in Loop: Header=BB84_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_93
.LBB84_99:                              # %for.end387
                                        #   in Loop: Header=BB84_91 Depth=1
	jmp	.LBB84_100
.LBB84_100:                             # %for.inc388
                                        #   in Loop: Header=BB84_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_91
.LBB84_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB84_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB84_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB84_102 Depth=1
	movl	$0, -4(%rbp)
.LBB84_104:                             # %for.cond394
                                        #   Parent Loop BB84_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB84_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB84_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB84_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB84_108
.LBB84_107:                             # %if.else412
                                        #   in Loop: Header=BB84_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB84_108:                             # %if.end426
                                        #   in Loop: Header=BB84_104 Depth=2
	jmp	.LBB84_109
.LBB84_109:                             # %for.inc427
                                        #   in Loop: Header=BB84_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_104
.LBB84_110:                             # %for.end429
                                        #   in Loop: Header=BB84_102 Depth=1
	jmp	.LBB84_111
.LBB84_111:                             # %for.inc430
                                        #   in Loop: Header=BB84_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_102
.LBB84_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB84_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB84_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB84_113 Depth=1
	movl	$0, -4(%rbp)
.LBB84_115:                             # %for.cond436
                                        #   Parent Loop BB84_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB84_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB84_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB84_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB84_119
.LBB84_118:                             # %if.else454
                                        #   in Loop: Header=BB84_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB84_119:                             # %if.end468
                                        #   in Loop: Header=BB84_115 Depth=2
	jmp	.LBB84_120
.LBB84_120:                             # %for.inc469
                                        #   in Loop: Header=BB84_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_115
.LBB84_121:                             # %for.end471
                                        #   in Loop: Header=BB84_113 Depth=1
	jmp	.LBB84_122
.LBB84_122:                             # %for.inc472
                                        #   in Loop: Header=BB84_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_113
.LBB84_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB84_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB84_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB84_124 Depth=1
	movl	$0, -4(%rbp)
.LBB84_126:                             # %for.cond478
                                        #   Parent Loop BB84_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB84_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB84_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB84_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB84_130
.LBB84_129:                             # %if.else496
                                        #   in Loop: Header=BB84_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB84_130:                             # %if.end510
                                        #   in Loop: Header=BB84_126 Depth=2
	jmp	.LBB84_131
.LBB84_131:                             # %for.inc511
                                        #   in Loop: Header=BB84_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_126
.LBB84_132:                             # %for.end513
                                        #   in Loop: Header=BB84_124 Depth=1
	jmp	.LBB84_133
.LBB84_133:                             # %for.inc514
                                        #   in Loop: Header=BB84_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_124
.LBB84_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB84_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB84_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB84_135 Depth=1
	movl	$0, -4(%rbp)
.LBB84_137:                             # %for.cond520
                                        #   Parent Loop BB84_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB84_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB84_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB84_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB84_141
.LBB84_140:                             # %if.else538
                                        #   in Loop: Header=BB84_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB84_141:                             # %if.end552
                                        #   in Loop: Header=BB84_137 Depth=2
	jmp	.LBB84_142
.LBB84_142:                             # %for.inc553
                                        #   in Loop: Header=BB84_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_137
.LBB84_143:                             # %for.end555
                                        #   in Loop: Header=BB84_135 Depth=1
	jmp	.LBB84_144
.LBB84_144:                             # %for.inc556
                                        #   in Loop: Header=BB84_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_135
.LBB84_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB84_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB84_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB84_146 Depth=1
	movl	$0, -4(%rbp)
.LBB84_148:                             # %for.cond562
                                        #   Parent Loop BB84_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB84_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB84_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB84_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB84_152
.LBB84_151:                             # %if.else580
                                        #   in Loop: Header=BB84_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB84_152:                             # %if.end594
                                        #   in Loop: Header=BB84_148 Depth=2
	jmp	.LBB84_153
.LBB84_153:                             # %for.inc595
                                        #   in Loop: Header=BB84_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_148
.LBB84_154:                             # %for.end597
                                        #   in Loop: Header=BB84_146 Depth=1
	jmp	.LBB84_155
.LBB84_155:                             # %for.inc598
                                        #   in Loop: Header=BB84_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_146
.LBB84_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB84_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB84_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB84_157 Depth=1
	movl	$0, -4(%rbp)
.LBB84_159:                             # %for.cond604
                                        #   Parent Loop BB84_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB84_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB84_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB84_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB84_163
.LBB84_162:                             # %if.else622
                                        #   in Loop: Header=BB84_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB84_163:                             # %if.end636
                                        #   in Loop: Header=BB84_159 Depth=2
	jmp	.LBB84_164
.LBB84_164:                             # %for.inc637
                                        #   in Loop: Header=BB84_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_159
.LBB84_165:                             # %for.end639
                                        #   in Loop: Header=BB84_157 Depth=1
	jmp	.LBB84_166
.LBB84_166:                             # %for.inc640
                                        #   in Loop: Header=BB84_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_157
.LBB84_167:                             # %for.end642
	cmpl	$1079178394, -28(%rbp)  # imm = 0x4052F49A
	jne	.LBB84_169
.LBB84_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_168
.Lfunc_end84:
	.size	init_contexts.77, .Lfunc_end84-init_contexts.77
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.78
.LCPI85_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.78
	.p2align	4, 0x90
	.type	GetCtxModelNumber.78,@function
GetCtxModelNumber.78:                   # @GetCtxModelNumber.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI85_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$280231028, -44(%rbp)   # imm = 0x10B3FC74
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB85_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_3 Depth 2
                                        #       Child Loop BB85_5 Depth 3
                                        #     Child Loop BB85_14 Depth 2
                                        #       Child Loop BB85_16 Depth 3
                                        #     Child Loop BB85_25 Depth 2
                                        #       Child Loop BB85_27 Depth 3
                                        #     Child Loop BB85_36 Depth 2
                                        #       Child Loop BB85_38 Depth 3
                                        #     Child Loop BB85_47 Depth 2
                                        #     Child Loop BB85_54 Depth 2
                                        #     Child Loop BB85_61 Depth 2
                                        #     Child Loop BB85_68 Depth 2
                                        #     Child Loop BB85_75 Depth 2
                                        #     Child Loop BB85_82 Depth 2
                                        #       Child Loop BB85_84 Depth 3
                                        #     Child Loop BB85_93 Depth 2
                                        #       Child Loop BB85_95 Depth 3
                                        #     Child Loop BB85_104 Depth 2
                                        #       Child Loop BB85_106 Depth 3
                                        #     Child Loop BB85_115 Depth 2
                                        #       Child Loop BB85_117 Depth 3
                                        #     Child Loop BB85_126 Depth 2
                                        #       Child Loop BB85_128 Depth 3
                                        #     Child Loop BB85_137 Depth 2
                                        #       Child Loop BB85_139 Depth 3
                                        #     Child Loop BB85_148 Depth 2
                                        #       Child Loop BB85_150 Depth 3
                                        #     Child Loop BB85_159 Depth 2
                                        #       Child Loop BB85_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB85_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB85_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB85_3:                               # %for.cond2
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB85_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB85_3 Depth=2
	movl	$0, -4(%rbp)
.LBB85_5:                               # %for.cond5
                                        #   Parent Loop BB85_1 Depth=1
                                        #     Parent Loop BB85_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB85_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB85_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB85_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB85_9
.LBB85_8:                               # %if.else
                                        #   in Loop: Header=BB85_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB85_9:                               # %if.end
                                        #   in Loop: Header=BB85_5 Depth=3
	jmp	.LBB85_10
.LBB85_10:                              # %for.inc
                                        #   in Loop: Header=BB85_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_5
.LBB85_11:                              # %for.end
                                        #   in Loop: Header=BB85_3 Depth=2
	jmp	.LBB85_12
.LBB85_12:                              # %for.inc33
                                        #   in Loop: Header=BB85_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_3
.LBB85_13:                              # %for.end35
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -8(%rbp)
.LBB85_14:                              # %for.cond36
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB85_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB85_14 Depth=2
	movl	$0, -4(%rbp)
.LBB85_16:                              # %for.cond39
                                        #   Parent Loop BB85_1 Depth=1
                                        #     Parent Loop BB85_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB85_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB85_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB85_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB85_20
.LBB85_19:                              # %if.else58
                                        #   in Loop: Header=BB85_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB85_20:                              # %if.end73
                                        #   in Loop: Header=BB85_16 Depth=3
	jmp	.LBB85_21
.LBB85_21:                              # %for.inc74
                                        #   in Loop: Header=BB85_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_16
.LBB85_22:                              # %for.end76
                                        #   in Loop: Header=BB85_14 Depth=2
	jmp	.LBB85_23
.LBB85_23:                              # %for.inc77
                                        #   in Loop: Header=BB85_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_14
.LBB85_24:                              # %for.end79
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -8(%rbp)
.LBB85_25:                              # %for.cond80
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB85_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB85_25 Depth=2
	movl	$0, -4(%rbp)
.LBB85_27:                              # %for.cond83
                                        #   Parent Loop BB85_1 Depth=1
                                        #     Parent Loop BB85_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB85_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB85_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB85_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB85_31
.LBB85_30:                              # %if.else102
                                        #   in Loop: Header=BB85_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB85_31:                              # %if.end117
                                        #   in Loop: Header=BB85_27 Depth=3
	jmp	.LBB85_32
.LBB85_32:                              # %for.inc118
                                        #   in Loop: Header=BB85_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_27
.LBB85_33:                              # %for.end120
                                        #   in Loop: Header=BB85_25 Depth=2
	jmp	.LBB85_34
.LBB85_34:                              # %for.inc121
                                        #   in Loop: Header=BB85_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_25
.LBB85_35:                              # %for.end123
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -8(%rbp)
.LBB85_36:                              # %for.cond124
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB85_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB85_36 Depth=2
	movl	$0, -4(%rbp)
.LBB85_38:                              # %for.cond127
                                        #   Parent Loop BB85_1 Depth=1
                                        #     Parent Loop BB85_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB85_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB85_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB85_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB85_42
.LBB85_41:                              # %if.else146
                                        #   in Loop: Header=BB85_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB85_42:                              # %if.end161
                                        #   in Loop: Header=BB85_38 Depth=3
	jmp	.LBB85_43
.LBB85_43:                              # %for.inc162
                                        #   in Loop: Header=BB85_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_38
.LBB85_44:                              # %for.end164
                                        #   in Loop: Header=BB85_36 Depth=2
	jmp	.LBB85_45
.LBB85_45:                              # %for.inc165
                                        #   in Loop: Header=BB85_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_36
.LBB85_46:                              # %for.end167
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -4(%rbp)
.LBB85_47:                              # %for.cond168
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB85_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB85_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB85_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB85_51
.LBB85_50:                              # %if.else184
                                        #   in Loop: Header=BB85_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB85_51:                              # %if.end196
                                        #   in Loop: Header=BB85_47 Depth=2
	jmp	.LBB85_52
.LBB85_52:                              # %for.inc197
                                        #   in Loop: Header=BB85_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_47
.LBB85_53:                              # %for.end199
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -4(%rbp)
.LBB85_54:                              # %for.cond200
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB85_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB85_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB85_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB85_58
.LBB85_57:                              # %if.else216
                                        #   in Loop: Header=BB85_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB85_58:                              # %if.end228
                                        #   in Loop: Header=BB85_54 Depth=2
	jmp	.LBB85_59
.LBB85_59:                              # %for.inc229
                                        #   in Loop: Header=BB85_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_54
.LBB85_60:                              # %for.end231
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -4(%rbp)
.LBB85_61:                              # %for.cond232
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB85_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB85_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB85_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB85_65
.LBB85_64:                              # %if.else248
                                        #   in Loop: Header=BB85_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB85_65:                              # %if.end260
                                        #   in Loop: Header=BB85_61 Depth=2
	jmp	.LBB85_66
.LBB85_66:                              # %for.inc261
                                        #   in Loop: Header=BB85_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_61
.LBB85_67:                              # %for.end263
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -4(%rbp)
.LBB85_68:                              # %for.cond264
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB85_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB85_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB85_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB85_72
.LBB85_71:                              # %if.else280
                                        #   in Loop: Header=BB85_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB85_72:                              # %if.end292
                                        #   in Loop: Header=BB85_68 Depth=2
	jmp	.LBB85_73
.LBB85_73:                              # %for.inc293
                                        #   in Loop: Header=BB85_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_68
.LBB85_74:                              # %for.end295
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -4(%rbp)
.LBB85_75:                              # %for.cond296
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB85_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB85_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB85_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB85_79
.LBB85_78:                              # %if.else312
                                        #   in Loop: Header=BB85_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB85_79:                              # %if.end324
                                        #   in Loop: Header=BB85_75 Depth=2
	jmp	.LBB85_80
.LBB85_80:                              # %for.inc325
                                        #   in Loop: Header=BB85_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_75
.LBB85_81:                              # %for.end327
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -8(%rbp)
.LBB85_82:                              # %for.cond328
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB85_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB85_82 Depth=2
	movl	$0, -4(%rbp)
.LBB85_84:                              # %for.cond331
                                        #   Parent Loop BB85_1 Depth=1
                                        #     Parent Loop BB85_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB85_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB85_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB85_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB85_88
.LBB85_87:                              # %if.else350
                                        #   in Loop: Header=BB85_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB85_88:                              # %if.end365
                                        #   in Loop: Header=BB85_84 Depth=3
	jmp	.LBB85_89
.LBB85_89:                              # %for.inc366
                                        #   in Loop: Header=BB85_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_84
.LBB85_90:                              # %for.end368
                                        #   in Loop: Header=BB85_82 Depth=2
	jmp	.LBB85_91
.LBB85_91:                              # %for.inc369
                                        #   in Loop: Header=BB85_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_82
.LBB85_92:                              # %for.end371
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -8(%rbp)
.LBB85_93:                              # %for.cond372
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB85_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB85_93 Depth=2
	movl	$0, -4(%rbp)
.LBB85_95:                              # %for.cond375
                                        #   Parent Loop BB85_1 Depth=1
                                        #     Parent Loop BB85_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB85_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB85_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB85_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB85_99
.LBB85_98:                              # %if.else394
                                        #   in Loop: Header=BB85_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB85_99:                              # %if.end409
                                        #   in Loop: Header=BB85_95 Depth=3
	jmp	.LBB85_100
.LBB85_100:                             # %for.inc410
                                        #   in Loop: Header=BB85_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_95
.LBB85_101:                             # %for.end412
                                        #   in Loop: Header=BB85_93 Depth=2
	jmp	.LBB85_102
.LBB85_102:                             # %for.inc413
                                        #   in Loop: Header=BB85_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_93
.LBB85_103:                             # %for.end415
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -8(%rbp)
.LBB85_104:                             # %for.cond416
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB85_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB85_104 Depth=2
	movl	$0, -4(%rbp)
.LBB85_106:                             # %for.cond419
                                        #   Parent Loop BB85_1 Depth=1
                                        #     Parent Loop BB85_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB85_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB85_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB85_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB85_110
.LBB85_109:                             # %if.else438
                                        #   in Loop: Header=BB85_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB85_110:                             # %if.end453
                                        #   in Loop: Header=BB85_106 Depth=3
	jmp	.LBB85_111
.LBB85_111:                             # %for.inc454
                                        #   in Loop: Header=BB85_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_106
.LBB85_112:                             # %for.end456
                                        #   in Loop: Header=BB85_104 Depth=2
	jmp	.LBB85_113
.LBB85_113:                             # %for.inc457
                                        #   in Loop: Header=BB85_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_104
.LBB85_114:                             # %for.end459
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -8(%rbp)
.LBB85_115:                             # %for.cond460
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB85_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB85_115 Depth=2
	movl	$0, -4(%rbp)
.LBB85_117:                             # %for.cond463
                                        #   Parent Loop BB85_1 Depth=1
                                        #     Parent Loop BB85_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB85_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB85_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB85_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB85_121
.LBB85_120:                             # %if.else482
                                        #   in Loop: Header=BB85_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB85_121:                             # %if.end497
                                        #   in Loop: Header=BB85_117 Depth=3
	jmp	.LBB85_122
.LBB85_122:                             # %for.inc498
                                        #   in Loop: Header=BB85_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_117
.LBB85_123:                             # %for.end500
                                        #   in Loop: Header=BB85_115 Depth=2
	jmp	.LBB85_124
.LBB85_124:                             # %for.inc501
                                        #   in Loop: Header=BB85_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_115
.LBB85_125:                             # %for.end503
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -8(%rbp)
.LBB85_126:                             # %for.cond504
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB85_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB85_126 Depth=2
	movl	$0, -4(%rbp)
.LBB85_128:                             # %for.cond507
                                        #   Parent Loop BB85_1 Depth=1
                                        #     Parent Loop BB85_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB85_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB85_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB85_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB85_132
.LBB85_131:                             # %if.else526
                                        #   in Loop: Header=BB85_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB85_132:                             # %if.end541
                                        #   in Loop: Header=BB85_128 Depth=3
	jmp	.LBB85_133
.LBB85_133:                             # %for.inc542
                                        #   in Loop: Header=BB85_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_128
.LBB85_134:                             # %for.end544
                                        #   in Loop: Header=BB85_126 Depth=2
	jmp	.LBB85_135
.LBB85_135:                             # %for.inc545
                                        #   in Loop: Header=BB85_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_126
.LBB85_136:                             # %for.end547
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -8(%rbp)
.LBB85_137:                             # %for.cond548
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB85_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB85_137 Depth=2
	movl	$0, -4(%rbp)
.LBB85_139:                             # %for.cond551
                                        #   Parent Loop BB85_1 Depth=1
                                        #     Parent Loop BB85_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB85_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB85_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB85_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB85_143
.LBB85_142:                             # %if.else570
                                        #   in Loop: Header=BB85_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB85_143:                             # %if.end585
                                        #   in Loop: Header=BB85_139 Depth=3
	jmp	.LBB85_144
.LBB85_144:                             # %for.inc586
                                        #   in Loop: Header=BB85_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_139
.LBB85_145:                             # %for.end588
                                        #   in Loop: Header=BB85_137 Depth=2
	jmp	.LBB85_146
.LBB85_146:                             # %for.inc589
                                        #   in Loop: Header=BB85_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_137
.LBB85_147:                             # %for.end591
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -8(%rbp)
.LBB85_148:                             # %for.cond592
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB85_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB85_148 Depth=2
	movl	$0, -4(%rbp)
.LBB85_150:                             # %for.cond595
                                        #   Parent Loop BB85_1 Depth=1
                                        #     Parent Loop BB85_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB85_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB85_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB85_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB85_154
.LBB85_153:                             # %if.else614
                                        #   in Loop: Header=BB85_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB85_154:                             # %if.end629
                                        #   in Loop: Header=BB85_150 Depth=3
	jmp	.LBB85_155
.LBB85_155:                             # %for.inc630
                                        #   in Loop: Header=BB85_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_150
.LBB85_156:                             # %for.end632
                                        #   in Loop: Header=BB85_148 Depth=2
	jmp	.LBB85_157
.LBB85_157:                             # %for.inc633
                                        #   in Loop: Header=BB85_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_148
.LBB85_158:                             # %for.end635
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -8(%rbp)
.LBB85_159:                             # %for.cond636
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB85_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB85_159 Depth=2
	movl	$0, -4(%rbp)
.LBB85_161:                             # %for.cond639
                                        #   Parent Loop BB85_1 Depth=1
                                        #     Parent Loop BB85_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB85_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB85_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB85_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB85_165
.LBB85_164:                             # %if.else658
                                        #   in Loop: Header=BB85_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB85_165:                             # %if.end673
                                        #   in Loop: Header=BB85_161 Depth=3
	jmp	.LBB85_166
.LBB85_166:                             # %for.inc674
                                        #   in Loop: Header=BB85_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_161
.LBB85_167:                             # %for.end676
                                        #   in Loop: Header=BB85_159 Depth=2
	jmp	.LBB85_168
.LBB85_168:                             # %for.inc677
                                        #   in Loop: Header=BB85_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_159
.LBB85_169:                             # %for.end679
                                        #   in Loop: Header=BB85_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB85_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB85_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB85_171:                             # %if.end682
                                        #   in Loop: Header=BB85_1 Depth=1
	jmp	.LBB85_172
.LBB85_172:                             # %for.inc683
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_1
.LBB85_173:                             # %for.end685
	cmpl	$280231028, -44(%rbp)   # imm = 0x10B3FC74
	jne	.LBB85_175
.LBB85_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_174
.Lfunc_end85:
	.size	GetCtxModelNumber.78, .Lfunc_end85-GetCtxModelNumber.78
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.79
.LCPI86_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.79
	.p2align	4, 0x90
	.type	GetCtxModelNumber.79,@function
GetCtxModelNumber.79:                   # @GetCtxModelNumber.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI86_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$701013745, -48(%rbp)   # imm = 0x29C89EF1
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB86_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_3 Depth 2
                                        #       Child Loop BB86_5 Depth 3
                                        #     Child Loop BB86_14 Depth 2
                                        #       Child Loop BB86_16 Depth 3
                                        #     Child Loop BB86_25 Depth 2
                                        #       Child Loop BB86_27 Depth 3
                                        #     Child Loop BB86_36 Depth 2
                                        #       Child Loop BB86_38 Depth 3
                                        #     Child Loop BB86_47 Depth 2
                                        #     Child Loop BB86_54 Depth 2
                                        #     Child Loop BB86_61 Depth 2
                                        #     Child Loop BB86_68 Depth 2
                                        #     Child Loop BB86_75 Depth 2
                                        #     Child Loop BB86_82 Depth 2
                                        #       Child Loop BB86_84 Depth 3
                                        #     Child Loop BB86_93 Depth 2
                                        #       Child Loop BB86_95 Depth 3
                                        #     Child Loop BB86_104 Depth 2
                                        #       Child Loop BB86_106 Depth 3
                                        #     Child Loop BB86_115 Depth 2
                                        #       Child Loop BB86_117 Depth 3
                                        #     Child Loop BB86_126 Depth 2
                                        #       Child Loop BB86_128 Depth 3
                                        #     Child Loop BB86_137 Depth 2
                                        #       Child Loop BB86_139 Depth 3
                                        #     Child Loop BB86_148 Depth 2
                                        #       Child Loop BB86_150 Depth 3
                                        #     Child Loop BB86_159 Depth 2
                                        #       Child Loop BB86_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB86_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB86_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB86_3:                               # %for.cond2
                                        #   Parent Loop BB86_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB86_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB86_3 Depth=2
	movl	$0, -4(%rbp)
.LBB86_5:                               # %for.cond5
                                        #   Parent Loop BB86_1 Depth=1
                                        #     Parent Loop BB86_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB86_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB86_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB86_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB86_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB86_9
.LBB86_8:                               # %if.else
                                        #   in Loop: Header=BB86_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB86_9:                               # %if.end
                                        #   in Loop: Header=BB86_5 Depth=3
	jmp	.LBB86_10
.LBB86_10:                              # %for.inc
                                        #   in Loop: Header=BB86_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_5
.LBB86_11:                              # %for.end
                                        #   in Loop: Header=BB86_3 Depth=2
	jmp	.LBB86_12
.LBB86_12:                              # %for.inc33
                                        #   in Loop: Header=BB86_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_3
.LBB86_13:                              # %for.end35
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	$0, -8(%rbp)
.LBB86_14:                              # %for.cond36
                                        #   Parent Loop BB86_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB86_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB86_14 Depth=2
	movl	$0, -4(%rbp)
.LBB86_16:                              # %for.cond39
                                        #   Parent Loop BB86_1 Depth=1
                                        #     Parent Loop BB86_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB86_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB86_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB86_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB86_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB86_20
.LBB86_19:                              # %if.else58
                                        #   in Loop: Header=BB86_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB86_20:                              # %if.end73
                                        #   in Loop: Header=BB86_16 Depth=3
	jmp	.LBB86_21
.LBB86_21:                              # %for.inc74
                                        #   in Loop: Header=BB86_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_16
.LBB86_22:                              # %for.end76
                                        #   in Loop: Header=BB86_14 Depth=2
	jmp	.LBB86_23
.LBB86_23:                              # %for.inc77
                                        #   in Loop: Header=BB86_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_14
.LBB86_24:                              # %for.end79
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	$0, -8(%rbp)
.LBB86_25:                              # %for.cond80
                                        #   Parent Loop BB86_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB86_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB86_25 Depth=2
	movl	$0, -4(%rbp)
.LBB86_27:                              # %for.cond83
                                        #   Parent Loop BB86_1 Depth=1
                                        #     Parent Loop BB86_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB86_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB86_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB86_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB86_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB86_31
.LBB86_30:                              # %if.else102
                                        #   in Loop: Header=BB86_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB86_31:                              # %if.end117
                                        #   in Loop: Header=BB86_27 Depth=3
	jmp	.LBB86_32
.LBB86_32:                              # %for.inc118
                                        #   in Loop: Header=BB86_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_27
.LBB86_33:                              # %for.end120
                                        #   in Loop: Header=BB86_25 Depth=2
	jmp	.LBB86_34
.LBB86_34:                              # %for.inc121
                                        #   in Loop: Header=BB86_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_25
.LBB86_35:                              # %for.end123
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	$0, -8(%rbp)
.LBB86_36:                              # %for.cond124
                                        #   Parent Loop BB86_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB86_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB86_36 Depth=2
	movl	$0, -4(%rbp)
.LBB86_38:                              # %for.cond127
                                        #   Parent Loop BB86_1 Depth=1
                                        #     Parent Loop BB86_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB86_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB86_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB86_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB86_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB86_42
.LBB86_41:                              # %if.else146
                                        #   in Loop: Header=BB86_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB86_42:                              # %if.end161
                                        #   in Loop: Header=BB86_38 Depth=3
	jmp	.LBB86_43
.LBB86_43:                              # %for.inc162
                                        #   in Loop: Header=BB86_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_38
.LBB86_44:                              # %for.end164
                                        #   in Loop: Header=BB86_36 Depth=2
	jmp	.LBB86_45
.LBB86_45:                              # %for.inc165
                                        #   in Loop: Header=BB86_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_36
.LBB86_46:                              # %for.end167
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	$0, -4(%rbp)
.LBB86_47:                              # %for.cond168
                                        #   Parent Loop BB86_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB86_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB86_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB86_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB86_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB86_51
.LBB86_50:                              # %if.else184
                                        #   in Loop: Header=BB86_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB86_51:                              # %if.end196
                                        #   in Loop: Header=BB86_47 Depth=2
	jmp	.LBB86_52
.LBB86_52:                              # %for.inc197
                                        #   in Loop: Header=BB86_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_47
.LBB86_53:                              # %for.end199
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	$0, -4(%rbp)
.LBB86_54:                              # %for.cond200
                                        #   Parent Loop BB86_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB86_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB86_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB86_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB86_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB86_58
.LBB86_57:                              # %if.else216
                                        #   in Loop: Header=BB86_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB86_58:                              # %if.end228
                                        #   in Loop: Header=BB86_54 Depth=2
	jmp	.LBB86_59
.LBB86_59:                              # %for.inc229
                                        #   in Loop: Header=BB86_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_54
.LBB86_60:                              # %for.end231
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	$0, -4(%rbp)
.LBB86_61:                              # %for.cond232
                                        #   Parent Loop BB86_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB86_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB86_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB86_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB86_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB86_65
.LBB86_64:                              # %if.else248
                                        #   in Loop: Header=BB86_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB86_65:                              # %if.end260
                                        #   in Loop: Header=BB86_61 Depth=2
	jmp	.LBB86_66
.LBB86_66:                              # %for.inc261
                                        #   in Loop: Header=BB86_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_61
.LBB86_67:                              # %for.end263
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	$0, -4(%rbp)
.LBB86_68:                              # %for.cond264
                                        #   Parent Loop BB86_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB86_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB86_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB86_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB86_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB86_72
.LBB86_71:                              # %if.else280
                                        #   in Loop: Header=BB86_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB86_72:                              # %if.end292
                                        #   in Loop: Header=BB86_68 Depth=2
	jmp	.LBB86_73
.LBB86_73:                              # %for.inc293
                                        #   in Loop: Header=BB86_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_68
.LBB86_74:                              # %for.end295
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	$0, -4(%rbp)
.LBB86_75:                              # %for.cond296
                                        #   Parent Loop BB86_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB86_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB86_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB86_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB86_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB86_79
.LBB86_78:                              # %if.else312
                                        #   in Loop: Header=BB86_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB86_79:                              # %if.end324
                                        #   in Loop: Header=BB86_75 Depth=2
	jmp	.LBB86_80
.LBB86_80:                              # %for.inc325
                                        #   in Loop: Header=BB86_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_75
.LBB86_81:                              # %for.end327
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	$0, -8(%rbp)
.LBB86_82:                              # %for.cond328
                                        #   Parent Loop BB86_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB86_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB86_82 Depth=2
	movl	$0, -4(%rbp)
.LBB86_84:                              # %for.cond331
                                        #   Parent Loop BB86_1 Depth=1
                                        #     Parent Loop BB86_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB86_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB86_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB86_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB86_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB86_88
.LBB86_87:                              # %if.else350
                                        #   in Loop: Header=BB86_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB86_88:                              # %if.end365
                                        #   in Loop: Header=BB86_84 Depth=3
	jmp	.LBB86_89
.LBB86_89:                              # %for.inc366
                                        #   in Loop: Header=BB86_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_84
.LBB86_90:                              # %for.end368
                                        #   in Loop: Header=BB86_82 Depth=2
	jmp	.LBB86_91
.LBB86_91:                              # %for.inc369
                                        #   in Loop: Header=BB86_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_82
.LBB86_92:                              # %for.end371
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	$0, -8(%rbp)
.LBB86_93:                              # %for.cond372
                                        #   Parent Loop BB86_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB86_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB86_93 Depth=2
	movl	$0, -4(%rbp)
.LBB86_95:                              # %for.cond375
                                        #   Parent Loop BB86_1 Depth=1
                                        #     Parent Loop BB86_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB86_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB86_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB86_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB86_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB86_99
.LBB86_98:                              # %if.else394
                                        #   in Loop: Header=BB86_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB86_99:                              # %if.end409
                                        #   in Loop: Header=BB86_95 Depth=3
	jmp	.LBB86_100
.LBB86_100:                             # %for.inc410
                                        #   in Loop: Header=BB86_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_95
.LBB86_101:                             # %for.end412
                                        #   in Loop: Header=BB86_93 Depth=2
	jmp	.LBB86_102
.LBB86_102:                             # %for.inc413
                                        #   in Loop: Header=BB86_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_93
.LBB86_103:                             # %for.end415
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	$0, -8(%rbp)
.LBB86_104:                             # %for.cond416
                                        #   Parent Loop BB86_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB86_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB86_104 Depth=2
	movl	$0, -4(%rbp)
.LBB86_106:                             # %for.cond419
                                        #   Parent Loop BB86_1 Depth=1
                                        #     Parent Loop BB86_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB86_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB86_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB86_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB86_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB86_110
.LBB86_109:                             # %if.else438
                                        #   in Loop: Header=BB86_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB86_110:                             # %if.end453
                                        #   in Loop: Header=BB86_106 Depth=3
	jmp	.LBB86_111
.LBB86_111:                             # %for.inc454
                                        #   in Loop: Header=BB86_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_106
.LBB86_112:                             # %for.end456
                                        #   in Loop: Header=BB86_104 Depth=2
	jmp	.LBB86_113
.LBB86_113:                             # %for.inc457
                                        #   in Loop: Header=BB86_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_104
.LBB86_114:                             # %for.end459
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	$0, -8(%rbp)
.LBB86_115:                             # %for.cond460
                                        #   Parent Loop BB86_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB86_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB86_115 Depth=2
	movl	$0, -4(%rbp)
.LBB86_117:                             # %for.cond463
                                        #   Parent Loop BB86_1 Depth=1
                                        #     Parent Loop BB86_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB86_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB86_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB86_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB86_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB86_121
.LBB86_120:                             # %if.else482
                                        #   in Loop: Header=BB86_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB86_121:                             # %if.end497
                                        #   in Loop: Header=BB86_117 Depth=3
	jmp	.LBB86_122
.LBB86_122:                             # %for.inc498
                                        #   in Loop: Header=BB86_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_117
.LBB86_123:                             # %for.end500
                                        #   in Loop: Header=BB86_115 Depth=2
	jmp	.LBB86_124
.LBB86_124:                             # %for.inc501
                                        #   in Loop: Header=BB86_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_115
.LBB86_125:                             # %for.end503
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	$0, -8(%rbp)
.LBB86_126:                             # %for.cond504
                                        #   Parent Loop BB86_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB86_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB86_126 Depth=2
	movl	$0, -4(%rbp)
.LBB86_128:                             # %for.cond507
                                        #   Parent Loop BB86_1 Depth=1
                                        #     Parent Loop BB86_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB86_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB86_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB86_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB86_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB86_132
.LBB86_131:                             # %if.else526
                                        #   in Loop: Header=BB86_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB86_132:                             # %if.end541
                                        #   in Loop: Header=BB86_128 Depth=3
	jmp	.LBB86_133
.LBB86_133:                             # %for.inc542
                                        #   in Loop: Header=BB86_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_128
.LBB86_134:                             # %for.end544
                                        #   in Loop: Header=BB86_126 Depth=2
	jmp	.LBB86_135
.LBB86_135:                             # %for.inc545
                                        #   in Loop: Header=BB86_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_126
.LBB86_136:                             # %for.end547
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	$0, -8(%rbp)
.LBB86_137:                             # %for.cond548
                                        #   Parent Loop BB86_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB86_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB86_137 Depth=2
	movl	$0, -4(%rbp)
.LBB86_139:                             # %for.cond551
                                        #   Parent Loop BB86_1 Depth=1
                                        #     Parent Loop BB86_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB86_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB86_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB86_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB86_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB86_143
.LBB86_142:                             # %if.else570
                                        #   in Loop: Header=BB86_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB86_143:                             # %if.end585
                                        #   in Loop: Header=BB86_139 Depth=3
	jmp	.LBB86_144
.LBB86_144:                             # %for.inc586
                                        #   in Loop: Header=BB86_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_139
.LBB86_145:                             # %for.end588
                                        #   in Loop: Header=BB86_137 Depth=2
	jmp	.LBB86_146
.LBB86_146:                             # %for.inc589
                                        #   in Loop: Header=BB86_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_137
.LBB86_147:                             # %for.end591
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	$0, -8(%rbp)
.LBB86_148:                             # %for.cond592
                                        #   Parent Loop BB86_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB86_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB86_148 Depth=2
	movl	$0, -4(%rbp)
.LBB86_150:                             # %for.cond595
                                        #   Parent Loop BB86_1 Depth=1
                                        #     Parent Loop BB86_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB86_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB86_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB86_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB86_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB86_154
.LBB86_153:                             # %if.else614
                                        #   in Loop: Header=BB86_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB86_154:                             # %if.end629
                                        #   in Loop: Header=BB86_150 Depth=3
	jmp	.LBB86_155
.LBB86_155:                             # %for.inc630
                                        #   in Loop: Header=BB86_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_150
.LBB86_156:                             # %for.end632
                                        #   in Loop: Header=BB86_148 Depth=2
	jmp	.LBB86_157
.LBB86_157:                             # %for.inc633
                                        #   in Loop: Header=BB86_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_148
.LBB86_158:                             # %for.end635
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	$0, -8(%rbp)
.LBB86_159:                             # %for.cond636
                                        #   Parent Loop BB86_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB86_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB86_159 Depth=2
	movl	$0, -4(%rbp)
.LBB86_161:                             # %for.cond639
                                        #   Parent Loop BB86_1 Depth=1
                                        #     Parent Loop BB86_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB86_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB86_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB86_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB86_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB86_165
.LBB86_164:                             # %if.else658
                                        #   in Loop: Header=BB86_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB86_165:                             # %if.end673
                                        #   in Loop: Header=BB86_161 Depth=3
	jmp	.LBB86_166
.LBB86_166:                             # %for.inc674
                                        #   in Loop: Header=BB86_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_161
.LBB86_167:                             # %for.end676
                                        #   in Loop: Header=BB86_159 Depth=2
	jmp	.LBB86_168
.LBB86_168:                             # %for.inc677
                                        #   in Loop: Header=BB86_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_159
.LBB86_169:                             # %for.end679
                                        #   in Loop: Header=BB86_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB86_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB86_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB86_171:                             # %if.end682
                                        #   in Loop: Header=BB86_1 Depth=1
	jmp	.LBB86_172
.LBB86_172:                             # %for.inc683
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_1
.LBB86_173:                             # %for.end685
	cmpl	$701013745, -48(%rbp)   # imm = 0x29C89EF1
	jne	.LBB86_175
.LBB86_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_174
.Lfunc_end86:
	.size	GetCtxModelNumber.79, .Lfunc_end86-GetCtxModelNumber.79
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.80        # -- Begin function init_contexts.80
	.p2align	4, 0x90
	.type	init_contexts.80,@function
init_contexts.80:                       # @init_contexts.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$131405677, -28(%rbp)   # imm = 0x7D5176D
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB87_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB87_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	$0, -4(%rbp)
.LBB87_3:                               # %for.cond2
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB87_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB87_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB87_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB87_7
.LBB87_6:                               # %if.else
                                        #   in Loop: Header=BB87_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB87_7:                               # %if.end
                                        #   in Loop: Header=BB87_3 Depth=2
	jmp	.LBB87_8
.LBB87_8:                               # %for.inc
                                        #   in Loop: Header=BB87_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_3
.LBB87_9:                               # %for.end
                                        #   in Loop: Header=BB87_1 Depth=1
	jmp	.LBB87_10
.LBB87_10:                              # %for.inc28
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_1
.LBB87_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB87_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB87_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB87_12 Depth=1
	movl	$0, -4(%rbp)
.LBB87_14:                              # %for.cond34
                                        #   Parent Loop BB87_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB87_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB87_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB87_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB87_18
.LBB87_17:                              # %if.else52
                                        #   in Loop: Header=BB87_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB87_18:                              # %if.end66
                                        #   in Loop: Header=BB87_14 Depth=2
	jmp	.LBB87_19
.LBB87_19:                              # %for.inc67
                                        #   in Loop: Header=BB87_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_14
.LBB87_20:                              # %for.end69
                                        #   in Loop: Header=BB87_12 Depth=1
	jmp	.LBB87_21
.LBB87_21:                              # %for.inc70
                                        #   in Loop: Header=BB87_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_12
.LBB87_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB87_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB87_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB87_23 Depth=1
	movl	$0, -4(%rbp)
.LBB87_25:                              # %for.cond76
                                        #   Parent Loop BB87_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB87_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB87_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB87_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB87_29
.LBB87_28:                              # %if.else94
                                        #   in Loop: Header=BB87_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB87_29:                              # %if.end108
                                        #   in Loop: Header=BB87_25 Depth=2
	jmp	.LBB87_30
.LBB87_30:                              # %for.inc109
                                        #   in Loop: Header=BB87_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_25
.LBB87_31:                              # %for.end111
                                        #   in Loop: Header=BB87_23 Depth=1
	jmp	.LBB87_32
.LBB87_32:                              # %for.inc112
                                        #   in Loop: Header=BB87_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_23
.LBB87_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB87_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB87_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB87_34 Depth=1
	movl	$0, -4(%rbp)
.LBB87_36:                              # %for.cond118
                                        #   Parent Loop BB87_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB87_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB87_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB87_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB87_40
.LBB87_39:                              # %if.else136
                                        #   in Loop: Header=BB87_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB87_40:                              # %if.end150
                                        #   in Loop: Header=BB87_36 Depth=2
	jmp	.LBB87_41
.LBB87_41:                              # %for.inc151
                                        #   in Loop: Header=BB87_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_36
.LBB87_42:                              # %for.end153
                                        #   in Loop: Header=BB87_34 Depth=1
	jmp	.LBB87_43
.LBB87_43:                              # %for.inc154
                                        #   in Loop: Header=BB87_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_34
.LBB87_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB87_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB87_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB87_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB87_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB87_49
.LBB87_48:                              # %if.else172
                                        #   in Loop: Header=BB87_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB87_49:                              # %if.end183
                                        #   in Loop: Header=BB87_45 Depth=1
	jmp	.LBB87_50
.LBB87_50:                              # %for.inc184
                                        #   in Loop: Header=BB87_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_45
.LBB87_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB87_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB87_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB87_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB87_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB87_56
.LBB87_55:                              # %if.else202
                                        #   in Loop: Header=BB87_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB87_56:                              # %if.end213
                                        #   in Loop: Header=BB87_52 Depth=1
	jmp	.LBB87_57
.LBB87_57:                              # %for.inc214
                                        #   in Loop: Header=BB87_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_52
.LBB87_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB87_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB87_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB87_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB87_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB87_63
.LBB87_62:                              # %if.else232
                                        #   in Loop: Header=BB87_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB87_63:                              # %if.end243
                                        #   in Loop: Header=BB87_59 Depth=1
	jmp	.LBB87_64
.LBB87_64:                              # %for.inc244
                                        #   in Loop: Header=BB87_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_59
.LBB87_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB87_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB87_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB87_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB87_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB87_70
.LBB87_69:                              # %if.else262
                                        #   in Loop: Header=BB87_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB87_70:                              # %if.end273
                                        #   in Loop: Header=BB87_66 Depth=1
	jmp	.LBB87_71
.LBB87_71:                              # %for.inc274
                                        #   in Loop: Header=BB87_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_66
.LBB87_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB87_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB87_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB87_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB87_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB87_77
.LBB87_76:                              # %if.else292
                                        #   in Loop: Header=BB87_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB87_77:                              # %if.end303
                                        #   in Loop: Header=BB87_73 Depth=1
	jmp	.LBB87_78
.LBB87_78:                              # %for.inc304
                                        #   in Loop: Header=BB87_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_73
.LBB87_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB87_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB87_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB87_80 Depth=1
	movl	$0, -4(%rbp)
.LBB87_82:                              # %for.cond310
                                        #   Parent Loop BB87_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB87_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB87_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB87_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB87_86
.LBB87_85:                              # %if.else328
                                        #   in Loop: Header=BB87_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB87_86:                              # %if.end342
                                        #   in Loop: Header=BB87_82 Depth=2
	jmp	.LBB87_87
.LBB87_87:                              # %for.inc343
                                        #   in Loop: Header=BB87_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_82
.LBB87_88:                              # %for.end345
                                        #   in Loop: Header=BB87_80 Depth=1
	jmp	.LBB87_89
.LBB87_89:                              # %for.inc346
                                        #   in Loop: Header=BB87_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_80
.LBB87_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB87_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB87_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB87_91 Depth=1
	movl	$0, -4(%rbp)
.LBB87_93:                              # %for.cond352
                                        #   Parent Loop BB87_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB87_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB87_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB87_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB87_97
.LBB87_96:                              # %if.else370
                                        #   in Loop: Header=BB87_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB87_97:                              # %if.end384
                                        #   in Loop: Header=BB87_93 Depth=2
	jmp	.LBB87_98
.LBB87_98:                              # %for.inc385
                                        #   in Loop: Header=BB87_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_93
.LBB87_99:                              # %for.end387
                                        #   in Loop: Header=BB87_91 Depth=1
	jmp	.LBB87_100
.LBB87_100:                             # %for.inc388
                                        #   in Loop: Header=BB87_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_91
.LBB87_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB87_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB87_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB87_102 Depth=1
	movl	$0, -4(%rbp)
.LBB87_104:                             # %for.cond394
                                        #   Parent Loop BB87_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB87_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB87_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB87_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB87_108
.LBB87_107:                             # %if.else412
                                        #   in Loop: Header=BB87_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB87_108:                             # %if.end426
                                        #   in Loop: Header=BB87_104 Depth=2
	jmp	.LBB87_109
.LBB87_109:                             # %for.inc427
                                        #   in Loop: Header=BB87_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_104
.LBB87_110:                             # %for.end429
                                        #   in Loop: Header=BB87_102 Depth=1
	jmp	.LBB87_111
.LBB87_111:                             # %for.inc430
                                        #   in Loop: Header=BB87_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_102
.LBB87_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB87_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB87_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB87_113 Depth=1
	movl	$0, -4(%rbp)
.LBB87_115:                             # %for.cond436
                                        #   Parent Loop BB87_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB87_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB87_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB87_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB87_119
.LBB87_118:                             # %if.else454
                                        #   in Loop: Header=BB87_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB87_119:                             # %if.end468
                                        #   in Loop: Header=BB87_115 Depth=2
	jmp	.LBB87_120
.LBB87_120:                             # %for.inc469
                                        #   in Loop: Header=BB87_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_115
.LBB87_121:                             # %for.end471
                                        #   in Loop: Header=BB87_113 Depth=1
	jmp	.LBB87_122
.LBB87_122:                             # %for.inc472
                                        #   in Loop: Header=BB87_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_113
.LBB87_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB87_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB87_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB87_124 Depth=1
	movl	$0, -4(%rbp)
.LBB87_126:                             # %for.cond478
                                        #   Parent Loop BB87_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB87_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB87_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB87_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB87_130
.LBB87_129:                             # %if.else496
                                        #   in Loop: Header=BB87_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB87_130:                             # %if.end510
                                        #   in Loop: Header=BB87_126 Depth=2
	jmp	.LBB87_131
.LBB87_131:                             # %for.inc511
                                        #   in Loop: Header=BB87_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_126
.LBB87_132:                             # %for.end513
                                        #   in Loop: Header=BB87_124 Depth=1
	jmp	.LBB87_133
.LBB87_133:                             # %for.inc514
                                        #   in Loop: Header=BB87_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_124
.LBB87_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB87_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB87_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB87_135 Depth=1
	movl	$0, -4(%rbp)
.LBB87_137:                             # %for.cond520
                                        #   Parent Loop BB87_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB87_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB87_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB87_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB87_141
.LBB87_140:                             # %if.else538
                                        #   in Loop: Header=BB87_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB87_141:                             # %if.end552
                                        #   in Loop: Header=BB87_137 Depth=2
	jmp	.LBB87_142
.LBB87_142:                             # %for.inc553
                                        #   in Loop: Header=BB87_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_137
.LBB87_143:                             # %for.end555
                                        #   in Loop: Header=BB87_135 Depth=1
	jmp	.LBB87_144
.LBB87_144:                             # %for.inc556
                                        #   in Loop: Header=BB87_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_135
.LBB87_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB87_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB87_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB87_146 Depth=1
	movl	$0, -4(%rbp)
.LBB87_148:                             # %for.cond562
                                        #   Parent Loop BB87_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB87_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB87_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB87_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB87_152
.LBB87_151:                             # %if.else580
                                        #   in Loop: Header=BB87_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB87_152:                             # %if.end594
                                        #   in Loop: Header=BB87_148 Depth=2
	jmp	.LBB87_153
.LBB87_153:                             # %for.inc595
                                        #   in Loop: Header=BB87_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_148
.LBB87_154:                             # %for.end597
                                        #   in Loop: Header=BB87_146 Depth=1
	jmp	.LBB87_155
.LBB87_155:                             # %for.inc598
                                        #   in Loop: Header=BB87_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_146
.LBB87_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB87_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB87_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB87_157 Depth=1
	movl	$0, -4(%rbp)
.LBB87_159:                             # %for.cond604
                                        #   Parent Loop BB87_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB87_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB87_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB87_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB87_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB87_163
.LBB87_162:                             # %if.else622
                                        #   in Loop: Header=BB87_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB87_163:                             # %if.end636
                                        #   in Loop: Header=BB87_159 Depth=2
	jmp	.LBB87_164
.LBB87_164:                             # %for.inc637
                                        #   in Loop: Header=BB87_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_159
.LBB87_165:                             # %for.end639
                                        #   in Loop: Header=BB87_157 Depth=1
	jmp	.LBB87_166
.LBB87_166:                             # %for.inc640
                                        #   in Loop: Header=BB87_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_157
.LBB87_167:                             # %for.end642
	cmpl	$131405677, -28(%rbp)   # imm = 0x7D5176D
	jne	.LBB87_169
.LBB87_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_168
.Lfunc_end87:
	.size	init_contexts.80, .Lfunc_end87-init_contexts.80
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.81        # -- Begin function init_contexts.81
	.p2align	4, 0x90
	.type	init_contexts.81,@function
init_contexts.81:                       # @init_contexts.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2069126763, -28(%rbp)  # imm = 0x7B545E6B
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB88_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB88_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB88_1 Depth=1
	movl	$0, -4(%rbp)
.LBB88_3:                               # %for.cond2
                                        #   Parent Loop BB88_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB88_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB88_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB88_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB88_7
.LBB88_6:                               # %if.else
                                        #   in Loop: Header=BB88_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB88_7:                               # %if.end
                                        #   in Loop: Header=BB88_3 Depth=2
	jmp	.LBB88_8
.LBB88_8:                               # %for.inc
                                        #   in Loop: Header=BB88_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_3
.LBB88_9:                               # %for.end
                                        #   in Loop: Header=BB88_1 Depth=1
	jmp	.LBB88_10
.LBB88_10:                              # %for.inc28
                                        #   in Loop: Header=BB88_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_1
.LBB88_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB88_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB88_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB88_12 Depth=1
	movl	$0, -4(%rbp)
.LBB88_14:                              # %for.cond34
                                        #   Parent Loop BB88_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB88_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB88_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB88_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB88_18
.LBB88_17:                              # %if.else52
                                        #   in Loop: Header=BB88_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB88_18:                              # %if.end66
                                        #   in Loop: Header=BB88_14 Depth=2
	jmp	.LBB88_19
.LBB88_19:                              # %for.inc67
                                        #   in Loop: Header=BB88_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_14
.LBB88_20:                              # %for.end69
                                        #   in Loop: Header=BB88_12 Depth=1
	jmp	.LBB88_21
.LBB88_21:                              # %for.inc70
                                        #   in Loop: Header=BB88_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_12
.LBB88_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB88_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB88_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB88_23 Depth=1
	movl	$0, -4(%rbp)
.LBB88_25:                              # %for.cond76
                                        #   Parent Loop BB88_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB88_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB88_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB88_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB88_29
.LBB88_28:                              # %if.else94
                                        #   in Loop: Header=BB88_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB88_29:                              # %if.end108
                                        #   in Loop: Header=BB88_25 Depth=2
	jmp	.LBB88_30
.LBB88_30:                              # %for.inc109
                                        #   in Loop: Header=BB88_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_25
.LBB88_31:                              # %for.end111
                                        #   in Loop: Header=BB88_23 Depth=1
	jmp	.LBB88_32
.LBB88_32:                              # %for.inc112
                                        #   in Loop: Header=BB88_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_23
.LBB88_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB88_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB88_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB88_34 Depth=1
	movl	$0, -4(%rbp)
.LBB88_36:                              # %for.cond118
                                        #   Parent Loop BB88_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB88_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB88_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB88_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB88_40
.LBB88_39:                              # %if.else136
                                        #   in Loop: Header=BB88_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB88_40:                              # %if.end150
                                        #   in Loop: Header=BB88_36 Depth=2
	jmp	.LBB88_41
.LBB88_41:                              # %for.inc151
                                        #   in Loop: Header=BB88_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_36
.LBB88_42:                              # %for.end153
                                        #   in Loop: Header=BB88_34 Depth=1
	jmp	.LBB88_43
.LBB88_43:                              # %for.inc154
                                        #   in Loop: Header=BB88_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_34
.LBB88_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB88_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB88_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB88_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB88_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB88_49
.LBB88_48:                              # %if.else172
                                        #   in Loop: Header=BB88_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB88_49:                              # %if.end183
                                        #   in Loop: Header=BB88_45 Depth=1
	jmp	.LBB88_50
.LBB88_50:                              # %for.inc184
                                        #   in Loop: Header=BB88_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_45
.LBB88_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB88_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB88_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB88_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB88_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB88_56
.LBB88_55:                              # %if.else202
                                        #   in Loop: Header=BB88_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB88_56:                              # %if.end213
                                        #   in Loop: Header=BB88_52 Depth=1
	jmp	.LBB88_57
.LBB88_57:                              # %for.inc214
                                        #   in Loop: Header=BB88_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_52
.LBB88_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB88_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB88_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB88_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB88_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB88_63
.LBB88_62:                              # %if.else232
                                        #   in Loop: Header=BB88_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB88_63:                              # %if.end243
                                        #   in Loop: Header=BB88_59 Depth=1
	jmp	.LBB88_64
.LBB88_64:                              # %for.inc244
                                        #   in Loop: Header=BB88_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_59
.LBB88_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB88_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB88_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB88_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB88_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB88_70
.LBB88_69:                              # %if.else262
                                        #   in Loop: Header=BB88_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB88_70:                              # %if.end273
                                        #   in Loop: Header=BB88_66 Depth=1
	jmp	.LBB88_71
.LBB88_71:                              # %for.inc274
                                        #   in Loop: Header=BB88_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_66
.LBB88_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB88_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB88_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB88_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB88_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB88_77
.LBB88_76:                              # %if.else292
                                        #   in Loop: Header=BB88_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB88_77:                              # %if.end303
                                        #   in Loop: Header=BB88_73 Depth=1
	jmp	.LBB88_78
.LBB88_78:                              # %for.inc304
                                        #   in Loop: Header=BB88_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_73
.LBB88_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB88_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB88_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB88_80 Depth=1
	movl	$0, -4(%rbp)
.LBB88_82:                              # %for.cond310
                                        #   Parent Loop BB88_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB88_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB88_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB88_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB88_86
.LBB88_85:                              # %if.else328
                                        #   in Loop: Header=BB88_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB88_86:                              # %if.end342
                                        #   in Loop: Header=BB88_82 Depth=2
	jmp	.LBB88_87
.LBB88_87:                              # %for.inc343
                                        #   in Loop: Header=BB88_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_82
.LBB88_88:                              # %for.end345
                                        #   in Loop: Header=BB88_80 Depth=1
	jmp	.LBB88_89
.LBB88_89:                              # %for.inc346
                                        #   in Loop: Header=BB88_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_80
.LBB88_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB88_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB88_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB88_91 Depth=1
	movl	$0, -4(%rbp)
.LBB88_93:                              # %for.cond352
                                        #   Parent Loop BB88_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB88_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB88_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB88_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB88_97
.LBB88_96:                              # %if.else370
                                        #   in Loop: Header=BB88_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB88_97:                              # %if.end384
                                        #   in Loop: Header=BB88_93 Depth=2
	jmp	.LBB88_98
.LBB88_98:                              # %for.inc385
                                        #   in Loop: Header=BB88_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_93
.LBB88_99:                              # %for.end387
                                        #   in Loop: Header=BB88_91 Depth=1
	jmp	.LBB88_100
.LBB88_100:                             # %for.inc388
                                        #   in Loop: Header=BB88_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_91
.LBB88_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB88_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB88_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB88_102 Depth=1
	movl	$0, -4(%rbp)
.LBB88_104:                             # %for.cond394
                                        #   Parent Loop BB88_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB88_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB88_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB88_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB88_108
.LBB88_107:                             # %if.else412
                                        #   in Loop: Header=BB88_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB88_108:                             # %if.end426
                                        #   in Loop: Header=BB88_104 Depth=2
	jmp	.LBB88_109
.LBB88_109:                             # %for.inc427
                                        #   in Loop: Header=BB88_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_104
.LBB88_110:                             # %for.end429
                                        #   in Loop: Header=BB88_102 Depth=1
	jmp	.LBB88_111
.LBB88_111:                             # %for.inc430
                                        #   in Loop: Header=BB88_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_102
.LBB88_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB88_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB88_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB88_113 Depth=1
	movl	$0, -4(%rbp)
.LBB88_115:                             # %for.cond436
                                        #   Parent Loop BB88_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB88_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB88_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB88_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB88_119
.LBB88_118:                             # %if.else454
                                        #   in Loop: Header=BB88_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB88_119:                             # %if.end468
                                        #   in Loop: Header=BB88_115 Depth=2
	jmp	.LBB88_120
.LBB88_120:                             # %for.inc469
                                        #   in Loop: Header=BB88_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_115
.LBB88_121:                             # %for.end471
                                        #   in Loop: Header=BB88_113 Depth=1
	jmp	.LBB88_122
.LBB88_122:                             # %for.inc472
                                        #   in Loop: Header=BB88_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_113
.LBB88_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB88_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB88_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB88_124 Depth=1
	movl	$0, -4(%rbp)
.LBB88_126:                             # %for.cond478
                                        #   Parent Loop BB88_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB88_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB88_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB88_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB88_130
.LBB88_129:                             # %if.else496
                                        #   in Loop: Header=BB88_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB88_130:                             # %if.end510
                                        #   in Loop: Header=BB88_126 Depth=2
	jmp	.LBB88_131
.LBB88_131:                             # %for.inc511
                                        #   in Loop: Header=BB88_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_126
.LBB88_132:                             # %for.end513
                                        #   in Loop: Header=BB88_124 Depth=1
	jmp	.LBB88_133
.LBB88_133:                             # %for.inc514
                                        #   in Loop: Header=BB88_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_124
.LBB88_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB88_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB88_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB88_135 Depth=1
	movl	$0, -4(%rbp)
.LBB88_137:                             # %for.cond520
                                        #   Parent Loop BB88_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB88_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB88_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB88_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB88_141
.LBB88_140:                             # %if.else538
                                        #   in Loop: Header=BB88_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB88_141:                             # %if.end552
                                        #   in Loop: Header=BB88_137 Depth=2
	jmp	.LBB88_142
.LBB88_142:                             # %for.inc553
                                        #   in Loop: Header=BB88_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_137
.LBB88_143:                             # %for.end555
                                        #   in Loop: Header=BB88_135 Depth=1
	jmp	.LBB88_144
.LBB88_144:                             # %for.inc556
                                        #   in Loop: Header=BB88_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_135
.LBB88_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB88_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB88_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB88_146 Depth=1
	movl	$0, -4(%rbp)
.LBB88_148:                             # %for.cond562
                                        #   Parent Loop BB88_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB88_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB88_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB88_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB88_152
.LBB88_151:                             # %if.else580
                                        #   in Loop: Header=BB88_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB88_152:                             # %if.end594
                                        #   in Loop: Header=BB88_148 Depth=2
	jmp	.LBB88_153
.LBB88_153:                             # %for.inc595
                                        #   in Loop: Header=BB88_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_148
.LBB88_154:                             # %for.end597
                                        #   in Loop: Header=BB88_146 Depth=1
	jmp	.LBB88_155
.LBB88_155:                             # %for.inc598
                                        #   in Loop: Header=BB88_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_146
.LBB88_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB88_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB88_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB88_157 Depth=1
	movl	$0, -4(%rbp)
.LBB88_159:                             # %for.cond604
                                        #   Parent Loop BB88_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB88_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB88_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB88_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB88_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB88_163
.LBB88_162:                             # %if.else622
                                        #   in Loop: Header=BB88_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB88_163:                             # %if.end636
                                        #   in Loop: Header=BB88_159 Depth=2
	jmp	.LBB88_164
.LBB88_164:                             # %for.inc637
                                        #   in Loop: Header=BB88_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_159
.LBB88_165:                             # %for.end639
                                        #   in Loop: Header=BB88_157 Depth=1
	jmp	.LBB88_166
.LBB88_166:                             # %for.inc640
                                        #   in Loop: Header=BB88_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_157
.LBB88_167:                             # %for.end642
	cmpl	$2069126763, -28(%rbp)  # imm = 0x7B545E6B
	jne	.LBB88_169
.LBB88_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_168
.Lfunc_end88:
	.size	init_contexts.81, .Lfunc_end88-init_contexts.81
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.82        # -- Begin function init_contexts.82
	.p2align	4, 0x90
	.type	init_contexts.82,@function
init_contexts.82:                       # @init_contexts.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$207655852, -28(%rbp)   # imm = 0xC6093AC
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB89_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB89_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB89_1 Depth=1
	movl	$0, -4(%rbp)
.LBB89_3:                               # %for.cond2
                                        #   Parent Loop BB89_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB89_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB89_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB89_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB89_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB89_7
.LBB89_6:                               # %if.else
                                        #   in Loop: Header=BB89_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB89_7:                               # %if.end
                                        #   in Loop: Header=BB89_3 Depth=2
	jmp	.LBB89_8
.LBB89_8:                               # %for.inc
                                        #   in Loop: Header=BB89_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_3
.LBB89_9:                               # %for.end
                                        #   in Loop: Header=BB89_1 Depth=1
	jmp	.LBB89_10
.LBB89_10:                              # %for.inc28
                                        #   in Loop: Header=BB89_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_1
.LBB89_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB89_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB89_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB89_12 Depth=1
	movl	$0, -4(%rbp)
.LBB89_14:                              # %for.cond34
                                        #   Parent Loop BB89_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB89_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB89_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB89_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB89_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB89_18
.LBB89_17:                              # %if.else52
                                        #   in Loop: Header=BB89_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB89_18:                              # %if.end66
                                        #   in Loop: Header=BB89_14 Depth=2
	jmp	.LBB89_19
.LBB89_19:                              # %for.inc67
                                        #   in Loop: Header=BB89_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_14
.LBB89_20:                              # %for.end69
                                        #   in Loop: Header=BB89_12 Depth=1
	jmp	.LBB89_21
.LBB89_21:                              # %for.inc70
                                        #   in Loop: Header=BB89_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_12
.LBB89_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB89_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB89_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB89_23 Depth=1
	movl	$0, -4(%rbp)
.LBB89_25:                              # %for.cond76
                                        #   Parent Loop BB89_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB89_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB89_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB89_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB89_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB89_29
.LBB89_28:                              # %if.else94
                                        #   in Loop: Header=BB89_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB89_29:                              # %if.end108
                                        #   in Loop: Header=BB89_25 Depth=2
	jmp	.LBB89_30
.LBB89_30:                              # %for.inc109
                                        #   in Loop: Header=BB89_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_25
.LBB89_31:                              # %for.end111
                                        #   in Loop: Header=BB89_23 Depth=1
	jmp	.LBB89_32
.LBB89_32:                              # %for.inc112
                                        #   in Loop: Header=BB89_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_23
.LBB89_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB89_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB89_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB89_34 Depth=1
	movl	$0, -4(%rbp)
.LBB89_36:                              # %for.cond118
                                        #   Parent Loop BB89_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB89_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB89_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB89_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB89_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB89_40
.LBB89_39:                              # %if.else136
                                        #   in Loop: Header=BB89_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB89_40:                              # %if.end150
                                        #   in Loop: Header=BB89_36 Depth=2
	jmp	.LBB89_41
.LBB89_41:                              # %for.inc151
                                        #   in Loop: Header=BB89_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_36
.LBB89_42:                              # %for.end153
                                        #   in Loop: Header=BB89_34 Depth=1
	jmp	.LBB89_43
.LBB89_43:                              # %for.inc154
                                        #   in Loop: Header=BB89_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_34
.LBB89_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB89_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB89_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB89_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB89_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB89_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB89_49
.LBB89_48:                              # %if.else172
                                        #   in Loop: Header=BB89_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB89_49:                              # %if.end183
                                        #   in Loop: Header=BB89_45 Depth=1
	jmp	.LBB89_50
.LBB89_50:                              # %for.inc184
                                        #   in Loop: Header=BB89_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_45
.LBB89_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB89_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB89_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB89_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB89_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB89_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB89_56
.LBB89_55:                              # %if.else202
                                        #   in Loop: Header=BB89_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB89_56:                              # %if.end213
                                        #   in Loop: Header=BB89_52 Depth=1
	jmp	.LBB89_57
.LBB89_57:                              # %for.inc214
                                        #   in Loop: Header=BB89_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_52
.LBB89_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB89_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB89_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB89_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB89_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB89_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB89_63
.LBB89_62:                              # %if.else232
                                        #   in Loop: Header=BB89_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB89_63:                              # %if.end243
                                        #   in Loop: Header=BB89_59 Depth=1
	jmp	.LBB89_64
.LBB89_64:                              # %for.inc244
                                        #   in Loop: Header=BB89_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_59
.LBB89_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB89_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB89_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB89_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB89_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB89_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB89_70
.LBB89_69:                              # %if.else262
                                        #   in Loop: Header=BB89_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB89_70:                              # %if.end273
                                        #   in Loop: Header=BB89_66 Depth=1
	jmp	.LBB89_71
.LBB89_71:                              # %for.inc274
                                        #   in Loop: Header=BB89_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_66
.LBB89_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB89_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB89_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB89_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB89_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB89_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB89_77
.LBB89_76:                              # %if.else292
                                        #   in Loop: Header=BB89_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB89_77:                              # %if.end303
                                        #   in Loop: Header=BB89_73 Depth=1
	jmp	.LBB89_78
.LBB89_78:                              # %for.inc304
                                        #   in Loop: Header=BB89_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_73
.LBB89_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB89_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB89_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB89_80 Depth=1
	movl	$0, -4(%rbp)
.LBB89_82:                              # %for.cond310
                                        #   Parent Loop BB89_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB89_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB89_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB89_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB89_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB89_86
.LBB89_85:                              # %if.else328
                                        #   in Loop: Header=BB89_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB89_86:                              # %if.end342
                                        #   in Loop: Header=BB89_82 Depth=2
	jmp	.LBB89_87
.LBB89_87:                              # %for.inc343
                                        #   in Loop: Header=BB89_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_82
.LBB89_88:                              # %for.end345
                                        #   in Loop: Header=BB89_80 Depth=1
	jmp	.LBB89_89
.LBB89_89:                              # %for.inc346
                                        #   in Loop: Header=BB89_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_80
.LBB89_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB89_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB89_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB89_91 Depth=1
	movl	$0, -4(%rbp)
.LBB89_93:                              # %for.cond352
                                        #   Parent Loop BB89_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB89_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB89_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB89_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB89_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB89_97
.LBB89_96:                              # %if.else370
                                        #   in Loop: Header=BB89_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB89_97:                              # %if.end384
                                        #   in Loop: Header=BB89_93 Depth=2
	jmp	.LBB89_98
.LBB89_98:                              # %for.inc385
                                        #   in Loop: Header=BB89_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_93
.LBB89_99:                              # %for.end387
                                        #   in Loop: Header=BB89_91 Depth=1
	jmp	.LBB89_100
.LBB89_100:                             # %for.inc388
                                        #   in Loop: Header=BB89_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_91
.LBB89_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB89_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB89_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB89_102 Depth=1
	movl	$0, -4(%rbp)
.LBB89_104:                             # %for.cond394
                                        #   Parent Loop BB89_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB89_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB89_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB89_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB89_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB89_108
.LBB89_107:                             # %if.else412
                                        #   in Loop: Header=BB89_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB89_108:                             # %if.end426
                                        #   in Loop: Header=BB89_104 Depth=2
	jmp	.LBB89_109
.LBB89_109:                             # %for.inc427
                                        #   in Loop: Header=BB89_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_104
.LBB89_110:                             # %for.end429
                                        #   in Loop: Header=BB89_102 Depth=1
	jmp	.LBB89_111
.LBB89_111:                             # %for.inc430
                                        #   in Loop: Header=BB89_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_102
.LBB89_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB89_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB89_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB89_113 Depth=1
	movl	$0, -4(%rbp)
.LBB89_115:                             # %for.cond436
                                        #   Parent Loop BB89_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB89_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB89_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB89_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB89_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB89_119
.LBB89_118:                             # %if.else454
                                        #   in Loop: Header=BB89_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB89_119:                             # %if.end468
                                        #   in Loop: Header=BB89_115 Depth=2
	jmp	.LBB89_120
.LBB89_120:                             # %for.inc469
                                        #   in Loop: Header=BB89_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_115
.LBB89_121:                             # %for.end471
                                        #   in Loop: Header=BB89_113 Depth=1
	jmp	.LBB89_122
.LBB89_122:                             # %for.inc472
                                        #   in Loop: Header=BB89_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_113
.LBB89_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB89_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB89_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB89_124 Depth=1
	movl	$0, -4(%rbp)
.LBB89_126:                             # %for.cond478
                                        #   Parent Loop BB89_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB89_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB89_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB89_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB89_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB89_130
.LBB89_129:                             # %if.else496
                                        #   in Loop: Header=BB89_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB89_130:                             # %if.end510
                                        #   in Loop: Header=BB89_126 Depth=2
	jmp	.LBB89_131
.LBB89_131:                             # %for.inc511
                                        #   in Loop: Header=BB89_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_126
.LBB89_132:                             # %for.end513
                                        #   in Loop: Header=BB89_124 Depth=1
	jmp	.LBB89_133
.LBB89_133:                             # %for.inc514
                                        #   in Loop: Header=BB89_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_124
.LBB89_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB89_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB89_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	$0, -4(%rbp)
.LBB89_137:                             # %for.cond520
                                        #   Parent Loop BB89_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB89_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB89_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB89_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB89_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB89_141
.LBB89_140:                             # %if.else538
                                        #   in Loop: Header=BB89_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB89_141:                             # %if.end552
                                        #   in Loop: Header=BB89_137 Depth=2
	jmp	.LBB89_142
.LBB89_142:                             # %for.inc553
                                        #   in Loop: Header=BB89_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_137
.LBB89_143:                             # %for.end555
                                        #   in Loop: Header=BB89_135 Depth=1
	jmp	.LBB89_144
.LBB89_144:                             # %for.inc556
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_135
.LBB89_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB89_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB89_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB89_146 Depth=1
	movl	$0, -4(%rbp)
.LBB89_148:                             # %for.cond562
                                        #   Parent Loop BB89_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB89_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB89_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB89_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB89_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB89_152
.LBB89_151:                             # %if.else580
                                        #   in Loop: Header=BB89_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB89_152:                             # %if.end594
                                        #   in Loop: Header=BB89_148 Depth=2
	jmp	.LBB89_153
.LBB89_153:                             # %for.inc595
                                        #   in Loop: Header=BB89_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_148
.LBB89_154:                             # %for.end597
                                        #   in Loop: Header=BB89_146 Depth=1
	jmp	.LBB89_155
.LBB89_155:                             # %for.inc598
                                        #   in Loop: Header=BB89_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_146
.LBB89_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB89_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB89_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB89_157 Depth=1
	movl	$0, -4(%rbp)
.LBB89_159:                             # %for.cond604
                                        #   Parent Loop BB89_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB89_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB89_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB89_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB89_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB89_163
.LBB89_162:                             # %if.else622
                                        #   in Loop: Header=BB89_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB89_163:                             # %if.end636
                                        #   in Loop: Header=BB89_159 Depth=2
	jmp	.LBB89_164
.LBB89_164:                             # %for.inc637
                                        #   in Loop: Header=BB89_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_159
.LBB89_165:                             # %for.end639
                                        #   in Loop: Header=BB89_157 Depth=1
	jmp	.LBB89_166
.LBB89_166:                             # %for.inc640
                                        #   in Loop: Header=BB89_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_157
.LBB89_167:                             # %for.end642
	cmpl	$207655852, -28(%rbp)   # imm = 0xC6093AC
	jne	.LBB89_169
.LBB89_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_168
.Lfunc_end89:
	.size	init_contexts.82, .Lfunc_end89-init_contexts.82
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.83        # -- Begin function init_contexts.83
	.p2align	4, 0x90
	.type	init_contexts.83,@function
init_contexts.83:                       # @init_contexts.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1528083272, -28(%rbp)  # imm = 0x5B14B348
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB90_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB90_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB90_1 Depth=1
	movl	$0, -4(%rbp)
.LBB90_3:                               # %for.cond2
                                        #   Parent Loop BB90_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB90_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB90_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB90_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB90_7
.LBB90_6:                               # %if.else
                                        #   in Loop: Header=BB90_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB90_7:                               # %if.end
                                        #   in Loop: Header=BB90_3 Depth=2
	jmp	.LBB90_8
.LBB90_8:                               # %for.inc
                                        #   in Loop: Header=BB90_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_3
.LBB90_9:                               # %for.end
                                        #   in Loop: Header=BB90_1 Depth=1
	jmp	.LBB90_10
.LBB90_10:                              # %for.inc28
                                        #   in Loop: Header=BB90_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_1
.LBB90_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB90_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB90_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB90_12 Depth=1
	movl	$0, -4(%rbp)
.LBB90_14:                              # %for.cond34
                                        #   Parent Loop BB90_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB90_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB90_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB90_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB90_18
.LBB90_17:                              # %if.else52
                                        #   in Loop: Header=BB90_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB90_18:                              # %if.end66
                                        #   in Loop: Header=BB90_14 Depth=2
	jmp	.LBB90_19
.LBB90_19:                              # %for.inc67
                                        #   in Loop: Header=BB90_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_14
.LBB90_20:                              # %for.end69
                                        #   in Loop: Header=BB90_12 Depth=1
	jmp	.LBB90_21
.LBB90_21:                              # %for.inc70
                                        #   in Loop: Header=BB90_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_12
.LBB90_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB90_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB90_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB90_23 Depth=1
	movl	$0, -4(%rbp)
.LBB90_25:                              # %for.cond76
                                        #   Parent Loop BB90_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB90_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB90_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB90_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB90_29
.LBB90_28:                              # %if.else94
                                        #   in Loop: Header=BB90_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB90_29:                              # %if.end108
                                        #   in Loop: Header=BB90_25 Depth=2
	jmp	.LBB90_30
.LBB90_30:                              # %for.inc109
                                        #   in Loop: Header=BB90_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_25
.LBB90_31:                              # %for.end111
                                        #   in Loop: Header=BB90_23 Depth=1
	jmp	.LBB90_32
.LBB90_32:                              # %for.inc112
                                        #   in Loop: Header=BB90_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_23
.LBB90_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB90_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB90_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB90_34 Depth=1
	movl	$0, -4(%rbp)
.LBB90_36:                              # %for.cond118
                                        #   Parent Loop BB90_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB90_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB90_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB90_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB90_40
.LBB90_39:                              # %if.else136
                                        #   in Loop: Header=BB90_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB90_40:                              # %if.end150
                                        #   in Loop: Header=BB90_36 Depth=2
	jmp	.LBB90_41
.LBB90_41:                              # %for.inc151
                                        #   in Loop: Header=BB90_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_36
.LBB90_42:                              # %for.end153
                                        #   in Loop: Header=BB90_34 Depth=1
	jmp	.LBB90_43
.LBB90_43:                              # %for.inc154
                                        #   in Loop: Header=BB90_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_34
.LBB90_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB90_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB90_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB90_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB90_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB90_49
.LBB90_48:                              # %if.else172
                                        #   in Loop: Header=BB90_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB90_49:                              # %if.end183
                                        #   in Loop: Header=BB90_45 Depth=1
	jmp	.LBB90_50
.LBB90_50:                              # %for.inc184
                                        #   in Loop: Header=BB90_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_45
.LBB90_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB90_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB90_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB90_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB90_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB90_56
.LBB90_55:                              # %if.else202
                                        #   in Loop: Header=BB90_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB90_56:                              # %if.end213
                                        #   in Loop: Header=BB90_52 Depth=1
	jmp	.LBB90_57
.LBB90_57:                              # %for.inc214
                                        #   in Loop: Header=BB90_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_52
.LBB90_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB90_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB90_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB90_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB90_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB90_63
.LBB90_62:                              # %if.else232
                                        #   in Loop: Header=BB90_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB90_63:                              # %if.end243
                                        #   in Loop: Header=BB90_59 Depth=1
	jmp	.LBB90_64
.LBB90_64:                              # %for.inc244
                                        #   in Loop: Header=BB90_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_59
.LBB90_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB90_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB90_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB90_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB90_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB90_70
.LBB90_69:                              # %if.else262
                                        #   in Loop: Header=BB90_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB90_70:                              # %if.end273
                                        #   in Loop: Header=BB90_66 Depth=1
	jmp	.LBB90_71
.LBB90_71:                              # %for.inc274
                                        #   in Loop: Header=BB90_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_66
.LBB90_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB90_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB90_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB90_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB90_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB90_77
.LBB90_76:                              # %if.else292
                                        #   in Loop: Header=BB90_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB90_77:                              # %if.end303
                                        #   in Loop: Header=BB90_73 Depth=1
	jmp	.LBB90_78
.LBB90_78:                              # %for.inc304
                                        #   in Loop: Header=BB90_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_73
.LBB90_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB90_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB90_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB90_80 Depth=1
	movl	$0, -4(%rbp)
.LBB90_82:                              # %for.cond310
                                        #   Parent Loop BB90_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB90_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB90_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB90_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB90_86
.LBB90_85:                              # %if.else328
                                        #   in Loop: Header=BB90_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB90_86:                              # %if.end342
                                        #   in Loop: Header=BB90_82 Depth=2
	jmp	.LBB90_87
.LBB90_87:                              # %for.inc343
                                        #   in Loop: Header=BB90_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_82
.LBB90_88:                              # %for.end345
                                        #   in Loop: Header=BB90_80 Depth=1
	jmp	.LBB90_89
.LBB90_89:                              # %for.inc346
                                        #   in Loop: Header=BB90_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_80
.LBB90_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB90_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB90_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB90_91 Depth=1
	movl	$0, -4(%rbp)
.LBB90_93:                              # %for.cond352
                                        #   Parent Loop BB90_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB90_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB90_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB90_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB90_97
.LBB90_96:                              # %if.else370
                                        #   in Loop: Header=BB90_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB90_97:                              # %if.end384
                                        #   in Loop: Header=BB90_93 Depth=2
	jmp	.LBB90_98
.LBB90_98:                              # %for.inc385
                                        #   in Loop: Header=BB90_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_93
.LBB90_99:                              # %for.end387
                                        #   in Loop: Header=BB90_91 Depth=1
	jmp	.LBB90_100
.LBB90_100:                             # %for.inc388
                                        #   in Loop: Header=BB90_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_91
.LBB90_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB90_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB90_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB90_102 Depth=1
	movl	$0, -4(%rbp)
.LBB90_104:                             # %for.cond394
                                        #   Parent Loop BB90_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB90_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB90_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB90_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB90_108
.LBB90_107:                             # %if.else412
                                        #   in Loop: Header=BB90_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB90_108:                             # %if.end426
                                        #   in Loop: Header=BB90_104 Depth=2
	jmp	.LBB90_109
.LBB90_109:                             # %for.inc427
                                        #   in Loop: Header=BB90_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_104
.LBB90_110:                             # %for.end429
                                        #   in Loop: Header=BB90_102 Depth=1
	jmp	.LBB90_111
.LBB90_111:                             # %for.inc430
                                        #   in Loop: Header=BB90_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_102
.LBB90_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB90_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB90_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB90_113 Depth=1
	movl	$0, -4(%rbp)
.LBB90_115:                             # %for.cond436
                                        #   Parent Loop BB90_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB90_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB90_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB90_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB90_119
.LBB90_118:                             # %if.else454
                                        #   in Loop: Header=BB90_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB90_119:                             # %if.end468
                                        #   in Loop: Header=BB90_115 Depth=2
	jmp	.LBB90_120
.LBB90_120:                             # %for.inc469
                                        #   in Loop: Header=BB90_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_115
.LBB90_121:                             # %for.end471
                                        #   in Loop: Header=BB90_113 Depth=1
	jmp	.LBB90_122
.LBB90_122:                             # %for.inc472
                                        #   in Loop: Header=BB90_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_113
.LBB90_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB90_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB90_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB90_124 Depth=1
	movl	$0, -4(%rbp)
.LBB90_126:                             # %for.cond478
                                        #   Parent Loop BB90_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB90_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB90_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB90_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB90_130
.LBB90_129:                             # %if.else496
                                        #   in Loop: Header=BB90_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB90_130:                             # %if.end510
                                        #   in Loop: Header=BB90_126 Depth=2
	jmp	.LBB90_131
.LBB90_131:                             # %for.inc511
                                        #   in Loop: Header=BB90_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_126
.LBB90_132:                             # %for.end513
                                        #   in Loop: Header=BB90_124 Depth=1
	jmp	.LBB90_133
.LBB90_133:                             # %for.inc514
                                        #   in Loop: Header=BB90_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_124
.LBB90_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB90_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB90_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB90_135 Depth=1
	movl	$0, -4(%rbp)
.LBB90_137:                             # %for.cond520
                                        #   Parent Loop BB90_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB90_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB90_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB90_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB90_141
.LBB90_140:                             # %if.else538
                                        #   in Loop: Header=BB90_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB90_141:                             # %if.end552
                                        #   in Loop: Header=BB90_137 Depth=2
	jmp	.LBB90_142
.LBB90_142:                             # %for.inc553
                                        #   in Loop: Header=BB90_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_137
.LBB90_143:                             # %for.end555
                                        #   in Loop: Header=BB90_135 Depth=1
	jmp	.LBB90_144
.LBB90_144:                             # %for.inc556
                                        #   in Loop: Header=BB90_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_135
.LBB90_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB90_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB90_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB90_146 Depth=1
	movl	$0, -4(%rbp)
.LBB90_148:                             # %for.cond562
                                        #   Parent Loop BB90_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB90_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB90_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB90_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB90_152
.LBB90_151:                             # %if.else580
                                        #   in Loop: Header=BB90_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB90_152:                             # %if.end594
                                        #   in Loop: Header=BB90_148 Depth=2
	jmp	.LBB90_153
.LBB90_153:                             # %for.inc595
                                        #   in Loop: Header=BB90_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_148
.LBB90_154:                             # %for.end597
                                        #   in Loop: Header=BB90_146 Depth=1
	jmp	.LBB90_155
.LBB90_155:                             # %for.inc598
                                        #   in Loop: Header=BB90_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_146
.LBB90_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB90_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB90_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB90_157 Depth=1
	movl	$0, -4(%rbp)
.LBB90_159:                             # %for.cond604
                                        #   Parent Loop BB90_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB90_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB90_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB90_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB90_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB90_163
.LBB90_162:                             # %if.else622
                                        #   in Loop: Header=BB90_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB90_163:                             # %if.end636
                                        #   in Loop: Header=BB90_159 Depth=2
	jmp	.LBB90_164
.LBB90_164:                             # %for.inc637
                                        #   in Loop: Header=BB90_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_159
.LBB90_165:                             # %for.end639
                                        #   in Loop: Header=BB90_157 Depth=1
	jmp	.LBB90_166
.LBB90_166:                             # %for.inc640
                                        #   in Loop: Header=BB90_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_157
.LBB90_167:                             # %for.end642
	cmpl	$1528083272, -28(%rbp)  # imm = 0x5B14B348
	jne	.LBB90_169
.LBB90_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_168
.Lfunc_end90:
	.size	init_contexts.83, .Lfunc_end90-init_contexts.83
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.84        # -- Begin function init_contexts.84
	.p2align	4, 0x90
	.type	init_contexts.84,@function
init_contexts.84:                       # @init_contexts.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$215148900, -28(%rbp)   # imm = 0xCD2E964
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB91_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB91_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB91_1 Depth=1
	movl	$0, -4(%rbp)
.LBB91_3:                               # %for.cond2
                                        #   Parent Loop BB91_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB91_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB91_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB91_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB91_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB91_7
.LBB91_6:                               # %if.else
                                        #   in Loop: Header=BB91_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB91_7:                               # %if.end
                                        #   in Loop: Header=BB91_3 Depth=2
	jmp	.LBB91_8
.LBB91_8:                               # %for.inc
                                        #   in Loop: Header=BB91_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_3
.LBB91_9:                               # %for.end
                                        #   in Loop: Header=BB91_1 Depth=1
	jmp	.LBB91_10
.LBB91_10:                              # %for.inc28
                                        #   in Loop: Header=BB91_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_1
.LBB91_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB91_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB91_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB91_12 Depth=1
	movl	$0, -4(%rbp)
.LBB91_14:                              # %for.cond34
                                        #   Parent Loop BB91_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB91_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB91_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB91_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB91_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB91_18
.LBB91_17:                              # %if.else52
                                        #   in Loop: Header=BB91_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB91_18:                              # %if.end66
                                        #   in Loop: Header=BB91_14 Depth=2
	jmp	.LBB91_19
.LBB91_19:                              # %for.inc67
                                        #   in Loop: Header=BB91_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_14
.LBB91_20:                              # %for.end69
                                        #   in Loop: Header=BB91_12 Depth=1
	jmp	.LBB91_21
.LBB91_21:                              # %for.inc70
                                        #   in Loop: Header=BB91_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_12
.LBB91_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB91_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB91_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB91_23 Depth=1
	movl	$0, -4(%rbp)
.LBB91_25:                              # %for.cond76
                                        #   Parent Loop BB91_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB91_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB91_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB91_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB91_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB91_29
.LBB91_28:                              # %if.else94
                                        #   in Loop: Header=BB91_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB91_29:                              # %if.end108
                                        #   in Loop: Header=BB91_25 Depth=2
	jmp	.LBB91_30
.LBB91_30:                              # %for.inc109
                                        #   in Loop: Header=BB91_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_25
.LBB91_31:                              # %for.end111
                                        #   in Loop: Header=BB91_23 Depth=1
	jmp	.LBB91_32
.LBB91_32:                              # %for.inc112
                                        #   in Loop: Header=BB91_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_23
.LBB91_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB91_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB91_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB91_34 Depth=1
	movl	$0, -4(%rbp)
.LBB91_36:                              # %for.cond118
                                        #   Parent Loop BB91_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB91_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB91_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB91_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB91_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB91_40
.LBB91_39:                              # %if.else136
                                        #   in Loop: Header=BB91_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB91_40:                              # %if.end150
                                        #   in Loop: Header=BB91_36 Depth=2
	jmp	.LBB91_41
.LBB91_41:                              # %for.inc151
                                        #   in Loop: Header=BB91_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_36
.LBB91_42:                              # %for.end153
                                        #   in Loop: Header=BB91_34 Depth=1
	jmp	.LBB91_43
.LBB91_43:                              # %for.inc154
                                        #   in Loop: Header=BB91_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_34
.LBB91_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB91_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB91_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB91_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB91_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB91_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB91_49
.LBB91_48:                              # %if.else172
                                        #   in Loop: Header=BB91_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB91_49:                              # %if.end183
                                        #   in Loop: Header=BB91_45 Depth=1
	jmp	.LBB91_50
.LBB91_50:                              # %for.inc184
                                        #   in Loop: Header=BB91_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_45
.LBB91_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB91_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB91_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB91_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB91_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB91_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB91_56
.LBB91_55:                              # %if.else202
                                        #   in Loop: Header=BB91_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB91_56:                              # %if.end213
                                        #   in Loop: Header=BB91_52 Depth=1
	jmp	.LBB91_57
.LBB91_57:                              # %for.inc214
                                        #   in Loop: Header=BB91_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_52
.LBB91_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB91_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB91_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB91_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB91_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB91_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB91_63
.LBB91_62:                              # %if.else232
                                        #   in Loop: Header=BB91_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB91_63:                              # %if.end243
                                        #   in Loop: Header=BB91_59 Depth=1
	jmp	.LBB91_64
.LBB91_64:                              # %for.inc244
                                        #   in Loop: Header=BB91_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_59
.LBB91_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB91_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB91_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB91_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB91_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB91_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB91_70
.LBB91_69:                              # %if.else262
                                        #   in Loop: Header=BB91_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB91_70:                              # %if.end273
                                        #   in Loop: Header=BB91_66 Depth=1
	jmp	.LBB91_71
.LBB91_71:                              # %for.inc274
                                        #   in Loop: Header=BB91_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_66
.LBB91_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB91_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB91_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB91_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB91_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB91_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB91_77
.LBB91_76:                              # %if.else292
                                        #   in Loop: Header=BB91_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB91_77:                              # %if.end303
                                        #   in Loop: Header=BB91_73 Depth=1
	jmp	.LBB91_78
.LBB91_78:                              # %for.inc304
                                        #   in Loop: Header=BB91_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_73
.LBB91_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB91_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB91_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB91_80 Depth=1
	movl	$0, -4(%rbp)
.LBB91_82:                              # %for.cond310
                                        #   Parent Loop BB91_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB91_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB91_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB91_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB91_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB91_86
.LBB91_85:                              # %if.else328
                                        #   in Loop: Header=BB91_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB91_86:                              # %if.end342
                                        #   in Loop: Header=BB91_82 Depth=2
	jmp	.LBB91_87
.LBB91_87:                              # %for.inc343
                                        #   in Loop: Header=BB91_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_82
.LBB91_88:                              # %for.end345
                                        #   in Loop: Header=BB91_80 Depth=1
	jmp	.LBB91_89
.LBB91_89:                              # %for.inc346
                                        #   in Loop: Header=BB91_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_80
.LBB91_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB91_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB91_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB91_91 Depth=1
	movl	$0, -4(%rbp)
.LBB91_93:                              # %for.cond352
                                        #   Parent Loop BB91_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB91_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB91_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB91_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB91_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB91_97
.LBB91_96:                              # %if.else370
                                        #   in Loop: Header=BB91_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB91_97:                              # %if.end384
                                        #   in Loop: Header=BB91_93 Depth=2
	jmp	.LBB91_98
.LBB91_98:                              # %for.inc385
                                        #   in Loop: Header=BB91_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_93
.LBB91_99:                              # %for.end387
                                        #   in Loop: Header=BB91_91 Depth=1
	jmp	.LBB91_100
.LBB91_100:                             # %for.inc388
                                        #   in Loop: Header=BB91_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_91
.LBB91_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB91_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB91_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB91_102 Depth=1
	movl	$0, -4(%rbp)
.LBB91_104:                             # %for.cond394
                                        #   Parent Loop BB91_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB91_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB91_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB91_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB91_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB91_108
.LBB91_107:                             # %if.else412
                                        #   in Loop: Header=BB91_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB91_108:                             # %if.end426
                                        #   in Loop: Header=BB91_104 Depth=2
	jmp	.LBB91_109
.LBB91_109:                             # %for.inc427
                                        #   in Loop: Header=BB91_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_104
.LBB91_110:                             # %for.end429
                                        #   in Loop: Header=BB91_102 Depth=1
	jmp	.LBB91_111
.LBB91_111:                             # %for.inc430
                                        #   in Loop: Header=BB91_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_102
.LBB91_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB91_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB91_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB91_113 Depth=1
	movl	$0, -4(%rbp)
.LBB91_115:                             # %for.cond436
                                        #   Parent Loop BB91_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB91_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB91_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB91_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB91_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB91_119
.LBB91_118:                             # %if.else454
                                        #   in Loop: Header=BB91_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB91_119:                             # %if.end468
                                        #   in Loop: Header=BB91_115 Depth=2
	jmp	.LBB91_120
.LBB91_120:                             # %for.inc469
                                        #   in Loop: Header=BB91_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_115
.LBB91_121:                             # %for.end471
                                        #   in Loop: Header=BB91_113 Depth=1
	jmp	.LBB91_122
.LBB91_122:                             # %for.inc472
                                        #   in Loop: Header=BB91_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_113
.LBB91_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB91_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB91_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB91_124 Depth=1
	movl	$0, -4(%rbp)
.LBB91_126:                             # %for.cond478
                                        #   Parent Loop BB91_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB91_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB91_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB91_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB91_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB91_130
.LBB91_129:                             # %if.else496
                                        #   in Loop: Header=BB91_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB91_130:                             # %if.end510
                                        #   in Loop: Header=BB91_126 Depth=2
	jmp	.LBB91_131
.LBB91_131:                             # %for.inc511
                                        #   in Loop: Header=BB91_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_126
.LBB91_132:                             # %for.end513
                                        #   in Loop: Header=BB91_124 Depth=1
	jmp	.LBB91_133
.LBB91_133:                             # %for.inc514
                                        #   in Loop: Header=BB91_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_124
.LBB91_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB91_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB91_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB91_135 Depth=1
	movl	$0, -4(%rbp)
.LBB91_137:                             # %for.cond520
                                        #   Parent Loop BB91_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB91_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB91_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB91_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB91_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB91_141
.LBB91_140:                             # %if.else538
                                        #   in Loop: Header=BB91_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB91_141:                             # %if.end552
                                        #   in Loop: Header=BB91_137 Depth=2
	jmp	.LBB91_142
.LBB91_142:                             # %for.inc553
                                        #   in Loop: Header=BB91_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_137
.LBB91_143:                             # %for.end555
                                        #   in Loop: Header=BB91_135 Depth=1
	jmp	.LBB91_144
.LBB91_144:                             # %for.inc556
                                        #   in Loop: Header=BB91_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_135
.LBB91_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB91_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB91_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB91_146 Depth=1
	movl	$0, -4(%rbp)
.LBB91_148:                             # %for.cond562
                                        #   Parent Loop BB91_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB91_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB91_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB91_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB91_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB91_152
.LBB91_151:                             # %if.else580
                                        #   in Loop: Header=BB91_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB91_152:                             # %if.end594
                                        #   in Loop: Header=BB91_148 Depth=2
	jmp	.LBB91_153
.LBB91_153:                             # %for.inc595
                                        #   in Loop: Header=BB91_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_148
.LBB91_154:                             # %for.end597
                                        #   in Loop: Header=BB91_146 Depth=1
	jmp	.LBB91_155
.LBB91_155:                             # %for.inc598
                                        #   in Loop: Header=BB91_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_146
.LBB91_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB91_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB91_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB91_157 Depth=1
	movl	$0, -4(%rbp)
.LBB91_159:                             # %for.cond604
                                        #   Parent Loop BB91_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB91_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB91_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB91_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB91_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB91_163
.LBB91_162:                             # %if.else622
                                        #   in Loop: Header=BB91_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB91_163:                             # %if.end636
                                        #   in Loop: Header=BB91_159 Depth=2
	jmp	.LBB91_164
.LBB91_164:                             # %for.inc637
                                        #   in Loop: Header=BB91_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_159
.LBB91_165:                             # %for.end639
                                        #   in Loop: Header=BB91_157 Depth=1
	jmp	.LBB91_166
.LBB91_166:                             # %for.inc640
                                        #   in Loop: Header=BB91_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_157
.LBB91_167:                             # %for.end642
	cmpl	$215148900, -28(%rbp)   # imm = 0xCD2E964
	jne	.LBB91_169
.LBB91_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_168
.Lfunc_end91:
	.size	init_contexts.84, .Lfunc_end91-init_contexts.84
	.cfi_endproc
                                        # -- End function
	.type	num_mb_per_slice,@object # @num_mb_per_slice
	.comm	num_mb_per_slice,4,4
	.type	number_of_slices,@object # @number_of_slices
	.comm	number_of_slices,4,4
	.type	initialized,@object     # @initialized
	.comm	initialized,8,8
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"create_context_memory: initialized"
	.size	.L.str, 35

	.type	model_number,@object    # @model_number
	.comm	model_number,8,8
	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"create_context_memory: model_number"
	.size	.L.str.1, 36

	.type	probability,@object     # @probability
	.data
	.globl	probability
	.p2align	4
probability:
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	4602678819172646912     # double 0.5
	.quad	4602221415580092655     # double 0.474609
	.quad	4601787232547217120     # double 0.45050699999999999
	.quad	4601375099138117191     # double 0.42762899999999998
	.quad	4600983880445686771     # double 0.405912
	.quad	4600612549649210819     # double 0.385299
	.quad	4600260061913575785     # double 0.365732
	.quad	4599925480490059176     # double 0.347159
	.quad	4599607904658735518     # double 0.32952999999999999
	.quad	4599306433699679337     # double 0.31279499999999999
	.quad	4599020292993754725     # double 0.29691099999999998
	.quad	4598748671893028756     # double 0.281833
	.quad	4598490831807162540     # double 0.26751999999999998
	.quad	4598246106203411228     # double 0.25393500000000002
	.quad	4597852365495189480     # double 0.241039
	.quad	4597411373019677361     # double 0.228799
	.quad	4596992754427114019     # double 0.21718000000000001
	.quad	4596595392824791865     # double 0.206151
	.quad	4596218207348800331     # double 0.19568199999999999
	.quad	4595860153164025867     # double 0.18574399999999999
	.quad	4595520329550542999     # double 0.176312
	.quad	4595197727702035196     # double 0.16735800000000001
	.quad	4594891518956171021     # double 0.158859
	.quad	4594600874650619039     # double 0.15079200000000001
	.quad	4594324966123047813     # double 0.14313400000000001
	.quad	4594063108826313982     # double 0.13586599999999999
	.quad	4593814510126883131     # double 0.128966
	.quad	4593485495152505952     # double 0.122417
	.quad	4593037513090372154     # double 0.1162
	.quad	4592612301227954341     # double 0.11029899999999999
	.quad	4592208706643747907     # double 0.104698
	.quad	4591825576416248244     # double 0.099380999999999997
	.quad	4591461901739138822     # double 0.094334000000000001
	.quad	4591116673806103109     # double 0.089542999999999998
	.quad	4590789027926012651     # double 0.084996000000000002
	.quad	4590478027350144954     # double 0.080680000000000001
	.quad	4590182807387371563     # double 0.076582999999999998
	.quad	4589902575404158061     # double 0.072693999999999995
	.quad	4589636538766970031     # double 0.069001999999999994
	.quad	4589384048957461132     # double 0.065498000000000001
	.quad	4589120750508846543     # double 0.062171999999999998
	.quad	4588665634744902990     # double 0.059013999999999997
	.quad	4588233865641427726     # double 0.056017999999999998
	.quad	4587823857931351916     # double 0.053172999999999998
	.quad	4587434746923547105     # double 0.050472999999999997
	.quad	4587065235581320611     # double 0.047909
	.quad	4586714603328732054     # double 0.045476000000000003
	.quad	4586381841359464902     # double 0.043166999999999997
	.quad	4586065940867202626     # double 0.040974999999999998
	.quad	4585766037160816770     # double 0.038893999999999998
	.quad	4585481409664366955     # double 0.036919
	.quad	4585211193686724725     # double 0.035043999999999999
	.quad	4584954668651949702     # double 0.033264000000000002
	.quad	4584711258099289581     # double 0.031574999999999999
	.quad	4584296062242443040     # double 0.029971999999999999
	.quad	4583857375609940135     # double 0.02845
	.quad	4583440882716400912     # double 0.027005000000000001
	.quad	4583045430640320763     # double 0.025633
	.quad	4582670442920947386     # double 0.024331999999999999
	.quad	4582314190176023870     # double 0.023095999999999998
	.quad	4581976095944797913     # double 0.021923000000000002
	.quad	4581655295536141057     # double 0.020809999999999999
	.quad	4581350636028548698     # double 0.019753
	.quad	4581061540961268531     # double 0.018749999999999999
	.size	probability, 1024

	.type	entropy,@object         # @entropy
	.comm	entropy,1024,16
	.type	INIT_MB_TYPE_I,@object  # @INIT_MB_TYPE_I
	.section	.rodata,"a",@progbits
	.p2align	4
INIT_MB_TYPE_I:
	.long	20                      # 0x14
	.long	4294967281              # 0xfffffff1
	.long	2                       # 0x2
	.long	54                      # 0x36
	.long	3                       # 0x3
	.long	74                      # 0x4a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967268              # 0xffffffe4
	.long	127                     # 0x7f
	.long	4294967273              # 0xffffffe9
	.long	104                     # 0x68
	.long	4294967290              # 0xfffffffa
	.long	53                      # 0x35
	.long	4294967295              # 0xffffffff
	.long	54                      # 0x36
	.long	7                       # 0x7
	.long	51                      # 0x33
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	20                      # 0x14
	.long	4294967281              # 0xfffffff1
	.long	2                       # 0x2
	.long	54                      # 0x36
	.long	3                       # 0x3
	.long	74                      # 0x4a
	.long	20                      # 0x14
	.long	4294967281              # 0xfffffff1
	.long	2                       # 0x2
	.long	54                      # 0x36
	.long	3                       # 0x3
	.long	74                      # 0x4a
	.long	4294967268              # 0xffffffe4
	.long	127                     # 0x7f
	.long	4294967273              # 0xffffffe9
	.long	104                     # 0x68
	.long	4294967290              # 0xfffffffa
	.long	53                      # 0x35
	.long	4294967295              # 0xffffffff
	.long	54                      # 0x36
	.long	7                       # 0x7
	.long	51                      # 0x33
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MB_TYPE_I, 264

	.type	INIT_MB_TYPE_P,@object  # @INIT_MB_TYPE_P
	.p2align	4
INIT_MB_TYPE_P:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	23                      # 0x17
	.long	33                      # 0x21
	.long	23                      # 0x17
	.long	2                       # 0x2
	.long	21                      # 0x15
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	9                       # 0x9
	.long	0                       # 0x0
	.long	49                      # 0x31
	.long	4294967259              # 0xffffffdb
	.long	118                     # 0x76
	.long	5                       # 0x5
	.long	57                      # 0x39
	.long	4294967283              # 0xfffffff3
	.long	78                      # 0x4e
	.long	4294967285              # 0xfffffff5
	.long	65                      # 0x41
	.long	1                       # 0x1
	.long	62                      # 0x3e
	.long	26                      # 0x1a
	.long	67                      # 0x43
	.long	16                      # 0x10
	.long	90                      # 0x5a
	.long	9                       # 0x9
	.long	104                     # 0x68
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967250              # 0xffffffd2
	.long	127                     # 0x7f
	.long	4294967276              # 0xffffffec
	.long	104                     # 0x68
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	18                      # 0x12
	.long	64                      # 0x40
	.long	9                       # 0x9
	.long	43                      # 0x2b
	.long	29                      # 0x1d
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	22                      # 0x16
	.long	25                      # 0x19
	.long	34                      # 0x22
	.long	0                       # 0x0
	.long	16                      # 0x10
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967294              # 0xfffffffe
	.long	9                       # 0x9
	.long	4                       # 0x4
	.long	41                      # 0x29
	.long	4294967267              # 0xffffffe3
	.long	118                     # 0x76
	.long	2                       # 0x2
	.long	65                      # 0x41
	.long	4294967290              # 0xfffffffa
	.long	71                      # 0x47
	.long	4294967283              # 0xfffffff3
	.long	79                      # 0x4f
	.long	5                       # 0x5
	.long	52                      # 0x34
	.long	57                      # 0x39
	.long	2                       # 0x2
	.long	41                      # 0x29
	.long	36                      # 0x24
	.long	26                      # 0x1a
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967251              # 0xffffffd3
	.long	127                     # 0x7f
	.long	4294967281              # 0xfffffff1
	.long	101                     # 0x65
	.long	4294967292              # 0xfffffffc
	.long	76                      # 0x4c
	.long	26                      # 0x1a
	.long	34                      # 0x22
	.long	19                      # 0x13
	.long	22                      # 0x16
	.long	40                      # 0x28
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	29                      # 0x1d
	.long	16                      # 0x10
	.long	25                      # 0x19
	.long	0                       # 0x0
	.long	14                      # 0xe
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967286              # 0xfffffff6
	.long	51                      # 0x33
	.long	4294967293              # 0xfffffffd
	.long	62                      # 0x3e
	.long	4294967269              # 0xffffffe5
	.long	99                      # 0x63
	.long	26                      # 0x1a
	.long	16                      # 0x10
	.long	4294967292              # 0xfffffffc
	.long	85                      # 0x55
	.long	4294967272              # 0xffffffe8
	.long	102                     # 0x66
	.long	5                       # 0x5
	.long	57                      # 0x39
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	37                      # 0x25
	.long	42                      # 0x2a
	.long	12                      # 0xc
	.long	97                      # 0x61
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967264              # 0xffffffe0
	.long	127                     # 0x7f
	.long	4294967274              # 0xffffffea
	.long	117                     # 0x75
	.long	4294967294              # 0xfffffffe
	.long	74                      # 0x4a
	.long	20                      # 0x14
	.long	40                      # 0x28
	.long	20                      # 0x14
	.long	10                      # 0xa
	.long	29                      # 0x1d
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MB_TYPE_P, 792

	.type	INIT_B8_TYPE_I,@object  # @INIT_B8_TYPE_I
	.p2align	4
INIT_B8_TYPE_I:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_B8_TYPE_I, 144

	.type	INIT_B8_TYPE_P,@object  # @INIT_B8_TYPE_P
	.p2align	4
INIT_B8_TYPE_P:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	12                      # 0xc
	.long	49                      # 0x31
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967292              # 0xfffffffc
	.long	73                      # 0x49
	.long	17                      # 0x11
	.long	50                      # 0x32
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967290              # 0xfffffffa
	.long	86                      # 0x56
	.long	4294967279              # 0xffffffef
	.long	95                      # 0x5f
	.long	4294967290              # 0xfffffffa
	.long	61                      # 0x3d
	.long	9                       # 0x9
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	9                       # 0x9
	.long	50                      # 0x32
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	70                      # 0x46
	.long	10                      # 0xa
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	6                       # 0x6
	.long	69                      # 0x45
	.long	4294967283              # 0xfffffff3
	.long	90                      # 0x5a
	.long	0                       # 0x0
	.long	52                      # 0x34
	.long	8                       # 0x8
	.long	43                      # 0x2b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	6                       # 0x6
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967279              # 0xffffffef
	.long	73                      # 0x49
	.long	14                      # 0xe
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967290              # 0xfffffffa
	.long	93                      # 0x5d
	.long	4294967282              # 0xfffffff2
	.long	88                      # 0x58
	.long	4294967290              # 0xfffffffa
	.long	44                      # 0x2c
	.long	4                       # 0x4
	.long	55                      # 0x37
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_B8_TYPE_P, 432

	.type	INIT_MV_RES_I,@object   # @INIT_MV_RES_I
	.p2align	4
INIT_MV_RES_I:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MV_RES_I, 160

	.type	INIT_MV_RES_P,@object   # @INIT_MV_RES_P
	.p2align	4
INIT_MV_RES_P:
	.long	4294967293              # 0xfffffffd
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967290              # 0xfffffffa
	.long	81                      # 0x51
	.long	4294967285              # 0xfffffff5
	.long	96                      # 0x60
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	76                      # 0x4c
	.long	4294967286              # 0xfffffff6
	.long	94                      # 0x5e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	6                       # 0x6
	.long	55                      # 0x37
	.long	7                       # 0x7
	.long	67                      # 0x43
	.long	4294967291              # 0xfffffffb
	.long	86                      # 0x56
	.long	2                       # 0x2
	.long	88                      # 0x58
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	5                       # 0x5
	.long	54                      # 0x36
	.long	4                       # 0x4
	.long	69                      # 0x45
	.long	4294967293              # 0xfffffffd
	.long	81                      # 0x51
	.long	0                       # 0x0
	.long	88                      # 0x58
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967294              # 0xfffffffe
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967291              # 0xfffffffb
	.long	82                      # 0x52
	.long	4294967286              # 0xfffffff6
	.long	96                      # 0x60
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	74                      # 0x4a
	.long	4294967290              # 0xfffffffa
	.long	85                      # 0x55
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	2                       # 0x2
	.long	75                      # 0x4b
	.long	4294967293              # 0xfffffffd
	.long	87                      # 0x57
	.long	4294967293              # 0xfffffffd
	.long	100                     # 0x64
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	4294967293              # 0xfffffffd
	.long	81                      # 0x51
	.long	4294967289              # 0xfffffff9
	.long	86                      # 0x56
	.long	4294967291              # 0xfffffffb
	.long	95                      # 0x5f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967285              # 0xfffffff5
	.long	89                      # 0x59
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967281              # 0xfffffff1
	.long	103                     # 0x67
	.long	4294967275              # 0xffffffeb
	.long	116                     # 0x74
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967291              # 0xfffffffb
	.long	85                      # 0x55
	.long	4294967283              # 0xfffffff3
	.long	106                     # 0x6a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	19                      # 0x13
	.long	57                      # 0x39
	.long	20                      # 0x14
	.long	58                      # 0x3a
	.long	4                       # 0x4
	.long	84                      # 0x54
	.long	6                       # 0x6
	.long	96                      # 0x60
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	5                       # 0x5
	.long	63                      # 0x3f
	.long	6                       # 0x6
	.long	75                      # 0x4b
	.long	4294967293              # 0xfffffffd
	.long	90                      # 0x5a
	.long	4294967295              # 0xffffffff
	.long	101                     # 0x65
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MV_RES_P, 480

	.type	INIT_REF_NO_I,@object   # @INIT_REF_NO_I
	.p2align	4
INIT_REF_NO_I:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_REF_NO_I, 96

	.type	INIT_REF_NO_P,@object   # @INIT_REF_NO_P
	.p2align	4
INIT_REF_NO_P:
	.long	4294967289              # 0xfffffff9
	.long	67                      # 0x43
	.long	4294967291              # 0xfffffffb
	.long	74                      # 0x4a
	.long	4294967292              # 0xfffffffc
	.long	74                      # 0x4a
	.long	4294967291              # 0xfffffffb
	.long	80                      # 0x50
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.long	1                       # 0x1
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967295              # 0xffffffff
	.long	66                      # 0x42
	.long	4294967295              # 0xffffffff
	.long	77                      # 0x4d
	.long	1                       # 0x1
	.long	70                      # 0x46
	.long	4294967294              # 0xfffffffe
	.long	86                      # 0x56
	.long	4294967291              # 0xfffffffb
	.long	72                      # 0x48
	.long	0                       # 0x0
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	3                       # 0x3
	.long	55                      # 0x37
	.long	4294967292              # 0xfffffffc
	.long	79                      # 0x4f
	.long	4294967294              # 0xfffffffe
	.long	75                      # 0x4b
	.long	4294967284              # 0xfffffff4
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	50                      # 0x32
	.long	1                       # 0x1
	.long	60                      # 0x3c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_REF_NO_P, 288

	.type	INIT_DELTA_QP_I,@object # @INIT_DELTA_QP_I
	.p2align	4
INIT_DELTA_QP_I:
	.long	0                       # 0x0
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.size	INIT_DELTA_QP_I, 32

	.type	INIT_DELTA_QP_P,@object # @INIT_DELTA_QP_P
	.p2align	4
INIT_DELTA_QP_P:
	.long	0                       # 0x0
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.size	INIT_DELTA_QP_P, 96

	.type	INIT_MB_AFF_I,@object   # @INIT_MB_AFF_I
	.p2align	4
INIT_MB_AFF_I:
	.long	0                       # 0x0
	.long	11                      # 0xb
	.long	1                       # 0x1
	.long	55                      # 0x37
	.long	0                       # 0x0
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MB_AFF_I, 32

	.type	INIT_MB_AFF_P,@object   # @INIT_MB_AFF_P
	.p2align	4
INIT_MB_AFF_P:
	.long	0                       # 0x0
	.long	45                      # 0x2d
	.long	4294967292              # 0xfffffffc
	.long	78                      # 0x4e
	.long	4294967293              # 0xfffffffd
	.long	96                      # 0x60
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	13                      # 0xd
	.long	15                      # 0xf
	.long	7                       # 0x7
	.long	51                      # 0x33
	.long	2                       # 0x2
	.long	80                      # 0x50
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	7                       # 0x7
	.long	34                      # 0x22
	.long	4294967287              # 0xfffffff7
	.long	88                      # 0x58
	.long	4294967276              # 0xffffffec
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MB_AFF_P, 96

	.type	INIT_TRANSFORM_SIZE_I,@object # @INIT_TRANSFORM_SIZE_I
	.p2align	4
INIT_TRANSFORM_SIZE_I:
	.long	31                      # 0x1f
	.long	21                      # 0x15
	.long	31                      # 0x1f
	.long	31                      # 0x1f
	.long	25                      # 0x19
	.long	50                      # 0x32
	.size	INIT_TRANSFORM_SIZE_I, 24

	.type	INIT_TRANSFORM_SIZE_P,@object # @INIT_TRANSFORM_SIZE_P
	.p2align	4
INIT_TRANSFORM_SIZE_P:
	.long	12                      # 0xc
	.long	40                      # 0x28
	.long	11                      # 0xb
	.long	51                      # 0x33
	.long	14                      # 0xe
	.long	59                      # 0x3b
	.long	25                      # 0x19
	.long	32                      # 0x20
	.long	21                      # 0x15
	.long	49                      # 0x31
	.long	21                      # 0x15
	.long	54                      # 0x36
	.long	21                      # 0x15
	.long	33                      # 0x21
	.long	19                      # 0x13
	.long	50                      # 0x32
	.long	17                      # 0x11
	.long	61                      # 0x3d
	.size	INIT_TRANSFORM_SIZE_P, 72

	.type	INIT_IPR_I,@object      # @INIT_IPR_I
	.p2align	4
INIT_IPR_I:
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.size	INIT_IPR_I, 16

	.type	INIT_IPR_P,@object      # @INIT_IPR_P
	.p2align	4
INIT_IPR_P:
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.size	INIT_IPR_P, 48

	.type	INIT_CIPR_I,@object     # @INIT_CIPR_I
	.p2align	4
INIT_CIPR_I:
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4                       # 0x4
	.long	86                      # 0x56
	.long	0                       # 0x0
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.size	INIT_CIPR_I, 32

	.type	INIT_CIPR_P,@object     # @INIT_CIPR_P
	.p2align	4
INIT_CIPR_P:
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4                       # 0x4
	.long	86                      # 0x56
	.long	0                       # 0x0
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4                       # 0x4
	.long	86                      # 0x56
	.long	0                       # 0x0
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4                       # 0x4
	.long	86                      # 0x56
	.long	0                       # 0x0
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.size	INIT_CIPR_P, 96

	.type	INIT_CBP_I,@object      # @INIT_CBP_I
	.p2align	4
INIT_CBP_I:
	.long	4294967279              # 0xffffffef
	.long	127                     # 0x7f
	.long	4294967283              # 0xfffffff3
	.long	102                     # 0x66
	.long	0                       # 0x0
	.long	82                      # 0x52
	.long	4294967289              # 0xfffffff9
	.long	74                      # 0x4a
	.long	4294967275              # 0xffffffeb
	.long	107                     # 0x6b
	.long	4294967269              # 0xffffffe5
	.long	127                     # 0x7f
	.long	4294967265              # 0xffffffe1
	.long	127                     # 0x7f
	.long	4294967272              # 0xffffffe8
	.long	127                     # 0x7f
	.long	4294967278              # 0xffffffee
	.long	95                      # 0x5f
	.long	4294967269              # 0xffffffe5
	.long	127                     # 0x7f
	.long	4294967275              # 0xffffffeb
	.long	114                     # 0x72
	.long	4294967266              # 0xffffffe2
	.long	127                     # 0x7f
	.size	INIT_CBP_I, 96

	.type	INIT_CBP_P,@object      # @INIT_CBP_P
	.p2align	4
INIT_CBP_P:
	.long	4294967269              # 0xffffffe5
	.long	126                     # 0x7e
	.long	4294967268              # 0xffffffe4
	.long	98                      # 0x62
	.long	4294967271              # 0xffffffe7
	.long	101                     # 0x65
	.long	4294967273              # 0xffffffe9
	.long	67                      # 0x43
	.long	4294967268              # 0xffffffe4
	.long	82                      # 0x52
	.long	4294967276              # 0xffffffec
	.long	94                      # 0x5e
	.long	4294967280              # 0xfffffff0
	.long	83                      # 0x53
	.long	4294967274              # 0xffffffea
	.long	110                     # 0x6e
	.long	4294967275              # 0xffffffeb
	.long	91                      # 0x5b
	.long	4294967278              # 0xffffffee
	.long	102                     # 0x66
	.long	4294967283              # 0xfffffff3
	.long	93                      # 0x5d
	.long	4294967267              # 0xffffffe3
	.long	127                     # 0x7f
	.long	4294967257              # 0xffffffd9
	.long	127                     # 0x7f
	.long	4294967278              # 0xffffffee
	.long	91                      # 0x5b
	.long	4294967279              # 0xffffffef
	.long	96                      # 0x60
	.long	4294967270              # 0xffffffe6
	.long	81                      # 0x51
	.long	4294967261              # 0xffffffdd
	.long	98                      # 0x62
	.long	4294967272              # 0xffffffe8
	.long	102                     # 0x66
	.long	4294967273              # 0xffffffe9
	.long	97                      # 0x61
	.long	4294967269              # 0xffffffe5
	.long	119                     # 0x77
	.long	4294967272              # 0xffffffe8
	.long	99                      # 0x63
	.long	4294967275              # 0xffffffeb
	.long	110                     # 0x6e
	.long	4294967278              # 0xffffffee
	.long	102                     # 0x66
	.long	4294967260              # 0xffffffdc
	.long	127                     # 0x7f
	.long	4294967260              # 0xffffffdc
	.long	127                     # 0x7f
	.long	4294967279              # 0xffffffef
	.long	91                      # 0x5b
	.long	4294967282              # 0xfffffff2
	.long	95                      # 0x5f
	.long	4294967271              # 0xffffffe7
	.long	84                      # 0x54
	.long	4294967271              # 0xffffffe7
	.long	86                      # 0x56
	.long	4294967284              # 0xfffffff4
	.long	89                      # 0x59
	.long	4294967279              # 0xffffffef
	.long	91                      # 0x5b
	.long	4294967265              # 0xffffffe1
	.long	127                     # 0x7f
	.long	4294967282              # 0xfffffff2
	.long	76                      # 0x4c
	.long	4294967278              # 0xffffffee
	.long	103                     # 0x67
	.long	4294967283              # 0xfffffff3
	.long	90                      # 0x5a
	.long	4294967259              # 0xffffffdb
	.long	127                     # 0x7f
	.size	INIT_CBP_P, 288

	.type	INIT_BCBP_I,@object     # @INIT_BCBP_I
	.p2align	4
INIT_BCBP_I:
	.long	4294967279              # 0xffffffef
	.long	123                     # 0x7b
	.long	4294967284              # 0xfffffff4
	.long	115                     # 0x73
	.long	4294967280              # 0xfffffff0
	.long	122                     # 0x7a
	.long	4294967285              # 0xfffffff5
	.long	115                     # 0x73
	.long	4294967284              # 0xfffffff4
	.long	63                      # 0x3f
	.long	4294967294              # 0xfffffffe
	.long	68                      # 0x44
	.long	4294967281              # 0xfffffff1
	.long	84                      # 0x54
	.long	4294967283              # 0xfffffff3
	.long	104                     # 0x68
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	70                      # 0x46
	.long	4294967288              # 0xfffffff8
	.long	93                      # 0x5d
	.long	4294967286              # 0xfffffff6
	.long	90                      # 0x5a
	.long	4294967266              # 0xffffffe2
	.long	127                     # 0x7f
	.long	4294967295              # 0xffffffff
	.long	74                      # 0x4a
	.long	4294967290              # 0xfffffffa
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	91                      # 0x5b
	.long	4294967276              # 0xffffffec
	.long	127                     # 0x7f
	.long	4294967292              # 0xfffffffc
	.long	56                      # 0x38
	.long	4294967291              # 0xfffffffb
	.long	82                      # 0x52
	.long	4294967289              # 0xfffffff9
	.long	76                      # 0x4c
	.long	4294967274              # 0xffffffea
	.long	125                     # 0x7d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_BCBP_I, 256

	.type	INIT_BCBP_P,@object     # @INIT_BCBP_P
	.p2align	4
INIT_BCBP_P:
	.long	4294967289              # 0xfffffff9
	.long	92                      # 0x5c
	.long	4294967291              # 0xfffffffb
	.long	89                      # 0x59
	.long	4294967289              # 0xfffffff9
	.long	96                      # 0x60
	.long	4294967283              # 0xfffffff3
	.long	108                     # 0x6c
	.long	4294967293              # 0xfffffffd
	.long	46                      # 0x2e
	.long	4294967295              # 0xffffffff
	.long	65                      # 0x41
	.long	4294967295              # 0xffffffff
	.long	57                      # 0x39
	.long	4294967287              # 0xfffffff7
	.long	93                      # 0x5d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	92                      # 0x5c
	.long	4294967288              # 0xfffffff8
	.long	87                      # 0x57
	.long	4294967273              # 0xffffffe9
	.long	126                     # 0x7e
	.long	5                       # 0x5
	.long	54                      # 0x36
	.long	6                       # 0x6
	.long	60                      # 0x3c
	.long	6                       # 0x6
	.long	59                      # 0x3b
	.long	6                       # 0x6
	.long	69                      # 0x45
	.long	4294967295              # 0xffffffff
	.long	48                      # 0x30
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967292              # 0xfffffffc
	.long	69                      # 0x45
	.long	4294967288              # 0xfffffff8
	.long	88                      # 0x58
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	80                      # 0x50
	.long	4294967291              # 0xfffffffb
	.long	89                      # 0x59
	.long	4294967289              # 0xfffffff9
	.long	94                      # 0x5e
	.long	4294967292              # 0xfffffffc
	.long	92                      # 0x5c
	.long	0                       # 0x0
	.long	39                      # 0x27
	.long	0                       # 0x0
	.long	65                      # 0x41
	.long	4294967281              # 0xfffffff1
	.long	84                      # 0x54
	.long	4294967261              # 0xffffffdd
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967294              # 0xfffffffe
	.long	73                      # 0x49
	.long	4294967284              # 0xfffffff4
	.long	104                     # 0x68
	.long	4294967287              # 0xfffffff7
	.long	91                      # 0x5b
	.long	4294967265              # 0xffffffe1
	.long	127                     # 0x7f
	.long	3                       # 0x3
	.long	55                      # 0x37
	.long	7                       # 0x7
	.long	56                      # 0x38
	.long	7                       # 0x7
	.long	55                      # 0x37
	.long	8                       # 0x8
	.long	61                      # 0x3d
	.long	4294967293              # 0xfffffffd
	.long	53                      # 0x35
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967289              # 0xfffffff9
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	88                      # 0x58
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	11                      # 0xb
	.long	80                      # 0x50
	.long	5                       # 0x5
	.long	76                      # 0x4c
	.long	2                       # 0x2
	.long	84                      # 0x54
	.long	5                       # 0x5
	.long	78                      # 0x4e
	.long	4294967290              # 0xfffffffa
	.long	55                      # 0x37
	.long	4                       # 0x4
	.long	61                      # 0x3d
	.long	4294967282              # 0xfffffff2
	.long	83                      # 0x53
	.long	4294967259              # 0xffffffdb
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967291              # 0xfffffffb
	.long	79                      # 0x4f
	.long	4294967285              # 0xfffffff5
	.long	104                     # 0x68
	.long	4294967285              # 0xfffffff5
	.long	91                      # 0x5b
	.long	4294967266              # 0xffffffe2
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	65                      # 0x41
	.long	4294967294              # 0xfffffffe
	.long	79                      # 0x4f
	.long	0                       # 0x0
	.long	72                      # 0x48
	.long	4294967292              # 0xfffffffc
	.long	92                      # 0x5c
	.long	4294967290              # 0xfffffffa
	.long	56                      # 0x38
	.long	3                       # 0x3
	.long	68                      # 0x44
	.long	4294967288              # 0xfffffff8
	.long	71                      # 0x47
	.long	4294967283              # 0xfffffff3
	.long	98                      # 0x62
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_BCBP_P, 768

	.type	INIT_MAP_I,@object      # @INIT_MAP_I
	.p2align	4
INIT_MAP_I:
	.long	4294967289              # 0xfffffff9
	.long	93                      # 0x5d
	.long	4294967285              # 0xfffffff5
	.long	87                      # 0x57
	.long	4294967293              # 0xfffffffd
	.long	77                      # 0x4d
	.long	4294967291              # 0xfffffffb
	.long	71                      # 0x47
	.long	4294967292              # 0xfffffffc
	.long	63                      # 0x3f
	.long	4294967292              # 0xfffffffc
	.long	68                      # 0x44
	.long	4294967284              # 0xfffffff4
	.long	84                      # 0x54
	.long	4294967289              # 0xfffffff9
	.long	62                      # 0x3e
	.long	4294967289              # 0xfffffff9
	.long	65                      # 0x41
	.long	8                       # 0x8
	.long	61                      # 0x3d
	.long	5                       # 0x5
	.long	56                      # 0x38
	.long	4294967294              # 0xfffffffe
	.long	66                      # 0x42
	.long	1                       # 0x1
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	61                      # 0x3d
	.long	4294967294              # 0xfffffffe
	.long	78                      # 0x4e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	50                      # 0x32
	.long	7                       # 0x7
	.long	52                      # 0x34
	.long	10                      # 0xa
	.long	35                      # 0x23
	.long	0                       # 0x0
	.long	44                      # 0x2c
	.long	11                      # 0xb
	.long	38                      # 0x26
	.long	1                       # 0x1
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	46                      # 0x2e
	.long	5                       # 0x5
	.long	44                      # 0x2c
	.long	31                      # 0x1f
	.long	17                      # 0x11
	.long	1                       # 0x1
	.long	51                      # 0x33
	.long	7                       # 0x7
	.long	50                      # 0x32
	.long	28                      # 0x1c
	.long	19                      # 0x13
	.long	16                      # 0x10
	.long	33                      # 0x21
	.long	14                      # 0xe
	.long	62                      # 0x3e
	.long	4294967279              # 0xffffffef
	.long	120                     # 0x78
	.long	4294967276              # 0xffffffec
	.long	112                     # 0x70
	.long	4294967278              # 0xffffffee
	.long	114                     # 0x72
	.long	4294967285              # 0xfffffff5
	.long	85                      # 0x55
	.long	4294967281              # 0xfffffff1
	.long	92                      # 0x5c
	.long	4294967282              # 0xfffffff2
	.long	89                      # 0x59
	.long	4294967270              # 0xffffffe6
	.long	71                      # 0x47
	.long	4294967281              # 0xfffffff1
	.long	81                      # 0x51
	.long	4294967282              # 0xfffffff2
	.long	80                      # 0x50
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967282              # 0xfffffff2
	.long	70                      # 0x46
	.long	4294967272              # 0xffffffe8
	.long	56                      # 0x38
	.long	4294967273              # 0xffffffe9
	.long	68                      # 0x44
	.long	4294967272              # 0xffffffe8
	.long	50                      # 0x32
	.long	4294967285              # 0xfffffff5
	.long	74                      # 0x4a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967283              # 0xfffffff3
	.long	108                     # 0x6c
	.long	4294967281              # 0xfffffff1
	.long	100                     # 0x64
	.long	4294967283              # 0xfffffff3
	.long	101                     # 0x65
	.long	4294967283              # 0xfffffff3
	.long	91                      # 0x5b
	.long	4294967284              # 0xfffffff4
	.long	94                      # 0x5e
	.long	4294967286              # 0xfffffff6
	.long	88                      # 0x58
	.long	4294967280              # 0xfffffff0
	.long	84                      # 0x54
	.long	4294967286              # 0xfffffff6
	.long	86                      # 0x56
	.long	4294967289              # 0xfffffff9
	.long	83                      # 0x53
	.long	4294967283              # 0xfffffff3
	.long	87                      # 0x57
	.long	4294967277              # 0xffffffed
	.long	94                      # 0x5e
	.long	1                       # 0x1
	.long	70                      # 0x46
	.long	0                       # 0x0
	.long	72                      # 0x48
	.long	4294967291              # 0xfffffffb
	.long	74                      # 0x4a
	.long	18                      # 0x12
	.long	59                      # 0x3b
	.long	4294967288              # 0xfffffff8
	.long	102                     # 0x66
	.long	4294967281              # 0xfffffff1
	.long	100                     # 0x64
	.long	0                       # 0x0
	.long	95                      # 0x5f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967292              # 0xfffffffc
	.long	75                      # 0x4b
	.long	2                       # 0x2
	.long	72                      # 0x48
	.long	4294967285              # 0xfffffff5
	.long	75                      # 0x4b
	.long	4294967293              # 0xfffffffd
	.long	71                      # 0x47
	.long	15                      # 0xf
	.long	46                      # 0x2e
	.long	4294967283              # 0xfffffff3
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	65                      # 0x41
	.long	21                      # 0x15
	.long	37                      # 0x25
	.long	4294967281              # 0xfffffff1
	.long	72                      # 0x48
	.long	9                       # 0x9
	.long	57                      # 0x39
	.long	16                      # 0x10
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	12                      # 0xc
	.long	72                      # 0x48
	.size	INIT_MAP_I, 960

	.type	INIT_MAP_P,@object      # @INIT_MAP_P
	.p2align	4
INIT_MAP_P:
	.long	4294967294              # 0xfffffffe
	.long	85                      # 0x55
	.long	4294967290              # 0xfffffffa
	.long	78                      # 0x4e
	.long	4294967295              # 0xffffffff
	.long	75                      # 0x4b
	.long	4294967289              # 0xfffffff9
	.long	77                      # 0x4d
	.long	2                       # 0x2
	.long	54                      # 0x36
	.long	5                       # 0x5
	.long	50                      # 0x32
	.long	4294967293              # 0xfffffffd
	.long	68                      # 0x44
	.long	1                       # 0x1
	.long	50                      # 0x32
	.long	6                       # 0x6
	.long	42                      # 0x2a
	.long	4294967292              # 0xfffffffc
	.long	81                      # 0x51
	.long	1                       # 0x1
	.long	63                      # 0x3f
	.long	4294967292              # 0xfffffffc
	.long	70                      # 0x46
	.long	0                       # 0x0
	.long	67                      # 0x43
	.long	2                       # 0x2
	.long	57                      # 0x39
	.long	4294967294              # 0xfffffffe
	.long	76                      # 0x4c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	11                      # 0xb
	.long	35                      # 0x23
	.long	4                       # 0x4
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	61                      # 0x3d
	.long	11                      # 0xb
	.long	35                      # 0x23
	.long	18                      # 0x12
	.long	25                      # 0x19
	.long	12                      # 0xc
	.long	24                      # 0x18
	.long	13                      # 0xd
	.long	29                      # 0x1d
	.long	13                      # 0xd
	.long	36                      # 0x24
	.long	4294967286              # 0xfffffff6
	.long	93                      # 0x5d
	.long	4294967289              # 0xfffffff9
	.long	73                      # 0x49
	.long	4294967294              # 0xfffffffe
	.long	73                      # 0x49
	.long	13                      # 0xd
	.long	46                      # 0x2e
	.long	9                       # 0x9
	.long	49                      # 0x31
	.long	4294967289              # 0xfffffff9
	.long	100                     # 0x64
	.long	4294967292              # 0xfffffffc
	.long	79                      # 0x4f
	.long	4294967289              # 0xfffffff9
	.long	71                      # 0x47
	.long	4294967291              # 0xfffffffb
	.long	69                      # 0x45
	.long	4294967287              # 0xfffffff7
	.long	70                      # 0x46
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967286              # 0xfffffff6
	.long	68                      # 0x44
	.long	4294967277              # 0xffffffed
	.long	73                      # 0x49
	.long	4294967284              # 0xfffffff4
	.long	69                      # 0x45
	.long	4294967280              # 0xfffffff0
	.long	70                      # 0x46
	.long	4294967281              # 0xfffffff1
	.long	67                      # 0x43
	.long	4294967276              # 0xffffffec
	.long	62                      # 0x3e
	.long	4294967277              # 0xffffffed
	.long	70                      # 0x46
	.long	4294967280              # 0xfffffff0
	.long	66                      # 0x42
	.long	4294967274              # 0xffffffea
	.long	65                      # 0x41
	.long	4294967276              # 0xffffffec
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	9                       # 0x9
	.long	53                      # 0x35
	.long	2                       # 0x2
	.long	53                      # 0x35
	.long	5                       # 0x5
	.long	53                      # 0x35
	.long	4294967294              # 0xfffffffe
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	56                      # 0x38
	.long	4294967283              # 0xfffffff3
	.long	63                      # 0x3f
	.long	4294967291              # 0xfffffffb
	.long	60                      # 0x3c
	.long	4294967295              # 0xffffffff
	.long	62                      # 0x3e
	.long	4                       # 0x4
	.long	57                      # 0x39
	.long	4294967290              # 0xfffffffa
	.long	69                      # 0x45
	.long	4                       # 0x4
	.long	57                      # 0x39
	.long	14                      # 0xe
	.long	39                      # 0x27
	.long	4                       # 0x4
	.long	51                      # 0x33
	.long	13                      # 0xd
	.long	68                      # 0x44
	.long	3                       # 0x3
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	61                      # 0x3d
	.long	9                       # 0x9
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	7                       # 0x7
	.long	50                      # 0x32
	.long	16                      # 0x10
	.long	39                      # 0x27
	.long	5                       # 0x5
	.long	44                      # 0x2c
	.long	4                       # 0x4
	.long	52                      # 0x34
	.long	11                      # 0xb
	.long	48                      # 0x30
	.long	4294967291              # 0xfffffffb
	.long	60                      # 0x3c
	.long	4294967295              # 0xffffffff
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	22                      # 0x16
	.long	33                      # 0x21
	.long	5                       # 0x5
	.long	44                      # 0x2c
	.long	14                      # 0xe
	.long	43                      # 0x2b
	.long	4294967295              # 0xffffffff
	.long	78                      # 0x4e
	.long	0                       # 0x0
	.long	60                      # 0x3c
	.long	9                       # 0x9
	.long	69                      # 0x45
	.long	4294967283              # 0xfffffff3
	.long	103                     # 0x67
	.long	4294967283              # 0xfffffff3
	.long	91                      # 0x5b
	.long	4294967287              # 0xfffffff7
	.long	89                      # 0x59
	.long	4294967282              # 0xfffffff2
	.long	92                      # 0x5c
	.long	4294967288              # 0xfffffff8
	.long	76                      # 0x4c
	.long	4294967284              # 0xfffffff4
	.long	87                      # 0x57
	.long	4294967273              # 0xffffffe9
	.long	110                     # 0x6e
	.long	4294967272              # 0xffffffe8
	.long	105                     # 0x69
	.long	4294967286              # 0xfffffff6
	.long	78                      # 0x4e
	.long	4294967276              # 0xffffffec
	.long	112                     # 0x70
	.long	4294967279              # 0xffffffef
	.long	99                      # 0x63
	.long	4294967218              # 0xffffffb2
	.long	127                     # 0x7f
	.long	4294967226              # 0xffffffba
	.long	127                     # 0x7f
	.long	4294967246              # 0xffffffce
	.long	127                     # 0x7f
	.long	4294967250              # 0xffffffd2
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967292              # 0xfffffffc
	.long	66                      # 0x42
	.long	4294967291              # 0xfffffffb
	.long	78                      # 0x4e
	.long	4294967292              # 0xfffffffc
	.long	71                      # 0x47
	.long	4294967288              # 0xfffffff8
	.long	72                      # 0x48
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	4294967295              # 0xffffffff
	.long	55                      # 0x37
	.long	4294967289              # 0xfffffff9
	.long	70                      # 0x46
	.long	4294967290              # 0xfffffffa
	.long	75                      # 0x4b
	.long	4294967288              # 0xfffffff8
	.long	89                      # 0x59
	.long	4294967262              # 0xffffffde
	.long	119                     # 0x77
	.long	4294967293              # 0xfffffffd
	.long	75                      # 0x4b
	.long	32                      # 0x20
	.long	20                      # 0x14
	.long	30                      # 0x1e
	.long	22                      # 0x16
	.long	4294967252              # 0xffffffd4
	.long	127                     # 0x7f
	.long	4294967291              # 0xfffffffb
	.long	85                      # 0x55
	.long	4294967290              # 0xfffffffa
	.long	81                      # 0x51
	.long	4294967286              # 0xfffffff6
	.long	77                      # 0x4d
	.long	4294967289              # 0xfffffff9
	.long	81                      # 0x51
	.long	4294967279              # 0xffffffef
	.long	80                      # 0x50
	.long	4294967278              # 0xffffffee
	.long	73                      # 0x49
	.long	4294967292              # 0xfffffffc
	.long	74                      # 0x4a
	.long	4294967286              # 0xfffffff6
	.long	83                      # 0x53
	.long	4294967287              # 0xfffffff7
	.long	71                      # 0x47
	.long	4294967287              # 0xfffffff7
	.long	67                      # 0x43
	.long	4294967295              # 0xffffffff
	.long	61                      # 0x3d
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967282              # 0xfffffff2
	.long	66                      # 0x42
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	54                      # 0x36
	.long	4294967291              # 0xfffffffb
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	4294967295              # 0xffffffff
	.long	60                      # 0x3c
	.long	4294967293              # 0xfffffffd
	.long	61                      # 0x3d
	.long	4294967288              # 0xfffffff8
	.long	67                      # 0x43
	.long	4294967271              # 0xffffffe7
	.long	84                      # 0x54
	.long	4294967282              # 0xfffffff2
	.long	74                      # 0x4a
	.long	4294967291              # 0xfffffffb
	.long	65                      # 0x41
	.long	5                       # 0x5
	.long	52                      # 0x34
	.long	2                       # 0x2
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	61                      # 0x3d
	.long	4294967287              # 0xfffffff7
	.long	69                      # 0x45
	.long	4294967285              # 0xfffffff5
	.long	70                      # 0x46
	.long	18                      # 0x12
	.long	55                      # 0x37
	.long	4294967292              # 0xfffffffc
	.long	71                      # 0x47
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	7                       # 0x7
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	9                       # 0x9
	.long	41                      # 0x29
	.long	18                      # 0x12
	.long	25                      # 0x19
	.long	9                       # 0x9
	.long	32                      # 0x20
	.long	5                       # 0x5
	.long	43                      # 0x2b
	.long	9                       # 0x9
	.long	47                      # 0x2f
	.long	0                       # 0x0
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	51                      # 0x33
	.long	2                       # 0x2
	.long	46                      # 0x2e
	.long	19                      # 0x13
	.long	38                      # 0x26
	.long	4294967292              # 0xfffffffc
	.long	66                      # 0x42
	.long	15                      # 0xf
	.long	38                      # 0x26
	.long	12                      # 0xc
	.long	42                      # 0x2a
	.long	9                       # 0x9
	.long	34                      # 0x22
	.long	0                       # 0x0
	.long	89                      # 0x59
	.long	4294967292              # 0xfffffffc
	.long	86                      # 0x56
	.long	4294967284              # 0xfffffff4
	.long	88                      # 0x58
	.long	4294967291              # 0xfffffffb
	.long	82                      # 0x52
	.long	4294967293              # 0xfffffffd
	.long	72                      # 0x48
	.long	4294967292              # 0xfffffffc
	.long	67                      # 0x43
	.long	4294967288              # 0xfffffff8
	.long	72                      # 0x48
	.long	4294967280              # 0xfffffff0
	.long	89                      # 0x59
	.long	4294967287              # 0xfffffff7
	.long	69                      # 0x45
	.long	4294967295              # 0xffffffff
	.long	59                      # 0x3b
	.long	5                       # 0x5
	.long	66                      # 0x42
	.long	4                       # 0x4
	.long	57                      # 0x39
	.long	4294967292              # 0xfffffffc
	.long	71                      # 0x47
	.long	4294967294              # 0xfffffffe
	.long	71                      # 0x47
	.long	2                       # 0x2
	.long	58                      # 0x3a
	.long	4294967295              # 0xffffffff
	.long	74                      # 0x4a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967292              # 0xfffffffc
	.long	44                      # 0x2c
	.long	4294967295              # 0xffffffff
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	4294967289              # 0xfffffff9
	.long	51                      # 0x33
	.long	4294967292              # 0xfffffffc
	.long	47                      # 0x2f
	.long	4294967290              # 0xfffffffa
	.long	42                      # 0x2a
	.long	4294967293              # 0xfffffffd
	.long	41                      # 0x29
	.long	4294967290              # 0xfffffffa
	.long	53                      # 0x35
	.long	8                       # 0x8
	.long	76                      # 0x4c
	.long	4294967287              # 0xfffffff7
	.long	78                      # 0x4e
	.long	4294967285              # 0xfffffff5
	.long	83                      # 0x53
	.long	9                       # 0x9
	.long	52                      # 0x34
	.long	0                       # 0x0
	.long	67                      # 0x43
	.long	4294967291              # 0xfffffffb
	.long	90                      # 0x5a
	.long	4294967293              # 0xfffffffd
	.long	78                      # 0x4e
	.long	4294967288              # 0xfffffff8
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	72                      # 0x48
	.long	4294967286              # 0xfffffff6
	.long	72                      # 0x48
	.long	4294967278              # 0xffffffee
	.long	75                      # 0x4b
	.long	4294967284              # 0xfffffff4
	.long	71                      # 0x47
	.long	4294967285              # 0xfffffff5
	.long	63                      # 0x3f
	.long	4294967291              # 0xfffffffb
	.long	70                      # 0x46
	.long	4294967279              # 0xffffffef
	.long	75                      # 0x4b
	.long	4294967282              # 0xfffffff2
	.long	72                      # 0x48
	.long	4294967280              # 0xfffffff0
	.long	67                      # 0x43
	.long	4294967288              # 0xfffffff8
	.long	53                      # 0x35
	.long	4294967282              # 0xfffffff2
	.long	59                      # 0x3b
	.long	4294967287              # 0xfffffff7
	.long	52                      # 0x34
	.long	4294967285              # 0xfffffff5
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	4294967281              # 0xfffffff1
	.long	72                      # 0x48
	.long	4294967291              # 0xfffffffb
	.long	75                      # 0x4b
	.long	4294967288              # 0xfffffff8
	.long	80                      # 0x50
	.long	4294967275              # 0xffffffeb
	.long	83                      # 0x53
	.long	4294967275              # 0xffffffeb
	.long	64                      # 0x40
	.long	4294967283              # 0xfffffff3
	.long	31                      # 0x1f
	.long	4294967271              # 0xffffffe7
	.long	64                      # 0x40
	.long	4294967267              # 0xffffffe3
	.long	94                      # 0x5e
	.long	9                       # 0x9
	.long	75                      # 0x4b
	.long	17                      # 0x11
	.long	63                      # 0x3f
	.long	4294967288              # 0xfffffff8
	.long	74                      # 0x4a
	.long	4294967291              # 0xfffffffb
	.long	35                      # 0x23
	.long	4294967294              # 0xfffffffe
	.long	27                      # 0x1b
	.long	13                      # 0xd
	.long	91                      # 0x5b
	.long	3                       # 0x3
	.long	65                      # 0x41
	.long	4294967289              # 0xfffffff9
	.long	69                      # 0x45
	.long	8                       # 0x8
	.long	77                      # 0x4d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967286              # 0xfffffff6
	.long	66                      # 0x42
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.long	4294967293              # 0xfffffffd
	.long	68                      # 0x44
	.long	4294967276              # 0xffffffec
	.long	81                      # 0x51
	.long	0                       # 0x0
	.long	30                      # 0x1e
	.long	1                       # 0x1
	.long	7                       # 0x7
	.long	4294967293              # 0xfffffffd
	.long	23                      # 0x17
	.long	4294967275              # 0xffffffeb
	.long	74                      # 0x4a
	.long	16                      # 0x10
	.long	66                      # 0x42
	.long	4294967273              # 0xffffffe9
	.long	124                     # 0x7c
	.long	17                      # 0x11
	.long	37                      # 0x25
	.long	44                      # 0x2c
	.long	4294967278              # 0xffffffee
	.long	50                      # 0x32
	.long	4294967262              # 0xffffffde
	.long	4294967274              # 0xffffffea
	.long	127                     # 0x7f
	.size	INIT_MAP_P, 2880

	.type	INIT_LAST_I,@object     # @INIT_LAST_I
	.p2align	4
INIT_LAST_I:
	.long	24                      # 0x18
	.long	0                       # 0x0
	.long	15                      # 0xf
	.long	9                       # 0x9
	.long	8                       # 0x8
	.long	25                      # 0x19
	.long	13                      # 0xd
	.long	18                      # 0x12
	.long	15                      # 0xf
	.long	9                       # 0x9
	.long	13                      # 0xd
	.long	19                      # 0x13
	.long	10                      # 0xa
	.long	37                      # 0x25
	.long	12                      # 0xc
	.long	18                      # 0x12
	.long	6                       # 0x6
	.long	29                      # 0x1d
	.long	20                      # 0x14
	.long	33                      # 0x21
	.long	15                      # 0xf
	.long	30                      # 0x1e
	.long	4                       # 0x4
	.long	45                      # 0x2d
	.long	1                       # 0x1
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	7                       # 0x7
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	12                      # 0xc
	.long	38                      # 0x26
	.long	11                      # 0xb
	.long	45                      # 0x2d
	.long	15                      # 0xf
	.long	39                      # 0x27
	.long	11                      # 0xb
	.long	42                      # 0x2a
	.long	13                      # 0xd
	.long	44                      # 0x2c
	.long	16                      # 0x10
	.long	45                      # 0x2d
	.long	12                      # 0xc
	.long	41                      # 0x29
	.long	10                      # 0xa
	.long	49                      # 0x31
	.long	30                      # 0x1e
	.long	34                      # 0x22
	.long	18                      # 0x12
	.long	42                      # 0x2a
	.long	10                      # 0xa
	.long	55                      # 0x37
	.long	17                      # 0x11
	.long	51                      # 0x33
	.long	17                      # 0x11
	.long	46                      # 0x2e
	.long	0                       # 0x0
	.long	89                      # 0x59
	.long	23                      # 0x17
	.long	4294967283              # 0xfffffff3
	.long	26                      # 0x1a
	.long	4294967283              # 0xfffffff3
	.long	40                      # 0x28
	.long	4294967281              # 0xfffffff1
	.long	49                      # 0x31
	.long	4294967282              # 0xfffffff2
	.long	44                      # 0x2c
	.long	3                       # 0x3
	.long	45                      # 0x2d
	.long	6                       # 0x6
	.long	44                      # 0x2c
	.long	34                      # 0x22
	.long	33                      # 0x21
	.long	54                      # 0x36
	.long	19                      # 0x13
	.long	82                      # 0x52
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	26                      # 0x1a
	.long	4294967277              # 0xffffffed
	.long	22                      # 0x16
	.long	4294967279              # 0xffffffef
	.long	26                      # 0x1a
	.long	4294967279              # 0xffffffef
	.long	30                      # 0x1e
	.long	4294967271              # 0xffffffe7
	.long	28                      # 0x1c
	.long	4294967276              # 0xffffffec
	.long	33                      # 0x21
	.long	4294967273              # 0xffffffe9
	.long	37                      # 0x25
	.long	4294967269              # 0xffffffe5
	.long	33                      # 0x21
	.long	4294967273              # 0xffffffe9
	.long	40                      # 0x28
	.long	4294967268              # 0xffffffe4
	.long	38                      # 0x26
	.long	4294967279              # 0xffffffef
	.long	33                      # 0x21
	.long	4294967285              # 0xfffffff5
	.long	40                      # 0x28
	.long	4294967281              # 0xfffffff1
	.long	41                      # 0x29
	.long	4294967290              # 0xfffffffa
	.long	38                      # 0x26
	.long	1                       # 0x1
	.long	41                      # 0x29
	.long	17                      # 0x11
	.long	30                      # 0x1e
	.long	4294967290              # 0xfffffffa
	.long	27                      # 0x1b
	.long	3                       # 0x3
	.long	26                      # 0x1a
	.long	22                      # 0x16
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	37                      # 0x25
	.long	4294967280              # 0xfffffff0
	.long	35                      # 0x23
	.long	4294967292              # 0xfffffffc
	.long	38                      # 0x26
	.long	4294967288              # 0xfffffff8
	.long	38                      # 0x26
	.long	4294967293              # 0xfffffffd
	.long	37                      # 0x25
	.long	3                       # 0x3
	.long	38                      # 0x26
	.long	5                       # 0x5
	.long	42                      # 0x2a
	.long	0                       # 0x0
	.long	35                      # 0x23
	.long	16                      # 0x10
	.long	39                      # 0x27
	.long	22                      # 0x16
	.long	14                      # 0xe
	.long	48                      # 0x30
	.long	27                      # 0x1b
	.long	37                      # 0x25
	.long	21                      # 0x15
	.long	60                      # 0x3c
	.long	12                      # 0xc
	.long	68                      # 0x44
	.long	2                       # 0x2
	.long	97                      # 0x61
	.size	INIT_LAST_I, 960

	.type	INIT_LAST_P,@object     # @INIT_LAST_P
	.p2align	4
INIT_LAST_P:
	.long	11                      # 0xb
	.long	28                      # 0x1c
	.long	2                       # 0x2
	.long	40                      # 0x28
	.long	3                       # 0x3
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	49                      # 0x31
	.long	0                       # 0x0
	.long	46                      # 0x2e
	.long	2                       # 0x2
	.long	44                      # 0x2c
	.long	2                       # 0x2
	.long	51                      # 0x33
	.long	0                       # 0x0
	.long	47                      # 0x2f
	.long	4                       # 0x4
	.long	39                      # 0x27
	.long	2                       # 0x2
	.long	62                      # 0x3e
	.long	6                       # 0x6
	.long	46                      # 0x2e
	.long	0                       # 0x0
	.long	54                      # 0x36
	.long	3                       # 0x3
	.long	54                      # 0x36
	.long	2                       # 0x2
	.long	58                      # 0x3a
	.long	4                       # 0x4
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	6                       # 0x6
	.long	51                      # 0x33
	.long	6                       # 0x6
	.long	57                      # 0x39
	.long	7                       # 0x7
	.long	53                      # 0x35
	.long	6                       # 0x6
	.long	52                      # 0x34
	.long	6                       # 0x6
	.long	55                      # 0x37
	.long	11                      # 0xb
	.long	45                      # 0x2d
	.long	14                      # 0xe
	.long	36                      # 0x24
	.long	8                       # 0x8
	.long	53                      # 0x35
	.long	4294967295              # 0xffffffff
	.long	82                      # 0x52
	.long	7                       # 0x7
	.long	55                      # 0x37
	.long	4294967293              # 0xfffffffd
	.long	78                      # 0x4e
	.long	15                      # 0xf
	.long	46                      # 0x2e
	.long	22                      # 0x16
	.long	31                      # 0x1f
	.long	4294967295              # 0xffffffff
	.long	84                      # 0x54
	.long	9                       # 0x9
	.long	4294967294              # 0xfffffffe
	.long	26                      # 0x1a
	.long	4294967287              # 0xfffffff7
	.long	33                      # 0x21
	.long	4294967287              # 0xfffffff7
	.long	39                      # 0x27
	.long	4294967289              # 0xfffffff9
	.long	41                      # 0x29
	.long	4294967294              # 0xfffffffe
	.long	45                      # 0x2d
	.long	3                       # 0x3
	.long	49                      # 0x31
	.long	9                       # 0x9
	.long	45                      # 0x2d
	.long	27                      # 0x1b
	.long	36                      # 0x24
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	25                      # 0x19
	.long	7                       # 0x7
	.long	30                      # 0x1e
	.long	4294967289              # 0xfffffff9
	.long	28                      # 0x1c
	.long	3                       # 0x3
	.long	28                      # 0x1c
	.long	4                       # 0x4
	.long	32                      # 0x20
	.long	0                       # 0x0
	.long	34                      # 0x22
	.long	4294967295              # 0xffffffff
	.long	30                      # 0x1e
	.long	6                       # 0x6
	.long	30                      # 0x1e
	.long	6                       # 0x6
	.long	32                      # 0x20
	.long	9                       # 0x9
	.long	31                      # 0x1f
	.long	19                      # 0x13
	.long	26                      # 0x1a
	.long	27                      # 0x1b
	.long	26                      # 0x1a
	.long	30                      # 0x1e
	.long	37                      # 0x25
	.long	20                      # 0x14
	.long	28                      # 0x1c
	.long	34                      # 0x22
	.long	17                      # 0x11
	.long	70                      # 0x46
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	5                       # 0x5
	.long	59                      # 0x3b
	.long	9                       # 0x9
	.long	67                      # 0x43
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	16                      # 0x10
	.long	30                      # 0x1e
	.long	18                      # 0x12
	.long	32                      # 0x20
	.long	18                      # 0x12
	.long	35                      # 0x23
	.long	22                      # 0x16
	.long	29                      # 0x1d
	.long	24                      # 0x18
	.long	31                      # 0x1f
	.long	23                      # 0x17
	.long	38                      # 0x26
	.long	18                      # 0x12
	.long	43                      # 0x2b
	.long	20                      # 0x14
	.long	41                      # 0x29
	.long	11                      # 0xb
	.long	63                      # 0x3f
	.long	9                       # 0x9
	.long	59                      # 0x3b
	.long	9                       # 0x9
	.long	64                      # 0x40
	.long	4294967295              # 0xffffffff
	.long	94                      # 0x5e
	.long	4294967294              # 0xfffffffe
	.long	89                      # 0x59
	.long	4294967287              # 0xfffffff7
	.long	108                     # 0x6c
	.long	4                       # 0x4
	.long	45                      # 0x2d
	.long	10                      # 0xa
	.long	28                      # 0x1c
	.long	10                      # 0xa
	.long	31                      # 0x1f
	.long	33                      # 0x21
	.long	4294967285              # 0xfffffff5
	.long	52                      # 0x34
	.long	4294967253              # 0xffffffd5
	.long	18                      # 0x12
	.long	15                      # 0xf
	.long	28                      # 0x1c
	.long	0                       # 0x0
	.long	35                      # 0x23
	.long	4294967274              # 0xffffffea
	.long	38                      # 0x26
	.long	4294967271              # 0xffffffe7
	.long	34                      # 0x22
	.long	0                       # 0x0
	.long	39                      # 0x27
	.long	4294967278              # 0xffffffee
	.long	32                      # 0x20
	.long	4294967284              # 0xfffffff4
	.long	102                     # 0x66
	.long	4294967202              # 0xffffffa2
	.zero	8
	.long	56                      # 0x38
	.long	4294967281              # 0xfffffff1
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	33                      # 0x21
	.long	4294967292              # 0xfffffffc
	.long	29                      # 0x1d
	.long	10                      # 0xa
	.long	37                      # 0x25
	.long	4294967291              # 0xfffffffb
	.long	51                      # 0x33
	.long	4294967267              # 0xffffffe3
	.long	39                      # 0x27
	.long	4294967287              # 0xfffffff7
	.long	52                      # 0x34
	.long	4294967262              # 0xffffffde
	.long	69                      # 0x45
	.long	4294967238              # 0xffffffc6
	.long	67                      # 0x43
	.long	4294967233              # 0xffffffc1
	.long	44                      # 0x2c
	.long	4294967291              # 0xfffffffb
	.long	32                      # 0x20
	.long	7                       # 0x7
	.long	55                      # 0x37
	.long	4294967267              # 0xffffffe3
	.long	32                      # 0x20
	.long	1                       # 0x1
	.zero	8
	.long	27                      # 0x1b
	.long	36                      # 0x24
	.long	17                      # 0x11
	.long	4294967286              # 0xfffffff6
	.long	32                      # 0x20
	.long	4294967283              # 0xfffffff3
	.long	42                      # 0x2a
	.long	4294967287              # 0xfffffff7
	.long	49                      # 0x31
	.long	4294967291              # 0xfffffffb
	.long	53                      # 0x35
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	3                       # 0x3
	.long	68                      # 0x44
	.long	10                      # 0xa
	.long	66                      # 0x42
	.long	27                      # 0x1b
	.long	47                      # 0x2f
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	33                      # 0x21
	.long	4294967271              # 0xffffffe7
	.long	34                      # 0x22
	.long	4294967266              # 0xffffffe2
	.long	36                      # 0x24
	.long	4294967268              # 0xffffffe4
	.long	38                      # 0x26
	.long	4294967268              # 0xffffffe4
	.long	38                      # 0x26
	.long	4294967269              # 0xffffffe5
	.long	34                      # 0x22
	.long	4294967278              # 0xffffffee
	.long	35                      # 0x23
	.long	4294967280              # 0xfffffff0
	.long	34                      # 0x22
	.long	4294967282              # 0xfffffff2
	.long	32                      # 0x20
	.long	4294967288              # 0xfffffff8
	.long	37                      # 0x25
	.long	4294967290              # 0xfffffffa
	.long	35                      # 0x23
	.long	0                       # 0x0
	.long	30                      # 0x1e
	.long	10                      # 0xa
	.long	28                      # 0x1c
	.long	18                      # 0x12
	.long	26                      # 0x1a
	.long	25                      # 0x19
	.long	29                      # 0x1d
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	75                      # 0x4b
	.long	2                       # 0x2
	.long	72                      # 0x48
	.long	8                       # 0x8
	.long	77                      # 0x4d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	14                      # 0xe
	.long	35                      # 0x23
	.long	18                      # 0x12
	.long	31                      # 0x1f
	.long	17                      # 0x11
	.long	35                      # 0x23
	.long	21                      # 0x15
	.long	30                      # 0x1e
	.long	17                      # 0x11
	.long	45                      # 0x2d
	.long	20                      # 0x14
	.long	42                      # 0x2a
	.long	18                      # 0x12
	.long	45                      # 0x2d
	.long	27                      # 0x1b
	.long	26                      # 0x1a
	.long	16                      # 0x10
	.long	54                      # 0x36
	.long	7                       # 0x7
	.long	66                      # 0x42
	.long	16                      # 0x10
	.long	56                      # 0x38
	.long	11                      # 0xb
	.long	73                      # 0x49
	.long	10                      # 0xa
	.long	67                      # 0x43
	.long	4294967286              # 0xfffffff6
	.long	116                     # 0x74
	.long	4                       # 0x4
	.long	39                      # 0x27
	.long	0                       # 0x0
	.long	42                      # 0x2a
	.long	7                       # 0x7
	.long	34                      # 0x22
	.long	11                      # 0xb
	.long	29                      # 0x1d
	.long	8                       # 0x8
	.long	31                      # 0x1f
	.long	6                       # 0x6
	.long	37                      # 0x25
	.long	7                       # 0x7
	.long	42                      # 0x2a
	.long	3                       # 0x3
	.long	40                      # 0x28
	.long	8                       # 0x8
	.long	33                      # 0x21
	.long	13                      # 0xd
	.long	43                      # 0x2b
	.long	13                      # 0xd
	.long	36                      # 0x24
	.long	4                       # 0x4
	.long	47                      # 0x2f
	.long	3                       # 0x3
	.long	55                      # 0x37
	.long	2                       # 0x2
	.long	58                      # 0x3a
	.long	6                       # 0x6
	.long	60                      # 0x3c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	8                       # 0x8
	.long	44                      # 0x2c
	.long	11                      # 0xb
	.long	44                      # 0x2c
	.long	14                      # 0xe
	.long	42                      # 0x2a
	.long	7                       # 0x7
	.long	48                      # 0x30
	.long	4                       # 0x4
	.long	56                      # 0x38
	.long	4                       # 0x4
	.long	52                      # 0x34
	.long	13                      # 0xd
	.long	37                      # 0x25
	.long	9                       # 0x9
	.long	49                      # 0x31
	.long	19                      # 0x13
	.long	58                      # 0x3a
	.long	10                      # 0xa
	.long	48                      # 0x30
	.long	12                      # 0xc
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	69                      # 0x45
	.long	20                      # 0x14
	.long	33                      # 0x21
	.long	8                       # 0x8
	.long	63                      # 0x3f
	.long	9                       # 0x9
	.long	4294967294              # 0xfffffffe
	.long	30                      # 0x1e
	.long	4294967286              # 0xfffffff6
	.long	31                      # 0x1f
	.long	4294967292              # 0xfffffffc
	.long	33                      # 0x21
	.long	4294967295              # 0xffffffff
	.long	33                      # 0x21
	.long	7                       # 0x7
	.long	31                      # 0x1f
	.long	12                      # 0xc
	.long	37                      # 0x25
	.long	23                      # 0x17
	.long	31                      # 0x1f
	.long	38                      # 0x26
	.long	20                      # 0x14
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	35                      # 0x23
	.long	4294967278              # 0xffffffee
	.long	33                      # 0x21
	.long	4294967271              # 0xffffffe7
	.long	28                      # 0x1c
	.long	4294967293              # 0xfffffffd
	.long	24                      # 0x18
	.long	10                      # 0xa
	.long	27                      # 0x1b
	.long	0                       # 0x0
	.long	34                      # 0x22
	.long	4294967282              # 0xfffffff2
	.long	52                      # 0x34
	.long	4294967252              # 0xffffffd4
	.long	39                      # 0x27
	.long	4294967272              # 0xffffffe8
	.long	19                      # 0x13
	.long	17                      # 0x11
	.long	31                      # 0x1f
	.long	25                      # 0x19
	.long	36                      # 0x24
	.long	29                      # 0x1d
	.long	24                      # 0x18
	.long	33                      # 0x21
	.long	34                      # 0x22
	.long	15                      # 0xf
	.long	30                      # 0x1e
	.long	20                      # 0x14
	.long	22                      # 0x16
	.long	73                      # 0x49
	.long	20                      # 0x14
	.long	34                      # 0x22
	.long	19                      # 0x13
	.long	31                      # 0x1f
	.long	27                      # 0x1b
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	19                      # 0x13
	.long	16                      # 0x10
	.long	15                      # 0xf
	.long	36                      # 0x24
	.long	15                      # 0xf
	.long	36                      # 0x24
	.long	21                      # 0x15
	.long	28                      # 0x1c
	.long	25                      # 0x19
	.long	21                      # 0x15
	.long	30                      # 0x1e
	.long	20                      # 0x14
	.long	31                      # 0x1f
	.long	12                      # 0xc
	.long	27                      # 0x1b
	.long	16                      # 0x10
	.long	24                      # 0x18
	.long	42                      # 0x2a
	.long	0                       # 0x0
	.long	93                      # 0x5d
	.long	14                      # 0xe
	.long	56                      # 0x38
	.long	15                      # 0xf
	.long	57                      # 0x39
	.long	26                      # 0x1a
	.long	38                      # 0x26
	.long	4294967272              # 0xffffffe8
	.long	127                     # 0x7f
	.size	INIT_LAST_P, 2880

	.type	INIT_ONE_I,@object      # @INIT_ONE_I
	.p2align	4
INIT_ONE_I:
	.long	4294967293              # 0xfffffffd
	.long	71                      # 0x47
	.long	4294967290              # 0xfffffffa
	.long	42                      # 0x2a
	.long	4294967291              # 0xfffffffb
	.long	50                      # 0x32
	.long	4294967293              # 0xfffffffd
	.long	54                      # 0x36
	.long	4294967294              # 0xfffffffe
	.long	62                      # 0x3e
	.long	4294967291              # 0xfffffffb
	.long	67                      # 0x43
	.long	4294967291              # 0xfffffffb
	.long	27                      # 0x1b
	.long	4294967293              # 0xfffffffd
	.long	39                      # 0x27
	.long	4294967294              # 0xfffffffe
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	46                      # 0x2e
	.long	4294967293              # 0xfffffffd
	.long	75                      # 0x4b
	.long	4294967295              # 0xffffffff
	.long	23                      # 0x17
	.long	1                       # 0x1
	.long	34                      # 0x22
	.long	1                       # 0x1
	.long	43                      # 0x2b
	.long	0                       # 0x0
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967284              # 0xfffffff4
	.long	92                      # 0x5c
	.long	4294967281              # 0xfffffff1
	.long	55                      # 0x37
	.long	4294967286              # 0xfffffff6
	.long	60                      # 0x3c
	.long	4294967290              # 0xfffffffa
	.long	62                      # 0x3e
	.long	4294967292              # 0xfffffffc
	.long	65                      # 0x41
	.long	4294967285              # 0xfffffff5
	.long	97                      # 0x61
	.long	4294967276              # 0xffffffec
	.long	84                      # 0x54
	.long	4294967285              # 0xfffffff5
	.long	79                      # 0x4f
	.long	4294967290              # 0xfffffffa
	.long	73                      # 0x49
	.long	4294967292              # 0xfffffffc
	.long	74                      # 0x4a
	.long	4294967288              # 0xfffffff8
	.long	78                      # 0x4e
	.long	4294967291              # 0xfffffffb
	.long	33                      # 0x21
	.long	4294967292              # 0xfffffffc
	.long	48                      # 0x30
	.long	4294967294              # 0xfffffffe
	.long	53                      # 0x35
	.long	4294967293              # 0xfffffffd
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_ONE_I, 320

	.type	INIT_ONE_P,@object      # @INIT_ONE_P
	.p2align	4
INIT_ONE_P:
	.long	4294967290              # 0xfffffffa
	.long	76                      # 0x4c
	.long	4294967294              # 0xfffffffe
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	52                      # 0x34
	.long	4294967293              # 0xfffffffd
	.long	64                      # 0x40
	.long	4294967287              # 0xfffffff7
	.long	77                      # 0x4d
	.long	3                       # 0x3
	.long	24                      # 0x18
	.long	0                       # 0x0
	.long	42                      # 0x2a
	.long	0                       # 0x0
	.long	48                      # 0x30
	.long	0                       # 0x0
	.long	55                      # 0x37
	.long	4294967290              # 0xfffffffa
	.long	66                      # 0x42
	.long	4294967289              # 0xfffffff9
	.long	35                      # 0x23
	.long	4294967289              # 0xfffffff9
	.long	42                      # 0x2a
	.long	4294967288              # 0xfffffff8
	.long	45                      # 0x2d
	.long	4294967291              # 0xfffffffb
	.long	48                      # 0x30
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	58                      # 0x3a
	.long	4294967293              # 0xfffffffd
	.long	29                      # 0x1d
	.long	4294967295              # 0xffffffff
	.long	36                      # 0x24
	.long	1                       # 0x1
	.long	38                      # 0x26
	.long	2                       # 0x2
	.long	43                      # 0x2b
	.long	0                       # 0x0
	.long	70                      # 0x46
	.long	4294967292              # 0xfffffffc
	.long	29                      # 0x1d
	.long	5                       # 0x5
	.long	31                      # 0x1f
	.long	7                       # 0x7
	.long	42                      # 0x2a
	.long	1                       # 0x1
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	8                       # 0x8
	.long	5                       # 0x5
	.long	10                      # 0xa
	.long	14                      # 0xe
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	13                      # 0xd
	.long	27                      # 0x1b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967273              # 0xffffffe9
	.long	112                     # 0x70
	.long	4294967281              # 0xfffffff1
	.long	71                      # 0x47
	.long	4294967289              # 0xfffffff9
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	53                      # 0x35
	.long	4294967291              # 0xfffffffb
	.long	66                      # 0x42
	.long	4294967275              # 0xffffffeb
	.long	101                     # 0x65
	.long	4294967293              # 0xfffffffd
	.long	39                      # 0x27
	.long	4294967291              # 0xfffffffb
	.long	53                      # 0x35
	.long	4294967289              # 0xfffffff9
	.long	61                      # 0x3d
	.long	4294967285              # 0xfffffff5
	.long	75                      # 0x4b
	.long	4294967291              # 0xfffffffb
	.long	71                      # 0x47
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	4294967295              # 0xffffffff
	.long	36                      # 0x24
	.long	4294967294              # 0xfffffffe
	.long	42                      # 0x2a
	.long	4294967294              # 0xfffffffe
	.long	52                      # 0x34
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967285              # 0xfffffff5
	.long	76                      # 0x4c
	.long	4294967286              # 0xfffffff6
	.long	44                      # 0x2c
	.long	4294967286              # 0xfffffff6
	.long	52                      # 0x34
	.long	4294967286              # 0xfffffff6
	.long	57                      # 0x39
	.long	4294967287              # 0xfffffff7
	.long	58                      # 0x3a
	.long	2                       # 0x2
	.long	66                      # 0x42
	.long	4294967287              # 0xfffffff7
	.long	34                      # 0x22
	.long	1                       # 0x1
	.long	32                      # 0x20
	.long	11                      # 0xb
	.long	31                      # 0x1f
	.long	5                       # 0x5
	.long	52                      # 0x34
	.long	3                       # 0x3
	.long	52                      # 0x34
	.long	7                       # 0x7
	.long	4                       # 0x4
	.long	10                      # 0xa
	.long	8                       # 0x8
	.long	17                      # 0x11
	.long	8                       # 0x8
	.long	16                      # 0x10
	.long	19                      # 0x13
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967272              # 0xffffffe8
	.long	115                     # 0x73
	.long	4294967274              # 0xffffffea
	.long	82                      # 0x52
	.long	4294967287              # 0xfffffff7
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	53                      # 0x35
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	4294967275              # 0xffffffeb
	.long	100                     # 0x64
	.long	4294967282              # 0xfffffff2
	.long	57                      # 0x39
	.long	4294967284              # 0xfffffff4
	.long	67                      # 0x43
	.long	4294967285              # 0xfffffff5
	.long	71                      # 0x47
	.long	4294967286              # 0xfffffff6
	.long	77                      # 0x4d
	.long	4294967287              # 0xfffffff7
	.long	71                      # 0x47
	.long	4294967289              # 0xfffffff9
	.long	37                      # 0x25
	.long	4294967288              # 0xfffffff8
	.long	44                      # 0x2c
	.long	4294967285              # 0xfffffff5
	.long	49                      # 0x31
	.long	4294967286              # 0xfffffff6
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967286              # 0xfffffff6
	.long	82                      # 0x52
	.long	4294967288              # 0xfffffff8
	.long	48                      # 0x30
	.long	4294967288              # 0xfffffff8
	.long	61                      # 0x3d
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967289              # 0xfffffff9
	.long	70                      # 0x46
	.long	4294967292              # 0xfffffffc
	.long	79                      # 0x4f
	.long	4294967274              # 0xffffffea
	.long	69                      # 0x45
	.long	4294967280              # 0xfffffff0
	.long	75                      # 0x4b
	.long	4294967294              # 0xfffffffe
	.long	58                      # 0x3a
	.long	1                       # 0x1
	.long	58                      # 0x3a
	.long	4294967283              # 0xfffffff3
	.long	81                      # 0x51
	.long	4294967290              # 0xfffffffa
	.long	38                      # 0x26
	.long	4294967283              # 0xfffffff3
	.long	62                      # 0x3e
	.long	4294967290              # 0xfffffffa
	.long	58                      # 0x3a
	.long	4294967294              # 0xfffffffe
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_ONE_P, 960

	.type	INIT_ABS_I,@object      # @INIT_ABS_I
	.p2align	4
INIT_ABS_I:
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	1                       # 0x1
	.long	63                      # 0x3f
	.long	4294967294              # 0xfffffffe
	.long	72                      # 0x48
	.long	4294967295              # 0xffffffff
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	91                      # 0x5b
	.long	4294967280              # 0xfffffff0
	.long	64                      # 0x40
	.long	4294967288              # 0xfffffff8
	.long	68                      # 0x44
	.long	4294967286              # 0xfffffff6
	.long	78                      # 0x4e
	.long	4294967290              # 0xfffffffa
	.long	77                      # 0x4d
	.long	4294967286              # 0xfffffff6
	.long	86                      # 0x56
	.long	4294967294              # 0xfffffffe
	.long	55                      # 0x37
	.long	0                       # 0x0
	.long	61                      # 0x3d
	.long	1                       # 0x1
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967287              # 0xfffffff7
	.long	92                      # 0x5c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967284              # 0xfffffff4
	.long	73                      # 0x49
	.long	4294967288              # 0xfffffff8
	.long	76                      # 0x4c
	.long	4294967289              # 0xfffffff9
	.long	80                      # 0x50
	.long	4294967287              # 0xfffffff7
	.long	88                      # 0x58
	.long	4294967279              # 0xffffffef
	.long	110                     # 0x6e
	.long	4294967283              # 0xfffffff3
	.long	86                      # 0x56
	.long	4294967283              # 0xfffffff3
	.long	96                      # 0x60
	.long	4294967285              # 0xfffffff5
	.long	97                      # 0x61
	.long	4294967277              # 0xffffffed
	.long	117                     # 0x75
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967283              # 0xfffffff3
	.long	71                      # 0x47
	.long	4294967286              # 0xfffffff6
	.long	79                      # 0x4f
	.long	4294967284              # 0xfffffff4
	.long	86                      # 0x56
	.long	4294967283              # 0xfffffff3
	.long	90                      # 0x5a
	.long	4294967282              # 0xfffffff2
	.long	97                      # 0x61
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_ABS_I, 320

	.type	INIT_ABS_P,@object      # @INIT_ABS_P
	.p2align	4
INIT_ABS_P:
	.long	4294967294              # 0xfffffffe
	.long	59                      # 0x3b
	.long	4294967292              # 0xfffffffc
	.long	70                      # 0x46
	.long	4294967292              # 0xfffffffc
	.long	75                      # 0x4b
	.long	4294967288              # 0xfffffff8
	.long	82                      # 0x52
	.long	4294967279              # 0xffffffef
	.long	102                     # 0x66
	.long	4294967290              # 0xfffffffa
	.long	59                      # 0x3b
	.long	4294967289              # 0xfffffff9
	.long	71                      # 0x47
	.long	4294967284              # 0xfffffff4
	.long	83                      # 0x53
	.long	4294967285              # 0xfffffff5
	.long	87                      # 0x57
	.long	4294967266              # 0xffffffe2
	.long	119                     # 0x77
	.long	4294967284              # 0xfffffff4
	.long	56                      # 0x38
	.long	4294967290              # 0xfffffffa
	.long	60                      # 0x3c
	.long	4294967291              # 0xfffffffb
	.long	62                      # 0x3e
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967288              # 0xfffffff8
	.long	76                      # 0x4c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967290              # 0xfffffffa
	.long	55                      # 0x37
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	74                      # 0x4a
	.long	4294967286              # 0xfffffff6
	.long	90                      # 0x5a
	.long	4294967294              # 0xfffffffe
	.long	58                      # 0x3a
	.long	4294967293              # 0xfffffffd
	.long	72                      # 0x48
	.long	4294967293              # 0xfffffffd
	.long	81                      # 0x51
	.long	4294967285              # 0xfffffff5
	.long	97                      # 0x61
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	2                       # 0x2
	.long	40                      # 0x28
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	4294967293              # 0xfffffffd
	.long	70                      # 0x46
	.long	4294967290              # 0xfffffffa
	.long	79                      # 0x4f
	.long	4294967288              # 0xfffffff8
	.long	85                      # 0x55
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967285              # 0xfffffff5
	.long	77                      # 0x4d
	.long	4294967287              # 0xfffffff7
	.long	80                      # 0x50
	.long	4294967287              # 0xfffffff7
	.long	84                      # 0x54
	.long	4294967286              # 0xfffffff6
	.long	87                      # 0x57
	.long	4294967262              # 0xffffffde
	.long	127                     # 0x7f
	.long	4294967281              # 0xfffffff1
	.long	77                      # 0x4d
	.long	4294967279              # 0xffffffef
	.long	91                      # 0x5b
	.long	4294967271              # 0xffffffe7
	.long	107                     # 0x6b
	.long	4294967271              # 0xffffffe7
	.long	111                     # 0x6f
	.long	4294967268              # 0xffffffe4
	.long	122                     # 0x7a
	.long	4294967287              # 0xfffffff7
	.long	57                      # 0x39
	.long	4294967290              # 0xfffffffa
	.long	63                      # 0x3f
	.long	4294967292              # 0xfffffffc
	.long	65                      # 0x41
	.long	4294967292              # 0xfffffffc
	.long	67                      # 0x43
	.long	4294967289              # 0xfffffff9
	.long	82                      # 0x52
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967280              # 0xfffffff0
	.long	72                      # 0x48
	.long	4294967289              # 0xfffffff9
	.long	69                      # 0x45
	.long	4294967292              # 0xfffffffc
	.long	69                      # 0x45
	.long	4294967291              # 0xfffffffb
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	86                      # 0x56
	.long	4294967294              # 0xfffffffe
	.long	55                      # 0x37
	.long	4294967294              # 0xfffffffe
	.long	67                      # 0x43
	.long	0                       # 0x0
	.long	73                      # 0x49
	.long	4294967288              # 0xfffffff8
	.long	89                      # 0x59
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	3                       # 0x3
	.long	37                      # 0x25
	.long	4294967295              # 0xffffffff
	.long	61                      # 0x3d
	.long	4294967291              # 0xfffffffb
	.long	73                      # 0x49
	.long	4294967295              # 0xffffffff
	.long	70                      # 0x46
	.long	4294967292              # 0xfffffffc
	.long	78                      # 0x4e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967282              # 0xfffffff2
	.long	85                      # 0x55
	.long	4294967283              # 0xfffffff3
	.long	89                      # 0x59
	.long	4294967283              # 0xfffffff3
	.long	94                      # 0x5e
	.long	4294967285              # 0xfffffff5
	.long	92                      # 0x5c
	.long	4294967267              # 0xffffffe3
	.long	127                     # 0x7f
	.long	4294967275              # 0xffffffeb
	.long	85                      # 0x55
	.long	4294967280              # 0xfffffff0
	.long	88                      # 0x58
	.long	4294967273              # 0xffffffe9
	.long	104                     # 0x68
	.long	4294967281              # 0xfffffff1
	.long	98                      # 0x62
	.long	4294967259              # 0xffffffdb
	.long	127                     # 0x7f
	.long	4294967284              # 0xfffffff4
	.long	59                      # 0x3b
	.long	4294967288              # 0xfffffff8
	.long	63                      # 0x3f
	.long	4294967287              # 0xfffffff7
	.long	67                      # 0x43
	.long	4294967290              # 0xfffffffa
	.long	68                      # 0x44
	.long	4294967286              # 0xfffffff6
	.long	79                      # 0x4f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967282              # 0xfffffff2
	.long	75                      # 0x4b
	.long	4294967286              # 0xfffffff6
	.long	79                      # 0x4f
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4294967284              # 0xfffffff4
	.long	92                      # 0x5c
	.long	4294967278              # 0xffffffee
	.long	108                     # 0x6c
	.long	4294967283              # 0xfffffff3
	.long	78                      # 0x4e
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4294967292              # 0xfffffffc
	.long	81                      # 0x51
	.long	4294967283              # 0xfffffff3
	.long	99                      # 0x63
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967280              # 0xfffffff0
	.long	73                      # 0x49
	.long	4294967286              # 0xfffffff6
	.long	76                      # 0x4c
	.long	4294967283              # 0xfffffff3
	.long	86                      # 0x56
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4294967286              # 0xfffffff6
	.long	87                      # 0x57
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_ABS_P, 960

	.type	INIT_FLD_MAP_I,@object  # @INIT_FLD_MAP_I
	.p2align	4
INIT_FLD_MAP_I:
	.long	4294967290              # 0xfffffffa
	.long	93                      # 0x5d
	.long	4294967290              # 0xfffffffa
	.long	84                      # 0x54
	.long	4294967288              # 0xfffffff8
	.long	79                      # 0x4f
	.long	0                       # 0x0
	.long	66                      # 0x42
	.long	4294967295              # 0xffffffff
	.long	71                      # 0x47
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	4294967294              # 0xfffffffe
	.long	60                      # 0x3c
	.long	4294967294              # 0xfffffffe
	.long	59                      # 0x3b
	.long	4294967291              # 0xfffffffb
	.long	75                      # 0x4b
	.long	4294967293              # 0xfffffffd
	.long	62                      # 0x3e
	.long	4294967292              # 0xfffffffc
	.long	58                      # 0x3a
	.long	4294967287              # 0xfffffff7
	.long	66                      # 0x42
	.long	4294967295              # 0xffffffff
	.long	79                      # 0x4f
	.long	0                       # 0x0
	.long	71                      # 0x47
	.long	3                       # 0x3
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	10                      # 0xa
	.long	44                      # 0x2c
	.long	4294967289              # 0xfffffff9
	.long	62                      # 0x3e
	.long	15                      # 0xf
	.long	36                      # 0x24
	.long	14                      # 0xe
	.long	40                      # 0x28
	.long	16                      # 0x10
	.long	27                      # 0x1b
	.long	12                      # 0xc
	.long	29                      # 0x1d
	.long	1                       # 0x1
	.long	44                      # 0x2c
	.long	20                      # 0x14
	.long	36                      # 0x24
	.long	18                      # 0x12
	.long	32                      # 0x20
	.long	5                       # 0x5
	.long	42                      # 0x2a
	.long	1                       # 0x1
	.long	48                      # 0x30
	.long	10                      # 0xa
	.long	62                      # 0x3e
	.long	17                      # 0x11
	.long	46                      # 0x2e
	.long	9                       # 0x9
	.long	64                      # 0x40
	.long	4294967282              # 0xfffffff2
	.long	106                     # 0x6a
	.long	4294967283              # 0xfffffff3
	.long	97                      # 0x61
	.long	4294967281              # 0xfffffff1
	.long	90                      # 0x5a
	.long	4294967284              # 0xfffffff4
	.long	90                      # 0x5a
	.long	4294967278              # 0xffffffee
	.long	88                      # 0x58
	.long	4294967286              # 0xfffffff6
	.long	73                      # 0x49
	.long	4294967287              # 0xfffffff7
	.long	79                      # 0x4f
	.long	4294967282              # 0xfffffff2
	.long	86                      # 0x56
	.long	4294967286              # 0xfffffff6
	.long	73                      # 0x49
	.long	4294967286              # 0xfffffff6
	.long	70                      # 0x46
	.long	4294967286              # 0xfffffff6
	.long	69                      # 0x45
	.long	4294967291              # 0xfffffffb
	.long	66                      # 0x42
	.long	4294967287              # 0xfffffff7
	.long	64                      # 0x40
	.long	4294967291              # 0xfffffffb
	.long	58                      # 0x3a
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967284              # 0xfffffff4
	.long	104                     # 0x68
	.long	4294967285              # 0xfffffff5
	.long	97                      # 0x61
	.long	4294967280              # 0xfffffff0
	.long	96                      # 0x60
	.long	4294967289              # 0xfffffff9
	.long	88                      # 0x58
	.long	4294967288              # 0xfffffff8
	.long	85                      # 0x55
	.long	4294967289              # 0xfffffff9
	.long	85                      # 0x55
	.long	4294967287              # 0xfffffff7
	.long	85                      # 0x55
	.long	4294967283              # 0xfffffff3
	.long	88                      # 0x58
	.long	4                       # 0x4
	.long	66                      # 0x42
	.long	4294967293              # 0xfffffffd
	.long	77                      # 0x4d
	.long	4294967293              # 0xfffffffd
	.long	76                      # 0x4c
	.long	4294967290              # 0xfffffffa
	.long	76                      # 0x4c
	.long	10                      # 0xa
	.long	58                      # 0x3a
	.long	4294967295              # 0xffffffff
	.long	76                      # 0x4c
	.long	4294967295              # 0xffffffff
	.long	83                      # 0x53
	.long	4294967289              # 0xfffffff9
	.long	99                      # 0x63
	.long	4294967282              # 0xfffffff2
	.long	95                      # 0x5f
	.long	2                       # 0x2
	.long	95                      # 0x5f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	76                      # 0x4c
	.long	4294967291              # 0xfffffffb
	.long	74                      # 0x4a
	.long	0                       # 0x0
	.long	70                      # 0x46
	.long	4294967285              # 0xfffffff5
	.long	75                      # 0x4b
	.long	1                       # 0x1
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	65                      # 0x41
	.long	4294967282              # 0xfffffff2
	.long	73                      # 0x49
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.long	4                       # 0x4
	.long	62                      # 0x3e
	.long	4294967295              # 0xffffffff
	.long	68                      # 0x44
	.long	4294967283              # 0xfffffff3
	.long	75                      # 0x4b
	.long	11                      # 0xb
	.long	55                      # 0x37
	.long	5                       # 0x5
	.long	64                      # 0x40
	.long	12                      # 0xc
	.long	70                      # 0x46
	.size	INIT_FLD_MAP_I, 960

	.type	INIT_FLD_MAP_P,@object  # @INIT_FLD_MAP_P
	.p2align	4
INIT_FLD_MAP_P:
	.long	4294967283              # 0xfffffff3
	.long	106                     # 0x6a
	.long	4294967280              # 0xfffffff0
	.long	106                     # 0x6a
	.long	4294967286              # 0xfffffff6
	.long	87                      # 0x57
	.long	4294967275              # 0xffffffeb
	.long	114                     # 0x72
	.long	4294967278              # 0xffffffee
	.long	110                     # 0x6e
	.long	4294967282              # 0xfffffff2
	.long	98                      # 0x62
	.long	4294967274              # 0xffffffea
	.long	110                     # 0x6e
	.long	4294967275              # 0xffffffeb
	.long	106                     # 0x6a
	.long	4294967278              # 0xffffffee
	.long	103                     # 0x67
	.long	4294967275              # 0xffffffeb
	.long	107                     # 0x6b
	.long	4294967273              # 0xffffffe9
	.long	108                     # 0x6c
	.long	4294967270              # 0xffffffe6
	.long	112                     # 0x70
	.long	4294967286              # 0xfffffff6
	.long	96                      # 0x60
	.long	4294967284              # 0xfffffff4
	.long	95                      # 0x5f
	.long	4294967291              # 0xfffffffb
	.long	91                      # 0x5b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967287              # 0xfffffff7
	.long	93                      # 0x5d
	.long	4294967274              # 0xffffffea
	.long	94                      # 0x5e
	.long	4294967291              # 0xfffffffb
	.long	86                      # 0x56
	.long	9                       # 0x9
	.long	67                      # 0x43
	.long	4294967292              # 0xfffffffc
	.long	80                      # 0x50
	.long	4294967286              # 0xfffffff6
	.long	85                      # 0x55
	.long	4294967295              # 0xffffffff
	.long	70                      # 0x46
	.long	7                       # 0x7
	.long	60                      # 0x3c
	.long	9                       # 0x9
	.long	58                      # 0x3a
	.long	5                       # 0x5
	.long	61                      # 0x3d
	.long	12                      # 0xc
	.long	50                      # 0x32
	.long	15                      # 0xf
	.long	50                      # 0x32
	.long	18                      # 0x12
	.long	49                      # 0x31
	.long	17                      # 0x11
	.long	54                      # 0x36
	.long	4294967291              # 0xfffffffb
	.long	85                      # 0x55
	.long	4294967290              # 0xfffffffa
	.long	81                      # 0x51
	.long	4294967286              # 0xfffffff6
	.long	77                      # 0x4d
	.long	4294967289              # 0xfffffff9
	.long	81                      # 0x51
	.long	4294967279              # 0xffffffef
	.long	80                      # 0x50
	.long	4294967278              # 0xffffffee
	.long	73                      # 0x49
	.long	4294967292              # 0xfffffffc
	.long	74                      # 0x4a
	.long	4294967286              # 0xfffffff6
	.long	83                      # 0x53
	.long	4294967287              # 0xfffffff7
	.long	71                      # 0x47
	.long	4294967287              # 0xfffffff7
	.long	67                      # 0x43
	.long	4294967295              # 0xffffffff
	.long	61                      # 0x3d
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967282              # 0xfffffff2
	.long	66                      # 0x42
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	10                      # 0xa
	.long	41                      # 0x29
	.long	7                       # 0x7
	.long	46                      # 0x2e
	.long	4294967295              # 0xffffffff
	.long	51                      # 0x33
	.long	7                       # 0x7
	.long	49                      # 0x31
	.long	8                       # 0x8
	.long	52                      # 0x34
	.long	9                       # 0x9
	.long	41                      # 0x29
	.long	6                       # 0x6
	.long	47                      # 0x2f
	.long	2                       # 0x2
	.long	55                      # 0x37
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	10                      # 0xa
	.long	44                      # 0x2c
	.long	6                       # 0x6
	.long	50                      # 0x32
	.long	5                       # 0x5
	.long	53                      # 0x35
	.long	13                      # 0xd
	.long	49                      # 0x31
	.long	4                       # 0x4
	.long	63                      # 0x3f
	.long	6                       # 0x6
	.long	64                      # 0x40
	.long	4294967294              # 0xfffffffe
	.long	69                      # 0x45
	.long	4294967294              # 0xfffffffe
	.long	59                      # 0x3b
	.long	6                       # 0x6
	.long	70                      # 0x46
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	10                      # 0xa
	.long	44                      # 0x2c
	.long	9                       # 0x9
	.long	31                      # 0x1f
	.long	12                      # 0xc
	.long	43                      # 0x2b
	.long	3                       # 0x3
	.long	53                      # 0x35
	.long	14                      # 0xe
	.long	34                      # 0x22
	.long	10                      # 0xa
	.long	38                      # 0x26
	.long	4294967293              # 0xfffffffd
	.long	52                      # 0x34
	.long	13                      # 0xd
	.long	40                      # 0x28
	.long	17                      # 0x11
	.long	32                      # 0x20
	.long	7                       # 0x7
	.long	44                      # 0x2c
	.long	7                       # 0x7
	.long	38                      # 0x26
	.long	13                      # 0xd
	.long	50                      # 0x32
	.long	10                      # 0xa
	.long	57                      # 0x39
	.long	26                      # 0x1a
	.long	43                      # 0x2b
	.long	4294967275              # 0xffffffeb
	.long	126                     # 0x7e
	.long	4294967273              # 0xffffffe9
	.long	124                     # 0x7c
	.long	4294967276              # 0xffffffec
	.long	110                     # 0x6e
	.long	4294967270              # 0xffffffe6
	.long	126                     # 0x7e
	.long	4294967271              # 0xffffffe7
	.long	124                     # 0x7c
	.long	4294967279              # 0xffffffef
	.long	105                     # 0x69
	.long	4294967269              # 0xffffffe5
	.long	121                     # 0x79
	.long	4294967269              # 0xffffffe5
	.long	117                     # 0x75
	.long	4294967279              # 0xffffffef
	.long	102                     # 0x66
	.long	4294967270              # 0xffffffe6
	.long	117                     # 0x75
	.long	4294967269              # 0xffffffe5
	.long	116                     # 0x74
	.long	4294967263              # 0xffffffdf
	.long	122                     # 0x7a
	.long	4294967286              # 0xfffffff6
	.long	95                      # 0x5f
	.long	4294967282              # 0xfffffff2
	.long	100                     # 0x64
	.long	4294967288              # 0xfffffff8
	.long	95                      # 0x5f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967279              # 0xffffffef
	.long	111                     # 0x6f
	.long	4294967268              # 0xffffffe4
	.long	114                     # 0x72
	.long	4294967290              # 0xfffffffa
	.long	89                      # 0x59
	.long	4294967294              # 0xfffffffe
	.long	80                      # 0x50
	.long	4294967292              # 0xfffffffc
	.long	82                      # 0x52
	.long	4294967287              # 0xfffffff7
	.long	85                      # 0x55
	.long	4294967288              # 0xfffffff8
	.long	81                      # 0x51
	.long	4294967295              # 0xffffffff
	.long	72                      # 0x48
	.long	5                       # 0x5
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	9                       # 0x9
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	69                      # 0x45
	.long	1                       # 0x1
	.long	69                      # 0x45
	.long	7                       # 0x7
	.long	69                      # 0x45
	.long	4294967293              # 0xfffffffd
	.long	81                      # 0x51
	.long	4294967293              # 0xfffffffd
	.long	76                      # 0x4c
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.long	4294967290              # 0xfffffffa
	.long	78                      # 0x4e
	.long	4294967284              # 0xfffffff4
	.long	72                      # 0x48
	.long	4294967282              # 0xfffffff2
	.long	68                      # 0x44
	.long	4294967293              # 0xfffffffd
	.long	70                      # 0x46
	.long	4294967290              # 0xfffffffa
	.long	76                      # 0x4c
	.long	4294967291              # 0xfffffffb
	.long	66                      # 0x42
	.long	4294967291              # 0xfffffffb
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	57                      # 0x39
	.long	4294967292              # 0xfffffffc
	.long	61                      # 0x3d
	.long	4294967287              # 0xfffffff7
	.long	60                      # 0x3c
	.long	1                       # 0x1
	.long	54                      # 0x36
	.long	2                       # 0x2
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967289              # 0xfffffff9
	.long	69                      # 0x45
	.long	4294967290              # 0xfffffffa
	.long	67                      # 0x43
	.long	4294967280              # 0xfffffff0
	.long	77                      # 0x4d
	.long	4294967294              # 0xfffffffe
	.long	64                      # 0x40
	.long	2                       # 0x2
	.long	61                      # 0x3d
	.long	4294967290              # 0xfffffffa
	.long	67                      # 0x43
	.long	4294967293              # 0xfffffffd
	.long	64                      # 0x40
	.long	2                       # 0x2
	.long	57                      # 0x39
	.long	4294967293              # 0xfffffffd
	.long	65                      # 0x41
	.long	4294967293              # 0xfffffffd
	.long	66                      # 0x42
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	9                       # 0x9
	.long	51                      # 0x33
	.long	4294967295              # 0xffffffff
	.long	66                      # 0x42
	.long	4294967294              # 0xfffffffe
	.long	71                      # 0x47
	.long	4294967294              # 0xfffffffe
	.long	75                      # 0x4b
	.long	4294967295              # 0xffffffff
	.long	70                      # 0x46
	.long	4294967287              # 0xfffffff7
	.long	72                      # 0x48
	.long	14                      # 0xe
	.long	60                      # 0x3c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	16                      # 0x10
	.long	37                      # 0x25
	.long	0                       # 0x0
	.long	47                      # 0x2f
	.long	18                      # 0x12
	.long	35                      # 0x23
	.long	11                      # 0xb
	.long	37                      # 0x25
	.long	12                      # 0xc
	.long	41                      # 0x29
	.long	10                      # 0xa
	.long	41                      # 0x29
	.long	2                       # 0x2
	.long	48                      # 0x30
	.long	12                      # 0xc
	.long	41                      # 0x29
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	3                       # 0x3
	.long	50                      # 0x32
	.long	19                      # 0x13
	.long	40                      # 0x28
	.long	3                       # 0x3
	.long	66                      # 0x42
	.long	18                      # 0x12
	.long	50                      # 0x32
	.long	4294967274              # 0xffffffea
	.long	127                     # 0x7f
	.long	4294967271              # 0xffffffe7
	.long	127                     # 0x7f
	.long	4294967271              # 0xffffffe7
	.long	120                     # 0x78
	.long	4294967269              # 0xffffffe5
	.long	127                     # 0x7f
	.long	4294967277              # 0xffffffed
	.long	114                     # 0x72
	.long	4294967273              # 0xffffffe9
	.long	117                     # 0x75
	.long	4294967271              # 0xffffffe7
	.long	118                     # 0x76
	.long	4294967270              # 0xffffffe6
	.long	117                     # 0x75
	.long	4294967272              # 0xffffffe8
	.long	113                     # 0x71
	.long	4294967268              # 0xffffffe4
	.long	118                     # 0x76
	.long	4294967265              # 0xffffffe1
	.long	120                     # 0x78
	.long	4294967259              # 0xffffffdb
	.long	124                     # 0x7c
	.long	4294967286              # 0xfffffff6
	.long	94                      # 0x5e
	.long	4294967281              # 0xfffffff1
	.long	102                     # 0x66
	.long	4294967286              # 0xfffffff6
	.long	99                      # 0x63
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967283              # 0xfffffff3
	.long	106                     # 0x6a
	.long	4294967246              # 0xffffffce
	.long	127                     # 0x7f
	.long	4294967291              # 0xfffffffb
	.long	92                      # 0x5c
	.long	17                      # 0x11
	.long	57                      # 0x39
	.long	4294967291              # 0xfffffffb
	.long	86                      # 0x56
	.long	4294967283              # 0xfffffff3
	.long	94                      # 0x5e
	.long	4294967284              # 0xfffffff4
	.long	91                      # 0x5b
	.long	4294967294              # 0xfffffffe
	.long	77                      # 0x4d
	.long	0                       # 0x0
	.long	71                      # 0x47
	.long	4294967295              # 0xffffffff
	.long	73                      # 0x49
	.long	4                       # 0x4
	.long	64                      # 0x40
	.long	4294967289              # 0xfffffff9
	.long	81                      # 0x51
	.long	5                       # 0x5
	.long	64                      # 0x40
	.long	15                      # 0xf
	.long	57                      # 0x39
	.long	4294967293              # 0xfffffffd
	.long	78                      # 0x4e
	.long	4294967288              # 0xfffffff8
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	72                      # 0x48
	.long	4294967286              # 0xfffffff6
	.long	72                      # 0x48
	.long	4294967278              # 0xffffffee
	.long	75                      # 0x4b
	.long	4294967284              # 0xfffffff4
	.long	71                      # 0x47
	.long	4294967285              # 0xfffffff5
	.long	63                      # 0x3f
	.long	4294967291              # 0xfffffffb
	.long	70                      # 0x46
	.long	4294967279              # 0xffffffef
	.long	75                      # 0x4b
	.long	4294967282              # 0xfffffff2
	.long	72                      # 0x48
	.long	4294967280              # 0xfffffff0
	.long	67                      # 0x43
	.long	4294967288              # 0xfffffff8
	.long	53                      # 0x35
	.long	4294967282              # 0xfffffff2
	.long	59                      # 0x3b
	.long	4294967287              # 0xfffffff7
	.long	52                      # 0x34
	.long	4294967285              # 0xfffffff5
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967286              # 0xfffffff6
	.long	67                      # 0x43
	.long	1                       # 0x1
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	77                      # 0x4d
	.long	2                       # 0x2
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967291              # 0xfffffffb
	.long	78                      # 0x4e
	.long	7                       # 0x7
	.long	55                      # 0x37
	.long	5                       # 0x5
	.long	59                      # 0x3b
	.long	2                       # 0x2
	.long	65                      # 0x41
	.long	14                      # 0xe
	.long	54                      # 0x36
	.long	15                      # 0xf
	.long	44                      # 0x2c
	.long	5                       # 0x5
	.long	60                      # 0x3c
	.long	2                       # 0x2
	.long	70                      # 0x46
	.long	4294967294              # 0xfffffffe
	.long	76                      # 0x4c
	.long	4294967278              # 0xffffffee
	.long	86                      # 0x56
	.long	12                      # 0xc
	.long	70                      # 0x46
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	5                       # 0x5
	.long	64                      # 0x40
	.long	4294967284              # 0xfffffff4
	.long	70                      # 0x46
	.long	11                      # 0xb
	.long	55                      # 0x37
	.long	5                       # 0x5
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	69                      # 0x45
	.long	2                       # 0x2
	.long	65                      # 0x41
	.long	4294967290              # 0xfffffffa
	.long	74                      # 0x4a
	.long	5                       # 0x5
	.long	54                      # 0x36
	.long	7                       # 0x7
	.long	54                      # 0x36
	.long	4294967290              # 0xfffffffa
	.long	76                      # 0x4c
	.long	4294967285              # 0xfffffff5
	.long	82                      # 0x52
	.long	4294967294              # 0xfffffffe
	.long	77                      # 0x4d
	.long	4294967294              # 0xfffffffe
	.long	77                      # 0x4d
	.long	25                      # 0x19
	.long	42                      # 0x2a
	.size	INIT_FLD_MAP_P, 2880

	.type	INIT_FLD_LAST_I,@object # @INIT_FLD_LAST_I
	.p2align	4
INIT_FLD_LAST_I:
	.long	15                      # 0xf
	.long	6                       # 0x6
	.long	6                       # 0x6
	.long	19                      # 0x13
	.long	7                       # 0x7
	.long	16                      # 0x10
	.long	12                      # 0xc
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	11                      # 0xb
	.long	13                      # 0xd
	.long	15                      # 0xf
	.long	15                      # 0xf
	.long	16                      # 0x10
	.long	12                      # 0xc
	.long	23                      # 0x17
	.long	13                      # 0xd
	.long	23                      # 0x17
	.long	15                      # 0xf
	.long	20                      # 0x14
	.long	14                      # 0xe
	.long	26                      # 0x1a
	.long	14                      # 0xe
	.long	44                      # 0x2c
	.long	17                      # 0x11
	.long	40                      # 0x28
	.long	17                      # 0x11
	.long	47                      # 0x2f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	24                      # 0x18
	.long	17                      # 0x11
	.long	21                      # 0x15
	.long	21                      # 0x15
	.long	25                      # 0x19
	.long	22                      # 0x16
	.long	31                      # 0x1f
	.long	27                      # 0x1b
	.long	22                      # 0x16
	.long	29                      # 0x1d
	.long	19                      # 0x13
	.long	35                      # 0x23
	.long	14                      # 0xe
	.long	50                      # 0x32
	.long	10                      # 0xa
	.long	57                      # 0x39
	.long	7                       # 0x7
	.long	63                      # 0x3f
	.long	4294967294              # 0xfffffffe
	.long	77                      # 0x4d
	.long	4294967292              # 0xfffffffc
	.long	82                      # 0x52
	.long	4294967293              # 0xfffffffd
	.long	94                      # 0x5e
	.long	9                       # 0x9
	.long	69                      # 0x45
	.long	4294967284              # 0xfffffff4
	.long	109                     # 0x6d
	.long	21                      # 0x15
	.long	4294967286              # 0xfffffff6
	.long	24                      # 0x18
	.long	4294967285              # 0xfffffff5
	.long	28                      # 0x1c
	.long	4294967288              # 0xfffffff8
	.long	28                      # 0x1c
	.long	4294967295              # 0xffffffff
	.long	29                      # 0x1d
	.long	3                       # 0x3
	.long	29                      # 0x1d
	.long	9                       # 0x9
	.long	35                      # 0x23
	.long	20                      # 0x14
	.long	29                      # 0x1d
	.long	36                      # 0x24
	.long	14                      # 0xe
	.long	67                      # 0x43
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	36                      # 0x24
	.long	4294967261              # 0xffffffdd
	.long	36                      # 0x24
	.long	4294967262              # 0xffffffde
	.long	32                      # 0x20
	.long	4294967270              # 0xffffffe6
	.long	37                      # 0x25
	.long	4294967266              # 0xffffffe2
	.long	44                      # 0x2c
	.long	4294967264              # 0xffffffe0
	.long	34                      # 0x22
	.long	4294967278              # 0xffffffee
	.long	34                      # 0x22
	.long	4294967281              # 0xfffffff1
	.long	40                      # 0x28
	.long	4294967281              # 0xfffffff1
	.long	33                      # 0x21
	.long	4294967289              # 0xfffffff9
	.long	35                      # 0x23
	.long	4294967291              # 0xfffffffb
	.long	33                      # 0x21
	.long	0                       # 0x0
	.long	38                      # 0x26
	.long	2                       # 0x2
	.long	33                      # 0x21
	.long	13                      # 0xd
	.long	23                      # 0x17
	.long	35                      # 0x23
	.long	13                      # 0xd
	.long	58                      # 0x3a
	.long	29                      # 0x1d
	.long	4294967293              # 0xfffffffd
	.long	26                      # 0x1a
	.long	0                       # 0x0
	.long	22                      # 0x16
	.long	30                      # 0x1e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	31                      # 0x1f
	.long	4294967289              # 0xfffffff9
	.long	35                      # 0x23
	.long	4294967281              # 0xfffffff1
	.long	34                      # 0x22
	.long	4294967293              # 0xfffffffd
	.long	34                      # 0x22
	.long	3                       # 0x3
	.long	36                      # 0x24
	.long	4294967295              # 0xffffffff
	.long	34                      # 0x22
	.long	5                       # 0x5
	.long	32                      # 0x20
	.long	11                      # 0xb
	.long	35                      # 0x23
	.long	5                       # 0x5
	.long	34                      # 0x22
	.long	12                      # 0xc
	.long	39                      # 0x27
	.long	11                      # 0xb
	.long	30                      # 0x1e
	.long	29                      # 0x1d
	.long	34                      # 0x22
	.long	26                      # 0x1a
	.long	29                      # 0x1d
	.long	39                      # 0x27
	.long	19                      # 0x13
	.long	66                      # 0x42
	.size	INIT_FLD_LAST_I, 960

	.type	INIT_FLD_LAST_P,@object # @INIT_FLD_LAST_P
	.p2align	4
INIT_FLD_LAST_P:
	.long	14                      # 0xe
	.long	11                      # 0xb
	.long	11                      # 0xb
	.long	14                      # 0xe
	.long	9                       # 0x9
	.long	11                      # 0xb
	.long	18                      # 0x12
	.long	11                      # 0xb
	.long	21                      # 0x15
	.long	9                       # 0x9
	.long	23                      # 0x17
	.long	4294967294              # 0xfffffffe
	.long	32                      # 0x20
	.long	4294967281              # 0xfffffff1
	.long	32                      # 0x20
	.long	4294967281              # 0xfffffff1
	.long	34                      # 0x22
	.long	4294967275              # 0xffffffeb
	.long	39                      # 0x27
	.long	4294967273              # 0xffffffe9
	.long	42                      # 0x2a
	.long	4294967263              # 0xffffffdf
	.long	41                      # 0x29
	.long	4294967265              # 0xffffffe1
	.long	46                      # 0x2e
	.long	4294967268              # 0xffffffe4
	.long	38                      # 0x26
	.long	4294967284              # 0xfffffff4
	.long	21                      # 0x15
	.long	29                      # 0x1d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	45                      # 0x2d
	.long	4294967272              # 0xffffffe8
	.long	53                      # 0x35
	.long	4294967251              # 0xffffffd3
	.long	48                      # 0x30
	.long	4294967270              # 0xffffffe6
	.long	65                      # 0x41
	.long	4294967253              # 0xffffffd5
	.long	43                      # 0x2b
	.long	4294967277              # 0xffffffed
	.long	39                      # 0x27
	.long	4294967286              # 0xfffffff6
	.long	30                      # 0x1e
	.long	9                       # 0x9
	.long	18                      # 0x12
	.long	26                      # 0x1a
	.long	20                      # 0x14
	.long	27                      # 0x1b
	.long	0                       # 0x0
	.long	57                      # 0x39
	.long	4294967282              # 0xfffffff2
	.long	82                      # 0x52
	.long	4294967291              # 0xfffffffb
	.long	75                      # 0x4b
	.long	4294967277              # 0xffffffed
	.long	97                      # 0x61
	.long	4294967261              # 0xffffffdd
	.long	125                     # 0x7d
	.long	21                      # 0x15
	.long	4294967283              # 0xfffffff3
	.long	33                      # 0x21
	.long	4294967282              # 0xfffffff2
	.long	39                      # 0x27
	.long	4294967289              # 0xfffffff9
	.long	46                      # 0x2e
	.long	4294967294              # 0xfffffffe
	.long	51                      # 0x33
	.long	2                       # 0x2
	.long	60                      # 0x3c
	.long	6                       # 0x6
	.long	61                      # 0x3d
	.long	17                      # 0x11
	.long	55                      # 0x37
	.long	34                      # 0x22
	.long	42                      # 0x2a
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	27                      # 0x1b
	.long	0                       # 0x0
	.long	28                      # 0x1c
	.long	0                       # 0x0
	.long	31                      # 0x1f
	.long	4294967292              # 0xfffffffc
	.long	27                      # 0x1b
	.long	6                       # 0x6
	.long	34                      # 0x22
	.long	8                       # 0x8
	.long	30                      # 0x1e
	.long	10                      # 0xa
	.long	24                      # 0x18
	.long	22                      # 0x16
	.long	33                      # 0x21
	.long	19                      # 0x13
	.long	22                      # 0x16
	.long	32                      # 0x20
	.long	26                      # 0x1a
	.long	31                      # 0x1f
	.long	21                      # 0x15
	.long	41                      # 0x29
	.long	26                      # 0x1a
	.long	44                      # 0x2c
	.long	23                      # 0x17
	.long	47                      # 0x2f
	.long	16                      # 0x10
	.long	65                      # 0x41
	.long	14                      # 0xe
	.long	71                      # 0x47
	.long	8                       # 0x8
	.long	60                      # 0x3c
	.long	6                       # 0x6
	.long	63                      # 0x3f
	.long	17                      # 0x11
	.long	65                      # 0x41
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	21                      # 0x15
	.long	24                      # 0x18
	.long	23                      # 0x17
	.long	20                      # 0x14
	.long	26                      # 0x1a
	.long	23                      # 0x17
	.long	27                      # 0x1b
	.long	32                      # 0x20
	.long	28                      # 0x1c
	.long	23                      # 0x17
	.long	28                      # 0x1c
	.long	24                      # 0x18
	.long	23                      # 0x17
	.long	40                      # 0x28
	.long	24                      # 0x18
	.long	32                      # 0x20
	.long	28                      # 0x1c
	.long	29                      # 0x1d
	.long	23                      # 0x17
	.long	42                      # 0x2a
	.long	19                      # 0x13
	.long	57                      # 0x39
	.long	22                      # 0x16
	.long	53                      # 0x35
	.long	22                      # 0x16
	.long	61                      # 0x3d
	.long	11                      # 0xb
	.long	86                      # 0x56
	.long	19                      # 0x13
	.long	4294967290              # 0xfffffffa
	.long	18                      # 0x12
	.long	4294967290              # 0xfffffffa
	.long	14                      # 0xe
	.long	0                       # 0x0
	.long	26                      # 0x1a
	.long	4294967284              # 0xfffffff4
	.long	31                      # 0x1f
	.long	4294967280              # 0xfffffff0
	.long	33                      # 0x21
	.long	4294967271              # 0xffffffe7
	.long	33                      # 0x21
	.long	4294967274              # 0xffffffea
	.long	37                      # 0x25
	.long	4294967268              # 0xffffffe4
	.long	39                      # 0x27
	.long	4294967266              # 0xffffffe2
	.long	42                      # 0x2a
	.long	4294967266              # 0xffffffe2
	.long	47                      # 0x2f
	.long	4294967254              # 0xffffffd6
	.long	45                      # 0x2d
	.long	4294967260              # 0xffffffdc
	.long	49                      # 0x31
	.long	4294967262              # 0xffffffde
	.long	41                      # 0x29
	.long	4294967279              # 0xffffffef
	.long	32                      # 0x20
	.long	9                       # 0x9
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	69                      # 0x45
	.long	4294967225              # 0xffffffb9
	.long	63                      # 0x3f
	.long	4294967233              # 0xffffffc1
	.long	66                      # 0x42
	.long	4294967232              # 0xffffffc0
	.long	77                      # 0x4d
	.long	4294967222              # 0xffffffb6
	.long	54                      # 0x36
	.long	4294967257              # 0xffffffd9
	.long	52                      # 0x34
	.long	4294967261              # 0xffffffdd
	.long	41                      # 0x29
	.long	4294967286              # 0xfffffff6
	.long	36                      # 0x24
	.long	0                       # 0x0
	.long	40                      # 0x28
	.long	4294967295              # 0xffffffff
	.long	30                      # 0x1e
	.long	14                      # 0xe
	.long	28                      # 0x1c
	.long	26                      # 0x1a
	.long	23                      # 0x17
	.long	37                      # 0x25
	.long	12                      # 0xc
	.long	55                      # 0x37
	.long	11                      # 0xb
	.long	65                      # 0x41
	.long	17                      # 0x11
	.long	4294967286              # 0xfffffff6
	.long	32                      # 0x20
	.long	4294967283              # 0xfffffff3
	.long	42                      # 0x2a
	.long	4294967287              # 0xfffffff7
	.long	49                      # 0x31
	.long	4294967291              # 0xfffffffb
	.long	53                      # 0x35
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	3                       # 0x3
	.long	68                      # 0x44
	.long	10                      # 0xa
	.long	66                      # 0x42
	.long	27                      # 0x1b
	.long	47                      # 0x2f
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	37                      # 0x25
	.long	4294967263              # 0xffffffdf
	.long	39                      # 0x27
	.long	4294967260              # 0xffffffdc
	.long	40                      # 0x28
	.long	4294967259              # 0xffffffdb
	.long	38                      # 0x26
	.long	4294967266              # 0xffffffe2
	.long	46                      # 0x2e
	.long	4294967263              # 0xffffffdf
	.long	42                      # 0x2a
	.long	4294967266              # 0xffffffe2
	.long	40                      # 0x28
	.long	4294967272              # 0xffffffe8
	.long	49                      # 0x31
	.long	4294967267              # 0xffffffe3
	.long	38                      # 0x26
	.long	4294967284              # 0xfffffff4
	.long	40                      # 0x28
	.long	4294967286              # 0xfffffff6
	.long	38                      # 0x26
	.long	4294967293              # 0xfffffffd
	.long	46                      # 0x2e
	.long	4294967291              # 0xfffffffb
	.long	31                      # 0x1f
	.long	20                      # 0x14
	.long	29                      # 0x1d
	.long	30                      # 0x1e
	.long	25                      # 0x19
	.long	44                      # 0x2c
	.long	12                      # 0xc
	.long	48                      # 0x30
	.long	11                      # 0xb
	.long	49                      # 0x31
	.long	26                      # 0x1a
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	22                      # 0x16
	.long	22                      # 0x16
	.long	23                      # 0x17
	.long	22                      # 0x16
	.long	27                      # 0x1b
	.long	21                      # 0x15
	.long	33                      # 0x21
	.long	20                      # 0x14
	.long	26                      # 0x1a
	.long	28                      # 0x1c
	.long	30                      # 0x1e
	.long	24                      # 0x18
	.long	27                      # 0x1b
	.long	34                      # 0x22
	.long	18                      # 0x12
	.long	42                      # 0x2a
	.long	25                      # 0x19
	.long	39                      # 0x27
	.long	18                      # 0x12
	.long	50                      # 0x32
	.long	12                      # 0xc
	.long	70                      # 0x46
	.long	21                      # 0x15
	.long	54                      # 0x36
	.long	14                      # 0xe
	.long	71                      # 0x47
	.long	11                      # 0xb
	.long	83                      # 0x53
	.long	17                      # 0x11
	.long	4294967283              # 0xfffffff3
	.long	16                      # 0x10
	.long	4294967287              # 0xfffffff7
	.long	17                      # 0x11
	.long	4294967284              # 0xfffffff4
	.long	27                      # 0x1b
	.long	4294967275              # 0xffffffeb
	.long	37                      # 0x25
	.long	4294967266              # 0xffffffe2
	.long	41                      # 0x29
	.long	4294967256              # 0xffffffd8
	.long	42                      # 0x2a
	.long	4294967255              # 0xffffffd7
	.long	48                      # 0x30
	.long	4294967249              # 0xffffffd1
	.long	39                      # 0x27
	.long	4294967264              # 0xffffffe0
	.long	46                      # 0x2e
	.long	4294967256              # 0xffffffd8
	.long	52                      # 0x34
	.long	4294967245              # 0xffffffcd
	.long	46                      # 0x2e
	.long	4294967255              # 0xffffffd7
	.long	52                      # 0x34
	.long	4294967257              # 0xffffffd9
	.long	43                      # 0x2b
	.long	4294967277              # 0xffffffed
	.long	32                      # 0x20
	.long	11                      # 0xb
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	61                      # 0x3d
	.long	4294967241              # 0xffffffc9
	.long	56                      # 0x38
	.long	4294967250              # 0xffffffd2
	.long	62                      # 0x3e
	.long	4294967246              # 0xffffffce
	.long	81                      # 0x51
	.long	4294967229              # 0xffffffbd
	.long	45                      # 0x2d
	.long	4294967276              # 0xffffffec
	.long	35                      # 0x23
	.long	4294967294              # 0xfffffffe
	.long	28                      # 0x1c
	.long	15                      # 0xf
	.long	34                      # 0x22
	.long	1                       # 0x1
	.long	39                      # 0x27
	.long	1                       # 0x1
	.long	30                      # 0x1e
	.long	17                      # 0x11
	.long	20                      # 0x14
	.long	38                      # 0x26
	.long	18                      # 0x12
	.long	45                      # 0x2d
	.long	15                      # 0xf
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	79                      # 0x4f
	.long	9                       # 0x9
	.long	4294967294              # 0xfffffffe
	.long	30                      # 0x1e
	.long	4294967286              # 0xfffffff6
	.long	31                      # 0x1f
	.long	4294967292              # 0xfffffffc
	.long	33                      # 0x21
	.long	4294967295              # 0xffffffff
	.long	33                      # 0x21
	.long	7                       # 0x7
	.long	31                      # 0x1f
	.long	12                      # 0xc
	.long	37                      # 0x25
	.long	23                      # 0x17
	.long	31                      # 0x1f
	.long	38                      # 0x26
	.long	20                      # 0x14
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	36                      # 0x24
	.long	4294967280              # 0xfffffff0
	.long	37                      # 0x25
	.long	4294967282              # 0xfffffff2
	.long	37                      # 0x25
	.long	4294967279              # 0xffffffef
	.long	32                      # 0x20
	.long	1                       # 0x1
	.long	34                      # 0x22
	.long	15                      # 0xf
	.long	29                      # 0x1d
	.long	15                      # 0xf
	.long	24                      # 0x18
	.long	25                      # 0x19
	.long	34                      # 0x22
	.long	22                      # 0x16
	.long	31                      # 0x1f
	.long	16                      # 0x10
	.long	35                      # 0x23
	.long	18                      # 0x12
	.long	31                      # 0x1f
	.long	28                      # 0x1c
	.long	33                      # 0x21
	.long	41                      # 0x29
	.long	36                      # 0x24
	.long	28                      # 0x1c
	.long	27                      # 0x1b
	.long	47                      # 0x2f
	.long	21                      # 0x15
	.long	62                      # 0x3e
	.long	18                      # 0x12
	.long	31                      # 0x1f
	.long	19                      # 0x13
	.long	26                      # 0x1a
	.long	36                      # 0x24
	.long	24                      # 0x18
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	24                      # 0x18
	.long	23                      # 0x17
	.long	27                      # 0x1b
	.long	16                      # 0x10
	.long	24                      # 0x18
	.long	30                      # 0x1e
	.long	31                      # 0x1f
	.long	29                      # 0x1d
	.long	22                      # 0x16
	.long	41                      # 0x29
	.long	22                      # 0x16
	.long	42                      # 0x2a
	.long	16                      # 0x10
	.long	60                      # 0x3c
	.long	15                      # 0xf
	.long	52                      # 0x34
	.long	14                      # 0xe
	.long	60                      # 0x3c
	.long	3                       # 0x3
	.long	78                      # 0x4e
	.long	4294967280              # 0xfffffff0
	.long	123                     # 0x7b
	.long	21                      # 0x15
	.long	53                      # 0x35
	.long	22                      # 0x16
	.long	56                      # 0x38
	.long	25                      # 0x19
	.long	61                      # 0x3d
	.size	INIT_FLD_LAST_P, 2880

	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
