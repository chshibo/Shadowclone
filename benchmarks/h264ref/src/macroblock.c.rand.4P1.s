	.text
	.file	"macroblock.c"
	.globl	set_MB_parameters       # -- Begin function set_MB_parameters
	.p2align	4, 0x90
	.type	set_MB_parameters,@function
set_MB_parameters:                      # @set_MB_parameters
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 12(%rcx)
	movl	-4(%rbp), %edi
	movq	img, %rsi
	addq	$136, %rsi
	movq	img, %rdx
	addq	$140, %rdx
	callq	get_mb_block_pos
	movq	img, %rax
	movl	136(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 144(%rcx)
	movq	img, %rax
	movl	140(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 148(%rcx)
	movq	img, %rax
	movl	144(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 152(%rcx)
	movq	img, %rax
	movl	148(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 156(%rcx)
	movq	img, %rax
	movl	152(%rax), %eax
	movq	img, %rcx
	movl	%eax, 168(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB0_11
# %bb.1:                                # %if.then
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB0_9
# %bb.2:                                # %if.then10
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB0_4
# %bb.3:                                # %cond.true
	movq	imgY_org_bot, %rax
	jmp	.LBB0_5
.LBB0_4:                                # %cond.false
	movq	imgY_org_top, %rax
.LBB0_5:                                # %cond.end
	movq	%rax, imgY_org
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB0_7
# %bb.6:                                # %cond.true14
	movq	imgUV_org_bot, %rax
	jmp	.LBB0_8
.LBB0_7:                                # %cond.false15
	movq	imgUV_org_top, %rax
.LBB0_8:                                # %cond.end16
	movq	%rax, imgUV_org
	movq	img, %rax
	movl	140(%rax), %eax
	sarl	$1, %eax
	shll	$4, %eax
	movq	img, %rcx
	movl	%eax, 172(%rcx)
	jmp	.LBB0_10
.LBB0_9:                                # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	img, %rax
	movl	148(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 172(%rcx)
.LBB0_10:                               # %if.end
	jmp	.LBB0_12
.LBB0_11:                               # %if.else23
	movq	img, %rax
	movl	148(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 172(%rcx)
.LBB0_12:                               # %if.end27
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB0_14
# %bb.13:                               # %if.then28
	movq	img, %rax
	movl	152(%rax), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rcx
	movl	%eax, 160(%rcx)
	movq	img, %rax
	movl	156(%rax), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rcx
	movl	%eax, 164(%rcx)
	movq	img, %rax
	movl	168(%rax), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rcx
	movl	%eax, 176(%rcx)
	movq	img, %rax
	movl	172(%rax), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rcx
	movl	%eax, 180(%rcx)
.LBB0_14:                               # %if.end42
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end0:
	.size	set_MB_parameters, .Lfunc_end0-set_MB_parameters
	.cfi_endproc
                                        # -- End function
	.globl	clip1a                  # -- Begin function clip1a
	.p2align	4, 0x90
	.type	clip1a,@function
clip1a:                                 # @clip1a
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB1_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB1_6
.LBB1_2:                                # %cond.false
	cmpl	$0, -4(%rbp)
	jge	.LBB1_4
# %bb.3:                                # %cond.true3
	xorl	%eax, %eax
	jmp	.LBB1_5
.LBB1_4:                                # %cond.false4
	movl	-4(%rbp), %eax
.LBB1_5:                                # %cond.end
.LBB1_6:                                # %cond.end5
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end1:
	.size	clip1a, .Lfunc_end1-clip1a
	.cfi_endproc
                                        # -- End function
	.globl	clip1a_chr              # -- Begin function clip1a_chr
	.p2align	4, 0x90
	.type	clip1a_chr,@function
clip1a_chr:                             # @clip1a_chr
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB2_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB2_6
.LBB2_2:                                # %cond.false
	cmpl	$0, -4(%rbp)
	jge	.LBB2_4
# %bb.3:                                # %cond.true3
	xorl	%eax, %eax
	jmp	.LBB2_5
.LBB2_4:                                # %cond.false4
	movl	-4(%rbp), %eax
.LBB2_5:                                # %cond.end
.LBB2_6:                                # %cond.end5
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end2:
	.size	clip1a_chr, .Lfunc_end2-clip1a_chr
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock  # -- Begin function proceed2nextMacroblock
	.p2align	4, 0x90
	.type	proceed2nextMacroblock,@function
proceed2nextMacroblock:                 # @proceed2nextMacroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB3_5
# %bb.1:                                # %func_proceed2nextMacroblock.21
	callq	proceed2nextMacroblock.21
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_proceed2nextMacroblock.33
	.cfi_def_cfa %rbp, 16
	callq	proceed2nextMacroblock.33
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_proceed2nextMacroblock.94
	.cfi_def_cfa %rbp, 16
	callq	proceed2nextMacroblock.94
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_proceed2nextMacroblock.96
	.cfi_def_cfa %rbp, 16
	callq	proceed2nextMacroblock.96
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
	jmp	.LBB3_4
.Lfunc_end3:
	.size	proceed2nextMacroblock, .Lfunc_end3-proceed2nextMacroblock
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock        # -- Begin function start_macroblock
	.p2align	4, 0x90
	.type	start_macroblock,@function
start_macroblock:                       # @start_macroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB4_5
# %bb.1:                                # %func_start_macroblock.75
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.75
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_start_macroblock.80
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.80
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_start_macroblock.125
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.125
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_start_macroblock.133
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.133
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB4_3
	jmp	.LBB4_4
.Lfunc_end4:
	.size	start_macroblock, .Lfunc_end4-start_macroblock
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock    # -- Begin function terminate_macroblock
	.p2align	4, 0x90
	.type	terminate_macroblock,@function
terminate_macroblock:                   # @terminate_macroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB5_5
# %bb.1:                                # %func_terminate_macroblock.77
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.77
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_terminate_macroblock.81
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.81
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_terminate_macroblock.112
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.112
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_terminate_macroblock.121
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.121
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
	jmp	.LBB5_4
.Lfunc_end5:
	.size	terminate_macroblock, .Lfunc_end5-terminate_macroblock
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big           # -- Begin function slice_too_big
	.p2align	4, 0x90
	.type	slice_too_big,@function
slice_too_big:                          # @slice_too_big
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB6_5
# %bb.1:                                # %func_slice_too_big.10
	movl	%ebx, %edi
	callq	slice_too_big.10
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_slice_too_big.35
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	slice_too_big.35
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_slice_too_big.50
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	slice_too_big.50
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_slice_too_big.74
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	slice_too_big.74
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
	jmp	.LBB6_4
.Lfunc_end6:
	.size	slice_too_big, .Lfunc_end6-slice_too_big
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4 # -- Begin function OneComponentLumaPrediction4x4
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4,@function
OneComponentLumaPrediction4x4:          # @OneComponentLumaPrediction4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, -48(%rbp)          # 8-byte Spill
	movl	%r8d, %r12d
	movq	%rcx, %r13
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB7_5
# %bb.1:                                # %func_OneComponentLumaPrediction4x4.114
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movswl	%r12w, %r8d
	movq	-48(%rbp), %r9          # 8-byte Reload
	callq	OneComponentLumaPrediction4x4.114
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_OneComponentLumaPrediction4x4.139
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movswl	%r12w, %r8d
	callq	OneComponentLumaPrediction4x4.139
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_OneComponentLumaPrediction4x4.143
	.cfi_def_cfa %rbp, 16
	movswl	%r12w, %r8d
	callq	OneComponentLumaPrediction4x4.143
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_OneComponentLumaPrediction4x4.144
	.cfi_def_cfa %rbp, 16
	movswl	%r12w, %r8d
	callq	OneComponentLumaPrediction4x4.144
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	-48(%rbp), %r9          # 8-byte Reload
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movq	%r13, %rcx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movq	%r15, %rdi
	je	.LBB7_3
	jmp	.LBB7_4
.Lfunc_end7:
	.size	OneComponentLumaPrediction4x4, .Lfunc_end7-OneComponentLumaPrediction4x4
	.cfi_endproc
                                        # -- End function
	.globl	copyblock4x4            # -- Begin function copyblock4x4
	.p2align	4, 0x90
	.type	copyblock4x4,@function
copyblock4x4:                           # @copyblock4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB8_2
# %bb.1:                                # %func_copyblock4x4.19
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	copyblock4x4.19
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_copyblock4x4.29
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	copyblock4x4.29
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end8:
	.size	copyblock4x4, .Lfunc_end8-copyblock4x4
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4       # -- Begin function LumaPrediction4x4
	.p2align	4, 0x90
	.type	LumaPrediction4x4,@function
LumaPrediction4x4:                      # @LumaPrediction4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB9_5
# %bb.1:                                # %func_LumaPrediction4x4.22
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movswl	-44(%rbp), %r9d         # 2-byte Folded Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.22
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_2:                                # %func_LumaPrediction4x4.27
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movswl	%r15w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.27
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_3:                                # %func_LumaPrediction4x4.40
	.cfi_def_cfa %rbp, 16
	movswl	%ax, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.40
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_4:                                # %func_LumaPrediction4x4.134
	.cfi_def_cfa %rbp, 16
	movswl	%ax, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.134
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	-44(%rbp), %r15d        # 4-byte Reload
	movw	16(%rbp), %r10w
	cmpl	$1, %eax
	je	.LBB9_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r15d, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	je	.LBB9_3
	jmp	.LBB9_4
.Lfunc_end9:
	.size	LumaPrediction4x4, .Lfunc_end9-LumaPrediction4x4
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi     # -- Begin function LumaPrediction4x4Bi
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi,@function
LumaPrediction4x4Bi:                    # @LumaPrediction4x4Bi
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB10_5
# %bb.1:                                # %func_LumaPrediction4x4Bi.1
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movswl	-44(%rbp), %r9d         # 2-byte Folded Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaPrediction4x4Bi.1
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_LumaPrediction4x4Bi.34
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movswl	%r15w, %r9d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi.34
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_3:                               # %func_LumaPrediction4x4Bi.46
	.cfi_def_cfa %rbp, 16
	movswl	%ax, %r9d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi.46
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_4:                               # %func_LumaPrediction4x4Bi.113
	.cfi_def_cfa %rbp, 16
	movswl	%ax, %r9d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi.113
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movw	16(%rbp), %r11w
	movl	-44(%rbp), %r15d        # 4-byte Reload
	movl	24(%rbp), %r10d
	cmpl	$1, %eax
	je	.LBB10_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r15d, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	je	.LBB10_3
	jmp	.LBB10_4
.Lfunc_end10:
	.size	LumaPrediction4x4Bi, .Lfunc_end10-LumaPrediction4x4Bi
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8   # -- Begin function LumaResidualCoding8x8
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8,@function
LumaResidualCoding8x8:                  # @LumaResidualCoding8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movq	%rsi, %r14
	movq	%rdi, %r15
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB11_5
# %bb.1:                                # %func_LumaResidualCoding8x8.2
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movswl	%r13w, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.2
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_2:                               # %func_LumaResidualCoding8x8.3
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movswl	%r13w, %ecx
	movl	%r12d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.3
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_3:                               # %func_LumaResidualCoding8x8.5
	.cfi_def_cfa %rbp, 16
	movswl	%r13w, %ecx
	cwtl
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.5
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_4:                               # %func_LumaResidualCoding8x8.9
	.cfi_def_cfa %rbp, 16
	movswl	%r13w, %ecx
	cwtl
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.9
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movw	16(%rbp), %r11w
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movw	24(%rbp), %r10w
	cmpl	$1, %eax
	je	.LBB11_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movw	%r11w, %ax
	movl	%r12d, %r8d
	movl	%ebx, %edx
	movq	%r14, %rsi
	movq	%r15, %rdi
	je	.LBB11_3
	jmp	.LBB11_4
.Lfunc_end11:
	.size	LumaResidualCoding8x8, .Lfunc_end11-LumaResidualCoding8x8
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4     # -- Begin function ChromaPrediction4x4
	.p2align	4, 0x90
	.type	ChromaPrediction4x4,@function
ChromaPrediction4x4:                    # @ChromaPrediction4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB12_5
# %bb.1:                                # %func_ChromaPrediction4x4.14
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.14
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_2:                               # %func_ChromaPrediction4x4.42
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.42
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_3:                               # %func_ChromaPrediction4x4.51
	.cfi_def_cfa %rbp, 16
	cwtl
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.51
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_4:                               # %func_ChromaPrediction4x4.88
	.cfi_def_cfa %rbp, 16
	cwtl
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.88
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movw	16(%rbp), %r11w
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movw	24(%rbp), %r10w
	cmpl	$1, %eax
	je	.LBB12_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movw	%r11w, %ax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r15d, %edi
	je	.LBB12_3
	jmp	.LBB12_4
.Lfunc_end12:
	.size	ChromaPrediction4x4, .Lfunc_end12-ChromaPrediction4x4
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe     # -- Begin function SetModesAndRefframe
	.p2align	4, 0x90
	.type	SetModesAndRefframe,@function
SetModesAndRefframe:                    # @SetModesAndRefframe
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, -48(%rbp)          # 8-byte Spill
	movq	%r8, %r12
	movq	%rcx, %r13
	movq	%rdx, %rbx
	movq	%rsi, %r14
	movl	%edi, %r15d
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB13_5
# %bb.1:                                # %func_SetModesAndRefframe.86
	movl	%r15d, %edi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movq	%r13, %rcx
	movq	%r12, %r8
	movq	-48(%rbp), %r9          # 8-byte Reload
	callq	SetModesAndRefframe.86
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_2:                               # %func_SetModesAndRefframe.117
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	SetModesAndRefframe.117
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_3:                               # %func_SetModesAndRefframe.127
	.cfi_def_cfa %rbp, 16
	callq	SetModesAndRefframe.127
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_4:                               # %func_SetModesAndRefframe.128
	.cfi_def_cfa %rbp, 16
	callq	SetModesAndRefframe.128
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	-48(%rbp), %r9          # 8-byte Reload
	cmpl	$1, %eax
	je	.LBB13_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movq	%r12, %r8
	movq	%r13, %rcx
	movq	%rbx, %rdx
	movq	%r14, %rsi
	movl	%r15d, %edi
	je	.LBB13_3
	jmp	.LBB13_4
.Lfunc_end13:
	.size	SetModesAndRefframe, .Lfunc_end13-SetModesAndRefframe
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding      # -- Begin function LumaResidualCoding
	.p2align	4, 0x90
	.type	LumaResidualCoding,@function
LumaResidualCoding:                     # @LumaResidualCoding
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB14_5
# %bb.1:                                # %func_LumaResidualCoding.12
	callq	LumaResidualCoding.12
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_2:                               # %func_LumaResidualCoding.48
	.cfi_def_cfa %rbp, 16
	callq	LumaResidualCoding.48
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_3:                               # %func_LumaResidualCoding.65
	.cfi_def_cfa %rbp, 16
	callq	LumaResidualCoding.65
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_4:                               # %func_LumaResidualCoding.95
	.cfi_def_cfa %rbp, 16
	callq	LumaResidualCoding.95
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB14_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB14_3
	jmp	.LBB14_4
.Lfunc_end14:
	.size	LumaResidualCoding, .Lfunc_end14-LumaResidualCoding
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision       # -- Begin function TransformDecision
	.p2align	4, 0x90
	.type	TransformDecision,@function
TransformDecision:                      # @TransformDecision
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB15_5
# %bb.1:                                # %func_TransformDecision.15
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.15
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_2:                               # %func_TransformDecision.39
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.39
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_3:                               # %func_TransformDecision.44
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.44
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_4:                               # %func_TransformDecision.87
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.87
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB15_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB15_3
	jmp	.LBB15_4
.Lfunc_end15:
	.size	TransformDecision, .Lfunc_end15-TransformDecision
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4 # -- Begin function OneComponentChromaPrediction4x4
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4,@function
OneComponentChromaPrediction4x4:        # @OneComponentChromaPrediction4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movq	%rcx, %r13
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB16_5
# %bb.1:                                # %func_OneComponentChromaPrediction4x4.107
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movl	%r12d, %r8d
	movswl	-44(%rbp), %r9d         # 2-byte Folded Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.107
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_2:                               # %func_OneComponentChromaPrediction4x4.108
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movl	%r12d, %r8d
	movswl	%r15w, %r9d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.108
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_3:                               # %func_OneComponentChromaPrediction4x4.129
	.cfi_def_cfa %rbp, 16
	movswl	%ax, %r9d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.129
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_4:                               # %func_OneComponentChromaPrediction4x4.136
	.cfi_def_cfa %rbp, 16
	movswl	%ax, %r9d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.136
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	16(%rbp), %r11d
	movl	-44(%rbp), %r15d        # 4-byte Reload
	movl	24(%rbp), %r10d
	cmpl	$1, %eax
	je	.LBB16_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r15d, %eax
	movl	%r12d, %r8d
	movq	%r13, %rcx
	movl	%ebx, %edx
	movl	%r14d, %esi
	je	.LBB16_3
	jmp	.LBB16_4
.Lfunc_end16:
	.size	OneComponentChromaPrediction4x4, .Lfunc_end16-OneComponentChromaPrediction4x4
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4 # -- Begin function IntraChromaPrediction4x4
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4,@function
IntraChromaPrediction4x4:               # @IntraChromaPrediction4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB17_5
# %bb.1:                                # %func_IntraChromaPrediction4x4.20
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.20
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_2:                               # %func_IntraChromaPrediction4x4.55
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.55
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_3:                               # %func_IntraChromaPrediction4x4.59
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.59
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_4:                               # %func_IntraChromaPrediction4x4.73
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.73
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB17_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB17_3
	jmp	.LBB17_4
.Lfunc_end17:
	.size	IntraChromaPrediction4x4, .Lfunc_end17-IntraChromaPrediction4x4
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding    # -- Begin function ChromaResidualCoding
	.p2align	4, 0x90
	.type	ChromaResidualCoding,@function
ChromaResidualCoding:                   # @ChromaResidualCoding
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB18_5
# %bb.1:                                # %func_ChromaResidualCoding.26
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.26
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_2:                               # %func_ChromaResidualCoding.68
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.68
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_3:                               # %func_ChromaResidualCoding.82
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.82
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_4:                               # %func_ChromaResidualCoding.89
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.89
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB18_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB18_3
	jmp	.LBB18_4
.Lfunc_end18:
	.size	ChromaResidualCoding, .Lfunc_end18-ChromaResidualCoding
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction   # -- Begin function IntraChromaPrediction
	.p2align	4, 0x90
	.type	IntraChromaPrediction,@function
IntraChromaPrediction:                  # @IntraChromaPrediction
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB19_5
# %bb.1:                                # %func_IntraChromaPrediction.28
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.28
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_2:                               # %func_IntraChromaPrediction.52
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.52
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_3:                               # %func_IntraChromaPrediction.57
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.57
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_4:                               # %func_IntraChromaPrediction.72
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.72
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB19_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB19_3
	jmp	.LBB19_4
.Lfunc_end19:
	.size	IntraChromaPrediction, .Lfunc_end19-IntraChromaPrediction
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef                 # -- Begin function ZeroRef
	.p2align	4, 0x90
	.type	ZeroRef,@function
ZeroRef:                                # @ZeroRef
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB20_5
# %bb.1:                                # %func_ZeroRef.91
	movq	%rbx, %rdi
	callq	ZeroRef.91
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_2:                               # %func_ZeroRef.138
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ZeroRef.138
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_3:                               # %func_ZeroRef.142
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ZeroRef.142
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_4:                               # %func_ZeroRef.145
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ZeroRef.145
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB20_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB20_3
	jmp	.LBB20_4
.Lfunc_end20:
	.size	ZeroRef, .Lfunc_end20-ZeroRef
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value            # -- Begin function MBType2Value
	.p2align	4, 0x90
	.type	MBType2Value,@function
MBType2Value:                           # @MBType2Value
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB21_5
# %bb.1:                                # %func_MBType2Value.53
	movq	%rbx, %rdi
	callq	MBType2Value.53
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_2:                               # %func_MBType2Value.79
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	MBType2Value.79
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_3:                               # %func_MBType2Value.131
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	MBType2Value.131
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_4:                               # %func_MBType2Value.148
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	MBType2Value.148
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB21_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB21_3
	jmp	.LBB21_4
.Lfunc_end21:
	.size	MBType2Value, .Lfunc_end21-MBType2Value
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes      # -- Begin function writeIntra4x4Modes
	.p2align	4, 0x90
	.type	writeIntra4x4Modes,@function
writeIntra4x4Modes:                     # @writeIntra4x4Modes
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB22_5
# %bb.1:                                # %func_writeIntra4x4Modes.11
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.11
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_2:                               # %func_writeIntra4x4Modes.45
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.45
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_3:                               # %func_writeIntra4x4Modes.64
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.64
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_4:                               # %func_writeIntra4x4Modes.76
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.76
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB22_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB22_3
	jmp	.LBB22_4
.Lfunc_end22:
	.size	writeIntra4x4Modes, .Lfunc_end22-writeIntra4x4Modes
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value            # -- Begin function B8Mode2Value
	.p2align	4, 0x90
	.type	B8Mode2Value,@function
B8Mode2Value:                           # @B8Mode2Value
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB23_5
# %bb.1:                                # %func_B8Mode2Value.7
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	B8Mode2Value.7
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_2:                               # %func_B8Mode2Value.37
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	B8Mode2Value.37
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_3:                               # %func_B8Mode2Value.90
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	B8Mode2Value.90
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_4:                               # %func_B8Mode2Value.115
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	B8Mode2Value.115
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB23_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB23_3
	jmp	.LBB23_4
.Lfunc_end23:
	.size	B8Mode2Value, .Lfunc_end23-B8Mode2Value
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer            # -- Begin function writeMBLayer
	.p2align	4, 0x90
	.type	writeMBLayer,@function
writeMBLayer:                           # @writeMBLayer
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB24_5
# %bb.1:                                # %func_writeMBLayer.24
	movl	%ebx, %edi
	callq	writeMBLayer.24
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_2:                               # %func_writeMBLayer.135
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeMBLayer.135
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_3:                               # %func_writeMBLayer.137
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeMBLayer.137
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_4:                               # %func_writeMBLayer.146
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeMBLayer.146
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB24_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB24_3
	jmp	.LBB24_4
.Lfunc_end24:
	.size	writeMBLayer, .Lfunc_end24-writeMBLayer
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit   # -- Begin function write_terminating_bit
	.p2align	4, 0x90
	.type	write_terminating_bit,@function
write_terminating_bit:                  # @write_terminating_bit
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB25_5
# %bb.1:                                # %func_write_terminating_bit.58
	movswl	%bx, %edi
	callq	write_terminating_bit.58
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_2:                               # %func_write_terminating_bit.61
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	callq	write_terminating_bit.61
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_3:                               # %func_write_terminating_bit.92
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	callq	write_terminating_bit.92
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_4:                               # %func_write_terminating_bit.130
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	callq	write_terminating_bit.130
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB25_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB25_3
	jmp	.LBB25_4
.Lfunc_end25:
	.size	write_terminating_bit, .Lfunc_end25-write_terminating_bit
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode # -- Begin function writeChromaIntraPredMode
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode,@function
writeChromaIntraPredMode:               # @writeChromaIntraPredMode
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB26_5
# %bb.1:                                # %func_writeChromaIntraPredMode.18
	callq	writeChromaIntraPredMode.18
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_2:                               # %func_writeChromaIntraPredMode.38
	.cfi_def_cfa %rbp, 16
	callq	writeChromaIntraPredMode.38
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_3:                               # %func_writeChromaIntraPredMode.60
	.cfi_def_cfa %rbp, 16
	callq	writeChromaIntraPredMode.60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_4:                               # %func_writeChromaIntraPredMode.104
	.cfi_def_cfa %rbp, 16
	callq	writeChromaIntraPredMode.104
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB26_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB26_3
	jmp	.LBB26_4
.Lfunc_end26:
	.size	writeChromaIntraPredMode, .Lfunc_end26-writeChromaIntraPredMode
	.cfi_endproc
                                        # -- End function
	.globl	set_last_dquant         # -- Begin function set_last_dquant
	.p2align	4, 0x90
	.type	set_last_dquant,@function
set_last_dquant:                        # @set_last_dquant
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB27_4
# %bb.1:                                # %land.lhs.true
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB27_4
# %bb.2:                                # %land.lhs.true3
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB27_4
# %bb.3:                                # %land.lhs.true6
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB27_9
.LBB27_4:                               # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB27_9
# %bb.5:                                # %lor.lhs.false11
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB27_9
# %bb.6:                                # %lor.lhs.false14
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB27_9
# %bb.7:                                # %lor.lhs.false17
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB27_10
# %bb.8:                                # %land.lhs.true19
	movq	-8(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB27_10
.LBB27_9:                               # %if.then
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, last_dquant
	jmp	.LBB27_11
.LBB27_10:                              # %if.else
	movl	$0, last_dquant
.LBB27_11:                              # %if.end
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end27:
	.size	set_last_dquant, .Lfunc_end27-set_last_dquant
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock    # -- Begin function write_one_macroblock
	.p2align	4, 0x90
	.type	write_one_macroblock,@function
write_one_macroblock:                   # @write_one_macroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB28_5
# %bb.1:                                # %func_write_one_macroblock.13
	movl	%ebx, %edi
	callq	write_one_macroblock.13
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_2:                               # %func_write_one_macroblock.36
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	write_one_macroblock.36
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_3:                               # %func_write_one_macroblock.84
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	write_one_macroblock.84
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_4:                               # %func_write_one_macroblock.118
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	write_one_macroblock.118
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB28_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB28_3
	jmp	.LBB28_4
.Lfunc_end28:
	.size	write_one_macroblock, .Lfunc_end28-write_one_macroblock
	.cfi_endproc
                                        # -- End function
	.globl	BType2CtxRef            # -- Begin function BType2CtxRef
	.p2align	4, 0x90
	.type	BType2CtxRef,@function
BType2CtxRef:                           # @BType2CtxRef
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB29_2
# %bb.1:                                # %func_BType2CtxRef.8
	movl	%ebx, %edi
	callq	BType2CtxRef.8
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_2:                               # %func_BType2CtxRef.67
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	BType2CtxRef.67
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end29:
	.size	BType2CtxRef, .Lfunc_end29-BType2CtxRef
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame     # -- Begin function writeReferenceFrame
	.p2align	4, 0x90
	.type	writeReferenceFrame,@function
writeReferenceFrame:                    # @writeReferenceFrame
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB30_5
# %bb.1:                                # %func_writeReferenceFrame.41
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.41
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_2:                               # %func_writeReferenceFrame.47
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.47
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_3:                               # %func_writeReferenceFrame.63
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.63
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_4:                               # %func_writeReferenceFrame.105
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.105
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB30_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB30_3
	jmp	.LBB30_4
.Lfunc_end30:
	.size	writeReferenceFrame, .Lfunc_end30-writeReferenceFrame
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8    # -- Begin function writeMotionVector8x8
	.p2align	4, 0x90
	.type	writeMotionVector8x8,@function
writeMotionVector8x8:                   # @writeMotionVector8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB31_5
# %bb.1:                                # %func_writeMotionVector8x8.25
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8.25
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_2:                               # %func_writeMotionVector8x8.70
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	%r10d, (%rsp)
	callq	writeMotionVector8x8.70
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_3:                               # %func_writeMotionVector8x8.78
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8.78
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_4:                               # %func_writeMotionVector8x8.123
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8.123
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	16(%rbp), %r10d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB31_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r10d, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r15d, %edi
	je	.LBB31_3
	jmp	.LBB31_4
.Lfunc_end31:
	.size	writeMotionVector8x8, .Lfunc_end31-writeMotionVector8x8
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL     # -- Begin function writeMotionInfo2NAL
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL,@function
writeMotionInfo2NAL:                    # @writeMotionInfo2NAL
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB32_5
# %bb.1:                                # %func_writeMotionInfo2NAL.32
	callq	writeMotionInfo2NAL.32
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_2:                               # %func_writeMotionInfo2NAL.83
	.cfi_def_cfa %rbp, 16
	callq	writeMotionInfo2NAL.83
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_3:                               # %func_writeMotionInfo2NAL.97
	.cfi_def_cfa %rbp, 16
	callq	writeMotionInfo2NAL.97
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_4:                               # %func_writeMotionInfo2NAL.122
	.cfi_def_cfa %rbp, 16
	callq	writeMotionInfo2NAL.122
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB32_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB32_3
	jmp	.LBB32_4
.Lfunc_end32:
	.size	writeMotionInfo2NAL, .Lfunc_end32-writeMotionInfo2NAL
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff        # -- Begin function writeChromaCoeff
	.p2align	4, 0x90
	.type	writeChromaCoeff,@function
writeChromaCoeff:                       # @writeChromaCoeff
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB33_5
# %bb.1:                                # %func_writeChromaCoeff.30
	callq	writeChromaCoeff.30
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_2:                               # %func_writeChromaCoeff.119
	.cfi_def_cfa %rbp, 16
	callq	writeChromaCoeff.119
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_3:                               # %func_writeChromaCoeff.141
	.cfi_def_cfa %rbp, 16
	callq	writeChromaCoeff.141
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_4:                               # %func_writeChromaCoeff.147
	.cfi_def_cfa %rbp, 16
	callq	writeChromaCoeff.147
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB33_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB33_3
	jmp	.LBB33_4
.Lfunc_end33:
	.size	writeChromaCoeff, .Lfunc_end33-writeChromaCoeff
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC     # -- Begin function writeCoeff4x4_CAVLC
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC,@function
writeCoeff4x4_CAVLC:                    # @writeCoeff4x4_CAVLC
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%ecx, %r14d
	movl	%edx, %r15d
	movl	%esi, %r12d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB34_5
# %bb.1:                                # %func_writeCoeff4x4_CAVLC.17
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.17
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_2:                               # %func_writeCoeff4x4_CAVLC.99
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.99
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_3:                               # %func_writeCoeff4x4_CAVLC.109
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.109
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_4:                               # %func_writeCoeff4x4_CAVLC.111
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.111
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB34_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB34_3
	jmp	.LBB34_4
.Lfunc_end34:
	.size	writeCoeff4x4_CAVLC, .Lfunc_end34-writeCoeff4x4_CAVLC
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC # -- Begin function writeLumaCoeff4x4_CABAC
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC,@function
writeLumaCoeff4x4_CABAC:                # @writeLumaCoeff4x4_CABAC
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB35_5
# %bb.1:                                # %func_writeLumaCoeff4x4_CABAC.49
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.49
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_2:                               # %func_writeLumaCoeff4x4_CABAC.71
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.71
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_3:                               # %func_writeLumaCoeff4x4_CABAC.102
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.102
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_4:                               # %func_writeLumaCoeff4x4_CABAC.103
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.103
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB35_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB35_3
	jmp	.LBB35_4
.Lfunc_end35:
	.size	writeLumaCoeff4x4_CABAC, .Lfunc_end35-writeLumaCoeff4x4_CABAC
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC # -- Begin function writeLumaCoeff8x8_CABAC
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC,@function
writeLumaCoeff8x8_CABAC:                # @writeLumaCoeff8x8_CABAC
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB36_5
# %bb.1:                                # %func_writeLumaCoeff8x8_CABAC.85
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.85
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_2:                               # %func_writeLumaCoeff8x8_CABAC.120
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.120
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_3:                               # %func_writeLumaCoeff8x8_CABAC.124
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.124
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_4:                               # %func_writeLumaCoeff8x8_CABAC.132
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.132
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB36_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB36_3
	jmp	.LBB36_4
.Lfunc_end36:
	.size	writeLumaCoeff8x8_CABAC, .Lfunc_end36-writeLumaCoeff8x8_CABAC
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8       # -- Begin function writeLumaCoeff8x8
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8,@function
writeLumaCoeff8x8:                      # @writeLumaCoeff8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB37_5
# %bb.1:                                # %func_writeLumaCoeff8x8.43
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.43
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_2:                               # %func_writeLumaCoeff8x8.54
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.54
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_3:                               # %func_writeLumaCoeff8x8.110
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.110
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_4:                               # %func_writeLumaCoeff8x8.126
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.126
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB37_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB37_3
	jmp	.LBB37_4
.Lfunc_end37:
	.size	writeLumaCoeff8x8, .Lfunc_end37-writeLumaCoeff8x8
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff    # -- Begin function writeCBPandLumaCoeff
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff,@function
writeCBPandLumaCoeff:                   # @writeCBPandLumaCoeff
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB38_5
# %bb.1:                                # %func_writeCBPandLumaCoeff.4
	callq	writeCBPandLumaCoeff.4
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_2:                               # %func_writeCBPandLumaCoeff.6
	.cfi_def_cfa %rbp, 16
	callq	writeCBPandLumaCoeff.6
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_3:                               # %func_writeCBPandLumaCoeff.101
	.cfi_def_cfa %rbp, 16
	callq	writeCBPandLumaCoeff.101
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_4:                               # %func_writeCBPandLumaCoeff.140
	.cfi_def_cfa %rbp, 16
	callq	writeCBPandLumaCoeff.140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB38_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB38_3
	jmp	.LBB38_4
.Lfunc_end38:
	.size	writeCBPandLumaCoeff, .Lfunc_end38-writeCBPandLumaCoeff
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz             # -- Begin function predict_nnz
	.p2align	4, 0x90
	.type	predict_nnz,@function
predict_nnz:                            # @predict_nnz
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB39_5
# %bb.1:                                # %func_predict_nnz.93
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.93
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_2:                               # %func_predict_nnz.98
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.98
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_3:                               # %func_predict_nnz.106
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.106
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_4:                               # %func_predict_nnz.116
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.116
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB39_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB39_3
	jmp	.LBB39_4
.Lfunc_end39:
	.size	predict_nnz, .Lfunc_end39-predict_nnz
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma      # -- Begin function predict_nnz_chroma
	.p2align	4, 0x90
	.type	predict_nnz_chroma,@function
predict_nnz_chroma:                     # @predict_nnz_chroma
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB40_5
# %bb.1:                                # %func_predict_nnz_chroma.16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.16
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_2:                               # %func_predict_nnz_chroma.23
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.23
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_3:                               # %func_predict_nnz_chroma.66
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.66
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_4:                               # %func_predict_nnz_chroma.69
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.69
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB40_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB40_3
	jmp	.LBB40_4
.Lfunc_end40:
	.size	predict_nnz_chroma, .Lfunc_end40-predict_nnz_chroma
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16          # -- Begin function find_sad_16x16
	.p2align	4, 0x90
	.type	find_sad_16x16,@function
find_sad_16x16:                         # @find_sad_16x16
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB41_5
# %bb.1:                                # %func_find_sad_16x16.31
	movq	%rbx, %rdi
	callq	find_sad_16x16.31
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_2:                               # %func_find_sad_16x16.56
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	find_sad_16x16.56
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_3:                               # %func_find_sad_16x16.62
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	find_sad_16x16.62
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_4:                               # %func_find_sad_16x16.100
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	find_sad_16x16.100
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB41_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB41_3
	jmp	.LBB41_4
.Lfunc_end41:
	.size	find_sad_16x16, .Lfunc_end41-find_sad_16x16
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.1   # -- Begin function LumaPrediction4x4Bi.1
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.1,@function
LumaPrediction4x4Bi.1:                  # @LumaPrediction4x4Bi.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$425643244, -80(%rbp)   # imm = 0x195ECCEC
	movl	%edi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -76(%rbp)
	movl	%r8d, -84(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -64(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB42_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB42_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB42_6
.LBB42_3:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB42_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB42_5:                               # %land.end
.LBB42_6:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB42_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB42_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB42_10
.LBB42_9:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB42_10
.LBB42_10:                              # %cond.end
	movl	%ecx, -68(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB42_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB42_13
.LBB42_12:                              # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB42_13:                              # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB42_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB42_16
.LBB42_15:                              # %if.then
	movl	-60(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB42_16:                              # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB42_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB42_19
.LBB42_18:                              # %if.then39
	movl	-60(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB42_19:                              # %if.end52
	cmpl	$0, -72(%rbp)
	je	.LBB42_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB42_30
# %bb.21:                               # %if.then56
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB42_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_24 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB42_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB42_22 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB42_24:                              # %for.cond58
                                        #   Parent Loop BB42_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB42_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB42_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB42_24 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_24
.LBB42_27:                              # %for.end
                                        #   in Loop: Header=BB42_22 Depth=1
	jmp	.LBB42_28
.LBB42_28:                              # %for.inc96
                                        #   in Loop: Header=BB42_22 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_22
.LBB42_29:                              # %for.end98
	jmp	.LBB42_50
.LBB42_30:                              # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB42_40
# %bb.31:                               # %if.then101
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB42_32:                              # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_34 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB42_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB42_32 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB42_34:                              # %for.cond106
                                        #   Parent Loop BB42_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB42_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB42_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB42_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_34
.LBB42_37:                              # %for.end132
                                        #   in Loop: Header=BB42_32 Depth=1
	jmp	.LBB42_38
.LBB42_38:                              # %for.inc133
                                        #   in Loop: Header=BB42_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_32
.LBB42_39:                              # %for.end135
	jmp	.LBB42_49
.LBB42_40:                              # %if.else136
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB42_41:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_43 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB42_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB42_41 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB42_43:                              # %for.cond141
                                        #   Parent Loop BB42_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB42_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB42_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB42_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_43
.LBB42_46:                              # %for.end167
                                        #   in Loop: Header=BB42_41 Depth=1
	jmp	.LBB42_47
.LBB42_47:                              # %for.inc168
                                        #   in Loop: Header=BB42_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_41
.LBB42_48:                              # %for.end170
	jmp	.LBB42_49
.LBB42_49:                              # %if.end171
	jmp	.LBB42_50
.LBB42_50:                              # %if.end172
	jmp	.LBB42_82
.LBB42_51:                              # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB42_61
# %bb.52:                               # %if.then176
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB42_53:                              # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_55 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB42_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB42_53 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB42_55:                              # %for.cond181
                                        #   Parent Loop BB42_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB42_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB42_55 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB42_55 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_55
.LBB42_58:                              # %for.end197
                                        #   in Loop: Header=BB42_53 Depth=1
	jmp	.LBB42_59
.LBB42_59:                              # %for.inc198
                                        #   in Loop: Header=BB42_53 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_53
.LBB42_60:                              # %for.end200
	jmp	.LBB42_81
.LBB42_61:                              # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB42_71
# %bb.62:                               # %if.then204
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB42_63:                              # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_65 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB42_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB42_63 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB42_65:                              # %for.cond209
                                        #   Parent Loop BB42_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB42_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB42_65 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB42_65 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_65
.LBB42_68:                              # %for.end222
                                        #   in Loop: Header=BB42_63 Depth=1
	jmp	.LBB42_69
.LBB42_69:                              # %for.inc223
                                        #   in Loop: Header=BB42_63 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_63
.LBB42_70:                              # %for.end225
	jmp	.LBB42_80
.LBB42_71:                              # %if.else226
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB42_72:                              # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_74 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB42_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB42_72 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB42_74:                              # %for.cond231
                                        #   Parent Loop BB42_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB42_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB42_74 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB42_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_74
.LBB42_77:                              # %for.end244
                                        #   in Loop: Header=BB42_72 Depth=1
	jmp	.LBB42_78
.LBB42_78:                              # %for.inc245
                                        #   in Loop: Header=BB42_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_72
.LBB42_79:                              # %for.end247
	jmp	.LBB42_80
.LBB42_80:                              # %if.end248
	jmp	.LBB42_81
.LBB42_81:                              # %if.end249
	jmp	.LBB42_82
.LBB42_82:                              # %if.end250
	cmpl	$425643244, -80(%rbp)   # imm = 0x195ECCEC
	jne	.LBB42_84
.LBB42_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_83
.Lfunc_end42:
	.size	LumaPrediction4x4Bi.1, .Lfunc_end42-LumaPrediction4x4Bi.1
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.2 # -- Begin function LumaResidualCoding8x8.2
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.2,@function
LumaResidualCoding8x8.2:                # @LumaResidualCoding8x8.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$433389874, -124(%rbp)  # imm = 0x19D50132
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movl	%edx, -36(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -80(%rbp)
	movl	%r9d, -84(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -28(%rbp)
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -128(%rbp)
	cmpl	$0, -80(%rbp)
	jne	.LBB43_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -84(%rbp)
	jne	.LBB43_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB43_3:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB43_5
# %bb.4:                                # %if.then
	movl	$1, -128(%rbp)
.LBB43_5:                               # %if.end
	movl	$0, -60(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB43_6:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_8 Depth 2
                                        #       Child Loop BB43_11 Depth 3
                                        #         Child Loop BB43_13 Depth 4
                                        #       Child Loop BB43_19 Depth 3
                                        #         Child Loop BB43_21 Depth 4
                                        #       Child Loop BB43_29 Depth 3
                                        #         Child Loop BB43_31 Depth 4
                                        #       Child Loop BB43_40 Depth 3
                                        #         Child Loop BB43_42 Depth 4
                                        #       Child Loop BB43_57 Depth 3
                                        #         Child Loop BB43_59 Depth 4
                                        #       Child Loop BB43_67 Depth 3
                                        #         Child Loop BB43_69 Depth 4
                                        #       Child Loop BB43_84 Depth 3
                                        #         Child Loop BB43_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB43_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -68(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB43_8:                               # %for.cond9
                                        #   Parent Loop BB43_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_11 Depth 3
                                        #         Child Loop BB43_13 Depth 4
                                        #       Child Loop BB43_19 Depth 3
                                        #         Child Loop BB43_21 Depth 4
                                        #       Child Loop BB43_29 Depth 3
                                        #         Child Loop BB43_31 Depth 4
                                        #       Child Loop BB43_40 Depth 3
                                        #         Child Loop BB43_42 Depth 4
                                        #       Child Loop BB43_57 Depth 3
                                        #         Child Loop BB43_59 Depth 4
                                        #       Child Loop BB43_67 Depth 3
                                        #         Child Loop BB43_69 Depth 4
                                        #       Child Loop BB43_84 Depth 3
                                        #         Child Loop BB43_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB43_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB43_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB43_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movl	-84(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB43_11:                              # %for.cond16
                                        #   Parent Loop BB43_6 Depth=1
                                        #     Parent Loop BB43_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB43_13 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB43_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB43_11 Depth=3
	movl	$0, -16(%rbp)
.LBB43_13:                              # %for.cond20
                                        #   Parent Loop BB43_6 Depth=1
                                        #     Parent Loop BB43_8 Depth=2
                                        #       Parent Loop BB43_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB43_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB43_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB43_13 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_13
.LBB43_16:                              # %for.end
                                        #   in Loop: Header=BB43_11 Depth=3
	jmp	.LBB43_17
.LBB43_17:                              # %for.inc37
                                        #   in Loop: Header=BB43_11 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_11
.LBB43_18:                              # %for.end39
                                        #   in Loop: Header=BB43_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movl	-84(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB43_19:                              # %for.cond41
                                        #   Parent Loop BB43_6 Depth=1
                                        #     Parent Loop BB43_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB43_21 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB43_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB43_19 Depth=3
	movl	$0, -16(%rbp)
.LBB43_21:                              # %for.cond45
                                        #   Parent Loop BB43_6 Depth=1
                                        #     Parent Loop BB43_8 Depth=2
                                        #       Parent Loop BB43_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB43_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB43_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB43_21 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_21
.LBB43_24:                              # %for.end65
                                        #   in Loop: Header=BB43_19 Depth=3
	jmp	.LBB43_25
.LBB43_25:                              # %for.inc66
                                        #   in Loop: Header=BB43_19 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_19
.LBB43_26:                              # %for.end68
                                        #   in Loop: Header=BB43_8 Depth=2
	jmp	.LBB43_27
.LBB43_27:                              # %if.end69
                                        #   in Loop: Header=BB43_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-80(%rbp), %ecx
	movl	-84(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB43_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB43_8 Depth=2
	movl	$0, -12(%rbp)
.LBB43_29:                              # %for.cond74
                                        #   Parent Loop BB43_6 Depth=1
                                        #     Parent Loop BB43_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB43_31 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB43_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB43_29 Depth=3
	movl	$0, -16(%rbp)
.LBB43_31:                              # %for.cond78
                                        #   Parent Loop BB43_6 Depth=1
                                        #     Parent Loop BB43_8 Depth=2
                                        #       Parent Loop BB43_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB43_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB43_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB43_31 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_31
.LBB43_34:                              # %for.end98
                                        #   in Loop: Header=BB43_29 Depth=3
	jmp	.LBB43_35
.LBB43_35:                              # %for.inc99
                                        #   in Loop: Header=BB43_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_29
.LBB43_36:                              # %for.end101
                                        #   in Loop: Header=BB43_8 Depth=2
	jmp	.LBB43_37
.LBB43_37:                              # %if.end102
                                        #   in Loop: Header=BB43_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB43_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB43_8 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB43_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB43_8 Depth=2
	movl	$0, -12(%rbp)
.LBB43_40:                              # %for.cond108
                                        #   Parent Loop BB43_6 Depth=1
                                        #     Parent Loop BB43_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB43_42 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB43_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB43_40 Depth=3
	movl	$0, -16(%rbp)
.LBB43_42:                              # %for.cond112
                                        #   Parent Loop BB43_6 Depth=1
                                        #     Parent Loop BB43_8 Depth=2
                                        #       Parent Loop BB43_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB43_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB43_42 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB43_42 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_42
.LBB43_45:                              # %for.end137
                                        #   in Loop: Header=BB43_40 Depth=3
	jmp	.LBB43_46
.LBB43_46:                              # %for.inc138
                                        #   in Loop: Header=BB43_40 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_40
.LBB43_47:                              # %for.end140
                                        #   in Loop: Header=BB43_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB43_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB43_8 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB43_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB43_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB43_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB43_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-28(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -32(%rbp)
	jmp	.LBB43_52
.LBB43_51:                              # %if.else
                                        #   in Loop: Header=BB43_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-28(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -32(%rbp)
.LBB43_52:                              # %if.end151
                                        #   in Loop: Header=BB43_8 Depth=2
	cmpl	$0, -32(%rbp)
	je	.LBB43_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB43_8 Depth=2
	movl	-88(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-64(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB43_54:                              # %if.end157
                                        #   in Loop: Header=BB43_8 Depth=2
	jmp	.LBB43_55
.LBB43_55:                              # %if.end158
                                        #   in Loop: Header=BB43_8 Depth=2
	jmp	.LBB43_65
.LBB43_56:                              # %if.else159
                                        #   in Loop: Header=BB43_8 Depth=2
	movl	$0, -12(%rbp)
.LBB43_57:                              # %for.cond160
                                        #   Parent Loop BB43_6 Depth=1
                                        #     Parent Loop BB43_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB43_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB43_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB43_57 Depth=3
	movl	$0, -16(%rbp)
.LBB43_59:                              # %for.cond164
                                        #   Parent Loop BB43_6 Depth=1
                                        #     Parent Loop BB43_8 Depth=2
                                        #       Parent Loop BB43_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB43_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB43_59 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-60(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB43_59 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_59
.LBB43_62:                              # %for.end193
                                        #   in Loop: Header=BB43_57 Depth=3
	jmp	.LBB43_63
.LBB43_63:                              # %for.inc194
                                        #   in Loop: Header=BB43_57 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_57
.LBB43_64:                              # %for.end196
                                        #   in Loop: Header=BB43_8 Depth=2
	jmp	.LBB43_65
.LBB43_65:                              # %if.end197
                                        #   in Loop: Header=BB43_8 Depth=2
	jmp	.LBB43_95
.LBB43_66:                              # %if.else198
                                        #   in Loop: Header=BB43_8 Depth=2
	movl	$0, -12(%rbp)
.LBB43_67:                              # %for.cond199
                                        #   Parent Loop BB43_6 Depth=1
                                        #     Parent Loop BB43_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB43_69 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB43_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB43_67 Depth=3
	movl	$0, -16(%rbp)
.LBB43_69:                              # %for.cond203
                                        #   Parent Loop BB43_6 Depth=1
                                        #     Parent Loop BB43_8 Depth=2
                                        #       Parent Loop BB43_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB43_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB43_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-52(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-56(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-12(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -92(%rbp)
	movq	imgY_org, %rdx
	movl	-52(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-56(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -120(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-52(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-56(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -116(%rbp)
	movl	-116(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-92(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-120(%rbp), %eax
	subl	-96(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-96(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -72(%rbp)
	jne	.LBB43_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB43_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB43_73
.LBB43_72:                              # %if.else300
                                        #   in Loop: Header=BB43_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-60(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB43_73:                              # %if.end314
                                        #   in Loop: Header=BB43_69 Depth=4
	jmp	.LBB43_74
.LBB43_74:                              # %for.inc315
                                        #   in Loop: Header=BB43_69 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_69
.LBB43_75:                              # %for.end317
                                        #   in Loop: Header=BB43_67 Depth=3
	jmp	.LBB43_76
.LBB43_76:                              # %for.inc318
                                        #   in Loop: Header=BB43_67 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_67
.LBB43_77:                              # %for.end320
                                        #   in Loop: Header=BB43_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB43_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB43_8 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB43_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB43_8 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB43_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB43_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB43_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB43_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-28(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -32(%rbp)
	jmp	.LBB43_83
.LBB43_82:                              # %if.else334
                                        #   in Loop: Header=BB43_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-28(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -32(%rbp)
.LBB43_83:                              # %if.end336
                                        #   in Loop: Header=BB43_8 Depth=2
	movl	$0, -12(%rbp)
.LBB43_84:                              # %for.cond337
                                        #   Parent Loop BB43_6 Depth=1
                                        #     Parent Loop BB43_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB43_86 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB43_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB43_84 Depth=3
	movl	$0, -16(%rbp)
.LBB43_86:                              # %for.cond341
                                        #   Parent Loop BB43_6 Depth=1
                                        #     Parent Loop BB43_8 Depth=2
                                        #       Parent Loop BB43_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB43_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB43_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB43_86 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_86
.LBB43_89:                              # %for.end358
                                        #   in Loop: Header=BB43_84 Depth=3
	jmp	.LBB43_90
.LBB43_90:                              # %for.inc359
                                        #   in Loop: Header=BB43_84 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_84
.LBB43_91:                              # %for.end361
                                        #   in Loop: Header=BB43_8 Depth=2
	cmpl	$0, -32(%rbp)
	je	.LBB43_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB43_8 Depth=2
	movl	-88(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-64(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB43_93:                              # %if.end368
                                        #   in Loop: Header=BB43_8 Depth=2
	jmp	.LBB43_94
.LBB43_94:                              # %if.end369
                                        #   in Loop: Header=BB43_8 Depth=2
	jmp	.LBB43_95
.LBB43_95:                              # %if.end370
                                        #   in Loop: Header=BB43_8 Depth=2
	jmp	.LBB43_96
.LBB43_96:                              # %for.inc371
                                        #   in Loop: Header=BB43_8 Depth=2
	movl	-68(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -68(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB43_8
.LBB43_97:                              # %for.end374
                                        #   in Loop: Header=BB43_6 Depth=1
	jmp	.LBB43_98
.LBB43_98:                              # %for.inc375
                                        #   in Loop: Header=BB43_6 Depth=1
	movl	-60(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_6
.LBB43_99:                              # %for.end378
	cmpl	$0, -72(%rbp)
	je	.LBB43_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB43_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -76(%rbp)
	jne	.LBB43_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB43_104
# %bb.103:                              # %if.then390
	movl	-36(%rbp), %edi
	leaq	-28(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -32(%rbp)
.LBB43_104:                             # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB43_114
# %bb.105:                              # %if.then395
	movl	$0, -12(%rbp)
.LBB43_106:                             # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_108 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB43_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB43_106 Depth=1
	movl	$0, -16(%rbp)
.LBB43_108:                             # %for.cond400
                                        #   Parent Loop BB43_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB43_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB43_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB43_108 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_108
.LBB43_111:                             # %for.end417
                                        #   in Loop: Header=BB43_106 Depth=1
	jmp	.LBB43_112
.LBB43_112:                             # %for.inc418
                                        #   in Loop: Header=BB43_106 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_106
.LBB43_113:                             # %for.end420
	jmp	.LBB43_114
.LBB43_114:                             # %if.end421
	cmpl	$0, -32(%rbp)
	je	.LBB43_116
# %bb.115:                              # %if.then423
	movl	-36(%rbp), %ecx
	shll	$2, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-64(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB43_116:                             # %if.end431
	jmp	.LBB43_117
.LBB43_117:                             # %if.end432
	jmp	.LBB43_118
.LBB43_118:                             # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB43_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -76(%rbp)
	jne	.LBB43_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -28(%rbp)
	jg	.LBB43_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB43_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB43_145
.LBB43_123:                             # %if.then448
	movl	$0, -28(%rbp)
	movl	$63, %eax
	subl	-64(%rbp), %eax
	movq	-104(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-36(%rbp), %ecx
	shll	$2, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-112(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB43_124:                             # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_126 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB43_124 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB43_126:                             # %for.cond462
                                        #   Parent Loop BB43_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB43_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB43_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB43_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB43_130
.LBB43_129:                             # %if.else481
                                        #   in Loop: Header=BB43_126 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB43_130:                             # %if.end486
                                        #   in Loop: Header=BB43_126 Depth=2
	jmp	.LBB43_131
.LBB43_131:                             # %for.inc487
                                        #   in Loop: Header=BB43_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_126
.LBB43_132:                             # %for.end489
                                        #   in Loop: Header=BB43_124 Depth=1
	jmp	.LBB43_133
.LBB43_133:                             # %for.inc490
                                        #   in Loop: Header=BB43_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_124
.LBB43_134:                             # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB43_144
# %bb.135:                              # %if.then496
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB43_136:                             # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_138 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB43_136 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB43_138:                             # %for.cond502
                                        #   Parent Loop BB43_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB43_138 Depth=2
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB43_138 Depth=2
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_138
.LBB43_141:                             # %for.end509
                                        #   in Loop: Header=BB43_136 Depth=1
	jmp	.LBB43_142
.LBB43_142:                             # %for.inc510
                                        #   in Loop: Header=BB43_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_136
.LBB43_143:                             # %for.end512
	jmp	.LBB43_144
.LBB43_144:                             # %if.end513
	jmp	.LBB43_145
.LBB43_145:                             # %if.end514
	movl	-28(%rbp), %ebx
	cmpl	$433389874, -124(%rbp)  # imm = 0x19D50132
	jne	.LBB43_147
.LBB43_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_147:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_146
.Lfunc_end43:
	.size	LumaResidualCoding8x8.2, .Lfunc_end43-LumaResidualCoding8x8.2
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.3 # -- Begin function LumaResidualCoding8x8.3
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.3,@function
LumaResidualCoding8x8.3:                # @LumaResidualCoding8x8.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$2133237486, -124(%rbp) # imm = 0x7F269EEE
	movq	%rdi, -112(%rbp)
	movq	%rsi, -104(%rbp)
	movl	%edx, -28(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -76(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -120(%rbp)
	cmpl	$0, -64(%rbp)
	jne	.LBB44_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -76(%rbp)
	jne	.LBB44_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB44_3:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB44_5
# %bb.4:                                # %if.then
	movl	$1, -120(%rbp)
.LBB44_5:                               # %if.end
	movl	$0, -68(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB44_6:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_8 Depth 2
                                        #       Child Loop BB44_11 Depth 3
                                        #         Child Loop BB44_13 Depth 4
                                        #       Child Loop BB44_19 Depth 3
                                        #         Child Loop BB44_21 Depth 4
                                        #       Child Loop BB44_29 Depth 3
                                        #         Child Loop BB44_31 Depth 4
                                        #       Child Loop BB44_40 Depth 3
                                        #         Child Loop BB44_42 Depth 4
                                        #       Child Loop BB44_57 Depth 3
                                        #         Child Loop BB44_59 Depth 4
                                        #       Child Loop BB44_67 Depth 3
                                        #         Child Loop BB44_69 Depth 4
                                        #       Child Loop BB44_84 Depth 3
                                        #         Child Loop BB44_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB44_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -72(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB44_8:                               # %for.cond9
                                        #   Parent Loop BB44_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_11 Depth 3
                                        #         Child Loop BB44_13 Depth 4
                                        #       Child Loop BB44_19 Depth 3
                                        #         Child Loop BB44_21 Depth 4
                                        #       Child Loop BB44_29 Depth 3
                                        #         Child Loop BB44_31 Depth 4
                                        #       Child Loop BB44_40 Depth 3
                                        #         Child Loop BB44_42 Depth 4
                                        #       Child Loop BB44_57 Depth 3
                                        #         Child Loop BB44_59 Depth 4
                                        #       Child Loop BB44_67 Depth 3
                                        #         Child Loop BB44_69 Depth 4
                                        #       Child Loop BB44_84 Depth 3
                                        #         Child Loop BB44_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB44_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB44_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB44_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-64(%rbp), %r8d
	movl	-76(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB44_11:                              # %for.cond16
                                        #   Parent Loop BB44_6 Depth=1
                                        #     Parent Loop BB44_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB44_13 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB44_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB44_11 Depth=3
	movl	$0, -16(%rbp)
.LBB44_13:                              # %for.cond20
                                        #   Parent Loop BB44_6 Depth=1
                                        #     Parent Loop BB44_8 Depth=2
                                        #       Parent Loop BB44_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB44_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB44_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB44_13 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_13
.LBB44_16:                              # %for.end
                                        #   in Loop: Header=BB44_11 Depth=3
	jmp	.LBB44_17
.LBB44_17:                              # %for.inc37
                                        #   in Loop: Header=BB44_11 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_11
.LBB44_18:                              # %for.end39
                                        #   in Loop: Header=BB44_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-64(%rbp), %r8d
	movl	-76(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB44_19:                              # %for.cond41
                                        #   Parent Loop BB44_6 Depth=1
                                        #     Parent Loop BB44_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB44_21 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB44_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB44_19 Depth=3
	movl	$0, -16(%rbp)
.LBB44_21:                              # %for.cond45
                                        #   Parent Loop BB44_6 Depth=1
                                        #     Parent Loop BB44_8 Depth=2
                                        #       Parent Loop BB44_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB44_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB44_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB44_21 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_21
.LBB44_24:                              # %for.end65
                                        #   in Loop: Header=BB44_19 Depth=3
	jmp	.LBB44_25
.LBB44_25:                              # %for.inc66
                                        #   in Loop: Header=BB44_19 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_19
.LBB44_26:                              # %for.end68
                                        #   in Loop: Header=BB44_8 Depth=2
	jmp	.LBB44_27
.LBB44_27:                              # %if.end69
                                        #   in Loop: Header=BB44_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-64(%rbp), %ecx
	movl	-76(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB44_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB44_8 Depth=2
	movl	$0, -12(%rbp)
.LBB44_29:                              # %for.cond74
                                        #   Parent Loop BB44_6 Depth=1
                                        #     Parent Loop BB44_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB44_31 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB44_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB44_29 Depth=3
	movl	$0, -16(%rbp)
.LBB44_31:                              # %for.cond78
                                        #   Parent Loop BB44_6 Depth=1
                                        #     Parent Loop BB44_8 Depth=2
                                        #       Parent Loop BB44_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB44_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB44_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB44_31 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_31
.LBB44_34:                              # %for.end98
                                        #   in Loop: Header=BB44_29 Depth=3
	jmp	.LBB44_35
.LBB44_35:                              # %for.inc99
                                        #   in Loop: Header=BB44_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_29
.LBB44_36:                              # %for.end101
                                        #   in Loop: Header=BB44_8 Depth=2
	jmp	.LBB44_37
.LBB44_37:                              # %if.end102
                                        #   in Loop: Header=BB44_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB44_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB44_8 Depth=2
	cmpl	$0, -80(%rbp)
	jne	.LBB44_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB44_8 Depth=2
	movl	$0, -12(%rbp)
.LBB44_40:                              # %for.cond108
                                        #   Parent Loop BB44_6 Depth=1
                                        #     Parent Loop BB44_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB44_42 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB44_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB44_40 Depth=3
	movl	$0, -16(%rbp)
.LBB44_42:                              # %for.cond112
                                        #   Parent Loop BB44_6 Depth=1
                                        #     Parent Loop BB44_8 Depth=2
                                        #       Parent Loop BB44_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB44_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB44_42 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB44_42 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_42
.LBB44_45:                              # %for.end137
                                        #   in Loop: Header=BB44_40 Depth=3
	jmp	.LBB44_46
.LBB44_46:                              # %for.inc138
                                        #   in Loop: Header=BB44_40 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_40
.LBB44_47:                              # %for.end140
                                        #   in Loop: Header=BB44_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB44_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB44_8 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB44_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB44_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB44_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB44_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -36(%rbp)
	jmp	.LBB44_52
.LBB44_51:                              # %if.else
                                        #   in Loop: Header=BB44_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -36(%rbp)
.LBB44_52:                              # %if.end151
                                        #   in Loop: Header=BB44_8 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB44_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB44_8 Depth=2
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-84(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB44_54:                              # %if.end157
                                        #   in Loop: Header=BB44_8 Depth=2
	jmp	.LBB44_55
.LBB44_55:                              # %if.end158
                                        #   in Loop: Header=BB44_8 Depth=2
	jmp	.LBB44_65
.LBB44_56:                              # %if.else159
                                        #   in Loop: Header=BB44_8 Depth=2
	movl	$0, -12(%rbp)
.LBB44_57:                              # %for.cond160
                                        #   Parent Loop BB44_6 Depth=1
                                        #     Parent Loop BB44_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB44_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB44_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB44_57 Depth=3
	movl	$0, -16(%rbp)
.LBB44_59:                              # %for.cond164
                                        #   Parent Loop BB44_6 Depth=1
                                        #     Parent Loop BB44_8 Depth=2
                                        #       Parent Loop BB44_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB44_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB44_59 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB44_59 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_59
.LBB44_62:                              # %for.end193
                                        #   in Loop: Header=BB44_57 Depth=3
	jmp	.LBB44_63
.LBB44_63:                              # %for.inc194
                                        #   in Loop: Header=BB44_57 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_57
.LBB44_64:                              # %for.end196
                                        #   in Loop: Header=BB44_8 Depth=2
	jmp	.LBB44_65
.LBB44_65:                              # %if.end197
                                        #   in Loop: Header=BB44_8 Depth=2
	jmp	.LBB44_95
.LBB44_66:                              # %if.else198
                                        #   in Loop: Header=BB44_8 Depth=2
	movl	$0, -12(%rbp)
.LBB44_67:                              # %for.cond199
                                        #   Parent Loop BB44_6 Depth=1
                                        #     Parent Loop BB44_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB44_69 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB44_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB44_67 Depth=3
	movl	$0, -16(%rbp)
.LBB44_69:                              # %for.cond203
                                        #   Parent Loop BB44_6 Depth=1
                                        #     Parent Loop BB44_8 Depth=2
                                        #       Parent Loop BB44_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB44_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB44_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-52(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-56(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-16(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-12(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -88(%rbp)
	movq	imgY_org, %rdx
	movl	-52(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-56(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-16(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -128(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-52(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-56(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -116(%rbp)
	movl	-116(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-88(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-128(%rbp), %eax
	subl	-96(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-96(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -80(%rbp)
	jne	.LBB44_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB44_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB44_73
.LBB44_72:                              # %if.else300
                                        #   in Loop: Header=BB44_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB44_73:                              # %if.end314
                                        #   in Loop: Header=BB44_69 Depth=4
	jmp	.LBB44_74
.LBB44_74:                              # %for.inc315
                                        #   in Loop: Header=BB44_69 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_69
.LBB44_75:                              # %for.end317
                                        #   in Loop: Header=BB44_67 Depth=3
	jmp	.LBB44_76
.LBB44_76:                              # %for.inc318
                                        #   in Loop: Header=BB44_67 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_67
.LBB44_77:                              # %for.end320
                                        #   in Loop: Header=BB44_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB44_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB44_8 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB44_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB44_8 Depth=2
	cmpl	$0, -80(%rbp)
	jne	.LBB44_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB44_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB44_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB44_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -36(%rbp)
	jmp	.LBB44_83
.LBB44_82:                              # %if.else334
                                        #   in Loop: Header=BB44_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -36(%rbp)
.LBB44_83:                              # %if.end336
                                        #   in Loop: Header=BB44_8 Depth=2
	movl	$0, -12(%rbp)
.LBB44_84:                              # %for.cond337
                                        #   Parent Loop BB44_6 Depth=1
                                        #     Parent Loop BB44_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB44_86 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB44_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB44_84 Depth=3
	movl	$0, -16(%rbp)
.LBB44_86:                              # %for.cond341
                                        #   Parent Loop BB44_6 Depth=1
                                        #     Parent Loop BB44_8 Depth=2
                                        #       Parent Loop BB44_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB44_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB44_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB44_86 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_86
.LBB44_89:                              # %for.end358
                                        #   in Loop: Header=BB44_84 Depth=3
	jmp	.LBB44_90
.LBB44_90:                              # %for.inc359
                                        #   in Loop: Header=BB44_84 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_84
.LBB44_91:                              # %for.end361
                                        #   in Loop: Header=BB44_8 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB44_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB44_8 Depth=2
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-84(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB44_93:                              # %if.end368
                                        #   in Loop: Header=BB44_8 Depth=2
	jmp	.LBB44_94
.LBB44_94:                              # %if.end369
                                        #   in Loop: Header=BB44_8 Depth=2
	jmp	.LBB44_95
.LBB44_95:                              # %if.end370
                                        #   in Loop: Header=BB44_8 Depth=2
	jmp	.LBB44_96
.LBB44_96:                              # %for.inc371
                                        #   in Loop: Header=BB44_8 Depth=2
	movl	-72(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -72(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB44_8
.LBB44_97:                              # %for.end374
                                        #   in Loop: Header=BB44_6 Depth=1
	jmp	.LBB44_98
.LBB44_98:                              # %for.inc375
                                        #   in Loop: Header=BB44_6 Depth=1
	movl	-68(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -68(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB44_6
.LBB44_99:                              # %for.end378
	cmpl	$0, -80(%rbp)
	je	.LBB44_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB44_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -60(%rbp)
	jne	.LBB44_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB44_104
# %bb.103:                              # %if.then390
	movl	-28(%rbp), %edi
	leaq	-32(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -36(%rbp)
.LBB44_104:                             # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB44_114
# %bb.105:                              # %if.then395
	movl	$0, -12(%rbp)
.LBB44_106:                             # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_108 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB44_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB44_106 Depth=1
	movl	$0, -16(%rbp)
.LBB44_108:                             # %for.cond400
                                        #   Parent Loop BB44_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB44_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB44_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB44_108 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_108
.LBB44_111:                             # %for.end417
                                        #   in Loop: Header=BB44_106 Depth=1
	jmp	.LBB44_112
.LBB44_112:                             # %for.inc418
                                        #   in Loop: Header=BB44_106 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_106
.LBB44_113:                             # %for.end420
	jmp	.LBB44_114
.LBB44_114:                             # %if.end421
	cmpl	$0, -36(%rbp)
	je	.LBB44_116
# %bb.115:                              # %if.then423
	movl	-28(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-84(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB44_116:                             # %if.end431
	jmp	.LBB44_117
.LBB44_117:                             # %if.end432
	jmp	.LBB44_118
.LBB44_118:                             # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB44_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -60(%rbp)
	jne	.LBB44_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -32(%rbp)
	jg	.LBB44_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB44_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB44_145
.LBB44_123:                             # %if.then448
	movl	$0, -32(%rbp)
	movl	$63, %eax
	subl	-84(%rbp), %eax
	movq	-112(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-28(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-104(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB44_124:                             # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_126 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB44_124 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB44_126:                             # %for.cond462
                                        #   Parent Loop BB44_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB44_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB44_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB44_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB44_130
.LBB44_129:                             # %if.else481
                                        #   in Loop: Header=BB44_126 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB44_130:                             # %if.end486
                                        #   in Loop: Header=BB44_126 Depth=2
	jmp	.LBB44_131
.LBB44_131:                             # %for.inc487
                                        #   in Loop: Header=BB44_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_126
.LBB44_132:                             # %for.end489
                                        #   in Loop: Header=BB44_124 Depth=1
	jmp	.LBB44_133
.LBB44_133:                             # %for.inc490
                                        #   in Loop: Header=BB44_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_124
.LBB44_134:                             # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB44_144
# %bb.135:                              # %if.then496
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB44_136:                             # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_138 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB44_136 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB44_138:                             # %for.cond502
                                        #   Parent Loop BB44_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB44_138 Depth=2
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB44_138 Depth=2
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_138
.LBB44_141:                             # %for.end509
                                        #   in Loop: Header=BB44_136 Depth=1
	jmp	.LBB44_142
.LBB44_142:                             # %for.inc510
                                        #   in Loop: Header=BB44_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_136
.LBB44_143:                             # %for.end512
	jmp	.LBB44_144
.LBB44_144:                             # %if.end513
	jmp	.LBB44_145
.LBB44_145:                             # %if.end514
	movl	-32(%rbp), %ebx
	cmpl	$2133237486, -124(%rbp) # imm = 0x7F269EEE
	jne	.LBB44_147
.LBB44_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_147:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_146
.Lfunc_end44:
	.size	LumaResidualCoding8x8.3, .Lfunc_end44-LumaResidualCoding8x8.3
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.4  # -- Begin function writeCBPandLumaCoeff.4
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.4,@function
writeCBPandLumaCoeff.4:                 # @writeCBPandLumaCoeff.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$129530730, -104(%rbp)  # imm = 0x7B87B6A
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB45_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB45_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB45_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB45_7
.LBB45_4:                               # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB45_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB45_6:                               # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB45_10
.LBB45_7:                               # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB45_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB45_9:                               # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB45_10:                              # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB45_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB45_12:                              # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB45_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB45_18
.LBB45_14:                              # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB45_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB45_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB45_18
.LBB45_17:                              # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB45_22
.LBB45_18:                              # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB45_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB45_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB45_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB45_22:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB45_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB45_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB45_26
.LBB45_25:                              # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB45_26:                              # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB45_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB45_29
.LBB45_28:                              # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB45_29:                              # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB45_30:                              # %if.end93
	jmp	.LBB45_31
.LBB45_31:                              # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB45_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB45_42
.LBB45_33:                              # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB45_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB45_36
.LBB45_35:                              # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB45_36:                              # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB45_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB45_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB45_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB45_41
.LBB45_40:                              # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB45_41:                              # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB45_42:                              # %if.end138
	movl	$0, -40(%rbp)
.LBB45_43:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_45 Depth 2
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB45_43 Depth=1
	movl	$0, -20(%rbp)
.LBB45_45:                              # %for.cond141
                                        #   Parent Loop BB45_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB45_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB45_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB45_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB45_45
.LBB45_48:                              # %for.end
                                        #   in Loop: Header=BB45_43 Depth=1
	jmp	.LBB45_49
.LBB45_49:                              # %for.inc152
                                        #   in Loop: Header=BB45_43 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB45_43
.LBB45_50:                              # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB45_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB45_52:                              # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB45_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB45_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB45_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB45_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB45_55:                              # %if.end169
                                        #   in Loop: Header=BB45_52 Depth=1
	jmp	.LBB45_56
.LBB45_56:                              # %for.inc170
                                        #   in Loop: Header=BB45_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB45_52
.LBB45_57:                              # %for.end172
	jmp	.LBB45_101
.LBB45_58:                              # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB45_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB45_70
.LBB45_60:                              # %if.else179
	movl	$1, -52(%rbp)
	movl	$0, -36(%rbp)
.LBB45_61:                              # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jg	.LBB45_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB45_61 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB45_63:                              # %land.end184
                                        #   in Loop: Header=BB45_61 Depth=1
	testb	$1, %al
	jne	.LBB45_64
	jmp	.LBB45_69
.LBB45_64:                              # %for.body186
                                        #   in Loop: Header=BB45_61 Depth=1
	movq	-144(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-136(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -100(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB45_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB45_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB45_67
.LBB45_66:                              # %if.else196
                                        #   in Loop: Header=BB45_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB45_67:                              # %if.end198
                                        #   in Loop: Header=BB45_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB45_61 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB45_61
.LBB45_69:                              # %for.end218
	jmp	.LBB45_70
.LBB45_70:                              # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB45_100
# %bb.71:                               # %if.then222
	movl	$0, -60(%rbp)
.LBB45_72:                              # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_74 Depth 2
                                        #       Child Loop BB45_76 Depth 3
                                        #         Child Loop BB45_78 Depth 4
                                        #           Child Loop BB45_82 Depth 5
	cmpl	$4, -60(%rbp)
	jge	.LBB45_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB45_72 Depth=1
	movl	$0, -56(%rbp)
.LBB45_74:                              # %for.cond226
                                        #   Parent Loop BB45_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_76 Depth 3
                                        #         Child Loop BB45_78 Depth 4
                                        #           Child Loop BB45_82 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB45_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB45_74 Depth=2
	movl	-60(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB45_76:                              # %for.cond229
                                        #   Parent Loop BB45_72 Depth=1
                                        #     Parent Loop BB45_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB45_78 Depth 4
                                        #           Child Loop BB45_82 Depth 5
	movl	-40(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB45_76 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB45_78:                              # %for.cond233
                                        #   Parent Loop BB45_72 Depth=1
                                        #     Parent Loop BB45_74 Depth=2
                                        #       Parent Loop BB45_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB45_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB45_78 Depth=4
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -72(%rbp)
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB45_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB45_78 Depth=4
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB45_91
.LBB45_81:                              # %if.else247
                                        #   in Loop: Header=BB45_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -52(%rbp)
	movl	$0, -36(%rbp)
.LBB45_82:                              # %for.cond259
                                        #   Parent Loop BB45_72 Depth=1
                                        #     Parent Loop BB45_74 Depth=2
                                        #       Parent Loop BB45_76 Depth=3
                                        #         Parent Loop BB45_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jge	.LBB45_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB45_82 Depth=5
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB45_84:                              # %land.end263
                                        #   in Loop: Header=BB45_82 Depth=5
	testb	$1, %al
	jne	.LBB45_85
	jmp	.LBB45_90
.LBB45_85:                              # %for.body265
                                        #   in Loop: Header=BB45_82 Depth=5
	movq	-128(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-120(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -100(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB45_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB45_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB45_88
.LBB45_87:                              # %if.else276
                                        #   in Loop: Header=BB45_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB45_88:                              # %if.end278
                                        #   in Loop: Header=BB45_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB45_82 Depth=5
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB45_82
.LBB45_90:                              # %for.end300
                                        #   in Loop: Header=BB45_78 Depth=4
	jmp	.LBB45_91
.LBB45_91:                              # %if.end301
                                        #   in Loop: Header=BB45_78 Depth=4
	jmp	.LBB45_92
.LBB45_92:                              # %for.inc302
                                        #   in Loop: Header=BB45_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB45_78
.LBB45_93:                              # %for.end304
                                        #   in Loop: Header=BB45_76 Depth=3
	jmp	.LBB45_94
.LBB45_94:                              # %for.inc305
                                        #   in Loop: Header=BB45_76 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB45_76
.LBB45_95:                              # %for.end307
                                        #   in Loop: Header=BB45_74 Depth=2
	jmp	.LBB45_96
.LBB45_96:                              # %for.inc308
                                        #   in Loop: Header=BB45_74 Depth=2
	movl	-56(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB45_74
.LBB45_97:                              # %for.end310
                                        #   in Loop: Header=BB45_72 Depth=1
	jmp	.LBB45_98
.LBB45_98:                              # %for.inc311
                                        #   in Loop: Header=BB45_72 Depth=1
	movl	-60(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB45_72
.LBB45_99:                              # %for.end313
	jmp	.LBB45_100
.LBB45_100:                             # %if.end314
	jmp	.LBB45_101
.LBB45_101:                             # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$129530730, -104(%rbp)  # imm = 0x7B87B6A
	jne	.LBB45_103
.LBB45_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_103:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_102
.Lfunc_end45:
	.size	writeCBPandLumaCoeff.4, .Lfunc_end45-writeCBPandLumaCoeff.4
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.5 # -- Begin function LumaResidualCoding8x8.5
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.5,@function
LumaResidualCoding8x8.5:                # @LumaResidualCoding8x8.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$1811721256, -128(%rbp) # imm = 0x6BFCAC28
	movq	%rdi, -112(%rbp)
	movq	%rsi, -104(%rbp)
	movl	%edx, -36(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -60(%rbp)
	movl	%r9d, -64(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -32(%rbp)
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -44(%rbp)
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -80(%rbp)
	movl	$0, -124(%rbp)
	cmpl	$0, -60(%rbp)
	jne	.LBB46_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -64(%rbp)
	jne	.LBB46_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB46_3:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB46_5
# %bb.4:                                # %if.then
	movl	$1, -124(%rbp)
.LBB46_5:                               # %if.end
	movl	$0, -68(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB46_6:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_8 Depth 2
                                        #       Child Loop BB46_11 Depth 3
                                        #         Child Loop BB46_13 Depth 4
                                        #       Child Loop BB46_19 Depth 3
                                        #         Child Loop BB46_21 Depth 4
                                        #       Child Loop BB46_29 Depth 3
                                        #         Child Loop BB46_31 Depth 4
                                        #       Child Loop BB46_40 Depth 3
                                        #         Child Loop BB46_42 Depth 4
                                        #       Child Loop BB46_57 Depth 3
                                        #         Child Loop BB46_59 Depth 4
                                        #       Child Loop BB46_67 Depth 3
                                        #         Child Loop BB46_69 Depth 4
                                        #       Child Loop BB46_84 Depth 3
                                        #         Child Loop BB46_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB46_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -76(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB46_8:                               # %for.cond9
                                        #   Parent Loop BB46_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_11 Depth 3
                                        #         Child Loop BB46_13 Depth 4
                                        #       Child Loop BB46_19 Depth 3
                                        #         Child Loop BB46_21 Depth 4
                                        #       Child Loop BB46_29 Depth 3
                                        #         Child Loop BB46_31 Depth 4
                                        #       Child Loop BB46_40 Depth 3
                                        #         Child Loop BB46_42 Depth 4
                                        #       Child Loop BB46_57 Depth 3
                                        #         Child Loop BB46_59 Depth 4
                                        #       Child Loop BB46_67 Depth 3
                                        #         Child Loop BB46_69 Depth 4
                                        #       Child Loop BB46_84 Depth 3
                                        #         Child Loop BB46_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB46_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB46_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB46_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-60(%rbp), %r8d
	movl	-64(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB46_11:                              # %for.cond16
                                        #   Parent Loop BB46_6 Depth=1
                                        #     Parent Loop BB46_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB46_13 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB46_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB46_11 Depth=3
	movl	$0, -16(%rbp)
.LBB46_13:                              # %for.cond20
                                        #   Parent Loop BB46_6 Depth=1
                                        #     Parent Loop BB46_8 Depth=2
                                        #       Parent Loop BB46_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB46_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB46_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB46_13 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_13
.LBB46_16:                              # %for.end
                                        #   in Loop: Header=BB46_11 Depth=3
	jmp	.LBB46_17
.LBB46_17:                              # %for.inc37
                                        #   in Loop: Header=BB46_11 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_11
.LBB46_18:                              # %for.end39
                                        #   in Loop: Header=BB46_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-60(%rbp), %r8d
	movl	-64(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB46_19:                              # %for.cond41
                                        #   Parent Loop BB46_6 Depth=1
                                        #     Parent Loop BB46_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB46_21 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB46_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB46_19 Depth=3
	movl	$0, -16(%rbp)
.LBB46_21:                              # %for.cond45
                                        #   Parent Loop BB46_6 Depth=1
                                        #     Parent Loop BB46_8 Depth=2
                                        #       Parent Loop BB46_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB46_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB46_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB46_21 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_21
.LBB46_24:                              # %for.end65
                                        #   in Loop: Header=BB46_19 Depth=3
	jmp	.LBB46_25
.LBB46_25:                              # %for.inc66
                                        #   in Loop: Header=BB46_19 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_19
.LBB46_26:                              # %for.end68
                                        #   in Loop: Header=BB46_8 Depth=2
	jmp	.LBB46_27
.LBB46_27:                              # %if.end69
                                        #   in Loop: Header=BB46_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	-64(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB46_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB46_8 Depth=2
	movl	$0, -12(%rbp)
.LBB46_29:                              # %for.cond74
                                        #   Parent Loop BB46_6 Depth=1
                                        #     Parent Loop BB46_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB46_31 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB46_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB46_29 Depth=3
	movl	$0, -16(%rbp)
.LBB46_31:                              # %for.cond78
                                        #   Parent Loop BB46_6 Depth=1
                                        #     Parent Loop BB46_8 Depth=2
                                        #       Parent Loop BB46_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB46_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB46_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB46_31 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_31
.LBB46_34:                              # %for.end98
                                        #   in Loop: Header=BB46_29 Depth=3
	jmp	.LBB46_35
.LBB46_35:                              # %for.inc99
                                        #   in Loop: Header=BB46_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_29
.LBB46_36:                              # %for.end101
                                        #   in Loop: Header=BB46_8 Depth=2
	jmp	.LBB46_37
.LBB46_37:                              # %if.end102
                                        #   in Loop: Header=BB46_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB46_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB46_8 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB46_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB46_8 Depth=2
	movl	$0, -12(%rbp)
.LBB46_40:                              # %for.cond108
                                        #   Parent Loop BB46_6 Depth=1
                                        #     Parent Loop BB46_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB46_42 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB46_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB46_40 Depth=3
	movl	$0, -16(%rbp)
.LBB46_42:                              # %for.cond112
                                        #   Parent Loop BB46_6 Depth=1
                                        #     Parent Loop BB46_8 Depth=2
                                        #       Parent Loop BB46_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB46_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB46_42 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB46_42 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_42
.LBB46_45:                              # %for.end137
                                        #   in Loop: Header=BB46_40 Depth=3
	jmp	.LBB46_46
.LBB46_46:                              # %for.inc138
                                        #   in Loop: Header=BB46_40 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_40
.LBB46_47:                              # %for.end140
                                        #   in Loop: Header=BB46_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB46_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB46_8 Depth=2
	cmpl	$0, -84(%rbp)
	jne	.LBB46_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB46_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB46_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB46_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -28(%rbp)
	jmp	.LBB46_52
.LBB46_51:                              # %if.else
                                        #   in Loop: Header=BB46_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -28(%rbp)
.LBB46_52:                              # %if.end151
                                        #   in Loop: Header=BB46_8 Depth=2
	cmpl	$0, -28(%rbp)
	je	.LBB46_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB46_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB46_54:                              # %if.end157
                                        #   in Loop: Header=BB46_8 Depth=2
	jmp	.LBB46_55
.LBB46_55:                              # %if.end158
                                        #   in Loop: Header=BB46_8 Depth=2
	jmp	.LBB46_65
.LBB46_56:                              # %if.else159
                                        #   in Loop: Header=BB46_8 Depth=2
	movl	$0, -12(%rbp)
.LBB46_57:                              # %for.cond160
                                        #   Parent Loop BB46_6 Depth=1
                                        #     Parent Loop BB46_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB46_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB46_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB46_57 Depth=3
	movl	$0, -16(%rbp)
.LBB46_59:                              # %for.cond164
                                        #   Parent Loop BB46_6 Depth=1
                                        #     Parent Loop BB46_8 Depth=2
                                        #       Parent Loop BB46_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB46_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB46_59 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-76(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB46_59 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_59
.LBB46_62:                              # %for.end193
                                        #   in Loop: Header=BB46_57 Depth=3
	jmp	.LBB46_63
.LBB46_63:                              # %for.inc194
                                        #   in Loop: Header=BB46_57 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_57
.LBB46_64:                              # %for.end196
                                        #   in Loop: Header=BB46_8 Depth=2
	jmp	.LBB46_65
.LBB46_65:                              # %if.end197
                                        #   in Loop: Header=BB46_8 Depth=2
	jmp	.LBB46_95
.LBB46_66:                              # %if.else198
                                        #   in Loop: Header=BB46_8 Depth=2
	movl	$0, -12(%rbp)
.LBB46_67:                              # %for.cond199
                                        #   Parent Loop BB46_6 Depth=1
                                        #     Parent Loop BB46_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB46_69 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB46_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB46_67 Depth=3
	movl	$0, -16(%rbp)
.LBB46_69:                              # %for.cond203
                                        #   Parent Loop BB46_6 Depth=1
                                        #     Parent Loop BB46_8 Depth=2
                                        #       Parent Loop BB46_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB46_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB46_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-52(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-56(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-16(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-12(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -88(%rbp)
	movq	imgY_org, %rdx
	movl	-52(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-56(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-16(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -120(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-52(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-56(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -116(%rbp)
	movl	-116(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-88(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-120(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-92(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -72(%rbp)
	jne	.LBB46_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB46_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB46_73
.LBB46_72:                              # %if.else300
                                        #   in Loop: Header=BB46_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-76(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB46_73:                              # %if.end314
                                        #   in Loop: Header=BB46_69 Depth=4
	jmp	.LBB46_74
.LBB46_74:                              # %for.inc315
                                        #   in Loop: Header=BB46_69 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_69
.LBB46_75:                              # %for.end317
                                        #   in Loop: Header=BB46_67 Depth=3
	jmp	.LBB46_76
.LBB46_76:                              # %for.inc318
                                        #   in Loop: Header=BB46_67 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_67
.LBB46_77:                              # %for.end320
                                        #   in Loop: Header=BB46_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB46_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB46_8 Depth=2
	cmpl	$0, -84(%rbp)
	jne	.LBB46_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB46_8 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB46_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB46_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB46_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB46_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -28(%rbp)
	jmp	.LBB46_83
.LBB46_82:                              # %if.else334
                                        #   in Loop: Header=BB46_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -28(%rbp)
.LBB46_83:                              # %if.end336
                                        #   in Loop: Header=BB46_8 Depth=2
	movl	$0, -12(%rbp)
.LBB46_84:                              # %for.cond337
                                        #   Parent Loop BB46_6 Depth=1
                                        #     Parent Loop BB46_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB46_86 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB46_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB46_84 Depth=3
	movl	$0, -16(%rbp)
.LBB46_86:                              # %for.cond341
                                        #   Parent Loop BB46_6 Depth=1
                                        #     Parent Loop BB46_8 Depth=2
                                        #       Parent Loop BB46_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB46_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB46_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB46_86 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_86
.LBB46_89:                              # %for.end358
                                        #   in Loop: Header=BB46_84 Depth=3
	jmp	.LBB46_90
.LBB46_90:                              # %for.inc359
                                        #   in Loop: Header=BB46_84 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_84
.LBB46_91:                              # %for.end361
                                        #   in Loop: Header=BB46_8 Depth=2
	cmpl	$0, -28(%rbp)
	je	.LBB46_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB46_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB46_93:                              # %if.end368
                                        #   in Loop: Header=BB46_8 Depth=2
	jmp	.LBB46_94
.LBB46_94:                              # %if.end369
                                        #   in Loop: Header=BB46_8 Depth=2
	jmp	.LBB46_95
.LBB46_95:                              # %if.end370
                                        #   in Loop: Header=BB46_8 Depth=2
	jmp	.LBB46_96
.LBB46_96:                              # %for.inc371
                                        #   in Loop: Header=BB46_8 Depth=2
	movl	-76(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -76(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB46_8
.LBB46_97:                              # %for.end374
                                        #   in Loop: Header=BB46_6 Depth=1
	jmp	.LBB46_98
.LBB46_98:                              # %for.inc375
                                        #   in Loop: Header=BB46_6 Depth=1
	movl	-68(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -68(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB46_6
.LBB46_99:                              # %for.end378
	cmpl	$0, -72(%rbp)
	je	.LBB46_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB46_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -84(%rbp)
	jne	.LBB46_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB46_104
# %bb.103:                              # %if.then390
	movl	-36(%rbp), %edi
	leaq	-32(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -28(%rbp)
.LBB46_104:                             # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB46_114
# %bb.105:                              # %if.then395
	movl	$0, -12(%rbp)
.LBB46_106:                             # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_108 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB46_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB46_106 Depth=1
	movl	$0, -16(%rbp)
.LBB46_108:                             # %for.cond400
                                        #   Parent Loop BB46_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB46_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB46_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-44(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-40(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB46_108 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_108
.LBB46_111:                             # %for.end417
                                        #   in Loop: Header=BB46_106 Depth=1
	jmp	.LBB46_112
.LBB46_112:                             # %for.inc418
                                        #   in Loop: Header=BB46_106 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_106
.LBB46_113:                             # %for.end420
	jmp	.LBB46_114
.LBB46_114:                             # %if.end421
	cmpl	$0, -28(%rbp)
	je	.LBB46_116
# %bb.115:                              # %if.then423
	movl	-36(%rbp), %ecx
	shll	$2, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB46_116:                             # %if.end431
	jmp	.LBB46_117
.LBB46_117:                             # %if.end432
	jmp	.LBB46_118
.LBB46_118:                             # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB46_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -84(%rbp)
	jne	.LBB46_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -32(%rbp)
	jg	.LBB46_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB46_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB46_145
.LBB46_123:                             # %if.then448
	movl	$0, -32(%rbp)
	movl	$63, %eax
	subl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-36(%rbp), %ecx
	shll	$2, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-104(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB46_124:                             # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_126 Depth 2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB46_124 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB46_126:                             # %for.cond462
                                        #   Parent Loop BB46_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB46_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB46_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB46_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB46_130
.LBB46_129:                             # %if.else481
                                        #   in Loop: Header=BB46_126 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB46_130:                             # %if.end486
                                        #   in Loop: Header=BB46_126 Depth=2
	jmp	.LBB46_131
.LBB46_131:                             # %for.inc487
                                        #   in Loop: Header=BB46_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_126
.LBB46_132:                             # %for.end489
                                        #   in Loop: Header=BB46_124 Depth=1
	jmp	.LBB46_133
.LBB46_133:                             # %for.inc490
                                        #   in Loop: Header=BB46_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_124
.LBB46_134:                             # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB46_144
# %bb.135:                              # %if.then496
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB46_136:                             # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_138 Depth 2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB46_136 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB46_138:                             # %for.cond502
                                        #   Parent Loop BB46_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB46_138 Depth=2
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB46_138 Depth=2
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_138
.LBB46_141:                             # %for.end509
                                        #   in Loop: Header=BB46_136 Depth=1
	jmp	.LBB46_142
.LBB46_142:                             # %for.inc510
                                        #   in Loop: Header=BB46_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_136
.LBB46_143:                             # %for.end512
	jmp	.LBB46_144
.LBB46_144:                             # %if.end513
	jmp	.LBB46_145
.LBB46_145:                             # %if.end514
	movl	-32(%rbp), %ebx
	cmpl	$1811721256, -128(%rbp) # imm = 0x6BFCAC28
	jne	.LBB46_147
.LBB46_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_147:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_146
.Lfunc_end46:
	.size	LumaResidualCoding8x8.5, .Lfunc_end46-LumaResidualCoding8x8.5
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.6  # -- Begin function writeCBPandLumaCoeff.6
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.6,@function
writeCBPandLumaCoeff.6:                 # @writeCBPandLumaCoeff.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1345578890, -100(%rbp) # imm = 0x5033E78A
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB47_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB47_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB47_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB47_7
.LBB47_4:                               # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB47_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB47_6:                               # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB47_10
.LBB47_7:                               # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB47_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB47_9:                               # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB47_10:                              # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB47_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB47_12:                              # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB47_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB47_18
.LBB47_14:                              # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB47_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB47_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB47_18
.LBB47_17:                              # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB47_22
.LBB47_18:                              # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB47_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB47_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB47_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB47_22:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB47_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB47_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB47_26
.LBB47_25:                              # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB47_26:                              # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB47_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB47_29
.LBB47_28:                              # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB47_29:                              # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB47_30:                              # %if.end93
	jmp	.LBB47_31
.LBB47_31:                              # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB47_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB47_42
.LBB47_33:                              # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB47_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB47_36
.LBB47_35:                              # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB47_36:                              # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB47_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB47_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB47_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB47_41
.LBB47_40:                              # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB47_41:                              # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB47_42:                              # %if.end138
	movl	$0, -40(%rbp)
.LBB47_43:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_45 Depth 2
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB47_43 Depth=1
	movl	$0, -20(%rbp)
.LBB47_45:                              # %for.cond141
                                        #   Parent Loop BB47_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB47_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB47_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB47_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB47_45
.LBB47_48:                              # %for.end
                                        #   in Loop: Header=BB47_43 Depth=1
	jmp	.LBB47_49
.LBB47_49:                              # %for.inc152
                                        #   in Loop: Header=BB47_43 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB47_43
.LBB47_50:                              # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB47_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB47_52:                              # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB47_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB47_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB47_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB47_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB47_55:                              # %if.end169
                                        #   in Loop: Header=BB47_52 Depth=1
	jmp	.LBB47_56
.LBB47_56:                              # %for.inc170
                                        #   in Loop: Header=BB47_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB47_52
.LBB47_57:                              # %for.end172
	jmp	.LBB47_101
.LBB47_58:                              # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB47_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB47_70
.LBB47_60:                              # %if.else179
	movl	$1, -60(%rbp)
	movl	$0, -36(%rbp)
.LBB47_61:                              # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jg	.LBB47_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB47_61 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
.LBB47_63:                              # %land.end184
                                        #   in Loop: Header=BB47_61 Depth=1
	testb	$1, %al
	jne	.LBB47_64
	jmp	.LBB47_69
.LBB47_64:                              # %for.body186
                                        #   in Loop: Header=BB47_61 Depth=1
	movq	-144(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -60(%rbp)
	movq	-136(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB47_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB47_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB47_67
.LBB47_66:                              # %if.else196
                                        #   in Loop: Header=BB47_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB47_67:                              # %if.end198
                                        #   in Loop: Header=BB47_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB47_61 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB47_61
.LBB47_69:                              # %for.end218
	jmp	.LBB47_70
.LBB47_70:                              # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB47_100
# %bb.71:                               # %if.then222
	movl	$0, -52(%rbp)
.LBB47_72:                              # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_74 Depth 2
                                        #       Child Loop BB47_76 Depth 3
                                        #         Child Loop BB47_78 Depth 4
                                        #           Child Loop BB47_82 Depth 5
	cmpl	$4, -52(%rbp)
	jge	.LBB47_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB47_72 Depth=1
	movl	$0, -56(%rbp)
.LBB47_74:                              # %for.cond226
                                        #   Parent Loop BB47_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_76 Depth 3
                                        #         Child Loop BB47_78 Depth 4
                                        #           Child Loop BB47_82 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB47_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB47_74 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB47_76:                              # %for.cond229
                                        #   Parent Loop BB47_72 Depth=1
                                        #     Parent Loop BB47_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB47_78 Depth 4
                                        #           Child Loop BB47_82 Depth 5
	movl	-40(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB47_76 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB47_78:                              # %for.cond233
                                        #   Parent Loop BB47_72 Depth=1
                                        #     Parent Loop BB47_74 Depth=2
                                        #       Parent Loop BB47_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB47_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB47_78 Depth=4
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -72(%rbp)
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB47_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB47_78 Depth=4
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB47_91
.LBB47_81:                              # %if.else247
                                        #   in Loop: Header=BB47_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -60(%rbp)
	movl	$0, -36(%rbp)
.LBB47_82:                              # %for.cond259
                                        #   Parent Loop BB47_72 Depth=1
                                        #     Parent Loop BB47_74 Depth=2
                                        #       Parent Loop BB47_76 Depth=3
                                        #         Parent Loop BB47_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jge	.LBB47_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB47_82 Depth=5
	cmpl	$0, -60(%rbp)
	setne	%al
.LBB47_84:                              # %land.end263
                                        #   in Loop: Header=BB47_82 Depth=5
	testb	$1, %al
	jne	.LBB47_85
	jmp	.LBB47_90
.LBB47_85:                              # %for.body265
                                        #   in Loop: Header=BB47_82 Depth=5
	movq	-120(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -60(%rbp)
	movq	-128(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB47_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB47_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB47_88
.LBB47_87:                              # %if.else276
                                        #   in Loop: Header=BB47_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB47_88:                              # %if.end278
                                        #   in Loop: Header=BB47_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB47_82 Depth=5
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB47_82
.LBB47_90:                              # %for.end300
                                        #   in Loop: Header=BB47_78 Depth=4
	jmp	.LBB47_91
.LBB47_91:                              # %if.end301
                                        #   in Loop: Header=BB47_78 Depth=4
	jmp	.LBB47_92
.LBB47_92:                              # %for.inc302
                                        #   in Loop: Header=BB47_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB47_78
.LBB47_93:                              # %for.end304
                                        #   in Loop: Header=BB47_76 Depth=3
	jmp	.LBB47_94
.LBB47_94:                              # %for.inc305
                                        #   in Loop: Header=BB47_76 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB47_76
.LBB47_95:                              # %for.end307
                                        #   in Loop: Header=BB47_74 Depth=2
	jmp	.LBB47_96
.LBB47_96:                              # %for.inc308
                                        #   in Loop: Header=BB47_74 Depth=2
	movl	-56(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB47_74
.LBB47_97:                              # %for.end310
                                        #   in Loop: Header=BB47_72 Depth=1
	jmp	.LBB47_98
.LBB47_98:                              # %for.inc311
                                        #   in Loop: Header=BB47_72 Depth=1
	movl	-52(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB47_72
.LBB47_99:                              # %for.end313
	jmp	.LBB47_100
.LBB47_100:                             # %if.end314
	jmp	.LBB47_101
.LBB47_101:                             # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$1345578890, -100(%rbp) # imm = 0x5033E78A
	jne	.LBB47_103
.LBB47_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_103:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_102
.Lfunc_end47:
	.size	writeCBPandLumaCoeff.6, .Lfunc_end47-writeCBPandLumaCoeff.6
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value.7          # -- Begin function B8Mode2Value.7
	.p2align	4, 0x90
	.type	B8Mode2Value.7,@function
B8Mode2Value.7:                         # @B8Mode2Value.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$212697199, -24(%rbp)   # imm = 0xCAD806F
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB48_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_3
.LBB48_2:                               # %if.else
	movslq	-12(%rbp), %rax
	movl	B8Mode2Value.b8start(,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	B8Mode2Value.b8inc(,%rcx,4), %ecx
	imull	-20(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
.LBB48_3:                               # %return
	movl	-16(%rbp), %ebx
	cmpl	$212697199, -24(%rbp)   # imm = 0xCAD806F
	jne	.LBB48_5
.LBB48_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_4
.Lfunc_end48:
	.size	B8Mode2Value.7, .Lfunc_end48-B8Mode2Value.7
	.cfi_endproc
                                        # -- End function
	.globl	BType2CtxRef.8          # -- Begin function BType2CtxRef.8
	.p2align	4, 0x90
	.type	BType2CtxRef.8,@function
BType2CtxRef.8:                         # @BType2CtxRef.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$408984360, -20(%rbp)   # imm = 0x18609B28
	movl	%edi, -16(%rbp)
	cmpl	$4, -16(%rbp)
	jge	.LBB49_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB49_3
.LBB49_2:                               # %if.else
	movl	$1, -12(%rbp)
.LBB49_3:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$408984360, -20(%rbp)   # imm = 0x18609B28
	jne	.LBB49_5
.LBB49_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_4
.Lfunc_end49:
	.size	BType2CtxRef.8, .Lfunc_end49-BType2CtxRef.8
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.9 # -- Begin function LumaResidualCoding8x8.9
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.9,@function
LumaResidualCoding8x8.9:                # @LumaResidualCoding8x8.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$909759518, -120(%rbp)  # imm = 0x3639D41E
	movq	%rdi, -112(%rbp)
	movq	%rsi, -104(%rbp)
	movl	%edx, -28(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -60(%rbp)
	movl	%r9d, -76(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -44(%rbp)
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -116(%rbp)
	cmpl	$0, -60(%rbp)
	jne	.LBB50_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -76(%rbp)
	jne	.LBB50_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB50_3:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB50_5
# %bb.4:                                # %if.then
	movl	$1, -116(%rbp)
.LBB50_5:                               # %if.end
	movl	$0, -64(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB50_6:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_8 Depth 2
                                        #       Child Loop BB50_11 Depth 3
                                        #         Child Loop BB50_13 Depth 4
                                        #       Child Loop BB50_19 Depth 3
                                        #         Child Loop BB50_21 Depth 4
                                        #       Child Loop BB50_29 Depth 3
                                        #         Child Loop BB50_31 Depth 4
                                        #       Child Loop BB50_40 Depth 3
                                        #         Child Loop BB50_42 Depth 4
                                        #       Child Loop BB50_57 Depth 3
                                        #         Child Loop BB50_59 Depth 4
                                        #       Child Loop BB50_67 Depth 3
                                        #         Child Loop BB50_69 Depth 4
                                        #       Child Loop BB50_84 Depth 3
                                        #         Child Loop BB50_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB50_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -84(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB50_8:                               # %for.cond9
                                        #   Parent Loop BB50_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_11 Depth 3
                                        #         Child Loop BB50_13 Depth 4
                                        #       Child Loop BB50_19 Depth 3
                                        #         Child Loop BB50_21 Depth 4
                                        #       Child Loop BB50_29 Depth 3
                                        #         Child Loop BB50_31 Depth 4
                                        #       Child Loop BB50_40 Depth 3
                                        #         Child Loop BB50_42 Depth 4
                                        #       Child Loop BB50_57 Depth 3
                                        #         Child Loop BB50_59 Depth 4
                                        #       Child Loop BB50_67 Depth 3
                                        #         Child Loop BB50_69 Depth 4
                                        #       Child Loop BB50_84 Depth 3
                                        #         Child Loop BB50_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB50_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB50_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB50_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-60(%rbp), %r8d
	movl	-76(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB50_11:                              # %for.cond16
                                        #   Parent Loop BB50_6 Depth=1
                                        #     Parent Loop BB50_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB50_13 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB50_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB50_11 Depth=3
	movl	$0, -16(%rbp)
.LBB50_13:                              # %for.cond20
                                        #   Parent Loop BB50_6 Depth=1
                                        #     Parent Loop BB50_8 Depth=2
                                        #       Parent Loop BB50_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB50_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB50_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB50_13 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_13
.LBB50_16:                              # %for.end
                                        #   in Loop: Header=BB50_11 Depth=3
	jmp	.LBB50_17
.LBB50_17:                              # %for.inc37
                                        #   in Loop: Header=BB50_11 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_11
.LBB50_18:                              # %for.end39
                                        #   in Loop: Header=BB50_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-60(%rbp), %r8d
	movl	-76(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB50_19:                              # %for.cond41
                                        #   Parent Loop BB50_6 Depth=1
                                        #     Parent Loop BB50_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB50_21 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB50_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB50_19 Depth=3
	movl	$0, -16(%rbp)
.LBB50_21:                              # %for.cond45
                                        #   Parent Loop BB50_6 Depth=1
                                        #     Parent Loop BB50_8 Depth=2
                                        #       Parent Loop BB50_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB50_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB50_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB50_21 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_21
.LBB50_24:                              # %for.end65
                                        #   in Loop: Header=BB50_19 Depth=3
	jmp	.LBB50_25
.LBB50_25:                              # %for.inc66
                                        #   in Loop: Header=BB50_19 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_19
.LBB50_26:                              # %for.end68
                                        #   in Loop: Header=BB50_8 Depth=2
	jmp	.LBB50_27
.LBB50_27:                              # %if.end69
                                        #   in Loop: Header=BB50_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	-76(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB50_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB50_8 Depth=2
	movl	$0, -12(%rbp)
.LBB50_29:                              # %for.cond74
                                        #   Parent Loop BB50_6 Depth=1
                                        #     Parent Loop BB50_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB50_31 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB50_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB50_29 Depth=3
	movl	$0, -16(%rbp)
.LBB50_31:                              # %for.cond78
                                        #   Parent Loop BB50_6 Depth=1
                                        #     Parent Loop BB50_8 Depth=2
                                        #       Parent Loop BB50_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB50_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB50_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB50_31 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_31
.LBB50_34:                              # %for.end98
                                        #   in Loop: Header=BB50_29 Depth=3
	jmp	.LBB50_35
.LBB50_35:                              # %for.inc99
                                        #   in Loop: Header=BB50_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_29
.LBB50_36:                              # %for.end101
                                        #   in Loop: Header=BB50_8 Depth=2
	jmp	.LBB50_37
.LBB50_37:                              # %if.end102
                                        #   in Loop: Header=BB50_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB50_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB50_8 Depth=2
	cmpl	$0, -80(%rbp)
	jne	.LBB50_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB50_8 Depth=2
	movl	$0, -12(%rbp)
.LBB50_40:                              # %for.cond108
                                        #   Parent Loop BB50_6 Depth=1
                                        #     Parent Loop BB50_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB50_42 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB50_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB50_40 Depth=3
	movl	$0, -16(%rbp)
.LBB50_42:                              # %for.cond112
                                        #   Parent Loop BB50_6 Depth=1
                                        #     Parent Loop BB50_8 Depth=2
                                        #       Parent Loop BB50_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB50_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB50_42 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB50_42 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_42
.LBB50_45:                              # %for.end137
                                        #   in Loop: Header=BB50_40 Depth=3
	jmp	.LBB50_46
.LBB50_46:                              # %for.inc138
                                        #   in Loop: Header=BB50_40 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_40
.LBB50_47:                              # %for.end140
                                        #   in Loop: Header=BB50_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB50_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB50_8 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB50_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB50_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB50_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB50_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-32(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -36(%rbp)
	jmp	.LBB50_52
.LBB50_51:                              # %if.else
                                        #   in Loop: Header=BB50_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-32(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -36(%rbp)
.LBB50_52:                              # %if.end151
                                        #   in Loop: Header=BB50_8 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB50_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB50_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-72(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB50_54:                              # %if.end157
                                        #   in Loop: Header=BB50_8 Depth=2
	jmp	.LBB50_55
.LBB50_55:                              # %if.end158
                                        #   in Loop: Header=BB50_8 Depth=2
	jmp	.LBB50_65
.LBB50_56:                              # %if.else159
                                        #   in Loop: Header=BB50_8 Depth=2
	movl	$0, -12(%rbp)
.LBB50_57:                              # %for.cond160
                                        #   Parent Loop BB50_6 Depth=1
                                        #     Parent Loop BB50_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB50_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB50_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB50_57 Depth=3
	movl	$0, -16(%rbp)
.LBB50_59:                              # %for.cond164
                                        #   Parent Loop BB50_6 Depth=1
                                        #     Parent Loop BB50_8 Depth=2
                                        #       Parent Loop BB50_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB50_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB50_59 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB50_59 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_59
.LBB50_62:                              # %for.end193
                                        #   in Loop: Header=BB50_57 Depth=3
	jmp	.LBB50_63
.LBB50_63:                              # %for.inc194
                                        #   in Loop: Header=BB50_57 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_57
.LBB50_64:                              # %for.end196
                                        #   in Loop: Header=BB50_8 Depth=2
	jmp	.LBB50_65
.LBB50_65:                              # %if.end197
                                        #   in Loop: Header=BB50_8 Depth=2
	jmp	.LBB50_95
.LBB50_66:                              # %if.else198
                                        #   in Loop: Header=BB50_8 Depth=2
	movl	$0, -12(%rbp)
.LBB50_67:                              # %for.cond199
                                        #   Parent Loop BB50_6 Depth=1
                                        #     Parent Loop BB50_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB50_69 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB50_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB50_67 Depth=3
	movl	$0, -16(%rbp)
.LBB50_69:                              # %for.cond203
                                        #   Parent Loop BB50_6 Depth=1
                                        #     Parent Loop BB50_8 Depth=2
                                        #       Parent Loop BB50_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB50_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB50_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-52(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-56(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-12(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -88(%rbp)
	movq	imgY_org, %rdx
	movl	-52(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-56(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -128(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-52(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-56(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -124(%rbp)
	movl	-124(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-88(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-128(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-92(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -80(%rbp)
	jne	.LBB50_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB50_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB50_73
.LBB50_72:                              # %if.else300
                                        #   in Loop: Header=BB50_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB50_73:                              # %if.end314
                                        #   in Loop: Header=BB50_69 Depth=4
	jmp	.LBB50_74
.LBB50_74:                              # %for.inc315
                                        #   in Loop: Header=BB50_69 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_69
.LBB50_75:                              # %for.end317
                                        #   in Loop: Header=BB50_67 Depth=3
	jmp	.LBB50_76
.LBB50_76:                              # %for.inc318
                                        #   in Loop: Header=BB50_67 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_67
.LBB50_77:                              # %for.end320
                                        #   in Loop: Header=BB50_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB50_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB50_8 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB50_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB50_8 Depth=2
	cmpl	$0, -80(%rbp)
	jne	.LBB50_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB50_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB50_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB50_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-32(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -36(%rbp)
	jmp	.LBB50_83
.LBB50_82:                              # %if.else334
                                        #   in Loop: Header=BB50_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-32(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -36(%rbp)
.LBB50_83:                              # %if.end336
                                        #   in Loop: Header=BB50_8 Depth=2
	movl	$0, -12(%rbp)
.LBB50_84:                              # %for.cond337
                                        #   Parent Loop BB50_6 Depth=1
                                        #     Parent Loop BB50_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB50_86 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB50_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB50_84 Depth=3
	movl	$0, -16(%rbp)
.LBB50_86:                              # %for.cond341
                                        #   Parent Loop BB50_6 Depth=1
                                        #     Parent Loop BB50_8 Depth=2
                                        #       Parent Loop BB50_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB50_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB50_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB50_86 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_86
.LBB50_89:                              # %for.end358
                                        #   in Loop: Header=BB50_84 Depth=3
	jmp	.LBB50_90
.LBB50_90:                              # %for.inc359
                                        #   in Loop: Header=BB50_84 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_84
.LBB50_91:                              # %for.end361
                                        #   in Loop: Header=BB50_8 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB50_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB50_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-72(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB50_93:                              # %if.end368
                                        #   in Loop: Header=BB50_8 Depth=2
	jmp	.LBB50_94
.LBB50_94:                              # %if.end369
                                        #   in Loop: Header=BB50_8 Depth=2
	jmp	.LBB50_95
.LBB50_95:                              # %if.end370
                                        #   in Loop: Header=BB50_8 Depth=2
	jmp	.LBB50_96
.LBB50_96:                              # %for.inc371
                                        #   in Loop: Header=BB50_8 Depth=2
	movl	-84(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB50_8
.LBB50_97:                              # %for.end374
                                        #   in Loop: Header=BB50_6 Depth=1
	jmp	.LBB50_98
.LBB50_98:                              # %for.inc375
                                        #   in Loop: Header=BB50_6 Depth=1
	movl	-64(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB50_6
.LBB50_99:                              # %for.end378
	cmpl	$0, -80(%rbp)
	je	.LBB50_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB50_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -68(%rbp)
	jne	.LBB50_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB50_104
# %bb.103:                              # %if.then390
	movl	-28(%rbp), %edi
	leaq	-32(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -36(%rbp)
.LBB50_104:                             # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB50_114
# %bb.105:                              # %if.then395
	movl	$0, -12(%rbp)
.LBB50_106:                             # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_108 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB50_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB50_106 Depth=1
	movl	$0, -16(%rbp)
.LBB50_108:                             # %for.cond400
                                        #   Parent Loop BB50_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB50_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB50_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-44(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-40(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB50_108 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_108
.LBB50_111:                             # %for.end417
                                        #   in Loop: Header=BB50_106 Depth=1
	jmp	.LBB50_112
.LBB50_112:                             # %for.inc418
                                        #   in Loop: Header=BB50_106 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_106
.LBB50_113:                             # %for.end420
	jmp	.LBB50_114
.LBB50_114:                             # %if.end421
	cmpl	$0, -36(%rbp)
	je	.LBB50_116
# %bb.115:                              # %if.then423
	movl	-28(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-72(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB50_116:                             # %if.end431
	jmp	.LBB50_117
.LBB50_117:                             # %if.end432
	jmp	.LBB50_118
.LBB50_118:                             # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB50_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -68(%rbp)
	jne	.LBB50_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -32(%rbp)
	jg	.LBB50_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB50_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB50_145
.LBB50_123:                             # %if.then448
	movl	$0, -32(%rbp)
	movl	$63, %eax
	subl	-72(%rbp), %eax
	movq	-112(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-28(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-104(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB50_124:                             # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_126 Depth 2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB50_124 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB50_126:                             # %for.cond462
                                        #   Parent Loop BB50_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB50_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB50_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB50_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB50_130
.LBB50_129:                             # %if.else481
                                        #   in Loop: Header=BB50_126 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB50_130:                             # %if.end486
                                        #   in Loop: Header=BB50_126 Depth=2
	jmp	.LBB50_131
.LBB50_131:                             # %for.inc487
                                        #   in Loop: Header=BB50_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_126
.LBB50_132:                             # %for.end489
                                        #   in Loop: Header=BB50_124 Depth=1
	jmp	.LBB50_133
.LBB50_133:                             # %for.inc490
                                        #   in Loop: Header=BB50_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_124
.LBB50_134:                             # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB50_144
# %bb.135:                              # %if.then496
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB50_136:                             # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_138 Depth 2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB50_136 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB50_138:                             # %for.cond502
                                        #   Parent Loop BB50_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB50_138 Depth=2
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB50_138 Depth=2
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_138
.LBB50_141:                             # %for.end509
                                        #   in Loop: Header=BB50_136 Depth=1
	jmp	.LBB50_142
.LBB50_142:                             # %for.inc510
                                        #   in Loop: Header=BB50_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_136
.LBB50_143:                             # %for.end512
	jmp	.LBB50_144
.LBB50_144:                             # %if.end513
	jmp	.LBB50_145
.LBB50_145:                             # %if.end514
	movl	-32(%rbp), %ebx
	cmpl	$909759518, -120(%rbp)  # imm = 0x3639D41E
	jne	.LBB50_147
.LBB50_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_147:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_146
.Lfunc_end50:
	.size	LumaResidualCoding8x8.9, .Lfunc_end50-LumaResidualCoding8x8.9
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big.10        # -- Begin function slice_too_big.10
	.p2align	4, 0x90
	.type	slice_too_big.10,@function
slice_too_big.10:                       # @slice_too_big.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$103427276, -52(%rbp)   # imm = 0x62A2CCC
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB51_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB51_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB51_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB51_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB51_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB51_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB51_5:                               # %if.end
                                        #   in Loop: Header=BB51_2 Depth=1
	movq	-40(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB51_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB51_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB51_7:                               # %if.end8
                                        #   in Loop: Header=BB51_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB51_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB51_21
.LBB51_9:                               # %if.end11
                                        #   in Loop: Header=BB51_2 Depth=1
	jmp	.LBB51_10
.LBB51_10:                              # %for.inc
                                        #   in Loop: Header=BB51_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_2
.LBB51_11:                              # %for.end
	jmp	.LBB51_12
.LBB51_12:                              # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB51_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB51_14:                              # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB51_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB51_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB51_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB51_21
.LBB51_17:                              # %if.end27
                                        #   in Loop: Header=BB51_14 Depth=1
	jmp	.LBB51_18
.LBB51_18:                              # %for.inc28
                                        #   in Loop: Header=BB51_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_14
.LBB51_19:                              # %for.end30
	jmp	.LBB51_20
.LBB51_20:                              # %if.end31
	movl	$0, -20(%rbp)
.LBB51_21:                              # %return
	movl	-20(%rbp), %ebx
	cmpl	$103427276, -52(%rbp)   # imm = 0x62A2CCC
	jne	.LBB51_23
.LBB51_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_23:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_22
.Lfunc_end51:
	.size	slice_too_big.10, .Lfunc_end51-slice_too_big.10
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.11   # -- Begin function writeIntra4x4Modes.11
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.11,@function
writeIntra4x4Modes.11:                  # @writeIntra4x4Modes.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1876682654, -84(%rbp)  # imm = 0x6FDBE79E
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -16(%rbp)
.LBB52_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_9 Depth 2
                                        #       Child Loop BB52_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB52_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB52_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB52_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB52_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB52_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB52_8
.LBB52_5:                               # %lor.lhs.false10
                                        #   in Loop: Header=BB52_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB52_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB52_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB52_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB52_17
.LBB52_8:                               # %if.then
                                        #   in Loop: Header=BB52_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -80(%rbp)
	movl	%ecx, -72(%rbp)
	movl	-72(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -76(%rbp)
	movl	-80(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -32(%rbp)
.LBB52_9:                               # %for.cond24
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_11 Depth 3
	cmpl	$2, -32(%rbp)
	jge	.LBB52_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB52_9 Depth=2
	movl	$0, -12(%rbp)
.LBB52_11:                              # %for.cond27
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB52_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB52_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB52_11 Depth=3
	movl	-76(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_11
.LBB52_14:                              # %for.end
                                        #   in Loop: Header=BB52_9 Depth=2
	jmp	.LBB52_15
.LBB52_15:                              # %for.inc42
                                        #   in Loop: Header=BB52_9 Depth=2
	movl	-68(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB52_9
.LBB52_16:                              # %for.end44
                                        #   in Loop: Header=BB52_1 Depth=1
	jmp	.LBB52_17
.LBB52_17:                              # %if.end
                                        #   in Loop: Header=BB52_1 Depth=1
	jmp	.LBB52_18
.LBB52_18:                              # %for.inc45
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_1
.LBB52_19:                              # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB52_20:                              # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB52_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB52_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB52_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB52_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB52_23:                              # %if.end57
                                        #   in Loop: Header=BB52_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB52_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB52_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB52_26
.LBB52_25:                              # %if.else
                                        #   in Loop: Header=BB52_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB52_26:                              # %if.end65
                                        #   in Loop: Header=BB52_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB52_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_20
.LBB52_28:                              # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$1876682654, -84(%rbp)  # imm = 0x6FDBE79E
	jne	.LBB52_30
.LBB52_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_30:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_29
.Lfunc_end52:
	.size	writeIntra4x4Modes.11, .Lfunc_end52-writeIntra4x4Modes.11
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.12   # -- Begin function LumaResidualCoding.12
	.p2align	4, 0x90
	.type	LumaResidualCoding.12,@function
LumaResidualCoding.12:                  # @LumaResidualCoding.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$903190360, -48(%rbp)   # imm = 0x35D59758
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB53_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -8(%rbp)
	jge	.LBB53_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	-8(%rbp), %edi
	leaq	-20(%rbp), %rsi
	leaq	-40(%rbp), %rdx
	leaq	-36(%rbp), %rcx
	leaq	-18(%rbp), %r8
	leaq	-22(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-8(%rbp), %edx
	movw	-20(%rbp), %ax
	movl	-40(%rbp), %r8d
	movl	-36(%rbp), %r9d
	movw	-18(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-22(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_1
.LBB53_4:                               # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB53_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB53_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB53_33
.LBB53_7:                               # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -12(%rbp)
.LBB53_8:                               # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_10 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB53_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB53_8 Depth=1
	movl	$0, -4(%rbp)
.LBB53_10:                              # %for.cond13
                                        #   Parent Loop BB53_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB53_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB53_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB53_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB53_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB53_14
.LBB53_13:                              # %if.else
                                        #   in Loop: Header=BB53_10 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB53_14:                              # %if.end
                                        #   in Loop: Header=BB53_10 Depth=2
	jmp	.LBB53_15
.LBB53_15:                              # %for.inc31
                                        #   in Loop: Header=BB53_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_10
.LBB53_16:                              # %for.end33
                                        #   in Loop: Header=BB53_8 Depth=1
	jmp	.LBB53_17
.LBB53_17:                              # %for.inc34
                                        #   in Loop: Header=BB53_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_8
.LBB53_18:                              # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB53_32
# %bb.19:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB53_20:                              # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_22 Depth 2
                                        #       Child Loop BB53_24 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB53_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB53_20 Depth=1
	movl	-8(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-8(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB53_22:                              # %for.cond45
                                        #   Parent Loop BB53_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_24 Depth 3
	cmpl	$8, -12(%rbp)
	jge	.LBB53_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB53_22 Depth=2
	movl	$0, -4(%rbp)
.LBB53_24:                              # %for.cond48
                                        #   Parent Loop BB53_20 Depth=1
                                        #     Parent Loop BB53_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -4(%rbp)
	jge	.LBB53_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB53_24 Depth=3
	movl	-44(%rbp), %edi
	addl	-12(%rbp), %edi
	movl	-52(%rbp), %esi
	addl	-4(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB53_24 Depth=3
	movl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_24
.LBB53_27:                              # %for.end55
                                        #   in Loop: Header=BB53_22 Depth=2
	jmp	.LBB53_28
.LBB53_28:                              # %for.inc56
                                        #   in Loop: Header=BB53_22 Depth=2
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_22
.LBB53_29:                              # %for.end58
                                        #   in Loop: Header=BB53_20 Depth=1
	jmp	.LBB53_30
.LBB53_30:                              # %for.inc59
                                        #   in Loop: Header=BB53_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_20
.LBB53_31:                              # %for.end61
	jmp	.LBB53_32
.LBB53_32:                              # %if.end62
	jmp	.LBB53_33
.LBB53_33:                              # %if.end63
	cmpl	$903190360, -48(%rbp)   # imm = 0x35D59758
	jne	.LBB53_35
.LBB53_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_35:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_34
.Lfunc_end53:
	.size	LumaResidualCoding.12, .Lfunc_end53-LumaResidualCoding.12
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.13 # -- Begin function write_one_macroblock.13
	.p2align	4, 0x90
	.type	write_one_macroblock.13,@function
write_one_macroblock.13:                # @write_one_macroblock.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$392260265, -32(%rbp)   # imm = 0x17616AA9
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB54_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB54_2:                               # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB54_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB54_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB54_6
.LBB54_5:                               # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB54_6:                               # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB54_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB54_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -28(%rbp)
	je	.LBB54_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB54_10:                              # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB54_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB54_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB54_22
.LBB54_13:                              # %if.then22
	movl	$0, -20(%rbp)
.LBB54_14:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_16 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB54_14 Depth=1
	movl	$0, -24(%rbp)
.LBB54_16:                              # %for.cond24
                                        #   Parent Loop BB54_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB54_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB54_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB54_16 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB54_16
.LBB54_19:                              # %for.end
                                        #   in Loop: Header=BB54_14 Depth=1
	jmp	.LBB54_20
.LBB54_20:                              # %for.inc35
                                        #   in Loop: Header=BB54_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB54_14
.LBB54_21:                              # %for.end37
	jmp	.LBB54_22
.LBB54_22:                              # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB54_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB54_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB54_30
.LBB54_25:                              # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB54_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB54_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB54_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB54_29:                              # %if.end59
	jmp	.LBB54_30
.LBB54_30:                              # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB54_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB54_32:                              # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$392260265, -32(%rbp)   # imm = 0x17616AA9
	jne	.LBB54_34
.LBB54_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_34:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_33
.Lfunc_end54:
	.size	write_one_macroblock.13, .Lfunc_end54-write_one_macroblock.13
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.14  # -- Begin function ChromaPrediction4x4.14
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.14,@function
ChromaPrediction4x4.14:                 # @ChromaPrediction4x4.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$1630602568, -68(%rbp)  # imm = 0x61310548
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -52(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB55_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB55_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB55_6
.LBB55_3:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB55_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB55_5:                               # %land.end
.LBB55_6:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB55_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB55_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB55_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -24(%rbp)
	jne	.LBB55_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -56(%rbp)
	jne	.LBB55_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -52(%rbp)
	jne	.LBB55_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB55_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB55_15
.LBB55_14:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB55_15:                              # %cond.end
	movq	%rax, -64(%rbp)
.LBB55_16:                              # %if.end
	cmpl	$-1, -24(%rbp)
	jne	.LBB55_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB55_87
.LBB55_18:                              # %if.end30
	cmpl	$0, -24(%rbp)
	je	.LBB55_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -24(%rbp)
	jne	.LBB55_21
.LBB55_20:                              # %if.then36
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB55_21:                              # %if.end37
	cmpl	$1, -24(%rbp)
	je	.LBB55_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -24(%rbp)
	jne	.LBB55_24
.LBB55_23:                              # %if.then43
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB55_24:                              # %if.end44
	cmpl	$0, -72(%rbp)
	je	.LBB55_56
# %bb.25:                               # %if.then46
	cmpl	$2, -24(%rbp)
	jne	.LBB55_35
# %bb.26:                               # %if.then49
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB55_27:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_29 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB55_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB55_27 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB55_29:                              # %for.cond52
                                        #   Parent Loop BB55_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB55_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB55_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB55_29 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_29
.LBB55_32:                              # %for.end
                                        #   in Loop: Header=BB55_27 Depth=1
	jmp	.LBB55_33
.LBB55_33:                              # %for.inc99
                                        #   in Loop: Header=BB55_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_27
.LBB55_34:                              # %for.end101
	jmp	.LBB55_55
.LBB55_35:                              # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB55_45
# %bb.36:                               # %if.then104
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB55_37:                              # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_39 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB55_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB55_37 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB55_39:                              # %for.cond109
                                        #   Parent Loop BB55_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB55_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB55_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB55_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_39
.LBB55_42:                              # %for.end139
                                        #   in Loop: Header=BB55_37 Depth=1
	jmp	.LBB55_43
.LBB55_43:                              # %for.inc140
                                        #   in Loop: Header=BB55_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_37
.LBB55_44:                              # %for.end142
	jmp	.LBB55_54
.LBB55_45:                              # %if.else143
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB55_46:                              # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_48 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB55_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB55_46 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB55_48:                              # %for.cond148
                                        #   Parent Loop BB55_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB55_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB55_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB55_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_48
.LBB55_51:                              # %for.end178
                                        #   in Loop: Header=BB55_46 Depth=1
	jmp	.LBB55_52
.LBB55_52:                              # %for.inc179
                                        #   in Loop: Header=BB55_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_46
.LBB55_53:                              # %for.end181
	jmp	.LBB55_54
.LBB55_54:                              # %if.end182
	jmp	.LBB55_55
.LBB55_55:                              # %if.end183
	jmp	.LBB55_87
.LBB55_56:                              # %if.else184
	cmpl	$2, -24(%rbp)
	jne	.LBB55_66
# %bb.57:                               # %if.then187
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB55_58:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_60 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB55_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB55_58 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB55_60:                              # %for.cond192
                                        #   Parent Loop BB55_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB55_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB55_60 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB55_60 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_60
.LBB55_63:                              # %for.end208
                                        #   in Loop: Header=BB55_58 Depth=1
	jmp	.LBB55_64
.LBB55_64:                              # %for.inc209
                                        #   in Loop: Header=BB55_58 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_58
.LBB55_65:                              # %for.end211
	jmp	.LBB55_86
.LBB55_66:                              # %if.else212
	cmpl	$0, -24(%rbp)
	jne	.LBB55_76
# %bb.67:                               # %if.then215
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB55_68:                              # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_70 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB55_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB55_68 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB55_70:                              # %for.cond220
                                        #   Parent Loop BB55_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB55_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB55_70 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB55_70 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_70
.LBB55_73:                              # %for.end233
                                        #   in Loop: Header=BB55_68 Depth=1
	jmp	.LBB55_74
.LBB55_74:                              # %for.inc234
                                        #   in Loop: Header=BB55_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_68
.LBB55_75:                              # %for.end236
	jmp	.LBB55_85
.LBB55_76:                              # %if.else237
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB55_77:                              # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_79 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB55_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB55_77 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB55_79:                              # %for.cond242
                                        #   Parent Loop BB55_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB55_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB55_79 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB55_79 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_79
.LBB55_82:                              # %for.end255
                                        #   in Loop: Header=BB55_77 Depth=1
	jmp	.LBB55_83
.LBB55_83:                              # %for.inc256
                                        #   in Loop: Header=BB55_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_77
.LBB55_84:                              # %for.end258
	jmp	.LBB55_85
.LBB55_85:                              # %if.end259
	jmp	.LBB55_86
.LBB55_86:                              # %if.end260
	jmp	.LBB55_87
.LBB55_87:                              # %if.end261
	cmpl	$1630602568, -68(%rbp)  # imm = 0x61310548
	jne	.LBB55_89
.LBB55_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_88
.Lfunc_end55:
	.size	ChromaPrediction4x4.14, .Lfunc_end55-ChromaPrediction4x4.14
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.15    # -- Begin function TransformDecision.15
	.p2align	4, 0x90
	.type	TransformDecision.15,@function
TransformDecision.15:                   # @TransformDecision.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$994210289, -84(%rbp)   # imm = 0x3B4271F1
	movl	%edi, -48(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -36(%rbp)
	cmpl	$-1, -48(%rbp)
	jne	.LBB56_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -60(%rbp)
	jmp	.LBB56_3
.LBB56_2:                               # %if.else
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB56_3:                               # %if.end
	jmp	.LBB56_4
.LBB56_4:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_6 Depth 2
                                        #       Child Loop BB56_8 Depth 3
                                        #         Child Loop BB56_10 Depth 4
                                        #           Child Loop BB56_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB56_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB56_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-50(%rbp), %rsi
	leaq	-88(%rbp), %rdx
	leaq	-76(%rbp), %rcx
	leaq	-52(%rbp), %r8
	leaq	-54(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -64(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -68(%rbp)
	movl	$0, -32(%rbp)
	movl	-64(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB56_6:                               # %for.cond3
                                        #   Parent Loop BB56_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_8 Depth 3
                                        #         Child Loop BB56_10 Depth 4
                                        #           Child Loop BB56_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB56_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB56_8:                               # %for.cond8
                                        #   Parent Loop BB56_4 Depth=1
                                        #     Parent Loop BB56_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB56_10 Depth 4
                                        #           Child Loop BB56_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB56_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-16(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-50(%rbp), %edx
	movl	-88(%rbp), %ecx
	movl	-76(%rbp), %r8d
	movw	-52(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-54(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-32(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -28(%rbp)
.LBB56_10:                              # %for.cond13
                                        #   Parent Loop BB56_4 Depth=1
                                        #     Parent Loop BB56_6 Depth=2
                                        #       Parent Loop BB56_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB56_12 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB56_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB56_10 Depth=4
	movl	$0, -24(%rbp)
.LBB56_12:                              # %for.cond17
                                        #   Parent Loop BB56_4 Depth=1
                                        #     Parent Loop BB56_6 Depth=2
                                        #       Parent Loop BB56_8 Depth=3
                                        #         Parent Loop BB56_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB56_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB56_12 Depth=5
	movq	imgY_org, %rax
	movl	-72(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB56_12 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB56_12
.LBB56_15:                              # %for.end
                                        #   in Loop: Header=BB56_10 Depth=4
	jmp	.LBB56_16
.LBB56_16:                              # %for.inc38
                                        #   in Loop: Header=BB56_10 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB56_10
.LBB56_17:                              # %for.end40
                                        #   in Loop: Header=BB56_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB56_8 Depth=3
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_8
.LBB56_19:                              # %for.end44
                                        #   in Loop: Header=BB56_6 Depth=2
	jmp	.LBB56_20
.LBB56_20:                              # %for.inc45
                                        #   in Loop: Header=BB56_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_6
.LBB56_21:                              # %for.end47
                                        #   in Loop: Header=BB56_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB56_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_4
.LBB56_23:                              # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB56_25
# %bb.24:                               # %if.then56
	movl	$1, -44(%rbp)
	jmp	.LBB56_28
.LBB56_25:                              # %if.else57
	movl	-40(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB56_27
# %bb.26:                               # %if.then60
	movl	$1, -44(%rbp)
	jmp	.LBB56_28
.LBB56_27:                              # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -44(%rbp)
.LBB56_28:                              # %return
	movl	-44(%rbp), %ebx
	cmpl	$994210289, -84(%rbp)   # imm = 0x3B4271F1
	jne	.LBB56_30
.LBB56_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_30:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_29
.Lfunc_end56:
	.size	TransformDecision.15, .Lfunc_end56-TransformDecision.15
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.16   # -- Begin function predict_nnz_chroma.16
	.p2align	4, 0x90
	.type	predict_nnz_chroma.16,@function
predict_nnz_chroma.16:                  # @predict_nnz_chroma.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$1073893458, -64(%rbp)  # imm = 0x40025052
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -56(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB57_14
# %bb.1:                                # %if.then
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB57_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB57_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB57_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB57_5:                               # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB57_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB57_7:                               # %if.end19
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB57_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB57_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB57_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB57_11:                              # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB57_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB57_13:                              # %if.end57
	jmp	.LBB57_27
.LBB57_14:                              # %if.else
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB57_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB57_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB57_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB57_18:                              # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB57_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB57_20:                              # %if.end90
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB57_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB57_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB57_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB57_24:                              # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB57_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB57_26:                              # %if.end124
	jmp	.LBB57_27
.LBB57_27:                              # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB57_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB57_29:                              # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$1073893458, -64(%rbp)  # imm = 0x40025052
	jne	.LBB57_31
.LBB57_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_31:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_30
.Lfunc_end57:
	.size	predict_nnz_chroma.16, .Lfunc_end57-predict_nnz_chroma.16
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.17  # -- Begin function writeCoeff4x4_CAVLC.17
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.17,@function
writeCoeff4x4_CAVLC.17:                 # @writeCoeff4x4_CAVLC.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1073230353, -172(%rbp) # imm = 0x3FF83211
	movl	%edi, -168(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -48(%rbp)
	movl	%ecx, -68(%rbp)
	movl	$0, -36(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -208(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -84(%rbp)
	movl	$0, -160(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -128(%rbp)
	movq	$0, -136(%rbp)
	movl	-168(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB58_22
# %bb.1:                                # %entry
	movq	.LJTI58_0(,%rax,8), %rax
	jmpq	*%rax
.LBB58_2:                               # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -72(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB58_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB58_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB58_6
.LBB58_5:                               # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB58_7
.LBB58_6:                               # %if.else
	movl	$14, -24(%rbp)
.LBB58_7:                               # %if.end
	jmp	.LBB58_23
.LBB58_8:                               # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -72(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB58_23
.LBB58_9:                               # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -72(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB58_23
.LBB58_10:                              # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -84(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-68(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-68(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB58_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB58_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB58_14
.LBB58_13:                              # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB58_15
.LBB58_14:                              # %if.else66
	movl	$13, -24(%rbp)
.LBB58_15:                              # %if.end67
	jmp	.LBB58_23
.LBB58_16:                              # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -72(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -160(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB58_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB58_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB58_20
.LBB58_19:                              # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB58_21
.LBB58_20:                              # %if.else92
	movl	$15, -24(%rbp)
.LBB58_21:                              # %if.end93
	jmp	.LBB58_23
.LBB58_22:                              # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB58_23:                              # %sw.epilog
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -156(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -112(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB58_24:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -84(%rbp)
	je	.LBB58_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB58_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB58_27
.LBB58_26:                              # %cond.false
                                        #   in Loop: Header=BB58_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB58_27
.LBB58_27:                              # %cond.end
                                        #   in Loop: Header=BB58_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB58_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB58_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB58_29:                              # %land.end
                                        #   in Loop: Header=BB58_24 Depth=1
	testb	$1, %dl
	jne	.LBB58_30
	jmp	.LBB58_41
.LBB58_30:                              # %for.body
                                        #   in Loop: Header=BB58_24 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -96(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB58_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB58_24 Depth=1
	cmpl	$0, -96(%rbp)
	je	.LBB58_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB58_24 Depth=1
	movl	-96(%rbp), %eax
	addl	-112(%rbp), %eax
	movl	%eax, -112(%rbp)
.LBB58_33:                              # %if.end110
                                        #   in Loop: Header=BB58_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB58_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB58_24 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-156(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -156(%rbp)
	cmpl	$3, -32(%rbp)
	jle	.LBB58_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB58_24 Depth=1
	movl	$3, -32(%rbp)
.LBB58_36:                              # %if.end117
                                        #   in Loop: Header=BB58_24 Depth=1
	jmp	.LBB58_38
.LBB58_37:                              # %if.else118
                                        #   in Loop: Header=BB58_24 Depth=1
	movl	$0, -32(%rbp)
.LBB58_38:                              # %if.end119
                                        #   in Loop: Header=BB58_24 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
.LBB58_39:                              # %if.end121
                                        #   in Loop: Header=BB58_24 Depth=1
	jmp	.LBB58_40
.LBB58_40:                              # %for.inc
                                        #   in Loop: Header=BB58_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_24
.LBB58_41:                              # %for.end
	cmpl	$0, -84(%rbp)
	jne	.LBB58_61
# %bb.42:                               # %if.then124
	cmpl	$0, -160(%rbp)
	jne	.LBB58_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB58_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB58_46
.LBB58_45:                              # %cond.false132
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB58_46:                              # %cond.end136
	movl	%eax, -92(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB58_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB58_49
.LBB58_48:                              # %cond.false142
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB58_49:                              # %cond.end145
	movl	%eax, -100(%rbp)
	movl	-92(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -108(%rbp)
	jmp	.LBB58_51
.LBB58_50:                              # %if.else148
	movl	-68(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -92(%rbp)
	movl	-68(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -100(%rbp)
	movl	-92(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -108(%rbp)
.LBB58_51:                              # %if.end151
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-92(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -108(%rbp)
	jge	.LBB58_53
# %bb.52:                               # %if.then160
	movl	$0, -88(%rbp)
	jmp	.LBB58_60
.LBB58_53:                              # %if.else161
	cmpl	$4, -108(%rbp)
	jge	.LBB58_55
# %bb.54:                               # %if.then163
	movl	$1, -88(%rbp)
	jmp	.LBB58_59
.LBB58_55:                              # %if.else164
	cmpl	$8, -108(%rbp)
	jge	.LBB58_57
# %bb.56:                               # %if.then166
	movl	$2, -88(%rbp)
	jmp	.LBB58_58
.LBB58_57:                              # %if.else167
	movl	$3, -88(%rbp)
.LBB58_58:                              # %if.end168
	jmp	.LBB58_59
.LBB58_59:                              # %if.end169
	jmp	.LBB58_60
.LBB58_60:                              # %if.end170
	jmp	.LBB58_62
.LBB58_61:                              # %if.else171
	movl	$0, -88(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB58_62:                              # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-88(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -84(%rbp)
	jne	.LBB58_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB58_65
.LBB58_64:                              # %if.else177
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB58_65:                              # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -40(%rbp)
	jne	.LBB58_67
# %bb.66:                               # %if.then189
	movl	-36(%rbp), %eax
	movl	%eax, -164(%rbp)
	jmp	.LBB58_122
.LBB58_67:                              # %if.end190
	cmpl	$0, -40(%rbp)
	je	.LBB58_121
# %bb.68:                               # %if.then192
	movl	$0, -80(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB58_69:                              # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-76(%rbp), %ecx
	subl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB58_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB58_69 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB58_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB58_72:                              # %if.end202
                                        #   in Loop: Header=BB58_69 Depth=1
	movl	-80(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB58_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB58_69 Depth=1
	movl	-80(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -80(%rbp)
.LBB58_74:                              # %if.end205
                                        #   in Loop: Header=BB58_69 Depth=1
	jmp	.LBB58_75
.LBB58_75:                              # %for.inc206
                                        #   in Loop: Header=BB58_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_69
.LBB58_76:                              # %for.end207
	cmpl	$0, -32(%rbp)
	je	.LBB58_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB58_78:                              # %if.end223
	movl	$1, -144(%rbp)
	cmpl	$3, -40(%rbp)
	jle	.LBB58_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -32(%rbp)
	jne	.LBB58_81
# %bb.80:                               # %if.then226
	movl	$0, -144(%rbp)
.LBB58_81:                              # %if.end227
	cmpl	$10, -40(%rbp)
	jle	.LBB58_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -32(%rbp)
	jge	.LBB58_84
# %bb.83:                               # %if.then231
	movl	$1, -28(%rbp)
	jmp	.LBB58_85
.LBB58_84:                              # %if.else232
	movl	$0, -28(%rbp)
.LBB58_85:                              # %if.end233
	movl	-76(%rbp), %eax
	subl	-32(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB58_86:                              # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB58_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB58_86 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -144(%rbp)
	je	.LBB58_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB58_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB58_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB58_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB58_91
.LBB58_90:                              # %if.else249
                                        #   in Loop: Header=BB58_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB58_91:                              # %if.end252
                                        #   in Loop: Header=BB58_86 Depth=1
	movl	$0, -144(%rbp)
.LBB58_92:                              # %if.end253
                                        #   in Loop: Header=BB58_86 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB58_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB58_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB58_95
.LBB58_94:                              # %if.else257
                                        #   in Loop: Header=BB58_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-28(%rbp), %esi
	movq	-120(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB58_95:                              # %if.end259
                                        #   in Loop: Header=BB58_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB58_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB58_86 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
.LBB58_97:                              # %if.end266
                                        #   in Loop: Header=BB58_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-76(%rbp), %ecx
	subl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB58_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB58_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB58_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB58_86 Depth=1
	movl	$2, -28(%rbp)
.LBB58_100:                             # %if.end273
                                        #   in Loop: Header=BB58_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB58_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_86
.LBB58_102:                             # %for.end285
	movl	-40(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB58_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-112(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-40(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -84(%rbp)
	jne	.LBB58_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB58_106
.LBB58_105:                             # %if.else295
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB58_106:                             # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB58_107:                             # %if.end307
	movl	-112(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB58_108:                             # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB58_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB58_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -96(%rbp)
	movl	-96(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -40(%rbp)
	jle	.LBB58_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB58_108 Depth=1
	cmpl	$0, -104(%rbp)
	jne	.LBB58_112
.LBB58_111:                             # %if.then318
	jmp	.LBB58_120
.LBB58_112:                             # %if.end319
                                        #   in Loop: Header=BB58_108 Depth=1
	cmpl	$1, -140(%rbp)
	jle	.LBB58_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB58_108 Depth=1
	cmpl	$0, -104(%rbp)
	je	.LBB58_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB58_108 Depth=1
	movl	-104(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	cmpl	$6, -28(%rbp)
	jle	.LBB58_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB58_108 Depth=1
	movl	$6, -28(%rbp)
.LBB58_116:                             # %if.end327
                                        #   in Loop: Header=BB58_108 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-96(%rbp), %eax
	movl	-104(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -104(%rbp)
	movl	-140(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -140(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB58_117:                             # %if.end341
                                        #   in Loop: Header=BB58_108 Depth=1
	jmp	.LBB58_118
.LBB58_118:                             # %for.inc342
                                        #   in Loop: Header=BB58_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_108
.LBB58_119:                             # %for.end344.loopexit
	jmp	.LBB58_120
.LBB58_120:                             # %for.end344
	jmp	.LBB58_121
.LBB58_121:                             # %if.end345
	movl	-36(%rbp), %eax
	movl	%eax, -164(%rbp)
.LBB58_122:                             # %return
	movl	-164(%rbp), %ebx
	cmpl	$1073230353, -172(%rbp) # imm = 0x3FF83211
	jne	.LBB58_124
.LBB58_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_123
.Lfunc_end58:
	.size	writeCoeff4x4_CAVLC.17, .Lfunc_end58-writeCoeff4x4_CAVLC.17
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI58_0:
	.quad	.LBB58_2
	.quad	.LBB58_8
	.quad	.LBB58_9
	.quad	.LBB58_22
	.quad	.LBB58_22
	.quad	.LBB58_22
	.quad	.LBB58_10
	.quad	.LBB58_16
                                        # -- End function
	.text
	.globl	writeChromaIntraPredMode.18 # -- Begin function writeChromaIntraPredMode.18
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.18,@function
writeChromaIntraPredMode.18:            # @writeChromaIntraPredMode.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1032227406, -36(%rbp)  # imm = 0x3D868A4E
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -72(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB59_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB59_3
.LBB59_2:                               # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB59_3:                               # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-64(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-72(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$1032227406, -36(%rbp)  # imm = 0x3D868A4E
	jne	.LBB59_5
.LBB59_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_4
.Lfunc_end59:
	.size	writeChromaIntraPredMode.18, .Lfunc_end59-writeChromaIntraPredMode.18
	.cfi_endproc
                                        # -- End function
	.globl	copyblock4x4.19         # -- Begin function copyblock4x4.19
	.p2align	4, 0x90
	.type	copyblock4x4.19,@function
copyblock4x4.19:                        # @copyblock4x4.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1028740109, -20(%rbp)  # imm = 0x3D51540D
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	48(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	cmpl	$1028740109, -20(%rbp)  # imm = 0x3D51540D
	jne	.LBB60_2
.LBB60_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_1
.Lfunc_end60:
	.size	copyblock4x4.19, .Lfunc_end60-copyblock4x4.19
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.20 # -- Begin function IntraChromaPrediction4x4.20
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.20,@function
IntraChromaPrediction4x4.20:            # @IntraChromaPrediction4x4.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$927256255, -24(%rbp)   # imm = 0x3744CEBF
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB61_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_3 Depth 2
	movl	-8(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB61_1 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB61_3:                               # %for.cond1
                                        #   Parent Loop BB61_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB61_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-20(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-28(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB61_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_3
.LBB61_6:                               # %for.end
                                        #   in Loop: Header=BB61_1 Depth=1
	jmp	.LBB61_7
.LBB61_7:                               # %for.inc17
                                        #   in Loop: Header=BB61_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_1
.LBB61_8:                               # %for.end19
	cmpl	$927256255, -24(%rbp)   # imm = 0x3744CEBF
	jne	.LBB61_10
.LBB61_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_9
.Lfunc_end61:
	.size	IntraChromaPrediction4x4.20, .Lfunc_end61-IntraChromaPrediction4x4.20
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock.21 # -- Begin function proceed2nextMacroblock.21
	.p2align	4, 0x90
	.type	proceed2nextMacroblock.21,@function
proceed2nextMacroblock.21:              # @proceed2nextMacroblock.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2000631329, -28(%rbp)  # imm = 0x773F3621
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1348(%rcx,%rdx,4), %eax
	movl	%eax, 1348(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1408(%rcx,%rdx,4), %eax
	movl	%eax, 1408(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1388(%rcx,%rdx,4), %eax
	movl	%eax, 1388(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1428(%rcx,%rdx,4), %eax
	movl	%eax, 1428(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	28(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1448(%rcx,%rdx,4), %eax
	movl	%eax, 1448(%rcx,%rdx,4)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB62_3
# %bb.1:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB62_3
# %bb.2:                                # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB62_9
.LBB62_3:                               # %if.then
	movq	stats, %rax
	movq	-8(%rbp), %rcx
	movslq	524(%rcx), %rcx
	movl	672(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 672(%rax,%rcx,4)
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB62_8
# %bb.4:                                # %if.then32
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB62_6
# %bb.5:                                # %if.then33
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB62_7
.LBB62_6:                               # %if.else
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB62_7:                               # %if.end
	jmp	.LBB62_8
.LBB62_8:                               # %if.end48
	jmp	.LBB62_9
.LBB62_9:                               # %if.end49
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addq	$1028, %rcx             # imm = 0x404
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movq	-8(%rbp), %rdx
	movslq	72(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB62_35
# %bb.10:                               # %if.then67
	movq	-8(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB62_26
# %bb.11:                               # %if.then70
	movl	$0, -12(%rbp)
.LBB62_12:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB62_25
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB62_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jle	.LBB62_15
# %bb.14:                               # %if.then75
                                        #   in Loop: Header=BB62_12 Depth=1
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	472(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB62_16
.LBB62_15:                              # %if.else86
                                        #   in Loop: Header=BB62_12 Depth=1
	movq	stats, %rax
	addq	$32, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	572(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB62_16:                              # %if.end94
                                        #   in Loop: Header=BB62_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	jne	.LBB62_23
# %bb.17:                               # %if.then99
                                        #   in Loop: Header=BB62_12 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB62_19
# %bb.18:                               # %land.lhs.true
                                        #   in Loop: Header=BB62_12 Depth=1
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB62_20
.LBB62_19:                              # %lor.lhs.false105
                                        #   in Loop: Header=BB62_12 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB62_21
.LBB62_20:                              # %if.then107
                                        #   in Loop: Header=BB62_12 Depth=1
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB62_22
.LBB62_21:                              # %if.else114
                                        #   in Loop: Header=BB62_12 Depth=1
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB62_22:                              # %if.end121
                                        #   in Loop: Header=BB62_12 Depth=1
	jmp	.LBB62_23
.LBB62_23:                              # %if.end122
                                        #   in Loop: Header=BB62_12 Depth=1
	jmp	.LBB62_24
.LBB62_24:                              # %for.inc
                                        #   in Loop: Header=BB62_12 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_12
.LBB62_25:                              # %for.end
	jmp	.LBB62_34
.LBB62_26:                              # %if.else124
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jl	.LBB62_33
# %bb.27:                               # %land.lhs.true127
	movq	-8(%rbp), %rax
	cmpl	$3, 72(%rax)
	jg	.LBB62_33
# %bb.28:                               # %land.lhs.true130
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB62_33
# %bb.29:                               # %if.then134
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB62_31
# %bb.30:                               # %if.then137
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB62_32
.LBB62_31:                              # %if.else146
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB62_32:                              # %if.end155
	jmp	.LBB62_33
.LBB62_33:                              # %if.end156
	jmp	.LBB62_34
.LBB62_34:                              # %if.end157
	jmp	.LBB62_35
.LBB62_35:                              # %if.end158
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB62_37
# %bb.36:                               # %lor.lhs.false161
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB62_38
.LBB62_37:                              # %if.then164
	movq	stats, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
.LBB62_38:                              # %if.end167
	cmpl	$2000631329, -28(%rbp)  # imm = 0x773F3621
	jne	.LBB62_40
.LBB62_39:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_40:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_39
.Lfunc_end62:
	.size	proceed2nextMacroblock.21, .Lfunc_end62-proceed2nextMacroblock.21
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.22    # -- Begin function LumaPrediction4x4.22
	.p2align	4, 0x90
	.type	LumaPrediction4x4.22,@function
LumaPrediction4x4.22:                   # @LumaPrediction4x4.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$1863378110, -104(%rbp) # imm = 0x6F10E4BE
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -76(%rbp)
	movl	%r8d, -56(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -72(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -64(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB63_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB63_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB63_6
.LBB63_3:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB63_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB63_5:                               # %land.end
.LBB63_6:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB63_9
# %bb.7:                                # %land.lhs.true11
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB63_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB63_10
.LBB63_9:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB63_10
.LBB63_10:                              # %cond.end
	movl	%ecx, -68(%rbp)
	movq	-88(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB63_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB63_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB63_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -24(%rbp)
	jne	.LBB63_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -76(%rbp)
	jne	.LBB63_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -56(%rbp)
	jne	.LBB63_20
# %bb.16:                               # %if.then
	movq	-88(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB63_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB63_19
.LBB63_18:                              # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB63_19:                              # %cond.end38
	movq	%rax, -96(%rbp)
.LBB63_20:                              # %if.end
	cmpl	$0, -24(%rbp)
	je	.LBB63_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -24(%rbp)
	jne	.LBB63_23
.LBB63_22:                              # %if.then45
	movl	-60(%rbp), %esi
	movl	-52(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB63_23:                              # %if.end58
	cmpl	$1, -24(%rbp)
	je	.LBB63_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -24(%rbp)
	jne	.LBB63_26
.LBB63_25:                              # %if.then64
	movl	-60(%rbp), %esi
	movl	-52(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB63_26:                              # %if.end77
	cmpl	$0, -100(%rbp)
	je	.LBB63_58
# %bb.27:                               # %if.then79
	cmpl	$2, -24(%rbp)
	jne	.LBB63_37
# %bb.28:                               # %if.then82
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB63_29:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_31 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB63_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB63_29 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB63_31:                              # %for.cond85
                                        #   Parent Loop BB63_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB63_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB63_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB63_31 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_31
.LBB63_34:                              # %for.end
                                        #   in Loop: Header=BB63_29 Depth=1
	jmp	.LBB63_35
.LBB63_35:                              # %for.inc125
                                        #   in Loop: Header=BB63_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_29
.LBB63_36:                              # %for.end127
	jmp	.LBB63_57
.LBB63_37:                              # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB63_47
# %bb.38:                               # %if.then130
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB63_39:                              # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_41 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB63_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB63_39 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB63_41:                              # %for.cond135
                                        #   Parent Loop BB63_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB63_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB63_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB63_41 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_41
.LBB63_44:                              # %for.end161
                                        #   in Loop: Header=BB63_39 Depth=1
	jmp	.LBB63_45
.LBB63_45:                              # %for.inc162
                                        #   in Loop: Header=BB63_39 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_39
.LBB63_46:                              # %for.end164
	jmp	.LBB63_56
.LBB63_47:                              # %if.else165
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB63_48:                              # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_50 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB63_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB63_48 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB63_50:                              # %for.cond170
                                        #   Parent Loop BB63_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB63_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB63_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB63_50 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_50
.LBB63_53:                              # %for.end196
                                        #   in Loop: Header=BB63_48 Depth=1
	jmp	.LBB63_54
.LBB63_54:                              # %for.inc197
                                        #   in Loop: Header=BB63_48 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_48
.LBB63_55:                              # %for.end199
	jmp	.LBB63_56
.LBB63_56:                              # %if.end200
	jmp	.LBB63_57
.LBB63_57:                              # %if.end201
	jmp	.LBB63_89
.LBB63_58:                              # %if.else202
	cmpl	$2, -24(%rbp)
	jne	.LBB63_68
# %bb.59:                               # %if.then205
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB63_60:                              # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_62 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB63_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB63_60 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB63_62:                              # %for.cond210
                                        #   Parent Loop BB63_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB63_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB63_62 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB63_62 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_62
.LBB63_65:                              # %for.end226
                                        #   in Loop: Header=BB63_60 Depth=1
	jmp	.LBB63_66
.LBB63_66:                              # %for.inc227
                                        #   in Loop: Header=BB63_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_60
.LBB63_67:                              # %for.end229
	jmp	.LBB63_88
.LBB63_68:                              # %if.else230
	cmpl	$0, -24(%rbp)
	jne	.LBB63_78
# %bb.69:                               # %if.then233
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB63_70:                              # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_72 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB63_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB63_70 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB63_72:                              # %for.cond238
                                        #   Parent Loop BB63_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB63_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB63_72 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB63_72 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_72
.LBB63_75:                              # %for.end251
                                        #   in Loop: Header=BB63_70 Depth=1
	jmp	.LBB63_76
.LBB63_76:                              # %for.inc252
                                        #   in Loop: Header=BB63_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_70
.LBB63_77:                              # %for.end254
	jmp	.LBB63_87
.LBB63_78:                              # %if.else255
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB63_79:                              # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_81 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB63_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB63_79 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB63_81:                              # %for.cond260
                                        #   Parent Loop BB63_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB63_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB63_81 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB63_81 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_81
.LBB63_84:                              # %for.end273
                                        #   in Loop: Header=BB63_79 Depth=1
	jmp	.LBB63_85
.LBB63_85:                              # %for.inc274
                                        #   in Loop: Header=BB63_79 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_79
.LBB63_86:                              # %for.end276
	jmp	.LBB63_87
.LBB63_87:                              # %if.end277
	jmp	.LBB63_88
.LBB63_88:                              # %if.end278
	jmp	.LBB63_89
.LBB63_89:                              # %if.end279
	cmpl	$1863378110, -104(%rbp) # imm = 0x6F10E4BE
	jne	.LBB63_91
.LBB63_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_91:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_90
.Lfunc_end63:
	.size	LumaPrediction4x4.22, .Lfunc_end63-LumaPrediction4x4.22
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.23   # -- Begin function predict_nnz_chroma.23
	.p2align	4, 0x90
	.type	predict_nnz_chroma.23,@function
predict_nnz_chroma.23:                  # @predict_nnz_chroma.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$1416560940, -64(%rbp)  # imm = 0x546F012C
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -56(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB64_14
# %bb.1:                                # %if.then
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB64_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB64_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB64_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB64_5:                               # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB64_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB64_7:                               # %if.end19
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB64_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB64_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB64_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB64_11:                              # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB64_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB64_13:                              # %if.end57
	jmp	.LBB64_27
.LBB64_14:                              # %if.else
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB64_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB64_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB64_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB64_18:                              # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB64_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB64_20:                              # %if.end90
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB64_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB64_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB64_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB64_24:                              # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB64_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB64_26:                              # %if.end124
	jmp	.LBB64_27
.LBB64_27:                              # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB64_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB64_29:                              # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$1416560940, -64(%rbp)  # imm = 0x546F012C
	jne	.LBB64_31
.LBB64_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_31:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_30
.Lfunc_end64:
	.size	predict_nnz_chroma.23, .Lfunc_end64-predict_nnz_chroma.23
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer.24         # -- Begin function writeMBLayer.24
	.p2align	4, 0x90
	.type	writeMBLayer.24,@function
writeMBLayer.24:                        # @writeMBLayer.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$553332670, -92(%rbp)   # imm = 0x20FB2FBE
	movl	%edi, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-64(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB65_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-64(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB65_3
.LBB65_2:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB65_3
.LBB65_3:                               # %cond.end
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB65_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB65_9
.LBB65_5:                               # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB65_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB65_8
.LBB65_7:                               # %cond.false13
	movl	$1, %eax
	jmp	.LBB65_8
.LBB65_8:                               # %cond.end14
.LBB65_9:                               # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -68(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB65_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB65_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -68(%rbp)
	jmp	.LBB65_24
.LBB65_12:                              # %if.else
	movq	-112(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB65_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB65_17
	jmp	.LBB65_18
.LBB65_14:                              # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB65_16
# %bb.15:                               # %cond.true28
	movq	-112(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB65_18
	jmp	.LBB65_17
.LBB65_16:                              # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB65_17
	jmp	.LBB65_18
.LBB65_17:                              # %if.then32
	movl	$1, -60(%rbp)
.LBB65_18:                              # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB65_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB65_23
.LBB65_20:                              # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB65_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB65_22:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB65_23:                              # %if.end50
	jmp	.LBB65_24
.LBB65_24:                              # %if.end51
	jmp	.LBB65_25
.LBB65_25:                              # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB65_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB65_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB65_28:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-120(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB65_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB65_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB65_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB65_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB65_35
.LBB65_34:                              # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB65_35:                              # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB65_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB65_38
.LBB65_37:                              # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB65_38:                              # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB65_39:                              # %if.end96
	jmp	.LBB65_40
.LBB65_40:                              # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB65_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB65_43
.LBB65_42:                              # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB65_43:                              # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB65_89
.LBB65_44:                              # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB65_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB65_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB65_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -68(%rbp)
	je	.LBB65_49
.LBB65_48:                              # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -100(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-100(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB65_49:                              # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB65_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB65_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB65_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB65_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB65_55
.LBB65_54:                              # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB65_55:                              # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB65_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB65_58
.LBB65_57:                              # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB65_58:                              # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB65_59:                              # %if.end198
	jmp	.LBB65_60
.LBB65_60:                              # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB65_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB65_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB65_64
.LBB65_63:                              # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB65_64:                              # %if.end226
	jmp	.LBB65_88
.LBB65_65:                              # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB65_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB65_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB65_76
.LBB65_68:                              # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB65_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB65_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB65_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB65_72:                              # %if.end281
	jmp	.LBB65_73
.LBB65_73:                              # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB65_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB65_75:                              # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB65_87
.LBB65_76:                              # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -72(%rbp)
.LBB65_77:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_79 Depth 2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB65_77 Depth=1
	movl	$0, -44(%rbp)
.LBB65_79:                              # %for.cond310
                                        #   Parent Loop BB65_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB65_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB65_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB65_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB65_79
.LBB65_82:                              # %for.end
                                        #   in Loop: Header=BB65_77 Depth=1
	jmp	.LBB65_83
.LBB65_83:                              # %for.inc322
                                        #   in Loop: Header=BB65_77 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB65_77
.LBB65_84:                              # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB65_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB65_86:                              # %if.end345
	jmp	.LBB65_87
.LBB65_87:                              # %if.end346
	jmp	.LBB65_88
.LBB65_88:                              # %if.end347
	jmp	.LBB65_89
.LBB65_89:                              # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB65_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB65_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB65_92:                              # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB65_104
# %bb.93:                               # %if.then366
	movq	-120(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB65_94:                              # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB65_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB65_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB65_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB65_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB65_98
.LBB65_97:                              # %if.else380
                                        #   in Loop: Header=BB65_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB65_98:                              # %if.end382
                                        #   in Loop: Header=BB65_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB65_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB65_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB65_101
.LBB65_100:                             # %lor.rhs409
                                        #   in Loop: Header=BB65_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB65_101:                             # %lor.end415
                                        #   in Loop: Header=BB65_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB65_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB65_94
.LBB65_103:                             # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB65_104:                             # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB65_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB65_114
.LBB65_106:                             # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB65_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB65_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB65_110
.LBB65_109:                             # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB65_110:                             # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB65_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB65_113
.LBB65_112:                             # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB65_113:                             # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB65_114:                             # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB65_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB65_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB65_120
.LBB65_117:                             # %if.else480
	cmpl	$0, -96(%rbp)
	jne	.LBB65_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB65_119:                             # %if.end483
	jmp	.LBB65_120
.LBB65_120:                             # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB65_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB65_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB65_123:                             # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB65_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB65_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB65_129
.LBB65_126:                             # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB65_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB65_128:                             # %if.end516
	jmp	.LBB65_129
.LBB65_129:                             # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$553332670, -92(%rbp)   # imm = 0x20FB2FBE
	jne	.LBB65_131
.LBB65_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_131:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_130
.Lfunc_end65:
	.size	writeMBLayer.24, .Lfunc_end65-writeMBLayer.24
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8.25 # -- Begin function writeMotionVector8x8.25
	.p2align	4, 0x90
	.type	writeMotionVector8x8.25,@function
writeMotionVector8x8.25:                # @writeMotionVector8x8.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$702702187, -84(%rbp)   # imm = 0x29E2626B
	movl	%edi, -92(%rbp)
	movl	%esi, -88(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -100(%rbp)
	movl	%r8d, -96(%rbp)
	movl	%r9d, -40(%rbp)
	movl	$0, -60(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -128(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -136(%rbp)
	movl	-96(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB66_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB66_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB66_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -64(%rbp)
	jne	.LBB66_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB66_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB66_7
.LBB66_6:                               # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB66_7:                               # %cond.end
	movq	%rax, -120(%rbp)
.LBB66_8:                               # %if.end
	movl	-88(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB66_9:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_11 Depth 2
                                        #       Child Loop BB66_13 Depth 3
                                        #         Child Loop BB66_15 Depth 4
                                        #           Child Loop BB66_17 Depth 5
	movl	-20(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB66_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB66_9 Depth=1
	movl	-92(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB66_11:                              # %for.cond22
                                        #   Parent Loop BB66_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_13 Depth 3
                                        #         Child Loop BB66_15 Depth 4
                                        #           Child Loop BB66_17 Depth 5
	movl	-16(%rbp), %eax
	cmpl	-80(%rbp), %eax
	jge	.LBB66_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB66_11 Depth=2
	movl	$0, -12(%rbp)
.LBB66_13:                              # %for.cond25
                                        #   Parent Loop BB66_9 Depth=1
                                        #     Parent Loop BB66_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB66_15 Depth 4
                                        #           Child Loop BB66_17 Depth 5
	cmpl	$2, -12(%rbp)
	jge	.LBB66_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB66_13 Depth=3
	movq	-120(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-152(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -44(%rbp)
.LBB66_15:                              # %for.cond53
                                        #   Parent Loop BB66_9 Depth=1
                                        #     Parent Loop BB66_11 Depth=2
                                        #       Parent Loop BB66_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB66_17 Depth 5
	movl	-44(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB66_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB66_15 Depth=4
	movl	$0, -36(%rbp)
.LBB66_17:                              # %for.cond57
                                        #   Parent Loop BB66_9 Depth=1
                                        #     Parent Loop BB66_11 Depth=2
                                        #       Parent Loop BB66_13 Depth=3
                                        #         Parent Loop BB66_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-36(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB66_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB66_17 Depth=5
	movl	-72(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-40(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-44(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB66_17 Depth=5
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB66_17
.LBB66_20:                              # %for.end
                                        #   in Loop: Header=BB66_15 Depth=4
	jmp	.LBB66_21
.LBB66_21:                              # %for.inc70
                                        #   in Loop: Header=BB66_15 Depth=4
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB66_15
.LBB66_22:                              # %for.end72
                                        #   in Loop: Header=BB66_13 Depth=3
	movl	-72(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB66_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB66_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB66_25
.LBB66_24:                              # %if.else
                                        #   in Loop: Header=BB66_13 Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB66_25:                              # %if.end78
                                        #   in Loop: Header=BB66_13 Depth=3
	movq	-144(%rbp), %rax
	movq	24(%rax), %rax
	movq	-136(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-112(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-128(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB66_13 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_13
.LBB66_27:                              # %for.end90
                                        #   in Loop: Header=BB66_11 Depth=2
	jmp	.LBB66_28
.LBB66_28:                              # %for.inc91
                                        #   in Loop: Header=BB66_11 Depth=2
	movl	-68(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_11
.LBB66_29:                              # %for.end93
                                        #   in Loop: Header=BB66_9 Depth=1
	jmp	.LBB66_30
.LBB66_30:                              # %for.inc94
                                        #   in Loop: Header=BB66_9 Depth=1
	movl	-76(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_9
.LBB66_31:                              # %for.end96
	movl	-60(%rbp), %ebx
	cmpl	$702702187, -84(%rbp)   # imm = 0x29E2626B
	jne	.LBB66_33
.LBB66_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_33:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_32
.Lfunc_end66:
	.size	writeMotionVector8x8.25, .Lfunc_end66-writeMotionVector8x8.25
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding.26 # -- Begin function ChromaResidualCoding.26
	.p2align	4, 0x90
	.type	ChromaResidualCoding.26,@function
ChromaResidualCoding.26:                # @ChromaResidualCoding.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$490471082, -76(%rbp)   # imm = 0x1D3BFEAA
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB67_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB67_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB67_3:                               # %lor.end
.LBB67_4:                               # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -68(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB67_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_7 Depth 2
                                        #       Child Loop BB67_9 Depth 3
                                        #     Child Loop BB67_16 Depth 2
                                        #       Child Loop BB67_18 Depth 3
                                        #     Child Loop BB67_33 Depth 2
                                        #       Child Loop BB67_35 Depth 3
                                        #     Child Loop BB67_43 Depth 2
                                        #       Child Loop BB67_45 Depth 3
                                        #     Child Loop BB67_58 Depth 2
                                        #       Child Loop BB67_60 Depth 3
                                        #     Child Loop BB67_87 Depth 2
                                        #       Child Loop BB67_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB67_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB67_5 Depth=1
	movl	$0, -64(%rbp)
	movl	$0, -24(%rbp)
.LBB67_7:                               # %for.cond5
                                        #   Parent Loop BB67_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_9 Depth 3
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB67_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB67_7 Depth=2
	movl	$0, -20(%rbp)
.LBB67_9:                               # %for.cond8
                                        #   Parent Loop BB67_5 Depth=1
                                        #     Parent Loop BB67_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB67_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB67_9 Depth=3
	movslq	-68(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %edi
	leaq	-52(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	leaq	-80(%rbp), %rcx
	leaq	-54(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-52(%rbp), %ecx
	movl	-72(%rbp), %r8d
	movl	-80(%rbp), %r9d
	movw	-54(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-50(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB67_9 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_9
.LBB67_12:                              # %for.end
                                        #   in Loop: Header=BB67_7 Depth=2
	jmp	.LBB67_13
.LBB67_13:                              # %for.inc18
                                        #   in Loop: Header=BB67_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_7
.LBB67_14:                              # %for.end20
                                        #   in Loop: Header=BB67_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB67_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB67_5 Depth=1
	movl	$0, -8(%rbp)
.LBB67_16:                              # %for.cond21
                                        #   Parent Loop BB67_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_18 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB67_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB67_16 Depth=2
	movl	$0, -4(%rbp)
.LBB67_18:                              # %for.cond26
                                        #   Parent Loop BB67_5 Depth=1
                                        #     Parent Loop BB67_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB67_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB67_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB67_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB67_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB67_25
.LBB67_21:                              # %if.else
                                        #   in Loop: Header=BB67_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB67_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB67_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB67_24
.LBB67_23:                              # %if.else52
                                        #   in Loop: Header=BB67_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB67_24:                              # %if.end
                                        #   in Loop: Header=BB67_18 Depth=3
	jmp	.LBB67_25
.LBB67_25:                              # %if.end57
                                        #   in Loop: Header=BB67_18 Depth=3
	jmp	.LBB67_26
.LBB67_26:                              # %for.inc58
                                        #   in Loop: Header=BB67_18 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_18
.LBB67_27:                              # %for.end59
                                        #   in Loop: Header=BB67_16 Depth=2
	jmp	.LBB67_28
.LBB67_28:                              # %for.inc60
                                        #   in Loop: Header=BB67_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_16
.LBB67_29:                              # %for.end62
                                        #   in Loop: Header=BB67_5 Depth=1
	jmp	.LBB67_74
.LBB67_30:                              # %if.else63
                                        #   in Loop: Header=BB67_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB67_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB67_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB67_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB67_5 Depth=1
	movl	$0, -8(%rbp)
.LBB67_33:                              # %for.cond69
                                        #   Parent Loop BB67_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_35 Depth 3
	cmpl	$8, -8(%rbp)
	jge	.LBB67_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB67_33 Depth=2
	movl	$0, -4(%rbp)
.LBB67_35:                              # %for.cond73
                                        #   Parent Loop BB67_5 Depth=1
                                        #     Parent Loop BB67_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -4(%rbp)
	jge	.LBB67_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB67_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB67_35 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_35
.LBB67_38:                              # %for.end83
                                        #   in Loop: Header=BB67_33 Depth=2
	jmp	.LBB67_39
.LBB67_39:                              # %for.inc84
                                        #   in Loop: Header=BB67_33 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_33
.LBB67_40:                              # %for.end86
                                        #   in Loop: Header=BB67_5 Depth=1
	jmp	.LBB67_73
.LBB67_41:                              # %if.else87
                                        #   in Loop: Header=BB67_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB67_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB67_5 Depth=1
	movl	$0, -8(%rbp)
.LBB67_43:                              # %for.cond90
                                        #   Parent Loop BB67_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_45 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB67_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB67_43 Depth=2
	movl	$0, -4(%rbp)
.LBB67_45:                              # %for.cond95
                                        #   Parent Loop BB67_5 Depth=1
                                        #     Parent Loop BB67_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB67_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB67_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB67_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB67_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB67_52
.LBB67_48:                              # %if.else119
                                        #   in Loop: Header=BB67_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB67_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB67_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB67_51
.LBB67_50:                              # %if.else127
                                        #   in Loop: Header=BB67_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB67_51:                              # %if.end132
                                        #   in Loop: Header=BB67_45 Depth=3
	jmp	.LBB67_52
.LBB67_52:                              # %if.end133
                                        #   in Loop: Header=BB67_45 Depth=3
	jmp	.LBB67_53
.LBB67_53:                              # %for.inc134
                                        #   in Loop: Header=BB67_45 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_45
.LBB67_54:                              # %for.end136
                                        #   in Loop: Header=BB67_43 Depth=2
	jmp	.LBB67_55
.LBB67_55:                              # %for.inc137
                                        #   in Loop: Header=BB67_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_43
.LBB67_56:                              # %for.end139
                                        #   in Loop: Header=BB67_5 Depth=1
	jmp	.LBB67_72
.LBB67_57:                              # %if.else140
                                        #   in Loop: Header=BB67_5 Depth=1
	movl	$0, -8(%rbp)
.LBB67_58:                              # %for.cond141
                                        #   Parent Loop BB67_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_60 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB67_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB67_58 Depth=2
	movl	$0, -4(%rbp)
.LBB67_60:                              # %for.cond146
                                        #   Parent Loop BB67_5 Depth=1
                                        #     Parent Loop BB67_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB67_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB67_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB67_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB67_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB67_67
.LBB67_63:                              # %if.else175
                                        #   in Loop: Header=BB67_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB67_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB67_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB67_66
.LBB67_65:                              # %if.else188
                                        #   in Loop: Header=BB67_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB67_66:                              # %if.end198
                                        #   in Loop: Header=BB67_60 Depth=3
	jmp	.LBB67_67
.LBB67_67:                              # %if.end199
                                        #   in Loop: Header=BB67_60 Depth=3
	jmp	.LBB67_68
.LBB67_68:                              # %for.inc200
                                        #   in Loop: Header=BB67_60 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_60
.LBB67_69:                              # %for.end202
                                        #   in Loop: Header=BB67_58 Depth=2
	jmp	.LBB67_70
.LBB67_70:                              # %for.inc203
                                        #   in Loop: Header=BB67_58 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_58
.LBB67_71:                              # %for.end205
                                        #   in Loop: Header=BB67_5 Depth=1
	jmp	.LBB67_72
.LBB67_72:                              # %if.end206
                                        #   in Loop: Header=BB67_5 Depth=1
	jmp	.LBB67_73
.LBB67_73:                              # %if.end207
                                        #   in Loop: Header=BB67_5 Depth=1
	jmp	.LBB67_74
.LBB67_74:                              # %if.end208
                                        #   in Loop: Header=BB67_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB67_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB67_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB67_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB67_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB67_100
.LBB67_77:                              # %if.else215
                                        #   in Loop: Header=BB67_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB67_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB67_5 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB67_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB67_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB67_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB67_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB67_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB67_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB67_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB67_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB67_84
.LBB67_83:                              # %if.then247
                                        #   in Loop: Header=BB67_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB67_85
.LBB67_84:                              # %if.else249
                                        #   in Loop: Header=BB67_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB67_85:                              # %if.end251
                                        #   in Loop: Header=BB67_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB67_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB67_5 Depth=1
	movl	$0, -8(%rbp)
.LBB67_87:                              # %for.cond255
                                        #   Parent Loop BB67_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_89 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB67_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB67_87 Depth=2
	movl	$0, -4(%rbp)
.LBB67_89:                              # %for.cond260
                                        #   Parent Loop BB67_5 Depth=1
                                        #     Parent Loop BB67_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB67_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB67_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB67_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB67_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB67_93
.LBB67_92:                              # %if.else277
                                        #   in Loop: Header=BB67_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB67_93:                              # %if.end287
                                        #   in Loop: Header=BB67_89 Depth=3
	jmp	.LBB67_94
.LBB67_94:                              # %for.inc288
                                        #   in Loop: Header=BB67_89 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_89
.LBB67_95:                              # %for.end290
                                        #   in Loop: Header=BB67_87 Depth=2
	jmp	.LBB67_96
.LBB67_96:                              # %for.inc291
                                        #   in Loop: Header=BB67_87 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_87
.LBB67_97:                              # %for.end293
                                        #   in Loop: Header=BB67_5 Depth=1
	jmp	.LBB67_98
.LBB67_98:                              # %if.end294
                                        #   in Loop: Header=BB67_5 Depth=1
	jmp	.LBB67_99
.LBB67_99:                              # %if.end295
                                        #   in Loop: Header=BB67_5 Depth=1
	jmp	.LBB67_100
.LBB67_100:                             # %if.end296
                                        #   in Loop: Header=BB67_5 Depth=1
	jmp	.LBB67_101
.LBB67_101:                             # %for.inc297
                                        #   in Loop: Header=BB67_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_5
.LBB67_102:                             # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB67_139
# %bb.103:                              # %if.then307
	movl	$0, -8(%rbp)
.LBB67_104:                             # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_106 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB67_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB67_104 Depth=1
	movl	$0, -4(%rbp)
.LBB67_106:                             # %for.cond312
                                        #   Parent Loop BB67_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB67_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB67_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -60(%rbp)
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-60(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB67_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB67_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB67_110
.LBB67_109:                             # %cond.false
                                        #   in Loop: Header=BB67_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB67_110:                             # %cond.end
                                        #   in Loop: Header=BB67_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB67_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB67_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB67_116
.LBB67_112:                             # %cond.false358
                                        #   in Loop: Header=BB67_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB67_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB67_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB67_115
.LBB67_114:                             # %cond.false367
                                        #   in Loop: Header=BB67_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB67_115:                             # %cond.end373
                                        #   in Loop: Header=BB67_106 Depth=2
.LBB67_116:                             # %cond.end375
                                        #   in Loop: Header=BB67_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-28(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB67_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB67_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB67_119
.LBB67_118:                             # %cond.false394
                                        #   in Loop: Header=BB67_106 Depth=2
	movl	-28(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB67_119:                             # %cond.end400
                                        #   in Loop: Header=BB67_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB67_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB67_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_125
.LBB67_121:                             # %cond.false406
                                        #   in Loop: Header=BB67_106 Depth=2
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB67_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB67_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB67_124
.LBB67_123:                             # %cond.false415
                                        #   in Loop: Header=BB67_106 Depth=2
	movl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB67_124:                             # %cond.end421
                                        #   in Loop: Header=BB67_106 Depth=2
.LBB67_125:                             # %cond.end423
                                        #   in Loop: Header=BB67_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-36(%rbp), %esi
	movslq	-4(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-8(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB67_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB67_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB67_128
.LBB67_127:                             # %cond.false443
                                        #   in Loop: Header=BB67_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-36(%rbp), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB67_128:                             # %cond.end449
                                        #   in Loop: Header=BB67_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB67_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB67_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB67_134
.LBB67_130:                             # %cond.false455
                                        #   in Loop: Header=BB67_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-36(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB67_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB67_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB67_133
.LBB67_132:                             # %cond.false464
                                        #   in Loop: Header=BB67_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-36(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB67_133:                             # %cond.end470
                                        #   in Loop: Header=BB67_106 Depth=2
.LBB67_134:                             # %cond.end472
                                        #   in Loop: Header=BB67_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB67_106 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_106
.LBB67_136:                             # %for.end487
                                        #   in Loop: Header=BB67_104 Depth=1
	jmp	.LBB67_137
.LBB67_137:                             # %for.inc488
                                        #   in Loop: Header=BB67_104 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_104
.LBB67_138:                             # %for.end490
	jmp	.LBB67_139
.LBB67_139:                             # %if.end491
	cmpl	$490471082, -76(%rbp)   # imm = 0x1D3BFEAA
	jne	.LBB67_141
.LBB67_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_141:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_140
.Lfunc_end67:
	.size	ChromaResidualCoding.26, .Lfunc_end67-ChromaResidualCoding.26
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.27    # -- Begin function LumaPrediction4x4.27
	.p2align	4, 0x90
	.type	LumaPrediction4x4.27,@function
LumaPrediction4x4.27:                   # @LumaPrediction4x4.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$563370828, -104(%rbp)  # imm = 0x21945B4C
	movl	%edi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -64(%rbp)
	movl	%r8d, -68(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -76(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB68_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB68_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB68_6
.LBB68_3:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB68_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB68_5:                               # %land.end
.LBB68_6:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB68_9
# %bb.7:                                # %land.lhs.true11
	movq	-96(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB68_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB68_10
.LBB68_9:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB68_10
.LBB68_10:                              # %cond.end
	movl	%ecx, -56(%rbp)
	movq	-96(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB68_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB68_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB68_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -24(%rbp)
	jne	.LBB68_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -64(%rbp)
	jne	.LBB68_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -68(%rbp)
	jne	.LBB68_20
# %bb.16:                               # %if.then
	movq	-96(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB68_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB68_19
.LBB68_18:                              # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB68_19:                              # %cond.end38
	movq	%rax, -88(%rbp)
.LBB68_20:                              # %if.end
	cmpl	$0, -24(%rbp)
	je	.LBB68_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -24(%rbp)
	jne	.LBB68_23
.LBB68_22:                              # %if.then45
	movl	-60(%rbp), %esi
	movl	-72(%rbp), %edx
	movq	-88(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-56(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB68_23:                              # %if.end58
	cmpl	$1, -24(%rbp)
	je	.LBB68_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -24(%rbp)
	jne	.LBB68_26
.LBB68_25:                              # %if.then64
	movl	-60(%rbp), %esi
	movl	-72(%rbp), %edx
	movq	-88(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB68_26:                              # %if.end77
	cmpl	$0, -100(%rbp)
	je	.LBB68_58
# %bb.27:                               # %if.then79
	cmpl	$2, -24(%rbp)
	jne	.LBB68_37
# %bb.28:                               # %if.then82
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB68_29:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_31 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB68_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB68_29 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB68_31:                              # %for.cond85
                                        #   Parent Loop BB68_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB68_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB68_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB68_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_31
.LBB68_34:                              # %for.end
                                        #   in Loop: Header=BB68_29 Depth=1
	jmp	.LBB68_35
.LBB68_35:                              # %for.inc125
                                        #   in Loop: Header=BB68_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_29
.LBB68_36:                              # %for.end127
	jmp	.LBB68_57
.LBB68_37:                              # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB68_47
# %bb.38:                               # %if.then130
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB68_39:                              # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_41 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB68_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB68_39 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB68_41:                              # %for.cond135
                                        #   Parent Loop BB68_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB68_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB68_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB68_41 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_41
.LBB68_44:                              # %for.end161
                                        #   in Loop: Header=BB68_39 Depth=1
	jmp	.LBB68_45
.LBB68_45:                              # %for.inc162
                                        #   in Loop: Header=BB68_39 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_39
.LBB68_46:                              # %for.end164
	jmp	.LBB68_56
.LBB68_47:                              # %if.else165
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB68_48:                              # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_50 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB68_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB68_48 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB68_50:                              # %for.cond170
                                        #   Parent Loop BB68_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB68_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB68_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB68_50 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_50
.LBB68_53:                              # %for.end196
                                        #   in Loop: Header=BB68_48 Depth=1
	jmp	.LBB68_54
.LBB68_54:                              # %for.inc197
                                        #   in Loop: Header=BB68_48 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_48
.LBB68_55:                              # %for.end199
	jmp	.LBB68_56
.LBB68_56:                              # %if.end200
	jmp	.LBB68_57
.LBB68_57:                              # %if.end201
	jmp	.LBB68_89
.LBB68_58:                              # %if.else202
	cmpl	$2, -24(%rbp)
	jne	.LBB68_68
# %bb.59:                               # %if.then205
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB68_60:                              # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_62 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB68_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB68_60 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB68_62:                              # %for.cond210
                                        #   Parent Loop BB68_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB68_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB68_62 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB68_62 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_62
.LBB68_65:                              # %for.end226
                                        #   in Loop: Header=BB68_60 Depth=1
	jmp	.LBB68_66
.LBB68_66:                              # %for.inc227
                                        #   in Loop: Header=BB68_60 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_60
.LBB68_67:                              # %for.end229
	jmp	.LBB68_88
.LBB68_68:                              # %if.else230
	cmpl	$0, -24(%rbp)
	jne	.LBB68_78
# %bb.69:                               # %if.then233
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB68_70:                              # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_72 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB68_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB68_70 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB68_72:                              # %for.cond238
                                        #   Parent Loop BB68_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB68_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB68_72 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB68_72 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_72
.LBB68_75:                              # %for.end251
                                        #   in Loop: Header=BB68_70 Depth=1
	jmp	.LBB68_76
.LBB68_76:                              # %for.inc252
                                        #   in Loop: Header=BB68_70 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_70
.LBB68_77:                              # %for.end254
	jmp	.LBB68_87
.LBB68_78:                              # %if.else255
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB68_79:                              # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_81 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB68_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB68_79 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB68_81:                              # %for.cond260
                                        #   Parent Loop BB68_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB68_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB68_81 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB68_81 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_81
.LBB68_84:                              # %for.end273
                                        #   in Loop: Header=BB68_79 Depth=1
	jmp	.LBB68_85
.LBB68_85:                              # %for.inc274
                                        #   in Loop: Header=BB68_79 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_79
.LBB68_86:                              # %for.end276
	jmp	.LBB68_87
.LBB68_87:                              # %if.end277
	jmp	.LBB68_88
.LBB68_88:                              # %if.end278
	jmp	.LBB68_89
.LBB68_89:                              # %if.end279
	cmpl	$563370828, -104(%rbp)  # imm = 0x21945B4C
	jne	.LBB68_91
.LBB68_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_91:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_90
.Lfunc_end68:
	.size	LumaPrediction4x4.27, .Lfunc_end68-LumaPrediction4x4.27
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction.28 # -- Begin function IntraChromaPrediction.28
	.p2align	4, 0x90
	.type	IntraChromaPrediction.28,@function
IntraChromaPrediction.28:               # @IntraChromaPrediction.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$944029885, -164(%rbp)  # imm = 0x3844C0BD
	movq	%rdi, -184(%rbp)
	movq	%rsi, -192(%rbp)
	movq	%rdx, -176(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -116(%rbp)
	movl	$0, -132(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -128(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB69_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	-116(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_1
.LBB69_4:                               # %for.end
	movl	-116(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB69_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB69_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB69_8
.LBB69_7:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB69_8
.LBB69_8:                               # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB69_9:                               # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB69_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB69_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB69_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB69_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB69_13
.LBB69_12:                              # %cond.false32
                                        #   in Loop: Header=BB69_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB69_13
.LBB69_13:                              # %cond.end33
                                        #   in Loop: Header=BB69_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB69_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_9
.LBB69_15:                              # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB69_16:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB69_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB69_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB69_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB69_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB69_20
.LBB69_19:                              # %cond.false57
                                        #   in Loop: Header=BB69_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB69_20
.LBB69_20:                              # %cond.end58
                                        #   in Loop: Header=BB69_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB69_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_16
.LBB69_22:                              # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB69_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB69_25
.LBB69_24:                              # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB69_25
.LBB69_25:                              # %cond.end75
	movl	%eax, -104(%rbp)
.LBB69_26:                              # %if.end
	cmpq	$0, -184(%rbp)
	je	.LBB69_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB69_28:                              # %if.end79
	cmpq	$0, -192(%rbp)
	je	.LBB69_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB69_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB69_31:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB69_32:                              # %if.end86
	cmpq	$0, -176(%rbp)
	je	.LBB69_34
# %bb.33:                               # %if.then88
	movl	-104(%rbp), %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB69_34:                              # %if.end89
	movl	$0, -24(%rbp)
.LBB69_35:                              # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_37 Depth 2
                                        #       Child Loop BB69_39 Depth 3
                                        #         Child Loop BB69_104 Depth 4
                                        #         Child Loop BB69_110 Depth 4
                                        #         Child Loop BB69_85 Depth 4
                                        #         Child Loop BB69_91 Depth 4
                                        #         Child Loop BB69_66 Depth 4
                                        #         Child Loop BB69_72 Depth 4
                                        #         Child Loop BB69_44 Depth 4
                                        #         Child Loop BB69_50 Depth 4
                                        #         Child Loop BB69_125 Depth 4
                                        #           Child Loop BB69_127 Depth 5
                                        #     Child Loop BB69_138 Depth 2
                                        #     Child Loop BB69_142 Depth 2
                                        #       Child Loop BB69_144 Depth 3
                                        #     Child Loop BB69_153 Depth 2
                                        #     Child Loop BB69_157 Depth 2
                                        #       Child Loop BB69_159 Depth 3
                                        #     Child Loop BB69_170 Depth 2
                                        #     Child Loop BB69_174 Depth 2
                                        #     Child Loop BB69_178 Depth 2
                                        #       Child Loop BB69_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB69_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB69_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -84(%rbp)
.LBB69_37:                              # %for.cond95
                                        #   Parent Loop BB69_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_39 Depth 3
                                        #         Child Loop BB69_104 Depth 4
                                        #         Child Loop BB69_110 Depth 4
                                        #         Child Loop BB69_85 Depth 4
                                        #         Child Loop BB69_91 Depth 4
                                        #         Child Loop BB69_66 Depth 4
                                        #         Child Loop BB69_72 Depth 4
                                        #         Child Loop BB69_44 Depth 4
                                        #         Child Loop BB69_50 Depth 4
                                        #         Child Loop BB69_125 Depth 4
                                        #           Child Loop BB69_127 Depth 5
	movl	-84(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB69_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB69_37 Depth=2
	movl	$0, -88(%rbp)
.LBB69_39:                              # %for.cond99
                                        #   Parent Loop BB69_35 Depth=1
                                        #     Parent Loop BB69_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB69_104 Depth 4
                                        #         Child Loop BB69_110 Depth 4
                                        #         Child Loop BB69_85 Depth 4
                                        #         Child Loop BB69_91 Depth 4
                                        #         Child Loop BB69_66 Depth 4
                                        #         Child Loop BB69_72 Depth 4
                                        #         Child Loop BB69_44 Depth 4
                                        #         Child Loop BB69_50 Depth 4
                                        #         Child Loop BB69_125 Depth 4
                                        #           Child Loop BB69_127 Depth 5
	cmpl	$4, -88(%rbp)
	jge	.LBB69_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB69_39 Depth=3
	movslq	-128(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movslq	-128(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -72(%rbp)
	movslq	-128(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-84(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-88(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB69_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB69_39 Depth=3
	movq	.LJTI69_0(,%rax,8), %rax
	jmpq	*%rax
.LBB69_42:                              # %sw.bb
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB69_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB69_44:                              # %for.cond124
                                        #   Parent Loop BB69_35 Depth=1
                                        #     Parent Loop BB69_37 Depth=2
                                        #       Parent Loop BB69_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB69_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB69_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_44
.LBB69_47:                              # %for.end138
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_48
.LBB69_48:                              # %if.end139
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB69_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB69_50:                              # %for.cond143
                                        #   Parent Loop BB69_35 Depth=1
                                        #     Parent Loop BB69_37 Depth=2
                                        #       Parent Loop BB69_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB69_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB69_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_50
.LBB69_53:                              # %for.end162
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_54
.LBB69_54:                              # %if.end163
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB69_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB69_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-72(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB69_63
.LBB69_57:                              # %if.else
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB69_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB69_62
.LBB69_59:                              # %if.else174
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB69_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB69_61:                              # %if.end180
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_62
.LBB69_62:                              # %if.end181
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_63
.LBB69_63:                              # %if.end182
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_124
.LBB69_64:                              # %sw.bb183
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB69_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB69_66:                              # %for.cond186
                                        #   Parent Loop BB69_35 Depth=1
                                        #     Parent Loop BB69_37 Depth=2
                                        #       Parent Loop BB69_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB69_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB69_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_66
.LBB69_69:                              # %for.end202
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_77
.LBB69_70:                              # %if.else203
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB69_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB69_72:                              # %for.cond207
                                        #   Parent Loop BB69_35 Depth=1
                                        #     Parent Loop BB69_37 Depth=2
                                        #       Parent Loop BB69_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB69_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB69_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_72
.LBB69_75:                              # %for.end226
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_76
.LBB69_76:                              # %if.end227
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_77
.LBB69_77:                              # %if.end228
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB69_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB69_82
.LBB69_79:                              # %if.else233
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB69_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB69_81:                              # %if.end239
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_82
.LBB69_82:                              # %if.end240
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_124
.LBB69_83:                              # %sw.bb241
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB69_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB69_85:                              # %for.cond245
                                        #   Parent Loop BB69_35 Depth=1
                                        #     Parent Loop BB69_37 Depth=2
                                        #       Parent Loop BB69_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB69_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB69_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_85
.LBB69_88:                              # %for.end264
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_96
.LBB69_89:                              # %if.else265
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB69_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB69_91:                              # %for.cond268
                                        #   Parent Loop BB69_35 Depth=1
                                        #     Parent Loop BB69_37 Depth=2
                                        #       Parent Loop BB69_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB69_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB69_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_91
.LBB69_94:                              # %for.end284
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_95
.LBB69_95:                              # %if.end285
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_96
.LBB69_96:                              # %if.end286
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB69_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB69_101
.LBB69_98:                              # %if.else292
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB69_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB69_100:                             # %if.end297
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_101
.LBB69_101:                             # %if.end298
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_124
.LBB69_102:                             # %sw.bb299
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB69_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB69_104:                             # %for.cond302
                                        #   Parent Loop BB69_35 Depth=1
                                        #     Parent Loop BB69_37 Depth=2
                                        #       Parent Loop BB69_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB69_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB69_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_104
.LBB69_107:                             # %for.end318
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_108
.LBB69_108:                             # %if.end319
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB69_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB69_110:                             # %for.cond323
                                        #   Parent Loop BB69_35 Depth=1
                                        #     Parent Loop BB69_37 Depth=2
                                        #       Parent Loop BB69_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB69_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB69_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_110
.LBB69_113:                             # %for.end342
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_114
.LBB69_114:                             # %if.end343
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB69_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB69_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB69_123
.LBB69_117:                             # %if.else352
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB69_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB69_122
.LBB69_119:                             # %if.else357
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB69_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB69_121:                             # %if.end363
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_122
.LBB69_122:                             # %if.end364
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_123
.LBB69_123:                             # %if.end365
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_124
.LBB69_124:                             # %sw.epilog
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB69_125:                             # %for.cond366
                                        #   Parent Loop BB69_35 Depth=1
                                        #     Parent Loop BB69_37 Depth=2
                                        #       Parent Loop BB69_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB69_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB69_125 Depth=4
	movl	-40(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB69_127:                             # %for.cond371
                                        #   Parent Loop BB69_35 Depth=1
                                        #     Parent Loop BB69_37 Depth=2
                                        #       Parent Loop BB69_39 Depth=3
                                        #         Parent Loop BB69_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB69_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB69_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_127
.LBB69_130:                             # %for.end386
                                        #   in Loop: Header=BB69_125 Depth=4
	jmp	.LBB69_131
.LBB69_131:                             # %for.inc387
                                        #   in Loop: Header=BB69_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_125
.LBB69_132:                             # %for.end389
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_133
.LBB69_133:                             # %for.inc390
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB69_39
.LBB69_134:                             # %for.end392
                                        #   in Loop: Header=BB69_37 Depth=2
	jmp	.LBB69_135
.LBB69_135:                             # %for.inc393
                                        #   in Loop: Header=BB69_37 Depth=2
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB69_37
.LBB69_136:                             # %for.end395
                                        #   in Loop: Header=BB69_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB69_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB69_35 Depth=1
	movl	$0, -4(%rbp)
.LBB69_138:                             # %for.cond398
                                        #   Parent Loop BB69_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB69_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB69_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB69_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_138
.LBB69_141:                             # %for.end414
                                        #   in Loop: Header=BB69_35 Depth=1
	movl	$0, -4(%rbp)
.LBB69_142:                             # %for.cond415
                                        #   Parent Loop BB69_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB69_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB69_142 Depth=2
	movl	$0, -8(%rbp)
.LBB69_144:                             # %for.cond419
                                        #   Parent Loop BB69_35 Depth=1
                                        #     Parent Loop BB69_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB69_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB69_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB69_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_144
.LBB69_147:                             # %for.end436
                                        #   in Loop: Header=BB69_142 Depth=2
	jmp	.LBB69_148
.LBB69_148:                             # %for.inc437
                                        #   in Loop: Header=BB69_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_142
.LBB69_149:                             # %for.end439
                                        #   in Loop: Header=BB69_35 Depth=1
	jmp	.LBB69_150
.LBB69_150:                             # %if.end440
                                        #   in Loop: Header=BB69_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB69_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB69_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB69_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB69_35 Depth=1
	movl	$0, -4(%rbp)
.LBB69_153:                             # %for.cond447
                                        #   Parent Loop BB69_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB69_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB69_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB69_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_153
.LBB69_156:                             # %for.end468
                                        #   in Loop: Header=BB69_35 Depth=1
	movl	$0, -4(%rbp)
.LBB69_157:                             # %for.cond469
                                        #   Parent Loop BB69_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB69_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB69_157 Depth=2
	movl	$0, -8(%rbp)
.LBB69_159:                             # %for.cond473
                                        #   Parent Loop BB69_35 Depth=1
                                        #     Parent Loop BB69_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB69_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB69_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB69_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_159
.LBB69_162:                             # %for.end490
                                        #   in Loop: Header=BB69_157 Depth=2
	jmp	.LBB69_163
.LBB69_163:                             # %for.inc491
                                        #   in Loop: Header=BB69_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_157
.LBB69_164:                             # %for.end493
                                        #   in Loop: Header=BB69_35 Depth=1
	jmp	.LBB69_165
.LBB69_165:                             # %if.end494
                                        #   in Loop: Header=BB69_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB69_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB69_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB69_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB69_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB69_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB69_35 Depth=1
	cmpl	$0, -104(%rbp)
	je	.LBB69_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB69_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -124(%rbp)
	movl	$0, -4(%rbp)
.LBB69_170:                             # %for.cond519
                                        #   Parent Loop BB69_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB69_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB69_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-124(%rbp), %ecx
	movl	%ecx, -124(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB69_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_170
.LBB69_173:                             # %for.end540
                                        #   in Loop: Header=BB69_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -4(%rbp)
.LBB69_174:                             # %for.cond556
                                        #   Parent Loop BB69_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB69_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB69_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-112(%rbp), %ecx
	movl	%ecx, -112(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB69_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_174
.LBB69_177:                             # %for.end577
                                        #   in Loop: Header=BB69_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-124(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -92(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-112(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -108(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-336(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-272(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -8(%rbp)
.LBB69_178:                             # %for.cond606
                                        #   Parent Loop BB69_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB69_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB69_178 Depth=2
	movl	$0, -4(%rbp)
.LBB69_180:                             # %for.cond610
                                        #   Parent Loop BB69_35 Depth=1
                                        #     Parent Loop BB69_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB69_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB69_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-100(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-92(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-108(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB69_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB69_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB69_184
.LBB69_183:                             # %cond.false630
                                        #   in Loop: Header=BB69_180 Depth=3
	movl	-100(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-92(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-108(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB69_184:                             # %cond.end643
                                        #   in Loop: Header=BB69_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB69_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB69_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB69_190
.LBB69_186:                             # %cond.false648
                                        #   in Loop: Header=BB69_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-100(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-92(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-108(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB69_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB69_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB69_189
.LBB69_188:                             # %cond.false666
                                        #   in Loop: Header=BB69_180 Depth=3
	movl	-100(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-92(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-108(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB69_189:                             # %cond.end679
                                        #   in Loop: Header=BB69_180 Depth=3
.LBB69_190:                             # %cond.end681
                                        #   in Loop: Header=BB69_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB69_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_180
.LBB69_192:                             # %for.end694
                                        #   in Loop: Header=BB69_178 Depth=2
	jmp	.LBB69_193
.LBB69_193:                             # %for.inc695
                                        #   in Loop: Header=BB69_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_178
.LBB69_194:                             # %for.end697
                                        #   in Loop: Header=BB69_35 Depth=1
	jmp	.LBB69_195
.LBB69_195:                             # %if.end698
                                        #   in Loop: Header=BB69_35 Depth=1
	jmp	.LBB69_196
.LBB69_196:                             # %for.inc699
                                        #   in Loop: Header=BB69_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB69_35
.LBB69_197:                             # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB69_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -136(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB69_199:                             # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB69_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB69_199 Depth=1
	movl	-116(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB69_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_199
.LBB69_202:                             # %for.end712
	movl	$0, -48(%rbp)
.LBB69_203:                             # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_219 Depth 2
                                        #       Child Loop BB69_221 Depth 3
                                        #         Child Loop BB69_223 Depth 4
                                        #           Child Loop BB69_225 Depth 5
                                        #             Child Loop BB69_227 Depth 6
	cmpl	$3, -48(%rbp)
	jg	.LBB69_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB69_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB69_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB69_203 Depth=1
	cmpl	$0, -48(%rbp)
	je	.LBB69_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB69_203 Depth=1
	jmp	.LBB69_241
.LBB69_207:                             # %if.end723
                                        #   in Loop: Header=BB69_203 Depth=1
	cmpl	$2, -48(%rbp)
	jne	.LBB69_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB69_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB69_217
.LBB69_209:                             # %lor.lhs.false
                                        #   in Loop: Header=BB69_203 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB69_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB69_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB69_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB69_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB69_217
.LBB69_212:                             # %lor.lhs.false736
                                        #   in Loop: Header=BB69_203 Depth=1
	cmpl	$3, -48(%rbp)
	jne	.LBB69_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB69_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB69_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB69_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB69_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB69_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB69_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB69_203 Depth=1
	cmpl	$0, -104(%rbp)
	jne	.LBB69_218
.LBB69_217:                             # %if.then749
                                        #   in Loop: Header=BB69_203 Depth=1
	jmp	.LBB69_241
.LBB69_218:                             # %if.end750
                                        #   in Loop: Header=BB69_203 Depth=1
	movl	$0, -96(%rbp)
	movl	$0, -24(%rbp)
.LBB69_219:                             # %for.cond751
                                        #   Parent Loop BB69_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_221 Depth 3
                                        #         Child Loop BB69_223 Depth 4
                                        #           Child Loop BB69_225 Depth 5
                                        #             Child Loop BB69_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB69_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB69_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -44(%rbp)
.LBB69_221:                             # %for.cond757
                                        #   Parent Loop BB69_203 Depth=1
                                        #     Parent Loop BB69_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB69_223 Depth 4
                                        #           Child Loop BB69_225 Depth 5
                                        #             Child Loop BB69_227 Depth 6
	movl	-44(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB69_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB69_221 Depth=3
	movl	$0, -40(%rbp)
.LBB69_223:                             # %for.cond761
                                        #   Parent Loop BB69_203 Depth=1
                                        #     Parent Loop BB69_219 Depth=2
                                        #       Parent Loop BB69_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB69_225 Depth 5
                                        #             Child Loop BB69_227 Depth 6
	movl	-40(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB69_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB69_223 Depth=4
	movl	$0, -120(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB69_225:                             # %for.cond765
                                        #   Parent Loop BB69_203 Depth=1
                                        #     Parent Loop BB69_219 Depth=2
                                        #       Parent Loop BB69_221 Depth=3
                                        #         Parent Loop BB69_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB69_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB69_225 Depth=5
	movl	-40(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB69_227:                             # %for.cond770
                                        #   Parent Loop BB69_203 Depth=1
                                        #     Parent Loop BB69_219 Depth=2
                                        #       Parent Loop BB69_221 Depth=3
                                        #         Parent Loop BB69_223 Depth=4
                                        #           Parent Loop BB69_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB69_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB69_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-120(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -120(%rbp)
	jmp	.LBB69_227
.LBB69_230:                             # %for.end803
                                        #   in Loop: Header=BB69_225 Depth=5
	jmp	.LBB69_231
.LBB69_231:                             # %for.inc804
                                        #   in Loop: Header=BB69_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_225
.LBB69_232:                             # %for.end806
                                        #   in Loop: Header=BB69_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-96(%rbp), %eax
	movl	%eax, -96(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB69_223 Depth=4
	movl	-40(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB69_223
.LBB69_234:                             # %for.end810
                                        #   in Loop: Header=BB69_221 Depth=3
	jmp	.LBB69_235
.LBB69_235:                             # %for.inc811
                                        #   in Loop: Header=BB69_221 Depth=3
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB69_221
.LBB69_236:                             # %for.end813
                                        #   in Loop: Header=BB69_219 Depth=2
	jmp	.LBB69_237
.LBB69_237:                             # %for.inc814
                                        #   in Loop: Header=BB69_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB69_219
.LBB69_238:                             # %for.end816
                                        #   in Loop: Header=BB69_203 Depth=1
	movl	-96(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB69_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB69_203 Depth=1
	movl	-48(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-96(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB69_240:                             # %if.end820
                                        #   in Loop: Header=BB69_203 Depth=1
	jmp	.LBB69_241
.LBB69_241:                             # %for.inc821
                                        #   in Loop: Header=BB69_203 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB69_203
.LBB69_242:                             # %for.end823
	movl	-132(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB69_243:                             # %if.end824
	cmpl	$944029885, -164(%rbp)  # imm = 0x3844C0BD
	jne	.LBB69_245
.LBB69_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_245:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_244
.Lfunc_end69:
	.size	IntraChromaPrediction.28, .Lfunc_end69-IntraChromaPrediction.28
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI69_0:
	.quad	.LBB69_42
	.quad	.LBB69_64
	.quad	.LBB69_83
	.quad	.LBB69_102
                                        # -- End function
	.text
	.globl	copyblock4x4.29         # -- Begin function copyblock4x4.29
	.p2align	4, 0x90
	.type	copyblock4x4.29,@function
copyblock4x4.29:                        # @copyblock4x4.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1252543209, -20(%rbp)  # imm = 0x4AA84AE9
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	48(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	cmpl	$1252543209, -20(%rbp)  # imm = 0x4AA84AE9
	jne	.LBB70_2
.LBB70_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_1
.Lfunc_end70:
	.size	copyblock4x4.29, .Lfunc_end70-copyblock4x4.29
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.30     # -- Begin function writeChromaCoeff.30
	.p2align	4, 0x90
	.type	writeChromaCoeff.30,@function
writeChromaCoeff.30:                    # @writeChromaCoeff.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$610473509, -80(%rbp)   # imm = 0x24631625
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB71_24
# %bb.1:                                # %if.then
	movl	$0, -24(%rbp)
.LBB71_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_6 Depth 2
	cmpl	$2, -24(%rbp)
	jge	.LBB71_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB71_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB71_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB71_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB71_21
.LBB71_5:                               # %if.else
                                        #   in Loop: Header=BB71_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -20(%rbp)
.LBB71_6:                               # %for.cond18
                                        #   Parent Loop BB71_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB71_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB71_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB71_8:                               # %land.end
                                        #   in Loop: Header=BB71_6 Depth=2
	testb	$1, %al
	jne	.LBB71_9
	jmp	.LBB71_20
.LBB71_9:                               # %for.body21
                                        #   in Loop: Header=BB71_6 Depth=2
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-144(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB71_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB71_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB71_12
.LBB71_11:                              # %if.else29
                                        #   in Loop: Header=BB71_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB71_12:                              # %if.end
                                        #   in Loop: Header=BB71_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB71_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB71_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB71_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB71_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB71_15:                              # %lor.end
                                        #   in Loop: Header=BB71_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB71_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB71_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB71_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB71_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB71_18:                              # %lor.end45
                                        #   in Loop: Header=BB71_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB71_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB71_6
.LBB71_20:                              # %for.end
                                        #   in Loop: Header=BB71_2 Depth=1
	jmp	.LBB71_21
.LBB71_21:                              # %if.end58
                                        #   in Loop: Header=BB71_2 Depth=1
	jmp	.LBB71_22
.LBB71_22:                              # %for.inc59
                                        #   in Loop: Header=BB71_2 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB71_2
.LBB71_23:                              # %for.end61
	jmp	.LBB71_24
.LBB71_24:                              # %if.end62
	movl	$-1, -24(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB71_52
# %bb.25:                               # %if.then64
	movl	$4, -28(%rbp)
.LBB71_26:                              # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_28 Depth 2
                                        #       Child Loop BB71_32 Depth 3
	movl	-28(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB71_26 Depth=1
	movl	$0, -32(%rbp)
.LBB71_28:                              # %for.cond69
                                        #   Parent Loop BB71_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_32 Depth 3
	cmpl	$4, -32(%rbp)
	jge	.LBB71_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB71_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB71_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB71_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB71_47
.LBB71_31:                              # %if.else84
                                        #   in Loop: Header=BB71_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movl	$1, -52(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -20(%rbp)
.LBB71_32:                              # %for.cond115
                                        #   Parent Loop BB71_26 Depth=1
                                        #     Parent Loop BB71_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -20(%rbp)
	jge	.LBB71_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB71_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB71_34:                              # %land.end121
                                        #   in Loop: Header=BB71_32 Depth=3
	testb	$1, %al
	jne	.LBB71_35
	jmp	.LBB71_46
.LBB71_35:                              # %for.body122
                                        #   in Loop: Header=BB71_32 Depth=3
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB71_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB71_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB71_38
.LBB71_37:                              # %if.else134
                                        #   in Loop: Header=BB71_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB71_38:                              # %if.end136
                                        #   in Loop: Header=BB71_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB71_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB71_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB71_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB71_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB71_41:                              # %lor.end149
                                        #   in Loop: Header=BB71_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB71_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB71_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB71_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB71_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB71_44:                              # %lor.end164
                                        #   in Loop: Header=BB71_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB71_32 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB71_32
.LBB71_46:                              # %for.end189
                                        #   in Loop: Header=BB71_28 Depth=2
	jmp	.LBB71_47
.LBB71_47:                              # %if.end190
                                        #   in Loop: Header=BB71_28 Depth=2
	jmp	.LBB71_48
.LBB71_48:                              # %for.inc191
                                        #   in Loop: Header=BB71_28 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB71_28
.LBB71_49:                              # %for.end193
                                        #   in Loop: Header=BB71_26 Depth=1
	jmp	.LBB71_50
.LBB71_50:                              # %for.inc194
                                        #   in Loop: Header=BB71_26 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB71_26
.LBB71_51:                              # %for.end196
	jmp	.LBB71_52
.LBB71_52:                              # %if.end197
	movl	-36(%rbp), %ebx
	cmpl	$610473509, -80(%rbp)   # imm = 0x24631625
	jne	.LBB71_54
.LBB71_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_54:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_53
.Lfunc_end71:
	.size	writeChromaCoeff.30, .Lfunc_end71-writeChromaCoeff.30
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.31       # -- Begin function find_sad_16x16.31
	.p2align	4, 0x90
	.type	find_sad_16x16.31,@function
find_sad_16x16.31:                      # @find_sad_16x16.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$2036394386, -80(%rbp)  # imm = 0x7960E992
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$0, -12(%rbp)
.LBB72_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB72_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	-76(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_1
.LBB72_4:                               # %for.end
	movl	-76(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB72_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB72_20
.LBB72_6:                               # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB72_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB72_9
.LBB72_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB72_9
.LBB72_9:                               # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -64(%rbp)
.LBB72_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB72_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB72_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB72_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB72_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB72_14
.LBB72_13:                              # %cond.false23
                                        #   in Loop: Header=BB72_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB72_14
.LBB72_14:                              # %cond.end24
                                        #   in Loop: Header=BB72_10 Depth=1
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB72_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_10
.LBB72_16:                              # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB72_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB72_19
.LBB72_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB72_19
.LBB72_19:                              # %cond.end39
	movl	%eax, -72(%rbp)
.LBB72_20:                              # %if.end
	movl	$999999, -60(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB72_21:                              # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_42 Depth 2
                                        #       Child Loop BB72_44 Depth 3
                                        #     Child Loop BB72_50 Depth 2
                                        #       Child Loop BB72_52 Depth 3
                                        #         Child Loop BB72_54 Depth 4
                                        #         Child Loop BB72_58 Depth 4
                                        #           Child Loop BB72_60 Depth 5
                                        #     Child Loop BB72_72 Depth 2
                                        #       Child Loop BB72_74 Depth 3
                                        #     Child Loop BB72_80 Depth 2
                                        #     Child Loop BB72_84 Depth 2
                                        #       Child Loop BB72_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB72_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB72_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB72_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB72_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB72_32
.LBB72_24:                              # %if.then46
                                        #   in Loop: Header=BB72_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB72_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB72_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB72_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB72_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB72_28
.LBB72_27:                              # %if.then51
                                        #   in Loop: Header=BB72_21 Depth=1
	jmp	.LBB72_95
.LBB72_28:                              # %if.end52
                                        #   in Loop: Header=BB72_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB72_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB72_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB72_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB72_21 Depth=1
	jmp	.LBB72_95
.LBB72_31:                              # %if.end57
                                        #   in Loop: Header=BB72_21 Depth=1
	jmp	.LBB72_32
.LBB72_32:                              # %if.end58
                                        #   in Loop: Header=BB72_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB72_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB72_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB72_40
.LBB72_34:                              # %lor.lhs.false62
                                        #   in Loop: Header=BB72_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB72_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB72_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB72_40
.LBB72_36:                              # %lor.lhs.false66
                                        #   in Loop: Header=BB72_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB72_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB72_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB72_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB72_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB72_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB72_21 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB72_41
.LBB72_40:                              # %if.then74
                                        #   in Loop: Header=BB72_21 Depth=1
	jmp	.LBB72_94
.LBB72_41:                              # %if.else75
                                        #   in Loop: Header=BB72_21 Depth=1
	movl	$0, -16(%rbp)
.LBB72_42:                              # %for.cond76
                                        #   Parent Loop BB72_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB72_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB72_42 Depth=2
	movl	$0, -12(%rbp)
.LBB72_44:                              # %for.cond79
                                        #   Parent Loop BB72_21 Depth=1
                                        #     Parent Loop BB72_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB72_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB72_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB72_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_44
.LBB72_47:                              # %for.end115
                                        #   in Loop: Header=BB72_42 Depth=2
	jmp	.LBB72_48
.LBB72_48:                              # %for.inc116
                                        #   in Loop: Header=BB72_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_42
.LBB72_49:                              # %for.end118
                                        #   in Loop: Header=BB72_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB72_50:                              # %for.cond119
                                        #   Parent Loop BB72_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_52 Depth 3
                                        #         Child Loop BB72_54 Depth 4
                                        #         Child Loop BB72_58 Depth 4
                                        #           Child Loop BB72_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB72_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB72_50 Depth=2
	movl	$0, -24(%rbp)
.LBB72_52:                              # %for.cond123
                                        #   Parent Loop BB72_21 Depth=1
                                        #     Parent Loop BB72_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB72_54 Depth 4
                                        #         Child Loop BB72_58 Depth 4
                                        #           Child Loop BB72_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB72_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB72_52 Depth=3
	movl	$0, -16(%rbp)
.LBB72_54:                              # %for.cond127
                                        #   Parent Loop BB72_21 Depth=1
                                        #     Parent Loop BB72_50 Depth=2
                                        #       Parent Loop BB72_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB72_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB72_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB72_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_54
.LBB72_57:                              # %for.end237
                                        #   in Loop: Header=BB72_52 Depth=3
	movl	$0, -12(%rbp)
.LBB72_58:                              # %for.cond238
                                        #   Parent Loop BB72_21 Depth=1
                                        #     Parent Loop BB72_50 Depth=2
                                        #       Parent Loop BB72_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB72_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB72_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB72_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB72_60:                              # %for.cond346
                                        #   Parent Loop BB72_21 Depth=1
                                        #     Parent Loop BB72_50 Depth=2
                                        #       Parent Loop BB72_52 Depth=3
                                        #         Parent Loop BB72_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB72_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB72_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB72_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB72_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB72_63:                              # %if.end363
                                        #   in Loop: Header=BB72_60 Depth=5
	jmp	.LBB72_64
.LBB72_64:                              # %for.inc364
                                        #   in Loop: Header=BB72_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_60
.LBB72_65:                              # %for.end366
                                        #   in Loop: Header=BB72_58 Depth=4
	jmp	.LBB72_66
.LBB72_66:                              # %for.inc367
                                        #   in Loop: Header=BB72_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_58
.LBB72_67:                              # %for.end369
                                        #   in Loop: Header=BB72_52 Depth=3
	jmp	.LBB72_68
.LBB72_68:                              # %for.inc370
                                        #   in Loop: Header=BB72_52 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB72_52
.LBB72_69:                              # %for.end372
                                        #   in Loop: Header=BB72_50 Depth=2
	jmp	.LBB72_70
.LBB72_70:                              # %for.inc373
                                        #   in Loop: Header=BB72_50 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB72_50
.LBB72_71:                              # %for.end375
                                        #   in Loop: Header=BB72_21 Depth=1
	movl	$0, -16(%rbp)
.LBB72_72:                              # %for.cond376
                                        #   Parent Loop BB72_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB72_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB72_72 Depth=2
	movl	$0, -12(%rbp)
.LBB72_74:                              # %for.cond380
                                        #   Parent Loop BB72_21 Depth=1
                                        #     Parent Loop BB72_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB72_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB72_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB72_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_74
.LBB72_77:                              # %for.end397
                                        #   in Loop: Header=BB72_72 Depth=2
	jmp	.LBB72_78
.LBB72_78:                              # %for.inc398
                                        #   in Loop: Header=BB72_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_72
.LBB72_79:                              # %for.end400
                                        #   in Loop: Header=BB72_21 Depth=1
	movl	$0, -16(%rbp)
.LBB72_80:                              # %for.cond401
                                        #   Parent Loop BB72_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB72_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB72_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB72_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_80
.LBB72_83:                              # %for.end463
                                        #   in Loop: Header=BB72_21 Depth=1
	movl	$0, -12(%rbp)
.LBB72_84:                              # %for.cond464
                                        #   Parent Loop BB72_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB72_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB72_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB72_86:                              # %for.cond524
                                        #   Parent Loop BB72_21 Depth=1
                                        #     Parent Loop BB72_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB72_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB72_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB72_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_86
.LBB72_89:                              # %for.end536
                                        #   in Loop: Header=BB72_84 Depth=2
	jmp	.LBB72_90
.LBB72_90:                              # %for.inc537
                                        #   in Loop: Header=BB72_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_84
.LBB72_91:                              # %for.end539
                                        #   in Loop: Header=BB72_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB72_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB72_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB72_93:                              # %if.end543
                                        #   in Loop: Header=BB72_21 Depth=1
	jmp	.LBB72_94
.LBB72_94:                              # %if.end544
                                        #   in Loop: Header=BB72_21 Depth=1
	jmp	.LBB72_95
.LBB72_95:                              # %for.inc545
                                        #   in Loop: Header=BB72_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB72_21
.LBB72_96:                              # %for.end547
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ebx
	cmpl	$2036394386, -80(%rbp)  # imm = 0x7960E992
	jne	.LBB72_98
.LBB72_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_97
.Lfunc_end72:
	.size	find_sad_16x16.31, .Lfunc_end72-find_sad_16x16.31
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL.32  # -- Begin function writeMotionInfo2NAL.32
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.32,@function
writeMotionInfo2NAL.32:                 # @writeMotionInfo2NAL.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$438500644, -56(%rbp)   # imm = 0x1A22FD24
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB73_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB73_3
.LBB73_2:                               # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB73_3:                               # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB73_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB73_6
.LBB73_5:                               # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB73_6:                               # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB73_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB73_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB73_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB73_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB73_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB73_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB73_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB73_39
.LBB73_14:                              # %if.then42
	movl	$0, -16(%rbp)
.LBB73_15:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_17 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB73_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB73_15 Depth=1
	movl	$0, -12(%rbp)
.LBB73_17:                              # %for.cond45
                                        #   Parent Loop BB73_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB73_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB73_17 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB73_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB73_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB73_22
.LBB73_20:                              # %land.lhs.true59
                                        #   in Loop: Header=BB73_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB73_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB73_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB73_22:                              # %if.end
                                        #   in Loop: Header=BB73_17 Depth=2
	jmp	.LBB73_23
.LBB73_23:                              # %for.inc
                                        #   in Loop: Header=BB73_17 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_17
.LBB73_24:                              # %for.end
                                        #   in Loop: Header=BB73_15 Depth=1
	jmp	.LBB73_25
.LBB73_25:                              # %for.inc79
                                        #   in Loop: Header=BB73_15 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_15
.LBB73_26:                              # %for.end81
	movl	$0, -16(%rbp)
.LBB73_27:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_29 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB73_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB73_27 Depth=1
	movl	$0, -12(%rbp)
.LBB73_29:                              # %for.cond86
                                        #   Parent Loop BB73_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB73_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB73_29 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB73_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB73_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB73_34
.LBB73_32:                              # %land.lhs.true103
                                        #   in Loop: Header=BB73_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB73_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB73_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB73_34:                              # %if.end126
                                        #   in Loop: Header=BB73_29 Depth=2
	jmp	.LBB73_35
.LBB73_35:                              # %for.inc127
                                        #   in Loop: Header=BB73_29 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_29
.LBB73_36:                              # %for.end129
                                        #   in Loop: Header=BB73_27 Depth=1
	jmp	.LBB73_37
.LBB73_37:                              # %for.inc130
                                        #   in Loop: Header=BB73_27 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_27
.LBB73_38:                              # %for.end132
	jmp	.LBB73_39
.LBB73_39:                              # %if.end133
	jmp	.LBB73_40
.LBB73_40:                              # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB73_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB73_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB73_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB73_57
# %bb.44:                               # %if.then150
	movl	$0, -16(%rbp)
.LBB73_45:                              # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_47 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB73_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB73_45 Depth=1
	movl	$0, -12(%rbp)
.LBB73_47:                              # %for.cond155
                                        #   Parent Loop BB73_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB73_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB73_47 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB73_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB73_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB73_52
.LBB73_50:                              # %land.lhs.true172
                                        #   in Loop: Header=BB73_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB73_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB73_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB73_52:                              # %if.end197
                                        #   in Loop: Header=BB73_47 Depth=2
	jmp	.LBB73_53
.LBB73_53:                              # %for.inc198
                                        #   in Loop: Header=BB73_47 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_47
.LBB73_54:                              # %for.end200
                                        #   in Loop: Header=BB73_45 Depth=1
	jmp	.LBB73_55
.LBB73_55:                              # %for.inc201
                                        #   in Loop: Header=BB73_45 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_45
.LBB73_56:                              # %for.end203
	jmp	.LBB73_57
.LBB73_57:                              # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB73_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB73_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB73_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB73_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB73_75
# %bb.62:                               # %if.then222
	movl	$0, -16(%rbp)
.LBB73_63:                              # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_65 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB73_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB73_63 Depth=1
	movl	$0, -12(%rbp)
.LBB73_65:                              # %for.cond227
                                        #   Parent Loop BB73_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB73_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB73_65 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB73_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB73_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB73_70
.LBB73_68:                              # %land.lhs.true244
                                        #   in Loop: Header=BB73_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB73_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB73_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB73_70:                              # %if.end269
                                        #   in Loop: Header=BB73_65 Depth=2
	jmp	.LBB73_71
.LBB73_71:                              # %for.inc270
                                        #   in Loop: Header=BB73_65 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_65
.LBB73_72:                              # %for.end272
                                        #   in Loop: Header=BB73_63 Depth=1
	jmp	.LBB73_73
.LBB73_73:                              # %for.inc273
                                        #   in Loop: Header=BB73_63 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_63
.LBB73_74:                              # %for.end275
	jmp	.LBB73_75
.LBB73_75:                              # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$438500644, -56(%rbp)   # imm = 0x1A22FD24
	jne	.LBB73_77
.LBB73_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_77:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_76
.Lfunc_end73:
	.size	writeMotionInfo2NAL.32, .Lfunc_end73-writeMotionInfo2NAL.32
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock.33 # -- Begin function proceed2nextMacroblock.33
	.p2align	4, 0x90
	.type	proceed2nextMacroblock.33,@function
proceed2nextMacroblock.33:              # @proceed2nextMacroblock.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$135329692, -28(%rbp)   # imm = 0x810F79C
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1348(%rcx,%rdx,4), %eax
	movl	%eax, 1348(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1408(%rcx,%rdx,4), %eax
	movl	%eax, 1408(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1388(%rcx,%rdx,4), %eax
	movl	%eax, 1388(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1428(%rcx,%rdx,4), %eax
	movl	%eax, 1428(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	28(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1448(%rcx,%rdx,4), %eax
	movl	%eax, 1448(%rcx,%rdx,4)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB74_3
# %bb.1:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB74_3
# %bb.2:                                # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB74_9
.LBB74_3:                               # %if.then
	movq	stats, %rax
	movq	-8(%rbp), %rcx
	movslq	524(%rcx), %rcx
	movl	672(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 672(%rax,%rcx,4)
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB74_8
# %bb.4:                                # %if.then32
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB74_6
# %bb.5:                                # %if.then33
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB74_7
.LBB74_6:                               # %if.else
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB74_7:                               # %if.end
	jmp	.LBB74_8
.LBB74_8:                               # %if.end48
	jmp	.LBB74_9
.LBB74_9:                               # %if.end49
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addq	$1028, %rcx             # imm = 0x404
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movq	-8(%rbp), %rdx
	movslq	72(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB74_35
# %bb.10:                               # %if.then67
	movq	-8(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB74_26
# %bb.11:                               # %if.then70
	movl	$0, -12(%rbp)
.LBB74_12:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB74_25
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB74_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jle	.LBB74_15
# %bb.14:                               # %if.then75
                                        #   in Loop: Header=BB74_12 Depth=1
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	472(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB74_16
.LBB74_15:                              # %if.else86
                                        #   in Loop: Header=BB74_12 Depth=1
	movq	stats, %rax
	addq	$32, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	572(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB74_16:                              # %if.end94
                                        #   in Loop: Header=BB74_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	jne	.LBB74_23
# %bb.17:                               # %if.then99
                                        #   in Loop: Header=BB74_12 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB74_19
# %bb.18:                               # %land.lhs.true
                                        #   in Loop: Header=BB74_12 Depth=1
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB74_20
.LBB74_19:                              # %lor.lhs.false105
                                        #   in Loop: Header=BB74_12 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB74_21
.LBB74_20:                              # %if.then107
                                        #   in Loop: Header=BB74_12 Depth=1
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB74_22
.LBB74_21:                              # %if.else114
                                        #   in Loop: Header=BB74_12 Depth=1
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB74_22:                              # %if.end121
                                        #   in Loop: Header=BB74_12 Depth=1
	jmp	.LBB74_23
.LBB74_23:                              # %if.end122
                                        #   in Loop: Header=BB74_12 Depth=1
	jmp	.LBB74_24
.LBB74_24:                              # %for.inc
                                        #   in Loop: Header=BB74_12 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_12
.LBB74_25:                              # %for.end
	jmp	.LBB74_34
.LBB74_26:                              # %if.else124
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jl	.LBB74_33
# %bb.27:                               # %land.lhs.true127
	movq	-8(%rbp), %rax
	cmpl	$3, 72(%rax)
	jg	.LBB74_33
# %bb.28:                               # %land.lhs.true130
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB74_33
# %bb.29:                               # %if.then134
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB74_31
# %bb.30:                               # %if.then137
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB74_32
.LBB74_31:                              # %if.else146
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB74_32:                              # %if.end155
	jmp	.LBB74_33
.LBB74_33:                              # %if.end156
	jmp	.LBB74_34
.LBB74_34:                              # %if.end157
	jmp	.LBB74_35
.LBB74_35:                              # %if.end158
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB74_37
# %bb.36:                               # %lor.lhs.false161
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB74_38
.LBB74_37:                              # %if.then164
	movq	stats, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
.LBB74_38:                              # %if.end167
	cmpl	$135329692, -28(%rbp)   # imm = 0x810F79C
	jne	.LBB74_40
.LBB74_39:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_40:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_39
.Lfunc_end74:
	.size	proceed2nextMacroblock.33, .Lfunc_end74-proceed2nextMacroblock.33
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.34  # -- Begin function LumaPrediction4x4Bi.34
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.34,@function
LumaPrediction4x4Bi.34:                 # @LumaPrediction4x4Bi.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$1256026591, -76(%rbp)  # imm = 0x4ADD71DF
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -80(%rbp)
	movl	%r8d, -84(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -64(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB75_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB75_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB75_6
.LBB75_3:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB75_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB75_5:                               # %land.end
.LBB75_6:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB75_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB75_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB75_10
.LBB75_9:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB75_10
.LBB75_10:                              # %cond.end
	movl	%ecx, -60(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB75_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB75_13
.LBB75_12:                              # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB75_13:                              # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB75_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB75_16
.LBB75_15:                              # %if.then
	movl	-56(%rbp), %esi
	movl	-68(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-80(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-60(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB75_16:                              # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB75_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB75_19
.LBB75_18:                              # %if.then39
	movl	-56(%rbp), %esi
	movl	-68(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-60(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB75_19:                              # %if.end52
	cmpl	$0, -72(%rbp)
	je	.LBB75_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB75_30
# %bb.21:                               # %if.then56
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB75_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_24 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB75_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB75_22 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB75_24:                              # %for.cond58
                                        #   Parent Loop BB75_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB75_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB75_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB75_24 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_24
.LBB75_27:                              # %for.end
                                        #   in Loop: Header=BB75_22 Depth=1
	jmp	.LBB75_28
.LBB75_28:                              # %for.inc96
                                        #   in Loop: Header=BB75_22 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_22
.LBB75_29:                              # %for.end98
	jmp	.LBB75_50
.LBB75_30:                              # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB75_40
# %bb.31:                               # %if.then101
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB75_32:                              # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_34 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB75_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB75_32 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB75_34:                              # %for.cond106
                                        #   Parent Loop BB75_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB75_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB75_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB75_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_34
.LBB75_37:                              # %for.end132
                                        #   in Loop: Header=BB75_32 Depth=1
	jmp	.LBB75_38
.LBB75_38:                              # %for.inc133
                                        #   in Loop: Header=BB75_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_32
.LBB75_39:                              # %for.end135
	jmp	.LBB75_49
.LBB75_40:                              # %if.else136
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB75_41:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_43 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB75_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB75_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB75_43:                              # %for.cond141
                                        #   Parent Loop BB75_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB75_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB75_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB75_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_43
.LBB75_46:                              # %for.end167
                                        #   in Loop: Header=BB75_41 Depth=1
	jmp	.LBB75_47
.LBB75_47:                              # %for.inc168
                                        #   in Loop: Header=BB75_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_41
.LBB75_48:                              # %for.end170
	jmp	.LBB75_49
.LBB75_49:                              # %if.end171
	jmp	.LBB75_50
.LBB75_50:                              # %if.end172
	jmp	.LBB75_82
.LBB75_51:                              # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB75_61
# %bb.52:                               # %if.then176
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB75_53:                              # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_55 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB75_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB75_53 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB75_55:                              # %for.cond181
                                        #   Parent Loop BB75_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB75_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB75_55 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB75_55 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_55
.LBB75_58:                              # %for.end197
                                        #   in Loop: Header=BB75_53 Depth=1
	jmp	.LBB75_59
.LBB75_59:                              # %for.inc198
                                        #   in Loop: Header=BB75_53 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_53
.LBB75_60:                              # %for.end200
	jmp	.LBB75_81
.LBB75_61:                              # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB75_71
# %bb.62:                               # %if.then204
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB75_63:                              # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_65 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB75_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB75_63 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB75_65:                              # %for.cond209
                                        #   Parent Loop BB75_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB75_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB75_65 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB75_65 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_65
.LBB75_68:                              # %for.end222
                                        #   in Loop: Header=BB75_63 Depth=1
	jmp	.LBB75_69
.LBB75_69:                              # %for.inc223
                                        #   in Loop: Header=BB75_63 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_63
.LBB75_70:                              # %for.end225
	jmp	.LBB75_80
.LBB75_71:                              # %if.else226
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB75_72:                              # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_74 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB75_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB75_72 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB75_74:                              # %for.cond231
                                        #   Parent Loop BB75_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB75_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB75_74 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB75_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_74
.LBB75_77:                              # %for.end244
                                        #   in Loop: Header=BB75_72 Depth=1
	jmp	.LBB75_78
.LBB75_78:                              # %for.inc245
                                        #   in Loop: Header=BB75_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_72
.LBB75_79:                              # %for.end247
	jmp	.LBB75_80
.LBB75_80:                              # %if.end248
	jmp	.LBB75_81
.LBB75_81:                              # %if.end249
	jmp	.LBB75_82
.LBB75_82:                              # %if.end250
	cmpl	$1256026591, -76(%rbp)  # imm = 0x4ADD71DF
	jne	.LBB75_84
.LBB75_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_83
.Lfunc_end75:
	.size	LumaPrediction4x4Bi.34, .Lfunc_end75-LumaPrediction4x4Bi.34
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big.35        # -- Begin function slice_too_big.35
	.p2align	4, 0x90
	.type	slice_too_big.35,@function
slice_too_big.35:                       # @slice_too_big.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1452821826, -52(%rbp)  # imm = 0x56984D42
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB76_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB76_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB76_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB76_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB76_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB76_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB76_5:                               # %if.end
                                        #   in Loop: Header=BB76_2 Depth=1
	movq	-48(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB76_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB76_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB76_7:                               # %if.end8
                                        #   in Loop: Header=BB76_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB76_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB76_21
.LBB76_9:                               # %if.end11
                                        #   in Loop: Header=BB76_2 Depth=1
	jmp	.LBB76_10
.LBB76_10:                              # %for.inc
                                        #   in Loop: Header=BB76_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_2
.LBB76_11:                              # %for.end
	jmp	.LBB76_12
.LBB76_12:                              # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB76_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB76_14:                              # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB76_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB76_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB76_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB76_21
.LBB76_17:                              # %if.end27
                                        #   in Loop: Header=BB76_14 Depth=1
	jmp	.LBB76_18
.LBB76_18:                              # %for.inc28
                                        #   in Loop: Header=BB76_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_14
.LBB76_19:                              # %for.end30
	jmp	.LBB76_20
.LBB76_20:                              # %if.end31
	movl	$0, -20(%rbp)
.LBB76_21:                              # %return
	movl	-20(%rbp), %ebx
	cmpl	$1452821826, -52(%rbp)  # imm = 0x56984D42
	jne	.LBB76_23
.LBB76_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_23:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_22
.Lfunc_end76:
	.size	slice_too_big.35, .Lfunc_end76-slice_too_big.35
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.36 # -- Begin function write_one_macroblock.36
	.p2align	4, 0x90
	.type	write_one_macroblock.36,@function
write_one_macroblock.36:                # @write_one_macroblock.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$137107993, -32(%rbp)   # imm = 0x82C1A19
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB77_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB77_2:                               # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB77_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB77_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB77_6
.LBB77_5:                               # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB77_6:                               # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB77_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB77_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -28(%rbp)
	je	.LBB77_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB77_10:                              # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB77_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB77_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB77_22
.LBB77_13:                              # %if.then22
	movl	$0, -20(%rbp)
.LBB77_14:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_16 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB77_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB77_14 Depth=1
	movl	$0, -24(%rbp)
.LBB77_16:                              # %for.cond24
                                        #   Parent Loop BB77_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB77_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB77_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB77_16 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB77_16
.LBB77_19:                              # %for.end
                                        #   in Loop: Header=BB77_14 Depth=1
	jmp	.LBB77_20
.LBB77_20:                              # %for.inc35
                                        #   in Loop: Header=BB77_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB77_14
.LBB77_21:                              # %for.end37
	jmp	.LBB77_22
.LBB77_22:                              # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB77_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB77_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB77_30
.LBB77_25:                              # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB77_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB77_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB77_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB77_29:                              # %if.end59
	jmp	.LBB77_30
.LBB77_30:                              # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB77_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB77_32:                              # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$137107993, -32(%rbp)   # imm = 0x82C1A19
	jne	.LBB77_34
.LBB77_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_34:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_33
.Lfunc_end77:
	.size	write_one_macroblock.36, .Lfunc_end77-write_one_macroblock.36
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value.37         # -- Begin function B8Mode2Value.37
	.p2align	4, 0x90
	.type	B8Mode2Value.37,@function
B8Mode2Value.37:                        # @B8Mode2Value.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1536707577, -24(%rbp)  # imm = 0x5B984BF9
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB78_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB78_3
.LBB78_2:                               # %if.else
	movslq	-12(%rbp), %rax
	movl	B8Mode2Value.b8start(,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	B8Mode2Value.b8inc(,%rcx,4), %ecx
	imull	-20(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
.LBB78_3:                               # %return
	movl	-16(%rbp), %ebx
	cmpl	$1536707577, -24(%rbp)  # imm = 0x5B984BF9
	jne	.LBB78_5
.LBB78_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_4
.Lfunc_end78:
	.size	B8Mode2Value.37, .Lfunc_end78-B8Mode2Value.37
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode.38 # -- Begin function writeChromaIntraPredMode.38
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.38,@function
writeChromaIntraPredMode.38:            # @writeChromaIntraPredMode.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1570250211, -36(%rbp)  # imm = 0x5D981DE3
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -72(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB79_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB79_3
.LBB79_2:                               # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB79_3:                               # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-64(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-72(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$1570250211, -36(%rbp)  # imm = 0x5D981DE3
	jne	.LBB79_5
.LBB79_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_4
.Lfunc_end79:
	.size	writeChromaIntraPredMode.38, .Lfunc_end79-writeChromaIntraPredMode.38
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.39    # -- Begin function TransformDecision.39
	.p2align	4, 0x90
	.type	TransformDecision.39,@function
TransformDecision.39:                   # @TransformDecision.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$693832935, -88(%rbp)   # imm = 0x295B0CE7
	movl	%edi, -48(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -32(%rbp)
	cmpl	$-1, -48(%rbp)
	jne	.LBB80_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -60(%rbp)
	jmp	.LBB80_3
.LBB80_2:                               # %if.else
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB80_3:                               # %if.end
	jmp	.LBB80_4
.LBB80_4:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_6 Depth 2
                                        #       Child Loop BB80_8 Depth 3
                                        #         Child Loop BB80_10 Depth 4
                                        #           Child Loop BB80_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB80_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB80_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-84(%rbp), %rdx
	leaq	-76(%rbp), %rcx
	leaq	-52(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -64(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -68(%rbp)
	movl	$0, -36(%rbp)
	movl	-64(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB80_6:                               # %for.cond3
                                        #   Parent Loop BB80_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_8 Depth 3
                                        #         Child Loop BB80_10 Depth 4
                                        #           Child Loop BB80_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB80_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB80_8:                               # %for.cond8
                                        #   Parent Loop BB80_4 Depth=1
                                        #     Parent Loop BB80_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB80_10 Depth 4
                                        #           Child Loop BB80_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB80_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-16(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-54(%rbp), %edx
	movl	-84(%rbp), %ecx
	movl	-76(%rbp), %r8d
	movw	-52(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-50(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -28(%rbp)
.LBB80_10:                              # %for.cond13
                                        #   Parent Loop BB80_4 Depth=1
                                        #     Parent Loop BB80_6 Depth=2
                                        #       Parent Loop BB80_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB80_12 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB80_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB80_10 Depth=4
	movl	$0, -24(%rbp)
.LBB80_12:                              # %for.cond17
                                        #   Parent Loop BB80_4 Depth=1
                                        #     Parent Loop BB80_6 Depth=2
                                        #       Parent Loop BB80_8 Depth=3
                                        #         Parent Loop BB80_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB80_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB80_12 Depth=5
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB80_12 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB80_12
.LBB80_15:                              # %for.end
                                        #   in Loop: Header=BB80_10 Depth=4
	jmp	.LBB80_16
.LBB80_16:                              # %for.inc38
                                        #   in Loop: Header=BB80_10 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB80_10
.LBB80_17:                              # %for.end40
                                        #   in Loop: Header=BB80_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB80_8 Depth=3
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_8
.LBB80_19:                              # %for.end44
                                        #   in Loop: Header=BB80_6 Depth=2
	jmp	.LBB80_20
.LBB80_20:                              # %for.inc45
                                        #   in Loop: Header=BB80_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB80_6
.LBB80_21:                              # %for.end47
                                        #   in Loop: Header=BB80_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB80_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_4
.LBB80_23:                              # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB80_25
# %bb.24:                               # %if.then56
	movl	$1, -44(%rbp)
	jmp	.LBB80_28
.LBB80_25:                              # %if.else57
	movl	-40(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB80_27
# %bb.26:                               # %if.then60
	movl	$1, -44(%rbp)
	jmp	.LBB80_28
.LBB80_27:                              # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -44(%rbp)
.LBB80_28:                              # %return
	movl	-44(%rbp), %ebx
	cmpl	$693832935, -88(%rbp)   # imm = 0x295B0CE7
	jne	.LBB80_30
.LBB80_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_30:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_29
.Lfunc_end80:
	.size	TransformDecision.39, .Lfunc_end80-TransformDecision.39
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.40    # -- Begin function LumaPrediction4x4.40
	.p2align	4, 0x90
	.type	LumaPrediction4x4.40,@function
LumaPrediction4x4.40:                   # @LumaPrediction4x4.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$1940971293, -100(%rbp) # imm = 0x73B0DF1D
	movl	%edi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -64(%rbp)
	movl	%r8d, -72(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB81_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB81_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB81_6
.LBB81_3:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB81_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB81_5:                               # %land.end
.LBB81_6:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB81_9
# %bb.7:                                # %land.lhs.true11
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB81_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB81_10
.LBB81_9:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB81_10
.LBB81_10:                              # %cond.end
	movl	%ecx, -60(%rbp)
	movq	-88(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB81_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB81_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB81_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -20(%rbp)
	jne	.LBB81_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -64(%rbp)
	jne	.LBB81_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -72(%rbp)
	jne	.LBB81_20
# %bb.16:                               # %if.then
	movq	-88(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB81_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB81_19
.LBB81_18:                              # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB81_19:                              # %cond.end38
	movq	%rax, -96(%rbp)
.LBB81_20:                              # %if.end
	cmpl	$0, -20(%rbp)
	je	.LBB81_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -20(%rbp)
	jne	.LBB81_23
.LBB81_22:                              # %if.then45
	movl	-76(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-60(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB81_23:                              # %if.end58
	cmpl	$1, -20(%rbp)
	je	.LBB81_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -20(%rbp)
	jne	.LBB81_26
.LBB81_25:                              # %if.then64
	movl	-76(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-60(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB81_26:                              # %if.end77
	cmpl	$0, -104(%rbp)
	je	.LBB81_58
# %bb.27:                               # %if.then79
	cmpl	$2, -20(%rbp)
	jne	.LBB81_37
# %bb.28:                               # %if.then82
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB81_29:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_31 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB81_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB81_29 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB81_31:                              # %for.cond85
                                        #   Parent Loop BB81_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB81_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB81_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB81_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_31
.LBB81_34:                              # %for.end
                                        #   in Loop: Header=BB81_29 Depth=1
	jmp	.LBB81_35
.LBB81_35:                              # %for.inc125
                                        #   in Loop: Header=BB81_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_29
.LBB81_36:                              # %for.end127
	jmp	.LBB81_57
.LBB81_37:                              # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB81_47
# %bb.38:                               # %if.then130
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB81_39:                              # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_41 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB81_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB81_39 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB81_41:                              # %for.cond135
                                        #   Parent Loop BB81_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB81_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB81_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB81_41 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_41
.LBB81_44:                              # %for.end161
                                        #   in Loop: Header=BB81_39 Depth=1
	jmp	.LBB81_45
.LBB81_45:                              # %for.inc162
                                        #   in Loop: Header=BB81_39 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_39
.LBB81_46:                              # %for.end164
	jmp	.LBB81_56
.LBB81_47:                              # %if.else165
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB81_48:                              # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_50 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB81_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB81_48 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB81_50:                              # %for.cond170
                                        #   Parent Loop BB81_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB81_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB81_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB81_50 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_50
.LBB81_53:                              # %for.end196
                                        #   in Loop: Header=BB81_48 Depth=1
	jmp	.LBB81_54
.LBB81_54:                              # %for.inc197
                                        #   in Loop: Header=BB81_48 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_48
.LBB81_55:                              # %for.end199
	jmp	.LBB81_56
.LBB81_56:                              # %if.end200
	jmp	.LBB81_57
.LBB81_57:                              # %if.end201
	jmp	.LBB81_89
.LBB81_58:                              # %if.else202
	cmpl	$2, -20(%rbp)
	jne	.LBB81_68
# %bb.59:                               # %if.then205
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB81_60:                              # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_62 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB81_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB81_60 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB81_62:                              # %for.cond210
                                        #   Parent Loop BB81_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB81_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB81_62 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB81_62 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_62
.LBB81_65:                              # %for.end226
                                        #   in Loop: Header=BB81_60 Depth=1
	jmp	.LBB81_66
.LBB81_66:                              # %for.inc227
                                        #   in Loop: Header=BB81_60 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_60
.LBB81_67:                              # %for.end229
	jmp	.LBB81_88
.LBB81_68:                              # %if.else230
	cmpl	$0, -20(%rbp)
	jne	.LBB81_78
# %bb.69:                               # %if.then233
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB81_70:                              # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_72 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB81_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB81_70 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB81_72:                              # %for.cond238
                                        #   Parent Loop BB81_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB81_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB81_72 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB81_72 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_72
.LBB81_75:                              # %for.end251
                                        #   in Loop: Header=BB81_70 Depth=1
	jmp	.LBB81_76
.LBB81_76:                              # %for.inc252
                                        #   in Loop: Header=BB81_70 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_70
.LBB81_77:                              # %for.end254
	jmp	.LBB81_87
.LBB81_78:                              # %if.else255
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB81_79:                              # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_81 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB81_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB81_79 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB81_81:                              # %for.cond260
                                        #   Parent Loop BB81_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB81_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB81_81 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB81_81 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_81
.LBB81_84:                              # %for.end273
                                        #   in Loop: Header=BB81_79 Depth=1
	jmp	.LBB81_85
.LBB81_85:                              # %for.inc274
                                        #   in Loop: Header=BB81_79 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_79
.LBB81_86:                              # %for.end276
	jmp	.LBB81_87
.LBB81_87:                              # %if.end277
	jmp	.LBB81_88
.LBB81_88:                              # %if.end278
	jmp	.LBB81_89
.LBB81_89:                              # %if.end279
	cmpl	$1940971293, -100(%rbp) # imm = 0x73B0DF1D
	jne	.LBB81_91
.LBB81_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_91:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_90
.Lfunc_end81:
	.size	LumaPrediction4x4.40, .Lfunc_end81-LumaPrediction4x4.40
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.41  # -- Begin function writeReferenceFrame.41
	.p2align	4, 0x90
	.type	writeReferenceFrame.41,@function
writeReferenceFrame.41:                 # @writeReferenceFrame.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$901192454, -80(%rbp)   # imm = 0x35B71B06
	movl	%edi, -76(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB82_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB82_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB82_4
.LBB82_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB82_4
.LBB82_4:                               # %cond.end
	movl	%ecx, -48(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB82_6
# %bb.5:                                # %cond.true10
	movl	-48(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB82_7
.LBB82_6:                               # %cond.false13
	movl	-48(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB82_7:                               # %cond.end17
	movl	%eax, -44(%rbp)
	movl	$0, -36(%rbp)
	cmpl	$1, -44(%rbp)
	jne	.LBB82_9
# %bb.8:                                # %if.then
	movl	$0, -52(%rbp)
	jmp	.LBB82_18
.LBB82_9:                               # %if.end
	cmpl	$2, -44(%rbp)
	jne	.LBB82_11
# %bb.10:                               # %if.then20
	movl	$1, -36(%rbp)
.LBB82_11:                              # %if.end21
	movl	-68(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB82_16
# %bb.12:                               # %if.then28
	cmpl	$0, -36(%rbp)
	je	.LBB82_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB82_15
.LBB82_14:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB82_15:                              # %if.end33
	jmp	.LBB82_17
.LBB82_16:                              # %if.else34
	movl	-76(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-72(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-84(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-40(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB82_17:                              # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
.LBB82_18:                              # %return
	movl	-52(%rbp), %ebx
	cmpl	$901192454, -80(%rbp)   # imm = 0x35B71B06
	jne	.LBB82_20
.LBB82_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_19
.Lfunc_end82:
	.size	writeReferenceFrame.41, .Lfunc_end82-writeReferenceFrame.41
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.42  # -- Begin function ChromaPrediction4x4.42
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.42,@function
ChromaPrediction4x4.42:                 # @ChromaPrediction4x4.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$2018712272, -68(%rbp)  # imm = 0x78531AD0
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -52(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB83_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB83_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB83_6
.LBB83_3:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB83_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB83_5:                               # %land.end
.LBB83_6:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB83_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB83_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB83_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -20(%rbp)
	jne	.LBB83_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -56(%rbp)
	jne	.LBB83_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -52(%rbp)
	jne	.LBB83_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB83_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB83_15
.LBB83_14:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB83_15:                              # %cond.end
	movq	%rax, -64(%rbp)
.LBB83_16:                              # %if.end
	cmpl	$-1, -20(%rbp)
	jne	.LBB83_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB83_87
.LBB83_18:                              # %if.end30
	cmpl	$0, -20(%rbp)
	je	.LBB83_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -20(%rbp)
	jne	.LBB83_21
.LBB83_20:                              # %if.then36
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB83_21:                              # %if.end37
	cmpl	$1, -20(%rbp)
	je	.LBB83_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -20(%rbp)
	jne	.LBB83_24
.LBB83_23:                              # %if.then43
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB83_24:                              # %if.end44
	cmpl	$0, -72(%rbp)
	je	.LBB83_56
# %bb.25:                               # %if.then46
	cmpl	$2, -20(%rbp)
	jne	.LBB83_35
# %bb.26:                               # %if.then49
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB83_27:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_29 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB83_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB83_27 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB83_29:                              # %for.cond52
                                        #   Parent Loop BB83_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB83_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB83_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB83_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_29
.LBB83_32:                              # %for.end
                                        #   in Loop: Header=BB83_27 Depth=1
	jmp	.LBB83_33
.LBB83_33:                              # %for.inc99
                                        #   in Loop: Header=BB83_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_27
.LBB83_34:                              # %for.end101
	jmp	.LBB83_55
.LBB83_35:                              # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB83_45
# %bb.36:                               # %if.then104
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB83_37:                              # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_39 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB83_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB83_37 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB83_39:                              # %for.cond109
                                        #   Parent Loop BB83_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB83_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB83_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB83_39 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_39
.LBB83_42:                              # %for.end139
                                        #   in Loop: Header=BB83_37 Depth=1
	jmp	.LBB83_43
.LBB83_43:                              # %for.inc140
                                        #   in Loop: Header=BB83_37 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_37
.LBB83_44:                              # %for.end142
	jmp	.LBB83_54
.LBB83_45:                              # %if.else143
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB83_46:                              # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_48 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB83_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB83_46 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB83_48:                              # %for.cond148
                                        #   Parent Loop BB83_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB83_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB83_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB83_48 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_48
.LBB83_51:                              # %for.end178
                                        #   in Loop: Header=BB83_46 Depth=1
	jmp	.LBB83_52
.LBB83_52:                              # %for.inc179
                                        #   in Loop: Header=BB83_46 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_46
.LBB83_53:                              # %for.end181
	jmp	.LBB83_54
.LBB83_54:                              # %if.end182
	jmp	.LBB83_55
.LBB83_55:                              # %if.end183
	jmp	.LBB83_87
.LBB83_56:                              # %if.else184
	cmpl	$2, -20(%rbp)
	jne	.LBB83_66
# %bb.57:                               # %if.then187
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB83_58:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_60 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB83_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB83_58 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB83_60:                              # %for.cond192
                                        #   Parent Loop BB83_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB83_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB83_60 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB83_60 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_60
.LBB83_63:                              # %for.end208
                                        #   in Loop: Header=BB83_58 Depth=1
	jmp	.LBB83_64
.LBB83_64:                              # %for.inc209
                                        #   in Loop: Header=BB83_58 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_58
.LBB83_65:                              # %for.end211
	jmp	.LBB83_86
.LBB83_66:                              # %if.else212
	cmpl	$0, -20(%rbp)
	jne	.LBB83_76
# %bb.67:                               # %if.then215
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB83_68:                              # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_70 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB83_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB83_68 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB83_70:                              # %for.cond220
                                        #   Parent Loop BB83_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB83_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB83_70 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB83_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_70
.LBB83_73:                              # %for.end233
                                        #   in Loop: Header=BB83_68 Depth=1
	jmp	.LBB83_74
.LBB83_74:                              # %for.inc234
                                        #   in Loop: Header=BB83_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_68
.LBB83_75:                              # %for.end236
	jmp	.LBB83_85
.LBB83_76:                              # %if.else237
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB83_77:                              # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_79 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB83_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB83_77 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB83_79:                              # %for.cond242
                                        #   Parent Loop BB83_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB83_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB83_79 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB83_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_79
.LBB83_82:                              # %for.end255
                                        #   in Loop: Header=BB83_77 Depth=1
	jmp	.LBB83_83
.LBB83_83:                              # %for.inc256
                                        #   in Loop: Header=BB83_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_77
.LBB83_84:                              # %for.end258
	jmp	.LBB83_85
.LBB83_85:                              # %if.end259
	jmp	.LBB83_86
.LBB83_86:                              # %if.end260
	jmp	.LBB83_87
.LBB83_87:                              # %if.end261
	cmpl	$2018712272, -68(%rbp)  # imm = 0x78531AD0
	jne	.LBB83_89
.LBB83_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_88
.Lfunc_end83:
	.size	ChromaPrediction4x4.42, .Lfunc_end83-ChromaPrediction4x4.42
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.43    # -- Begin function writeLumaCoeff8x8.43
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.43,@function
writeLumaCoeff8x8.43:                   # @writeLumaCoeff8x8.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1021707047, -36(%rbp)  # imm = 0x3CE60327
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	cmpl	$13, -20(%rbp)
	jne	.LBB84_2
# %bb.1:                                # %if.then
	jmp	.LBB84_2
.LBB84_2:                               # %if.end
	cmpl	$0, -32(%rbp)
	je	.LBB84_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB84_15
.LBB84_4:                               # %if.then5
	movl	$0, -16(%rbp)
.LBB84_5:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB84_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB84_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB84_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB84_5 Depth=1
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -32(%rbp)
	je	.LBB84_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB84_5 Depth=1
	cmpl	$13, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB84_10
.LBB84_9:                               # %cond.false
                                        #   in Loop: Header=BB84_5 Depth=1
	movl	-28(%rbp), %ecx
.LBB84_10:                              # %cond.end
                                        #   in Loop: Header=BB84_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_12
.LBB84_11:                              # %if.else
                                        #   in Loop: Header=BB84_5 Depth=1
	movl	-24(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-28(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB84_12:                              # %if.end17
                                        #   in Loop: Header=BB84_5 Depth=1
	jmp	.LBB84_13
.LBB84_13:                              # %for.inc
                                        #   in Loop: Header=BB84_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_5
.LBB84_14:                              # %for.end
	jmp	.LBB84_19
.LBB84_15:                              # %if.else18
	cmpl	$13, -20(%rbp)
	jne	.LBB84_17
# %bb.16:                               # %if.then21
	movl	-24(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_18
.LBB84_17:                              # %if.else24
	movl	-24(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB84_18:                              # %if.end27
	jmp	.LBB84_19
.LBB84_19:                              # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$1021707047, -36(%rbp)  # imm = 0x3CE60327
	jne	.LBB84_21
.LBB84_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_20
.Lfunc_end84:
	.size	writeLumaCoeff8x8.43, .Lfunc_end84-writeLumaCoeff8x8.43
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.44    # -- Begin function TransformDecision.44
	.p2align	4, 0x90
	.type	TransformDecision.44,@function
TransformDecision.44:                   # @TransformDecision.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$274848462, -80(%rbp)   # imm = 0x1061DACE
	movl	%edi, -48(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$-1, -48(%rbp)
	jne	.LBB85_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -64(%rbp)
	jmp	.LBB85_3
.LBB85_2:                               # %if.else
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
.LBB85_3:                               # %if.end
	jmp	.LBB85_4
.LBB85_4:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_6 Depth 2
                                        #       Child Loop BB85_8 Depth 3
                                        #         Child Loop BB85_10 Depth 4
                                        #           Child Loop BB85_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB85_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB85_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-52(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	leaq	-88(%rbp), %rcx
	leaq	-50(%rbp), %r8
	leaq	-54(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -60(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -68(%rbp)
	movl	$0, -32(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB85_6:                               # %for.cond3
                                        #   Parent Loop BB85_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_8 Depth 3
                                        #         Child Loop BB85_10 Depth 4
                                        #           Child Loop BB85_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB85_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB85_8:                               # %for.cond8
                                        #   Parent Loop BB85_4 Depth=1
                                        #     Parent Loop BB85_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_10 Depth 4
                                        #           Child Loop BB85_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB85_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-16(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-52(%rbp), %edx
	movl	-72(%rbp), %ecx
	movl	-88(%rbp), %r8d
	movw	-50(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-54(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-32(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -28(%rbp)
.LBB85_10:                              # %for.cond13
                                        #   Parent Loop BB85_4 Depth=1
                                        #     Parent Loop BB85_6 Depth=2
                                        #       Parent Loop BB85_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB85_12 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB85_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB85_10 Depth=4
	movl	$0, -24(%rbp)
.LBB85_12:                              # %for.cond17
                                        #   Parent Loop BB85_4 Depth=1
                                        #     Parent Loop BB85_6 Depth=2
                                        #       Parent Loop BB85_8 Depth=3
                                        #         Parent Loop BB85_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB85_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB85_12 Depth=5
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-76(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB85_12 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB85_12
.LBB85_15:                              # %for.end
                                        #   in Loop: Header=BB85_10 Depth=4
	jmp	.LBB85_16
.LBB85_16:                              # %for.inc38
                                        #   in Loop: Header=BB85_10 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB85_10
.LBB85_17:                              # %for.end40
                                        #   in Loop: Header=BB85_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB85_8 Depth=3
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_8
.LBB85_19:                              # %for.end44
                                        #   in Loop: Header=BB85_6 Depth=2
	jmp	.LBB85_20
.LBB85_20:                              # %for.inc45
                                        #   in Loop: Header=BB85_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_6
.LBB85_21:                              # %for.end47
                                        #   in Loop: Header=BB85_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB85_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_4
.LBB85_23:                              # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB85_25
# %bb.24:                               # %if.then56
	movl	$1, -44(%rbp)
	jmp	.LBB85_28
.LBB85_25:                              # %if.else57
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB85_27
# %bb.26:                               # %if.then60
	movl	$1, -44(%rbp)
	jmp	.LBB85_28
.LBB85_27:                              # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -44(%rbp)
.LBB85_28:                              # %return
	movl	-44(%rbp), %ebx
	cmpl	$274848462, -80(%rbp)   # imm = 0x1061DACE
	jne	.LBB85_30
.LBB85_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_30:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_29
.Lfunc_end85:
	.size	TransformDecision.44, .Lfunc_end85-TransformDecision.44
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.45   # -- Begin function writeIntra4x4Modes.45
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.45,@function
writeIntra4x4Modes.45:                  # @writeIntra4x4Modes.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$248010194, -68(%rbp)   # imm = 0xEC855D2
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB86_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_9 Depth 2
                                        #       Child Loop BB86_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB86_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB86_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB86_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB86_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB86_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB86_8
.LBB86_5:                               # %lor.lhs.false10
                                        #   in Loop: Header=BB86_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB86_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB86_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB86_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB86_17
.LBB86_8:                               # %if.then
                                        #   in Loop: Header=BB86_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movl	%ecx, -72(%rbp)
	movl	-72(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -80(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -76(%rbp)
	movl	$0, -28(%rbp)
.LBB86_9:                               # %for.cond24
                                        #   Parent Loop BB86_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_11 Depth 3
	cmpl	$2, -28(%rbp)
	jge	.LBB86_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB86_9 Depth=2
	movl	$0, -12(%rbp)
.LBB86_11:                              # %for.cond27
                                        #   Parent Loop BB86_1 Depth=1
                                        #     Parent Loop BB86_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB86_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB86_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB86_11 Depth=3
	movl	-80(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_11
.LBB86_14:                              # %for.end
                                        #   in Loop: Header=BB86_9 Depth=2
	jmp	.LBB86_15
.LBB86_15:                              # %for.inc42
                                        #   in Loop: Header=BB86_9 Depth=2
	movl	-76(%rbp), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB86_9
.LBB86_16:                              # %for.end44
                                        #   in Loop: Header=BB86_1 Depth=1
	jmp	.LBB86_17
.LBB86_17:                              # %if.end
                                        #   in Loop: Header=BB86_1 Depth=1
	jmp	.LBB86_18
.LBB86_18:                              # %for.inc45
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_1
.LBB86_19:                              # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB86_20:                              # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB86_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB86_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB86_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB86_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB86_23:                              # %if.end57
                                        #   in Loop: Header=BB86_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB86_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB86_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB86_26
.LBB86_25:                              # %if.else
                                        #   in Loop: Header=BB86_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB86_26:                              # %if.end65
                                        #   in Loop: Header=BB86_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB86_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_20
.LBB86_28:                              # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$248010194, -68(%rbp)   # imm = 0xEC855D2
	jne	.LBB86_30
.LBB86_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_30:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_29
.Lfunc_end86:
	.size	writeIntra4x4Modes.45, .Lfunc_end86-writeIntra4x4Modes.45
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.46  # -- Begin function LumaPrediction4x4Bi.46
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.46,@function
LumaPrediction4x4Bi.46:                 # @LumaPrediction4x4Bi.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$675115561, -76(%rbp)   # imm = 0x283D7229
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -72(%rbp)
	movl	%r8d, -84(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -60(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB87_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB87_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB87_6
.LBB87_3:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB87_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB87_5:                               # %land.end
.LBB87_6:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB87_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB87_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB87_10
.LBB87_9:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB87_10
.LBB87_10:                              # %cond.end
	movl	%ecx, -68(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB87_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB87_13
.LBB87_12:                              # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB87_13:                              # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB87_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB87_16
.LBB87_15:                              # %if.then
	movl	-52(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB87_16:                              # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB87_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB87_19
.LBB87_18:                              # %if.then39
	movl	-52(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB87_19:                              # %if.end52
	cmpl	$0, -80(%rbp)
	je	.LBB87_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB87_30
# %bb.21:                               # %if.then56
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB87_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_24 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB87_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB87_22 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB87_24:                              # %for.cond58
                                        #   Parent Loop BB87_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB87_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB87_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB87_24 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_24
.LBB87_27:                              # %for.end
                                        #   in Loop: Header=BB87_22 Depth=1
	jmp	.LBB87_28
.LBB87_28:                              # %for.inc96
                                        #   in Loop: Header=BB87_22 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_22
.LBB87_29:                              # %for.end98
	jmp	.LBB87_50
.LBB87_30:                              # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB87_40
# %bb.31:                               # %if.then101
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB87_32:                              # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_34 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB87_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB87_32 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB87_34:                              # %for.cond106
                                        #   Parent Loop BB87_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB87_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB87_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB87_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_34
.LBB87_37:                              # %for.end132
                                        #   in Loop: Header=BB87_32 Depth=1
	jmp	.LBB87_38
.LBB87_38:                              # %for.inc133
                                        #   in Loop: Header=BB87_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_32
.LBB87_39:                              # %for.end135
	jmp	.LBB87_49
.LBB87_40:                              # %if.else136
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB87_41:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_43 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB87_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB87_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB87_43:                              # %for.cond141
                                        #   Parent Loop BB87_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB87_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB87_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB87_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_43
.LBB87_46:                              # %for.end167
                                        #   in Loop: Header=BB87_41 Depth=1
	jmp	.LBB87_47
.LBB87_47:                              # %for.inc168
                                        #   in Loop: Header=BB87_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_41
.LBB87_48:                              # %for.end170
	jmp	.LBB87_49
.LBB87_49:                              # %if.end171
	jmp	.LBB87_50
.LBB87_50:                              # %if.end172
	jmp	.LBB87_82
.LBB87_51:                              # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB87_61
# %bb.52:                               # %if.then176
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB87_53:                              # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_55 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB87_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB87_53 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB87_55:                              # %for.cond181
                                        #   Parent Loop BB87_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB87_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB87_55 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB87_55 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_55
.LBB87_58:                              # %for.end197
                                        #   in Loop: Header=BB87_53 Depth=1
	jmp	.LBB87_59
.LBB87_59:                              # %for.inc198
                                        #   in Loop: Header=BB87_53 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_53
.LBB87_60:                              # %for.end200
	jmp	.LBB87_81
.LBB87_61:                              # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB87_71
# %bb.62:                               # %if.then204
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB87_63:                              # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_65 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB87_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB87_63 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB87_65:                              # %for.cond209
                                        #   Parent Loop BB87_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB87_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB87_65 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB87_65 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_65
.LBB87_68:                              # %for.end222
                                        #   in Loop: Header=BB87_63 Depth=1
	jmp	.LBB87_69
.LBB87_69:                              # %for.inc223
                                        #   in Loop: Header=BB87_63 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_63
.LBB87_70:                              # %for.end225
	jmp	.LBB87_80
.LBB87_71:                              # %if.else226
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB87_72:                              # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_74 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB87_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB87_72 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB87_74:                              # %for.cond231
                                        #   Parent Loop BB87_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB87_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB87_74 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB87_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_74
.LBB87_77:                              # %for.end244
                                        #   in Loop: Header=BB87_72 Depth=1
	jmp	.LBB87_78
.LBB87_78:                              # %for.inc245
                                        #   in Loop: Header=BB87_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_72
.LBB87_79:                              # %for.end247
	jmp	.LBB87_80
.LBB87_80:                              # %if.end248
	jmp	.LBB87_81
.LBB87_81:                              # %if.end249
	jmp	.LBB87_82
.LBB87_82:                              # %if.end250
	cmpl	$675115561, -76(%rbp)   # imm = 0x283D7229
	jne	.LBB87_84
.LBB87_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_83
.Lfunc_end87:
	.size	LumaPrediction4x4Bi.46, .Lfunc_end87-LumaPrediction4x4Bi.46
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.47  # -- Begin function writeReferenceFrame.47
	.p2align	4, 0x90
	.type	writeReferenceFrame.47,@function
writeReferenceFrame.47:                 # @writeReferenceFrame.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1235610216, -80(%rbp)  # imm = 0x49A5EA68
	movl	%edi, -72(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB88_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB88_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB88_4
.LBB88_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB88_4
.LBB88_4:                               # %cond.end
	movl	%ecx, -52(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB88_6
# %bb.5:                                # %cond.true10
	movl	-52(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB88_7
.LBB88_6:                               # %cond.false13
	movl	-52(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB88_7:                               # %cond.end17
	movl	%eax, -48(%rbp)
	movl	$0, -44(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB88_9
# %bb.8:                                # %if.then
	movl	$0, -36(%rbp)
	jmp	.LBB88_18
.LBB88_9:                               # %if.end
	cmpl	$2, -48(%rbp)
	jne	.LBB88_11
# %bb.10:                               # %if.then20
	movl	$1, -44(%rbp)
.LBB88_11:                              # %if.end21
	movl	-76(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB88_16
# %bb.12:                               # %if.then28
	cmpl	$0, -44(%rbp)
	je	.LBB88_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB88_15
.LBB88_14:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB88_15:                              # %if.end33
	jmp	.LBB88_17
.LBB88_16:                              # %if.else34
	movl	-72(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-68(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-84(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-40(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB88_17:                              # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB88_18:                              # %return
	movl	-36(%rbp), %ebx
	cmpl	$1235610216, -80(%rbp)  # imm = 0x49A5EA68
	jne	.LBB88_20
.LBB88_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_19
.Lfunc_end88:
	.size	writeReferenceFrame.47, .Lfunc_end88-writeReferenceFrame.47
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.48   # -- Begin function LumaResidualCoding.48
	.p2align	4, 0x90
	.type	LumaResidualCoding.48,@function
LumaResidualCoding.48:                  # @LumaResidualCoding.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1523662728, -48(%rbp)  # imm = 0x5AD13F88
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB89_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB89_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB89_1 Depth=1
	movl	-4(%rbp), %edi
	leaq	-20(%rbp), %rsi
	leaq	-36(%rbp), %rdx
	leaq	-52(%rbp), %rcx
	leaq	-22(%rbp), %r8
	leaq	-18(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-4(%rbp), %edx
	movw	-20(%rbp), %ax
	movl	-36(%rbp), %r8d
	movl	-52(%rbp), %r9d
	movw	-22(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-18(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB89_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_1
.LBB89_4:                               # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB89_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB89_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB89_33
.LBB89_7:                               # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -8(%rbp)
.LBB89_8:                               # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_10 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB89_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB89_8 Depth=1
	movl	$0, -12(%rbp)
.LBB89_10:                              # %for.cond13
                                        #   Parent Loop BB89_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB89_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB89_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB89_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB89_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB89_14
.LBB89_13:                              # %if.else
                                        #   in Loop: Header=BB89_10 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB89_14:                              # %if.end
                                        #   in Loop: Header=BB89_10 Depth=2
	jmp	.LBB89_15
.LBB89_15:                              # %for.inc31
                                        #   in Loop: Header=BB89_10 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_10
.LBB89_16:                              # %for.end33
                                        #   in Loop: Header=BB89_8 Depth=1
	jmp	.LBB89_17
.LBB89_17:                              # %for.inc34
                                        #   in Loop: Header=BB89_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_8
.LBB89_18:                              # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB89_32
# %bb.19:                               # %if.then38
	movl	$0, -4(%rbp)
.LBB89_20:                              # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_22 Depth 2
                                        #       Child Loop BB89_24 Depth 3
	cmpl	$4, -4(%rbp)
	jge	.LBB89_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB89_20 Depth=1
	movl	-4(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-4(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB89_22:                              # %for.cond45
                                        #   Parent Loop BB89_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB89_24 Depth 3
	cmpl	$8, -8(%rbp)
	jge	.LBB89_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB89_22 Depth=2
	movl	$0, -12(%rbp)
.LBB89_24:                              # %for.cond48
                                        #   Parent Loop BB89_20 Depth=1
                                        #     Parent Loop BB89_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -12(%rbp)
	jge	.LBB89_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB89_24 Depth=3
	movl	-44(%rbp), %edi
	addl	-8(%rbp), %edi
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB89_24 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_24
.LBB89_27:                              # %for.end55
                                        #   in Loop: Header=BB89_22 Depth=2
	jmp	.LBB89_28
.LBB89_28:                              # %for.inc56
                                        #   in Loop: Header=BB89_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_22
.LBB89_29:                              # %for.end58
                                        #   in Loop: Header=BB89_20 Depth=1
	jmp	.LBB89_30
.LBB89_30:                              # %for.inc59
                                        #   in Loop: Header=BB89_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_20
.LBB89_31:                              # %for.end61
	jmp	.LBB89_32
.LBB89_32:                              # %if.end62
	jmp	.LBB89_33
.LBB89_33:                              # %if.end63
	cmpl	$1523662728, -48(%rbp)  # imm = 0x5AD13F88
	jne	.LBB89_35
.LBB89_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_35:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_34
.Lfunc_end89:
	.size	LumaResidualCoding.48, .Lfunc_end89-LumaResidualCoding.48
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.49 # -- Begin function writeLumaCoeff4x4_CABAC.49
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.49,@function
writeLumaCoeff4x4_CABAC.49:             # @writeLumaCoeff4x4_CABAC.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$620931089, -52(%rbp)   # imm = 0x2502A811
	movl	%edi, -28(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -72(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -88(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB90_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB90_3
.LBB90_2:                               # %cond.false
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB90_3:                               # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB90_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB90_6
.LBB90_5:                               # %cond.false26
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB90_6:                               # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -16(%rbp)
.LBB90_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -16(%rbp)
	jg	.LBB90_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB90_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB90_9:                               # %land.end
                                        #   in Loop: Header=BB90_7 Depth=1
	testb	$1, %al
	jne	.LBB90_10
	jmp	.LBB90_15
.LBB90_10:                              # %for.body
                                        #   in Loop: Header=BB90_7 Depth=1
	movq	-96(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-88(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -16(%rbp)
	jne	.LBB90_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB90_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB90_13
.LBB90_12:                              # %cond.false40
                                        #   in Loop: Header=BB90_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB90_13:                              # %cond.end43
                                        #   in Loop: Header=BB90_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-72(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB90_7 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_7
.LBB90_15:                              # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$620931089, -52(%rbp)   # imm = 0x2502A811
	jne	.LBB90_17
.LBB90_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_17:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_16
.Lfunc_end90:
	.size	writeLumaCoeff4x4_CABAC.49, .Lfunc_end90-writeLumaCoeff4x4_CABAC.49
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big.50        # -- Begin function slice_too_big.50
	.p2align	4, 0x90
	.type	slice_too_big.50,@function
slice_too_big.50:                       # @slice_too_big.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$720823879, -52(%rbp)   # imm = 0x2AF6E647
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB91_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB91_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB91_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB91_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB91_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB91_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB91_5:                               # %if.end
                                        #   in Loop: Header=BB91_2 Depth=1
	movq	-48(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB91_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB91_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB91_7:                               # %if.end8
                                        #   in Loop: Header=BB91_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB91_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB91_21
.LBB91_9:                               # %if.end11
                                        #   in Loop: Header=BB91_2 Depth=1
	jmp	.LBB91_10
.LBB91_10:                              # %for.inc
                                        #   in Loop: Header=BB91_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_2
.LBB91_11:                              # %for.end
	jmp	.LBB91_12
.LBB91_12:                              # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB91_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB91_14:                              # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB91_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB91_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB91_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB91_21
.LBB91_17:                              # %if.end27
                                        #   in Loop: Header=BB91_14 Depth=1
	jmp	.LBB91_18
.LBB91_18:                              # %for.inc28
                                        #   in Loop: Header=BB91_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_14
.LBB91_19:                              # %for.end30
	jmp	.LBB91_20
.LBB91_20:                              # %if.end31
	movl	$0, -20(%rbp)
.LBB91_21:                              # %return
	movl	-20(%rbp), %ebx
	cmpl	$720823879, -52(%rbp)   # imm = 0x2AF6E647
	jne	.LBB91_23
.LBB91_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_23:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_22
.Lfunc_end91:
	.size	slice_too_big.50, .Lfunc_end91-slice_too_big.50
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.51  # -- Begin function ChromaPrediction4x4.51
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.51,@function
ChromaPrediction4x4.51:                 # @ChromaPrediction4x4.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$1870038788, -72(%rbp)  # imm = 0x6F768704
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -52(%rbp)
	movl	%r9d, -56(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB92_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB92_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB92_6
.LBB92_3:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB92_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB92_5:                               # %land.end
.LBB92_6:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB92_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB92_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB92_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -20(%rbp)
	jne	.LBB92_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -52(%rbp)
	jne	.LBB92_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -56(%rbp)
	jne	.LBB92_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB92_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB92_15
.LBB92_14:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB92_15:                              # %cond.end
	movq	%rax, -64(%rbp)
.LBB92_16:                              # %if.end
	cmpl	$-1, -20(%rbp)
	jne	.LBB92_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB92_87
.LBB92_18:                              # %if.end30
	cmpl	$0, -20(%rbp)
	je	.LBB92_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -20(%rbp)
	jne	.LBB92_21
.LBB92_20:                              # %if.then36
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB92_21:                              # %if.end37
	cmpl	$1, -20(%rbp)
	je	.LBB92_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -20(%rbp)
	jne	.LBB92_24
.LBB92_23:                              # %if.then43
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB92_24:                              # %if.end44
	cmpl	$0, -68(%rbp)
	je	.LBB92_56
# %bb.25:                               # %if.then46
	cmpl	$2, -20(%rbp)
	jne	.LBB92_35
# %bb.26:                               # %if.then49
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB92_27:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_29 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB92_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB92_27 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB92_29:                              # %for.cond52
                                        #   Parent Loop BB92_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB92_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB92_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB92_29 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_29
.LBB92_32:                              # %for.end
                                        #   in Loop: Header=BB92_27 Depth=1
	jmp	.LBB92_33
.LBB92_33:                              # %for.inc99
                                        #   in Loop: Header=BB92_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_27
.LBB92_34:                              # %for.end101
	jmp	.LBB92_55
.LBB92_35:                              # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB92_45
# %bb.36:                               # %if.then104
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB92_37:                              # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_39 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB92_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB92_37 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB92_39:                              # %for.cond109
                                        #   Parent Loop BB92_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB92_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB92_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB92_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_39
.LBB92_42:                              # %for.end139
                                        #   in Loop: Header=BB92_37 Depth=1
	jmp	.LBB92_43
.LBB92_43:                              # %for.inc140
                                        #   in Loop: Header=BB92_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_37
.LBB92_44:                              # %for.end142
	jmp	.LBB92_54
.LBB92_45:                              # %if.else143
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB92_46:                              # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_48 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB92_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB92_46 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB92_48:                              # %for.cond148
                                        #   Parent Loop BB92_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB92_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB92_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB92_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_48
.LBB92_51:                              # %for.end178
                                        #   in Loop: Header=BB92_46 Depth=1
	jmp	.LBB92_52
.LBB92_52:                              # %for.inc179
                                        #   in Loop: Header=BB92_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_46
.LBB92_53:                              # %for.end181
	jmp	.LBB92_54
.LBB92_54:                              # %if.end182
	jmp	.LBB92_55
.LBB92_55:                              # %if.end183
	jmp	.LBB92_87
.LBB92_56:                              # %if.else184
	cmpl	$2, -20(%rbp)
	jne	.LBB92_66
# %bb.57:                               # %if.then187
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB92_58:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_60 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB92_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB92_58 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB92_60:                              # %for.cond192
                                        #   Parent Loop BB92_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB92_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB92_60 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB92_60 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_60
.LBB92_63:                              # %for.end208
                                        #   in Loop: Header=BB92_58 Depth=1
	jmp	.LBB92_64
.LBB92_64:                              # %for.inc209
                                        #   in Loop: Header=BB92_58 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_58
.LBB92_65:                              # %for.end211
	jmp	.LBB92_86
.LBB92_66:                              # %if.else212
	cmpl	$0, -20(%rbp)
	jne	.LBB92_76
# %bb.67:                               # %if.then215
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB92_68:                              # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_70 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB92_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB92_68 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB92_70:                              # %for.cond220
                                        #   Parent Loop BB92_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB92_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB92_70 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB92_70 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_70
.LBB92_73:                              # %for.end233
                                        #   in Loop: Header=BB92_68 Depth=1
	jmp	.LBB92_74
.LBB92_74:                              # %for.inc234
                                        #   in Loop: Header=BB92_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_68
.LBB92_75:                              # %for.end236
	jmp	.LBB92_85
.LBB92_76:                              # %if.else237
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB92_77:                              # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_79 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB92_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB92_77 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB92_79:                              # %for.cond242
                                        #   Parent Loop BB92_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB92_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB92_79 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB92_79 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_79
.LBB92_82:                              # %for.end255
                                        #   in Loop: Header=BB92_77 Depth=1
	jmp	.LBB92_83
.LBB92_83:                              # %for.inc256
                                        #   in Loop: Header=BB92_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_77
.LBB92_84:                              # %for.end258
	jmp	.LBB92_85
.LBB92_85:                              # %if.end259
	jmp	.LBB92_86
.LBB92_86:                              # %if.end260
	jmp	.LBB92_87
.LBB92_87:                              # %if.end261
	cmpl	$1870038788, -72(%rbp)  # imm = 0x6F768704
	jne	.LBB92_89
.LBB92_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB92_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB92_88
.Lfunc_end92:
	.size	ChromaPrediction4x4.51, .Lfunc_end92-ChromaPrediction4x4.51
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction.52 # -- Begin function IntraChromaPrediction.52
	.p2align	4, 0x90
	.type	IntraChromaPrediction.52,@function
IntraChromaPrediction.52:               # @IntraChromaPrediction.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$2113506049, -164(%rbp) # imm = 0x7DF98B01
	movq	%rdi, -192(%rbp)
	movq	%rsi, -184(%rbp)
	movq	%rdx, -176(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -120(%rbp)
	movl	$0, -132(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -112(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB93_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB93_1 Depth=1
	movl	-120(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB93_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_1
.LBB93_4:                               # %for.end
	movl	-120(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB93_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB93_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB93_8
.LBB93_7:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB93_8
.LBB93_8:                               # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB93_9:                               # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB93_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB93_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB93_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB93_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB93_13
.LBB93_12:                              # %cond.false32
                                        #   in Loop: Header=BB93_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB93_13
.LBB93_13:                              # %cond.end33
                                        #   in Loop: Header=BB93_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB93_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_9
.LBB93_15:                              # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB93_16:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB93_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB93_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB93_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB93_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB93_20
.LBB93_19:                              # %cond.false57
                                        #   in Loop: Header=BB93_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB93_20
.LBB93_20:                              # %cond.end58
                                        #   in Loop: Header=BB93_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB93_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_16
.LBB93_22:                              # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB93_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB93_25
.LBB93_24:                              # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB93_25
.LBB93_25:                              # %cond.end75
	movl	%eax, -104(%rbp)
.LBB93_26:                              # %if.end
	cmpq	$0, -192(%rbp)
	je	.LBB93_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB93_28:                              # %if.end79
	cmpq	$0, -184(%rbp)
	je	.LBB93_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB93_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB93_31:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB93_32:                              # %if.end86
	cmpq	$0, -176(%rbp)
	je	.LBB93_34
# %bb.33:                               # %if.then88
	movl	-104(%rbp), %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB93_34:                              # %if.end89
	movl	$0, -24(%rbp)
.LBB93_35:                              # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_37 Depth 2
                                        #       Child Loop BB93_39 Depth 3
                                        #         Child Loop BB93_104 Depth 4
                                        #         Child Loop BB93_110 Depth 4
                                        #         Child Loop BB93_85 Depth 4
                                        #         Child Loop BB93_91 Depth 4
                                        #         Child Loop BB93_66 Depth 4
                                        #         Child Loop BB93_72 Depth 4
                                        #         Child Loop BB93_44 Depth 4
                                        #         Child Loop BB93_50 Depth 4
                                        #         Child Loop BB93_125 Depth 4
                                        #           Child Loop BB93_127 Depth 5
                                        #     Child Loop BB93_138 Depth 2
                                        #     Child Loop BB93_142 Depth 2
                                        #       Child Loop BB93_144 Depth 3
                                        #     Child Loop BB93_153 Depth 2
                                        #     Child Loop BB93_157 Depth 2
                                        #       Child Loop BB93_159 Depth 3
                                        #     Child Loop BB93_170 Depth 2
                                        #     Child Loop BB93_174 Depth 2
                                        #     Child Loop BB93_178 Depth 2
                                        #       Child Loop BB93_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB93_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB93_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -84(%rbp)
.LBB93_37:                              # %for.cond95
                                        #   Parent Loop BB93_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_39 Depth 3
                                        #         Child Loop BB93_104 Depth 4
                                        #         Child Loop BB93_110 Depth 4
                                        #         Child Loop BB93_85 Depth 4
                                        #         Child Loop BB93_91 Depth 4
                                        #         Child Loop BB93_66 Depth 4
                                        #         Child Loop BB93_72 Depth 4
                                        #         Child Loop BB93_44 Depth 4
                                        #         Child Loop BB93_50 Depth 4
                                        #         Child Loop BB93_125 Depth 4
                                        #           Child Loop BB93_127 Depth 5
	movl	-84(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB93_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB93_37 Depth=2
	movl	$0, -88(%rbp)
.LBB93_39:                              # %for.cond99
                                        #   Parent Loop BB93_35 Depth=1
                                        #     Parent Loop BB93_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB93_104 Depth 4
                                        #         Child Loop BB93_110 Depth 4
                                        #         Child Loop BB93_85 Depth 4
                                        #         Child Loop BB93_91 Depth 4
                                        #         Child Loop BB93_66 Depth 4
                                        #         Child Loop BB93_72 Depth 4
                                        #         Child Loop BB93_44 Depth 4
                                        #         Child Loop BB93_50 Depth 4
                                        #         Child Loop BB93_125 Depth 4
                                        #           Child Loop BB93_127 Depth 5
	cmpl	$4, -88(%rbp)
	jge	.LBB93_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB93_39 Depth=3
	movslq	-112(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movslq	-112(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -64(%rbp)
	movslq	-112(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-84(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-88(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB93_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB93_39 Depth=3
	movq	.LJTI93_0(,%rax,8), %rax
	jmpq	*%rax
.LBB93_42:                              # %sw.bb
                                        #   in Loop: Header=BB93_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB93_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB93_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_44:                              # %for.cond124
                                        #   Parent Loop BB93_35 Depth=1
                                        #     Parent Loop BB93_37 Depth=2
                                        #       Parent Loop BB93_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB93_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB93_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_44
.LBB93_47:                              # %for.end138
                                        #   in Loop: Header=BB93_39 Depth=3
	jmp	.LBB93_48
.LBB93_48:                              # %if.end139
                                        #   in Loop: Header=BB93_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB93_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB93_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_50:                              # %for.cond143
                                        #   Parent Loop BB93_35 Depth=1
                                        #     Parent Loop BB93_37 Depth=2
                                        #       Parent Loop BB93_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB93_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB93_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_50
.LBB93_53:                              # %for.end162
                                        #   in Loop: Header=BB93_39 Depth=3
	jmp	.LBB93_54
.LBB93_54:                              # %if.end163
                                        #   in Loop: Header=BB93_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB93_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB93_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB93_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB93_39 Depth=3
	movl	-64(%rbp), %eax
	addl	-72(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB93_63
.LBB93_57:                              # %if.else
                                        #   in Loop: Header=BB93_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB93_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB93_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB93_62
.LBB93_59:                              # %if.else174
                                        #   in Loop: Header=BB93_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB93_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB93_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB93_61:                              # %if.end180
                                        #   in Loop: Header=BB93_39 Depth=3
	jmp	.LBB93_62
.LBB93_62:                              # %if.end181
                                        #   in Loop: Header=BB93_39 Depth=3
	jmp	.LBB93_63
.LBB93_63:                              # %if.end182
                                        #   in Loop: Header=BB93_39 Depth=3
	jmp	.LBB93_124
.LBB93_64:                              # %sw.bb183
                                        #   in Loop: Header=BB93_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB93_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB93_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_66:                              # %for.cond186
                                        #   Parent Loop BB93_35 Depth=1
                                        #     Parent Loop BB93_37 Depth=2
                                        #       Parent Loop BB93_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB93_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB93_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_66
.LBB93_69:                              # %for.end202
                                        #   in Loop: Header=BB93_39 Depth=3
	jmp	.LBB93_77
.LBB93_70:                              # %if.else203
                                        #   in Loop: Header=BB93_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB93_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB93_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_72:                              # %for.cond207
                                        #   Parent Loop BB93_35 Depth=1
                                        #     Parent Loop BB93_37 Depth=2
                                        #       Parent Loop BB93_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB93_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB93_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_72
.LBB93_75:                              # %for.end226
                                        #   in Loop: Header=BB93_39 Depth=3
	jmp	.LBB93_76
.LBB93_76:                              # %if.end227
                                        #   in Loop: Header=BB93_39 Depth=3
	jmp	.LBB93_77
.LBB93_77:                              # %if.end228
                                        #   in Loop: Header=BB93_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB93_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB93_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB93_82
.LBB93_79:                              # %if.else233
                                        #   in Loop: Header=BB93_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB93_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB93_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB93_81:                              # %if.end239
                                        #   in Loop: Header=BB93_39 Depth=3
	jmp	.LBB93_82
.LBB93_82:                              # %if.end240
                                        #   in Loop: Header=BB93_39 Depth=3
	jmp	.LBB93_124
.LBB93_83:                              # %sw.bb241
                                        #   in Loop: Header=BB93_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB93_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB93_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_85:                              # %for.cond245
                                        #   Parent Loop BB93_35 Depth=1
                                        #     Parent Loop BB93_37 Depth=2
                                        #       Parent Loop BB93_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB93_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB93_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_85
.LBB93_88:                              # %for.end264
                                        #   in Loop: Header=BB93_39 Depth=3
	jmp	.LBB93_96
.LBB93_89:                              # %if.else265
                                        #   in Loop: Header=BB93_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB93_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB93_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_91:                              # %for.cond268
                                        #   Parent Loop BB93_35 Depth=1
                                        #     Parent Loop BB93_37 Depth=2
                                        #       Parent Loop BB93_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB93_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB93_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_91
.LBB93_94:                              # %for.end284
                                        #   in Loop: Header=BB93_39 Depth=3
	jmp	.LBB93_95
.LBB93_95:                              # %if.end285
                                        #   in Loop: Header=BB93_39 Depth=3
	jmp	.LBB93_96
.LBB93_96:                              # %if.end286
                                        #   in Loop: Header=BB93_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB93_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB93_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB93_101
.LBB93_98:                              # %if.else292
                                        #   in Loop: Header=BB93_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB93_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB93_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB93_100:                             # %if.end297
                                        #   in Loop: Header=BB93_39 Depth=3
	jmp	.LBB93_101
.LBB93_101:                             # %if.end298
                                        #   in Loop: Header=BB93_39 Depth=3
	jmp	.LBB93_124
.LBB93_102:                             # %sw.bb299
                                        #   in Loop: Header=BB93_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB93_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB93_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_104:                             # %for.cond302
                                        #   Parent Loop BB93_35 Depth=1
                                        #     Parent Loop BB93_37 Depth=2
                                        #       Parent Loop BB93_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB93_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB93_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_104
.LBB93_107:                             # %for.end318
                                        #   in Loop: Header=BB93_39 Depth=3
	jmp	.LBB93_108
.LBB93_108:                             # %if.end319
                                        #   in Loop: Header=BB93_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB93_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB93_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_110:                             # %for.cond323
                                        #   Parent Loop BB93_35 Depth=1
                                        #     Parent Loop BB93_37 Depth=2
                                        #       Parent Loop BB93_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB93_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB93_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_110
.LBB93_113:                             # %for.end342
                                        #   in Loop: Header=BB93_39 Depth=3
	jmp	.LBB93_114
.LBB93_114:                             # %if.end343
                                        #   in Loop: Header=BB93_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB93_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB93_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB93_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB93_39 Depth=3
	movl	-60(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB93_123
.LBB93_117:                             # %if.else352
                                        #   in Loop: Header=BB93_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB93_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB93_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB93_122
.LBB93_119:                             # %if.else357
                                        #   in Loop: Header=BB93_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB93_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB93_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB93_121:                             # %if.end363
                                        #   in Loop: Header=BB93_39 Depth=3
	jmp	.LBB93_122
.LBB93_122:                             # %if.end364
                                        #   in Loop: Header=BB93_39 Depth=3
	jmp	.LBB93_123
.LBB93_123:                             # %if.end365
                                        #   in Loop: Header=BB93_39 Depth=3
	jmp	.LBB93_124
.LBB93_124:                             # %sw.epilog
                                        #   in Loop: Header=BB93_39 Depth=3
	movl	-48(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB93_125:                             # %for.cond366
                                        #   Parent Loop BB93_35 Depth=1
                                        #     Parent Loop BB93_37 Depth=2
                                        #       Parent Loop BB93_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB93_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB93_125 Depth=4
	movl	-44(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_127:                             # %for.cond371
                                        #   Parent Loop BB93_35 Depth=1
                                        #     Parent Loop BB93_37 Depth=2
                                        #       Parent Loop BB93_39 Depth=3
                                        #         Parent Loop BB93_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB93_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB93_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_127
.LBB93_130:                             # %for.end386
                                        #   in Loop: Header=BB93_125 Depth=4
	jmp	.LBB93_131
.LBB93_131:                             # %for.inc387
                                        #   in Loop: Header=BB93_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_125
.LBB93_132:                             # %for.end389
                                        #   in Loop: Header=BB93_39 Depth=3
	jmp	.LBB93_133
.LBB93_133:                             # %for.inc390
                                        #   in Loop: Header=BB93_39 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB93_39
.LBB93_134:                             # %for.end392
                                        #   in Loop: Header=BB93_37 Depth=2
	jmp	.LBB93_135
.LBB93_135:                             # %for.inc393
                                        #   in Loop: Header=BB93_37 Depth=2
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB93_37
.LBB93_136:                             # %for.end395
                                        #   in Loop: Header=BB93_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB93_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB93_35 Depth=1
	movl	$0, -4(%rbp)
.LBB93_138:                             # %for.cond398
                                        #   Parent Loop BB93_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB93_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB93_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB93_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_138
.LBB93_141:                             # %for.end414
                                        #   in Loop: Header=BB93_35 Depth=1
	movl	$0, -4(%rbp)
.LBB93_142:                             # %for.cond415
                                        #   Parent Loop BB93_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB93_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB93_142 Depth=2
	movl	$0, -8(%rbp)
.LBB93_144:                             # %for.cond419
                                        #   Parent Loop BB93_35 Depth=1
                                        #     Parent Loop BB93_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB93_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB93_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB93_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_144
.LBB93_147:                             # %for.end436
                                        #   in Loop: Header=BB93_142 Depth=2
	jmp	.LBB93_148
.LBB93_148:                             # %for.inc437
                                        #   in Loop: Header=BB93_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_142
.LBB93_149:                             # %for.end439
                                        #   in Loop: Header=BB93_35 Depth=1
	jmp	.LBB93_150
.LBB93_150:                             # %if.end440
                                        #   in Loop: Header=BB93_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB93_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB93_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB93_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB93_35 Depth=1
	movl	$0, -4(%rbp)
.LBB93_153:                             # %for.cond447
                                        #   Parent Loop BB93_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB93_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB93_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB93_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_153
.LBB93_156:                             # %for.end468
                                        #   in Loop: Header=BB93_35 Depth=1
	movl	$0, -4(%rbp)
.LBB93_157:                             # %for.cond469
                                        #   Parent Loop BB93_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB93_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB93_157 Depth=2
	movl	$0, -8(%rbp)
.LBB93_159:                             # %for.cond473
                                        #   Parent Loop BB93_35 Depth=1
                                        #     Parent Loop BB93_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB93_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB93_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB93_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_159
.LBB93_162:                             # %for.end490
                                        #   in Loop: Header=BB93_157 Depth=2
	jmp	.LBB93_163
.LBB93_163:                             # %for.inc491
                                        #   in Loop: Header=BB93_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_157
.LBB93_164:                             # %for.end493
                                        #   in Loop: Header=BB93_35 Depth=1
	jmp	.LBB93_165
.LBB93_165:                             # %if.end494
                                        #   in Loop: Header=BB93_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB93_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB93_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB93_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB93_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB93_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB93_35 Depth=1
	cmpl	$0, -104(%rbp)
	je	.LBB93_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB93_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -124(%rbp)
	movl	$0, -4(%rbp)
.LBB93_170:                             # %for.cond519
                                        #   Parent Loop BB93_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB93_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB93_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-124(%rbp), %ecx
	movl	%ecx, -124(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB93_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_170
.LBB93_173:                             # %for.end540
                                        #   in Loop: Header=BB93_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -128(%rbp)
	movl	$0, -4(%rbp)
.LBB93_174:                             # %for.cond556
                                        #   Parent Loop BB93_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB93_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB93_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-128(%rbp), %ecx
	movl	%ecx, -128(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB93_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_174
.LBB93_177:                             # %for.end577
                                        #   in Loop: Header=BB93_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-124(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -92(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-128(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -96(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-272(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-336(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -8(%rbp)
.LBB93_178:                             # %for.cond606
                                        #   Parent Loop BB93_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB93_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB93_178 Depth=2
	movl	$0, -4(%rbp)
.LBB93_180:                             # %for.cond610
                                        #   Parent Loop BB93_35 Depth=1
                                        #     Parent Loop BB93_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB93_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB93_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-100(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-92(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-96(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB93_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB93_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB93_184
.LBB93_183:                             # %cond.false630
                                        #   in Loop: Header=BB93_180 Depth=3
	movl	-100(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-92(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-96(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB93_184:                             # %cond.end643
                                        #   in Loop: Header=BB93_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB93_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB93_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB93_190
.LBB93_186:                             # %cond.false648
                                        #   in Loop: Header=BB93_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-100(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-92(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-96(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB93_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB93_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB93_189
.LBB93_188:                             # %cond.false666
                                        #   in Loop: Header=BB93_180 Depth=3
	movl	-100(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-92(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-96(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB93_189:                             # %cond.end679
                                        #   in Loop: Header=BB93_180 Depth=3
.LBB93_190:                             # %cond.end681
                                        #   in Loop: Header=BB93_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB93_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_180
.LBB93_192:                             # %for.end694
                                        #   in Loop: Header=BB93_178 Depth=2
	jmp	.LBB93_193
.LBB93_193:                             # %for.inc695
                                        #   in Loop: Header=BB93_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_178
.LBB93_194:                             # %for.end697
                                        #   in Loop: Header=BB93_35 Depth=1
	jmp	.LBB93_195
.LBB93_195:                             # %if.end698
                                        #   in Loop: Header=BB93_35 Depth=1
	jmp	.LBB93_196
.LBB93_196:                             # %for.inc699
                                        #   in Loop: Header=BB93_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_35
.LBB93_197:                             # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB93_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -136(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB93_199:                             # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB93_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB93_199 Depth=1
	movl	-120(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB93_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_199
.LBB93_202:                             # %for.end712
	movl	$0, -40(%rbp)
.LBB93_203:                             # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_219 Depth 2
                                        #       Child Loop BB93_221 Depth 3
                                        #         Child Loop BB93_223 Depth 4
                                        #           Child Loop BB93_225 Depth 5
                                        #             Child Loop BB93_227 Depth 6
	cmpl	$3, -40(%rbp)
	jg	.LBB93_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB93_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB93_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB93_203 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB93_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB93_203 Depth=1
	jmp	.LBB93_241
.LBB93_207:                             # %if.end723
                                        #   in Loop: Header=BB93_203 Depth=1
	cmpl	$2, -40(%rbp)
	jne	.LBB93_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB93_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB93_217
.LBB93_209:                             # %lor.lhs.false
                                        #   in Loop: Header=BB93_203 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB93_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB93_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB93_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB93_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB93_217
.LBB93_212:                             # %lor.lhs.false736
                                        #   in Loop: Header=BB93_203 Depth=1
	cmpl	$3, -40(%rbp)
	jne	.LBB93_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB93_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB93_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB93_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB93_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB93_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB93_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB93_203 Depth=1
	cmpl	$0, -104(%rbp)
	jne	.LBB93_218
.LBB93_217:                             # %if.then749
                                        #   in Loop: Header=BB93_203 Depth=1
	jmp	.LBB93_241
.LBB93_218:                             # %if.end750
                                        #   in Loop: Header=BB93_203 Depth=1
	movl	$0, -108(%rbp)
	movl	$0, -24(%rbp)
.LBB93_219:                             # %for.cond751
                                        #   Parent Loop BB93_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_221 Depth 3
                                        #         Child Loop BB93_223 Depth 4
                                        #           Child Loop BB93_225 Depth 5
                                        #             Child Loop BB93_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB93_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB93_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -48(%rbp)
.LBB93_221:                             # %for.cond757
                                        #   Parent Loop BB93_203 Depth=1
                                        #     Parent Loop BB93_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB93_223 Depth 4
                                        #           Child Loop BB93_225 Depth 5
                                        #             Child Loop BB93_227 Depth 6
	movl	-48(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB93_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB93_221 Depth=3
	movl	$0, -44(%rbp)
.LBB93_223:                             # %for.cond761
                                        #   Parent Loop BB93_203 Depth=1
                                        #     Parent Loop BB93_219 Depth=2
                                        #       Parent Loop BB93_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB93_225 Depth 5
                                        #             Child Loop BB93_227 Depth 6
	movl	-44(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB93_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB93_223 Depth=4
	movl	$0, -116(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB93_225:                             # %for.cond765
                                        #   Parent Loop BB93_203 Depth=1
                                        #     Parent Loop BB93_219 Depth=2
                                        #       Parent Loop BB93_221 Depth=3
                                        #         Parent Loop BB93_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB93_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB93_225 Depth=5
	movl	-44(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_227:                             # %for.cond770
                                        #   Parent Loop BB93_203 Depth=1
                                        #     Parent Loop BB93_219 Depth=2
                                        #       Parent Loop BB93_221 Depth=3
                                        #         Parent Loop BB93_223 Depth=4
                                        #           Parent Loop BB93_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB93_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-40(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-116(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB93_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB93_227
.LBB93_230:                             # %for.end803
                                        #   in Loop: Header=BB93_225 Depth=5
	jmp	.LBB93_231
.LBB93_231:                             # %for.inc804
                                        #   in Loop: Header=BB93_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_225
.LBB93_232:                             # %for.end806
                                        #   in Loop: Header=BB93_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB93_223 Depth=4
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB93_223
.LBB93_234:                             # %for.end810
                                        #   in Loop: Header=BB93_221 Depth=3
	jmp	.LBB93_235
.LBB93_235:                             # %for.inc811
                                        #   in Loop: Header=BB93_221 Depth=3
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB93_221
.LBB93_236:                             # %for.end813
                                        #   in Loop: Header=BB93_219 Depth=2
	jmp	.LBB93_237
.LBB93_237:                             # %for.inc814
                                        #   in Loop: Header=BB93_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_219
.LBB93_238:                             # %for.end816
                                        #   in Loop: Header=BB93_203 Depth=1
	movl	-108(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB93_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB93_203 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB93_240:                             # %if.end820
                                        #   in Loop: Header=BB93_203 Depth=1
	jmp	.LBB93_241
.LBB93_241:                             # %for.inc821
                                        #   in Loop: Header=BB93_203 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB93_203
.LBB93_242:                             # %for.end823
	movl	-132(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB93_243:                             # %if.end824
	cmpl	$2113506049, -164(%rbp) # imm = 0x7DF98B01
	jne	.LBB93_245
.LBB93_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB93_245:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB93_244
.Lfunc_end93:
	.size	IntraChromaPrediction.52, .Lfunc_end93-IntraChromaPrediction.52
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI93_0:
	.quad	.LBB93_42
	.quad	.LBB93_64
	.quad	.LBB93_83
	.quad	.LBB93_102
                                        # -- End function
	.text
	.globl	MBType2Value.53         # -- Begin function MBType2Value.53
	.p2align	4, 0x90
	.type	MBType2Value.53,@function
MBType2Value.53:                        # @MBType2Value.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$486604553, -36(%rbp)   # imm = 0x1D00FF09
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB94_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB94_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB94_4
.LBB94_3:                               # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB94_26
.LBB94_4:                               # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB94_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB94_26
.LBB94_6:                               # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB94_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB94_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB94_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB94_26
.LBB94_10:                              # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB94_26
.LBB94_11:                              # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB94_26
.LBB94_12:                              # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB94_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB94_26
.LBB94_14:                              # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB94_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB94_17
.LBB94_16:                              # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB94_26
.LBB94_17:                              # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB94_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB94_26
.LBB94_19:                              # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB94_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB94_26
.LBB94_21:                              # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB94_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB94_26
.LBB94_23:                              # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB94_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB94_26
.LBB94_25:                              # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB94_26:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$486604553, -36(%rbp)   # imm = 0x1D00FF09
	jne	.LBB94_28
.LBB94_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB94_28:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB94_27
.Lfunc_end94:
	.size	MBType2Value.53, .Lfunc_end94-MBType2Value.53
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.54    # -- Begin function writeLumaCoeff8x8.54
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.54,@function
writeLumaCoeff8x8.54:                   # @writeLumaCoeff8x8.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$913625550, -36(%rbp)   # imm = 0x3674D1CE
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	cmpl	$13, -24(%rbp)
	jne	.LBB95_2
# %bb.1:                                # %if.then
	jmp	.LBB95_2
.LBB95_2:                               # %if.end
	cmpl	$0, -32(%rbp)
	je	.LBB95_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB95_15
.LBB95_4:                               # %if.then5
	movl	$0, -16(%rbp)
.LBB95_5:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB95_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB95_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB95_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB95_5 Depth=1
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -32(%rbp)
	je	.LBB95_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB95_5 Depth=1
	cmpl	$13, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB95_10
.LBB95_9:                               # %cond.false
                                        #   in Loop: Header=BB95_5 Depth=1
	movl	-28(%rbp), %ecx
.LBB95_10:                              # %cond.end
                                        #   in Loop: Header=BB95_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_12
.LBB95_11:                              # %if.else
                                        #   in Loop: Header=BB95_5 Depth=1
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-28(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB95_12:                              # %if.end17
                                        #   in Loop: Header=BB95_5 Depth=1
	jmp	.LBB95_13
.LBB95_13:                              # %for.inc
                                        #   in Loop: Header=BB95_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_5
.LBB95_14:                              # %for.end
	jmp	.LBB95_19
.LBB95_15:                              # %if.else18
	cmpl	$13, -24(%rbp)
	jne	.LBB95_17
# %bb.16:                               # %if.then21
	movl	-20(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_18
.LBB95_17:                              # %if.else24
	movl	-20(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB95_18:                              # %if.end27
	jmp	.LBB95_19
.LBB95_19:                              # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$913625550, -36(%rbp)   # imm = 0x3674D1CE
	jne	.LBB95_21
.LBB95_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB95_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB95_20
.Lfunc_end95:
	.size	writeLumaCoeff8x8.54, .Lfunc_end95-writeLumaCoeff8x8.54
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.55 # -- Begin function IntraChromaPrediction4x4.55
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.55,@function
IntraChromaPrediction4x4.55:            # @IntraChromaPrediction4x4.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$829069110, -28(%rbp)   # imm = 0x316A9736
	movl	%edi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB96_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_3 Depth 2
	movl	-4(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB96_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB96_1 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB96_3:                               # %for.cond1
                                        #   Parent Loop BB96_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB96_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB96_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB96_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_3
.LBB96_6:                               # %for.end
                                        #   in Loop: Header=BB96_1 Depth=1
	jmp	.LBB96_7
.LBB96_7:                               # %for.inc17
                                        #   in Loop: Header=BB96_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_1
.LBB96_8:                               # %for.end19
	cmpl	$829069110, -28(%rbp)   # imm = 0x316A9736
	jne	.LBB96_10
.LBB96_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB96_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB96_9
.Lfunc_end96:
	.size	IntraChromaPrediction4x4.55, .Lfunc_end96-IntraChromaPrediction4x4.55
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.56       # -- Begin function find_sad_16x16.56
	.p2align	4, 0x90
	.type	find_sad_16x16.56,@function
find_sad_16x16.56:                      # @find_sad_16x16.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$1735423142, -80(%rbp)  # imm = 0x677074A6
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB97_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB97_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB97_1 Depth=1
	movl	-72(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB97_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_1
.LBB97_4:                               # %for.end
	movl	-72(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB97_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB97_20
.LBB97_6:                               # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB97_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB97_9
.LBB97_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB97_9
.LBB97_9:                               # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -60(%rbp)
.LBB97_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB97_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB97_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB97_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB97_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB97_14
.LBB97_13:                              # %cond.false23
                                        #   in Loop: Header=BB97_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_14
.LBB97_14:                              # %cond.end24
                                        #   in Loop: Header=BB97_10 Depth=1
	andl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB97_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_10
.LBB97_16:                              # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB97_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB97_19
.LBB97_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB97_19
.LBB97_19:                              # %cond.end39
	movl	%eax, -76(%rbp)
.LBB97_20:                              # %if.end
	movl	$999999, -64(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB97_21:                              # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_42 Depth 2
                                        #       Child Loop BB97_44 Depth 3
                                        #     Child Loop BB97_50 Depth 2
                                        #       Child Loop BB97_52 Depth 3
                                        #         Child Loop BB97_54 Depth 4
                                        #         Child Loop BB97_58 Depth 4
                                        #           Child Loop BB97_60 Depth 5
                                        #     Child Loop BB97_72 Depth 2
                                        #       Child Loop BB97_74 Depth 3
                                        #     Child Loop BB97_80 Depth 2
                                        #     Child Loop BB97_84 Depth 2
                                        #       Child Loop BB97_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB97_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB97_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB97_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB97_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB97_32
.LBB97_24:                              # %if.then46
                                        #   in Loop: Header=BB97_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB97_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB97_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB97_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB97_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB97_28
.LBB97_27:                              # %if.then51
                                        #   in Loop: Header=BB97_21 Depth=1
	jmp	.LBB97_95
.LBB97_28:                              # %if.end52
                                        #   in Loop: Header=BB97_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB97_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB97_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB97_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB97_21 Depth=1
	jmp	.LBB97_95
.LBB97_31:                              # %if.end57
                                        #   in Loop: Header=BB97_21 Depth=1
	jmp	.LBB97_32
.LBB97_32:                              # %if.end58
                                        #   in Loop: Header=BB97_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB97_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB97_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB97_40
.LBB97_34:                              # %lor.lhs.false62
                                        #   in Loop: Header=BB97_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB97_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB97_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB97_40
.LBB97_36:                              # %lor.lhs.false66
                                        #   in Loop: Header=BB97_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB97_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB97_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB97_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB97_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB97_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB97_21 Depth=1
	cmpl	$0, -76(%rbp)
	jne	.LBB97_41
.LBB97_40:                              # %if.then74
                                        #   in Loop: Header=BB97_21 Depth=1
	jmp	.LBB97_94
.LBB97_41:                              # %if.else75
                                        #   in Loop: Header=BB97_21 Depth=1
	movl	$0, -16(%rbp)
.LBB97_42:                              # %for.cond76
                                        #   Parent Loop BB97_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB97_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB97_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB97_42 Depth=2
	movl	$0, -12(%rbp)
.LBB97_44:                              # %for.cond79
                                        #   Parent Loop BB97_21 Depth=1
                                        #     Parent Loop BB97_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB97_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB97_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB97_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_44
.LBB97_47:                              # %for.end115
                                        #   in Loop: Header=BB97_42 Depth=2
	jmp	.LBB97_48
.LBB97_48:                              # %for.inc116
                                        #   in Loop: Header=BB97_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_42
.LBB97_49:                              # %for.end118
                                        #   in Loop: Header=BB97_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -24(%rbp)
.LBB97_50:                              # %for.cond119
                                        #   Parent Loop BB97_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB97_52 Depth 3
                                        #         Child Loop BB97_54 Depth 4
                                        #         Child Loop BB97_58 Depth 4
                                        #           Child Loop BB97_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB97_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB97_50 Depth=2
	movl	$0, -20(%rbp)
.LBB97_52:                              # %for.cond123
                                        #   Parent Loop BB97_21 Depth=1
                                        #     Parent Loop BB97_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB97_54 Depth 4
                                        #         Child Loop BB97_58 Depth 4
                                        #           Child Loop BB97_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB97_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB97_52 Depth=3
	movl	$0, -16(%rbp)
.LBB97_54:                              # %for.cond127
                                        #   Parent Loop BB97_21 Depth=1
                                        #     Parent Loop BB97_50 Depth=2
                                        #       Parent Loop BB97_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB97_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB97_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB97_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_54
.LBB97_57:                              # %for.end237
                                        #   in Loop: Header=BB97_52 Depth=3
	movl	$0, -12(%rbp)
.LBB97_58:                              # %for.cond238
                                        #   Parent Loop BB97_21 Depth=1
                                        #     Parent Loop BB97_50 Depth=2
                                        #       Parent Loop BB97_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB97_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB97_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB97_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB97_60:                              # %for.cond346
                                        #   Parent Loop BB97_21 Depth=1
                                        #     Parent Loop BB97_50 Depth=2
                                        #       Parent Loop BB97_52 Depth=3
                                        #         Parent Loop BB97_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB97_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB97_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB97_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB97_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB97_63:                              # %if.end363
                                        #   in Loop: Header=BB97_60 Depth=5
	jmp	.LBB97_64
.LBB97_64:                              # %for.inc364
                                        #   in Loop: Header=BB97_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_60
.LBB97_65:                              # %for.end366
                                        #   in Loop: Header=BB97_58 Depth=4
	jmp	.LBB97_66
.LBB97_66:                              # %for.inc367
                                        #   in Loop: Header=BB97_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_58
.LBB97_67:                              # %for.end369
                                        #   in Loop: Header=BB97_52 Depth=3
	jmp	.LBB97_68
.LBB97_68:                              # %for.inc370
                                        #   in Loop: Header=BB97_52 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB97_52
.LBB97_69:                              # %for.end372
                                        #   in Loop: Header=BB97_50 Depth=2
	jmp	.LBB97_70
.LBB97_70:                              # %for.inc373
                                        #   in Loop: Header=BB97_50 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB97_50
.LBB97_71:                              # %for.end375
                                        #   in Loop: Header=BB97_21 Depth=1
	movl	$0, -16(%rbp)
.LBB97_72:                              # %for.cond376
                                        #   Parent Loop BB97_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB97_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB97_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB97_72 Depth=2
	movl	$0, -12(%rbp)
.LBB97_74:                              # %for.cond380
                                        #   Parent Loop BB97_21 Depth=1
                                        #     Parent Loop BB97_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB97_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB97_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB97_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_74
.LBB97_77:                              # %for.end397
                                        #   in Loop: Header=BB97_72 Depth=2
	jmp	.LBB97_78
.LBB97_78:                              # %for.inc398
                                        #   in Loop: Header=BB97_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_72
.LBB97_79:                              # %for.end400
                                        #   in Loop: Header=BB97_21 Depth=1
	movl	$0, -16(%rbp)
.LBB97_80:                              # %for.cond401
                                        #   Parent Loop BB97_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB97_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB97_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB97_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_80
.LBB97_83:                              # %for.end463
                                        #   in Loop: Header=BB97_21 Depth=1
	movl	$0, -12(%rbp)
.LBB97_84:                              # %for.cond464
                                        #   Parent Loop BB97_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB97_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB97_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB97_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB97_86:                              # %for.cond524
                                        #   Parent Loop BB97_21 Depth=1
                                        #     Parent Loop BB97_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB97_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB97_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB97_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_86
.LBB97_89:                              # %for.end536
                                        #   in Loop: Header=BB97_84 Depth=2
	jmp	.LBB97_90
.LBB97_90:                              # %for.inc537
                                        #   in Loop: Header=BB97_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_84
.LBB97_91:                              # %for.end539
                                        #   in Loop: Header=BB97_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB97_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB97_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB97_93:                              # %if.end543
                                        #   in Loop: Header=BB97_21 Depth=1
	jmp	.LBB97_94
.LBB97_94:                              # %if.end544
                                        #   in Loop: Header=BB97_21 Depth=1
	jmp	.LBB97_95
.LBB97_95:                              # %for.inc545
                                        #   in Loop: Header=BB97_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB97_21
.LBB97_96:                              # %for.end547
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %ebx
	cmpl	$1735423142, -80(%rbp)  # imm = 0x677074A6
	jne	.LBB97_98
.LBB97_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB97_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB97_97
.Lfunc_end97:
	.size	find_sad_16x16.56, .Lfunc_end97-find_sad_16x16.56
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction.57 # -- Begin function IntraChromaPrediction.57
	.p2align	4, 0x90
	.type	IntraChromaPrediction.57,@function
IntraChromaPrediction.57:               # @IntraChromaPrediction.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$333958938, -164(%rbp)  # imm = 0x13E7CF1A
	movq	%rdi, -184(%rbp)
	movq	%rsi, -176(%rbp)
	movq	%rdx, -192(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -112(%rbp)
	movl	$0, -136(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -116(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB98_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB98_1 Depth=1
	movl	-112(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB98_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_1
.LBB98_4:                               # %for.end
	movl	-112(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB98_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB98_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB98_8
.LBB98_7:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB98_8
.LBB98_8:                               # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB98_9:                               # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB98_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB98_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB98_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB98_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB98_13
.LBB98_12:                              # %cond.false32
                                        #   in Loop: Header=BB98_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB98_13
.LBB98_13:                              # %cond.end33
                                        #   in Loop: Header=BB98_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB98_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_9
.LBB98_15:                              # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB98_16:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB98_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB98_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB98_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB98_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB98_20
.LBB98_19:                              # %cond.false57
                                        #   in Loop: Header=BB98_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB98_20
.LBB98_20:                              # %cond.end58
                                        #   in Loop: Header=BB98_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB98_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_16
.LBB98_22:                              # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB98_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB98_25
.LBB98_24:                              # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB98_25
.LBB98_25:                              # %cond.end75
	movl	%eax, -92(%rbp)
.LBB98_26:                              # %if.end
	cmpq	$0, -184(%rbp)
	je	.LBB98_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB98_28:                              # %if.end79
	cmpq	$0, -176(%rbp)
	je	.LBB98_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB98_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB98_31:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB98_32:                              # %if.end86
	cmpq	$0, -192(%rbp)
	je	.LBB98_34
# %bb.33:                               # %if.then88
	movl	-92(%rbp), %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB98_34:                              # %if.end89
	movl	$0, -24(%rbp)
.LBB98_35:                              # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_37 Depth 2
                                        #       Child Loop BB98_39 Depth 3
                                        #         Child Loop BB98_104 Depth 4
                                        #         Child Loop BB98_110 Depth 4
                                        #         Child Loop BB98_85 Depth 4
                                        #         Child Loop BB98_91 Depth 4
                                        #         Child Loop BB98_66 Depth 4
                                        #         Child Loop BB98_72 Depth 4
                                        #         Child Loop BB98_44 Depth 4
                                        #         Child Loop BB98_50 Depth 4
                                        #         Child Loop BB98_125 Depth 4
                                        #           Child Loop BB98_127 Depth 5
                                        #     Child Loop BB98_138 Depth 2
                                        #     Child Loop BB98_142 Depth 2
                                        #       Child Loop BB98_144 Depth 3
                                        #     Child Loop BB98_153 Depth 2
                                        #     Child Loop BB98_157 Depth 2
                                        #       Child Loop BB98_159 Depth 3
                                        #     Child Loop BB98_170 Depth 2
                                        #     Child Loop BB98_174 Depth 2
                                        #     Child Loop BB98_178 Depth 2
                                        #       Child Loop BB98_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB98_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB98_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -88(%rbp)
.LBB98_37:                              # %for.cond95
                                        #   Parent Loop BB98_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_39 Depth 3
                                        #         Child Loop BB98_104 Depth 4
                                        #         Child Loop BB98_110 Depth 4
                                        #         Child Loop BB98_85 Depth 4
                                        #         Child Loop BB98_91 Depth 4
                                        #         Child Loop BB98_66 Depth 4
                                        #         Child Loop BB98_72 Depth 4
                                        #         Child Loop BB98_44 Depth 4
                                        #         Child Loop BB98_50 Depth 4
                                        #         Child Loop BB98_125 Depth 4
                                        #           Child Loop BB98_127 Depth 5
	movl	-88(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB98_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB98_37 Depth=2
	movl	$0, -84(%rbp)
.LBB98_39:                              # %for.cond99
                                        #   Parent Loop BB98_35 Depth=1
                                        #     Parent Loop BB98_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_104 Depth 4
                                        #         Child Loop BB98_110 Depth 4
                                        #         Child Loop BB98_85 Depth 4
                                        #         Child Loop BB98_91 Depth 4
                                        #         Child Loop BB98_66 Depth 4
                                        #         Child Loop BB98_72 Depth 4
                                        #         Child Loop BB98_44 Depth 4
                                        #         Child Loop BB98_50 Depth 4
                                        #         Child Loop BB98_125 Depth 4
                                        #           Child Loop BB98_127 Depth 5
	cmpl	$4, -84(%rbp)
	jge	.LBB98_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB98_39 Depth=3
	movslq	-116(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movslq	-116(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -72(%rbp)
	movslq	-116(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-88(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB98_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB98_39 Depth=3
	movq	.LJTI98_0(,%rax,8), %rax
	jmpq	*%rax
.LBB98_42:                              # %sw.bb
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB98_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB98_44:                              # %for.cond124
                                        #   Parent Loop BB98_35 Depth=1
                                        #     Parent Loop BB98_37 Depth=2
                                        #       Parent Loop BB98_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB98_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB98_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_44
.LBB98_47:                              # %for.end138
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_48
.LBB98_48:                              # %if.end139
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB98_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB98_50:                              # %for.cond143
                                        #   Parent Loop BB98_35 Depth=1
                                        #     Parent Loop BB98_37 Depth=2
                                        #       Parent Loop BB98_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB98_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB98_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_50
.LBB98_53:                              # %for.end162
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_54
.LBB98_54:                              # %if.end163
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB98_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB98_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-72(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB98_63
.LBB98_57:                              # %if.else
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB98_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB98_62
.LBB98_59:                              # %if.else174
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB98_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB98_61:                              # %if.end180
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_62
.LBB98_62:                              # %if.end181
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_63
.LBB98_63:                              # %if.end182
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_124
.LBB98_64:                              # %sw.bb183
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB98_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB98_66:                              # %for.cond186
                                        #   Parent Loop BB98_35 Depth=1
                                        #     Parent Loop BB98_37 Depth=2
                                        #       Parent Loop BB98_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB98_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB98_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_66
.LBB98_69:                              # %for.end202
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_77
.LBB98_70:                              # %if.else203
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB98_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB98_72:                              # %for.cond207
                                        #   Parent Loop BB98_35 Depth=1
                                        #     Parent Loop BB98_37 Depth=2
                                        #       Parent Loop BB98_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB98_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB98_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_72
.LBB98_75:                              # %for.end226
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_76
.LBB98_76:                              # %if.end227
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_77
.LBB98_77:                              # %if.end228
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB98_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB98_82
.LBB98_79:                              # %if.else233
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB98_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB98_81:                              # %if.end239
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_82
.LBB98_82:                              # %if.end240
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_124
.LBB98_83:                              # %sw.bb241
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB98_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB98_85:                              # %for.cond245
                                        #   Parent Loop BB98_35 Depth=1
                                        #     Parent Loop BB98_37 Depth=2
                                        #       Parent Loop BB98_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB98_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB98_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_85
.LBB98_88:                              # %for.end264
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_96
.LBB98_89:                              # %if.else265
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB98_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB98_91:                              # %for.cond268
                                        #   Parent Loop BB98_35 Depth=1
                                        #     Parent Loop BB98_37 Depth=2
                                        #       Parent Loop BB98_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB98_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB98_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_91
.LBB98_94:                              # %for.end284
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_95
.LBB98_95:                              # %if.end285
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_96
.LBB98_96:                              # %if.end286
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB98_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB98_101
.LBB98_98:                              # %if.else292
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB98_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB98_100:                             # %if.end297
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_101
.LBB98_101:                             # %if.end298
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_124
.LBB98_102:                             # %sw.bb299
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB98_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB98_104:                             # %for.cond302
                                        #   Parent Loop BB98_35 Depth=1
                                        #     Parent Loop BB98_37 Depth=2
                                        #       Parent Loop BB98_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB98_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB98_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_104
.LBB98_107:                             # %for.end318
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_108
.LBB98_108:                             # %if.end319
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB98_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB98_110:                             # %for.cond323
                                        #   Parent Loop BB98_35 Depth=1
                                        #     Parent Loop BB98_37 Depth=2
                                        #       Parent Loop BB98_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB98_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB98_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_110
.LBB98_113:                             # %for.end342
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_114
.LBB98_114:                             # %if.end343
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB98_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB98_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-64(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB98_123
.LBB98_117:                             # %if.else352
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB98_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB98_122
.LBB98_119:                             # %if.else357
                                        #   in Loop: Header=BB98_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB98_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB98_121:                             # %if.end363
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_122
.LBB98_122:                             # %if.end364
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_123
.LBB98_123:                             # %if.end365
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_124
.LBB98_124:                             # %sw.epilog
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-40(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB98_125:                             # %for.cond366
                                        #   Parent Loop BB98_35 Depth=1
                                        #     Parent Loop BB98_37 Depth=2
                                        #       Parent Loop BB98_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB98_125 Depth=4
	movl	-44(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB98_127:                             # %for.cond371
                                        #   Parent Loop BB98_35 Depth=1
                                        #     Parent Loop BB98_37 Depth=2
                                        #       Parent Loop BB98_39 Depth=3
                                        #         Parent Loop BB98_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB98_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB98_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_127
.LBB98_130:                             # %for.end386
                                        #   in Loop: Header=BB98_125 Depth=4
	jmp	.LBB98_131
.LBB98_131:                             # %for.inc387
                                        #   in Loop: Header=BB98_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_125
.LBB98_132:                             # %for.end389
                                        #   in Loop: Header=BB98_39 Depth=3
	jmp	.LBB98_133
.LBB98_133:                             # %for.inc390
                                        #   in Loop: Header=BB98_39 Depth=3
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB98_39
.LBB98_134:                             # %for.end392
                                        #   in Loop: Header=BB98_37 Depth=2
	jmp	.LBB98_135
.LBB98_135:                             # %for.inc393
                                        #   in Loop: Header=BB98_37 Depth=2
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB98_37
.LBB98_136:                             # %for.end395
                                        #   in Loop: Header=BB98_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB98_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB98_35 Depth=1
	movl	$0, -4(%rbp)
.LBB98_138:                             # %for.cond398
                                        #   Parent Loop BB98_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB98_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB98_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB98_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_138
.LBB98_141:                             # %for.end414
                                        #   in Loop: Header=BB98_35 Depth=1
	movl	$0, -4(%rbp)
.LBB98_142:                             # %for.cond415
                                        #   Parent Loop BB98_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB98_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB98_142 Depth=2
	movl	$0, -8(%rbp)
.LBB98_144:                             # %for.cond419
                                        #   Parent Loop BB98_35 Depth=1
                                        #     Parent Loop BB98_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB98_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB98_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB98_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_144
.LBB98_147:                             # %for.end436
                                        #   in Loop: Header=BB98_142 Depth=2
	jmp	.LBB98_148
.LBB98_148:                             # %for.inc437
                                        #   in Loop: Header=BB98_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_142
.LBB98_149:                             # %for.end439
                                        #   in Loop: Header=BB98_35 Depth=1
	jmp	.LBB98_150
.LBB98_150:                             # %if.end440
                                        #   in Loop: Header=BB98_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB98_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB98_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB98_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB98_35 Depth=1
	movl	$0, -4(%rbp)
.LBB98_153:                             # %for.cond447
                                        #   Parent Loop BB98_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB98_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB98_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB98_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_153
.LBB98_156:                             # %for.end468
                                        #   in Loop: Header=BB98_35 Depth=1
	movl	$0, -4(%rbp)
.LBB98_157:                             # %for.cond469
                                        #   Parent Loop BB98_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB98_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB98_157 Depth=2
	movl	$0, -8(%rbp)
.LBB98_159:                             # %for.cond473
                                        #   Parent Loop BB98_35 Depth=1
                                        #     Parent Loop BB98_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB98_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB98_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB98_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_159
.LBB98_162:                             # %for.end490
                                        #   in Loop: Header=BB98_157 Depth=2
	jmp	.LBB98_163
.LBB98_163:                             # %for.inc491
                                        #   in Loop: Header=BB98_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_157
.LBB98_164:                             # %for.end493
                                        #   in Loop: Header=BB98_35 Depth=1
	jmp	.LBB98_165
.LBB98_165:                             # %if.end494
                                        #   in Loop: Header=BB98_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB98_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB98_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB98_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB98_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB98_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB98_35 Depth=1
	cmpl	$0, -92(%rbp)
	je	.LBB98_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB98_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -128(%rbp)
	movl	$0, -4(%rbp)
.LBB98_170:                             # %for.cond519
                                        #   Parent Loop BB98_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB98_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB98_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-128(%rbp), %ecx
	movl	%ecx, -128(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB98_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_170
.LBB98_173:                             # %for.end540
                                        #   in Loop: Header=BB98_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -124(%rbp)
	movl	$0, -4(%rbp)
.LBB98_174:                             # %for.cond556
                                        #   Parent Loop BB98_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB98_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB98_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-124(%rbp), %ecx
	movl	%ecx, -124(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB98_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_174
.LBB98_177:                             # %for.end577
                                        #   in Loop: Header=BB98_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-128(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -104(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-124(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -100(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-272(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-336(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -8(%rbp)
.LBB98_178:                             # %for.cond606
                                        #   Parent Loop BB98_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB98_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB98_178 Depth=2
	movl	$0, -4(%rbp)
.LBB98_180:                             # %for.cond610
                                        #   Parent Loop BB98_35 Depth=1
                                        #     Parent Loop BB98_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB98_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB98_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-96(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-104(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB98_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB98_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB98_184
.LBB98_183:                             # %cond.false630
                                        #   in Loop: Header=BB98_180 Depth=3
	movl	-96(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-104(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB98_184:                             # %cond.end643
                                        #   in Loop: Header=BB98_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB98_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB98_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB98_190
.LBB98_186:                             # %cond.false648
                                        #   in Loop: Header=BB98_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-96(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-104(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB98_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB98_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB98_189
.LBB98_188:                             # %cond.false666
                                        #   in Loop: Header=BB98_180 Depth=3
	movl	-96(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-104(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB98_189:                             # %cond.end679
                                        #   in Loop: Header=BB98_180 Depth=3
.LBB98_190:                             # %cond.end681
                                        #   in Loop: Header=BB98_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB98_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_180
.LBB98_192:                             # %for.end694
                                        #   in Loop: Header=BB98_178 Depth=2
	jmp	.LBB98_193
.LBB98_193:                             # %for.inc695
                                        #   in Loop: Header=BB98_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_178
.LBB98_194:                             # %for.end697
                                        #   in Loop: Header=BB98_35 Depth=1
	jmp	.LBB98_195
.LBB98_195:                             # %if.end698
                                        #   in Loop: Header=BB98_35 Depth=1
	jmp	.LBB98_196
.LBB98_196:                             # %for.inc699
                                        #   in Loop: Header=BB98_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_35
.LBB98_197:                             # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB98_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -132(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB98_199:                             # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB98_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB98_199 Depth=1
	movl	-112(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB98_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_199
.LBB98_202:                             # %for.end712
	movl	$0, -48(%rbp)
.LBB98_203:                             # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_219 Depth 2
                                        #       Child Loop BB98_221 Depth 3
                                        #         Child Loop BB98_223 Depth 4
                                        #           Child Loop BB98_225 Depth 5
                                        #             Child Loop BB98_227 Depth 6
	cmpl	$3, -48(%rbp)
	jg	.LBB98_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB98_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB98_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB98_203 Depth=1
	cmpl	$0, -48(%rbp)
	je	.LBB98_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB98_203 Depth=1
	jmp	.LBB98_241
.LBB98_207:                             # %if.end723
                                        #   in Loop: Header=BB98_203 Depth=1
	cmpl	$2, -48(%rbp)
	jne	.LBB98_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB98_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB98_217
.LBB98_209:                             # %lor.lhs.false
                                        #   in Loop: Header=BB98_203 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB98_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB98_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB98_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB98_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB98_217
.LBB98_212:                             # %lor.lhs.false736
                                        #   in Loop: Header=BB98_203 Depth=1
	cmpl	$3, -48(%rbp)
	jne	.LBB98_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB98_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB98_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB98_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB98_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB98_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB98_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB98_203 Depth=1
	cmpl	$0, -92(%rbp)
	jne	.LBB98_218
.LBB98_217:                             # %if.then749
                                        #   in Loop: Header=BB98_203 Depth=1
	jmp	.LBB98_241
.LBB98_218:                             # %if.end750
                                        #   in Loop: Header=BB98_203 Depth=1
	movl	$0, -108(%rbp)
	movl	$0, -24(%rbp)
.LBB98_219:                             # %for.cond751
                                        #   Parent Loop BB98_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_221 Depth 3
                                        #         Child Loop BB98_223 Depth 4
                                        #           Child Loop BB98_225 Depth 5
                                        #             Child Loop BB98_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB98_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB98_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -40(%rbp)
.LBB98_221:                             # %for.cond757
                                        #   Parent Loop BB98_203 Depth=1
                                        #     Parent Loop BB98_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_223 Depth 4
                                        #           Child Loop BB98_225 Depth 5
                                        #             Child Loop BB98_227 Depth 6
	movl	-40(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB98_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB98_221 Depth=3
	movl	$0, -44(%rbp)
.LBB98_223:                             # %for.cond761
                                        #   Parent Loop BB98_203 Depth=1
                                        #     Parent Loop BB98_219 Depth=2
                                        #       Parent Loop BB98_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_225 Depth 5
                                        #             Child Loop BB98_227 Depth 6
	movl	-44(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB98_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB98_223 Depth=4
	movl	$0, -120(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB98_225:                             # %for.cond765
                                        #   Parent Loop BB98_203 Depth=1
                                        #     Parent Loop BB98_219 Depth=2
                                        #       Parent Loop BB98_221 Depth=3
                                        #         Parent Loop BB98_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB98_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB98_225 Depth=5
	movl	-44(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB98_227:                             # %for.cond770
                                        #   Parent Loop BB98_203 Depth=1
                                        #     Parent Loop BB98_219 Depth=2
                                        #       Parent Loop BB98_221 Depth=3
                                        #         Parent Loop BB98_223 Depth=4
                                        #           Parent Loop BB98_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB98_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB98_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-120(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -120(%rbp)
	jmp	.LBB98_227
.LBB98_230:                             # %for.end803
                                        #   in Loop: Header=BB98_225 Depth=5
	jmp	.LBB98_231
.LBB98_231:                             # %for.inc804
                                        #   in Loop: Header=BB98_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_225
.LBB98_232:                             # %for.end806
                                        #   in Loop: Header=BB98_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB98_223 Depth=4
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB98_223
.LBB98_234:                             # %for.end810
                                        #   in Loop: Header=BB98_221 Depth=3
	jmp	.LBB98_235
.LBB98_235:                             # %for.inc811
                                        #   in Loop: Header=BB98_221 Depth=3
	movl	-40(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB98_221
.LBB98_236:                             # %for.end813
                                        #   in Loop: Header=BB98_219 Depth=2
	jmp	.LBB98_237
.LBB98_237:                             # %for.inc814
                                        #   in Loop: Header=BB98_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_219
.LBB98_238:                             # %for.end816
                                        #   in Loop: Header=BB98_203 Depth=1
	movl	-108(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB98_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB98_203 Depth=1
	movl	-48(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -132(%rbp)
.LBB98_240:                             # %if.end820
                                        #   in Loop: Header=BB98_203 Depth=1
	jmp	.LBB98_241
.LBB98_241:                             # %for.inc821
                                        #   in Loop: Header=BB98_203 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB98_203
.LBB98_242:                             # %for.end823
	movl	-136(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB98_243:                             # %if.end824
	cmpl	$333958938, -164(%rbp)  # imm = 0x13E7CF1A
	jne	.LBB98_245
.LBB98_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB98_245:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB98_244
.Lfunc_end98:
	.size	IntraChromaPrediction.57, .Lfunc_end98-IntraChromaPrediction.57
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI98_0:
	.quad	.LBB98_42
	.quad	.LBB98_64
	.quad	.LBB98_83
	.quad	.LBB98_102
                                        # -- End function
	.text
	.globl	write_terminating_bit.58 # -- Begin function write_terminating_bit.58
	.p2align	4, 0x90
	.type	write_terminating_bit.58,@function
write_terminating_bit.58:               # @write_terminating_bit.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1427669543, -8(%rbp)   # imm = 0x55188227
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$1427669543, -8(%rbp)   # imm = 0x55188227
	jne	.LBB99_2
.LBB99_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB99_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB99_1
.Lfunc_end99:
	.size	write_terminating_bit.58, .Lfunc_end99-write_terminating_bit.58
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.59 # -- Begin function IntraChromaPrediction4x4.59
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.59,@function
IntraChromaPrediction4x4.59:            # @IntraChromaPrediction4x4.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1187162349, -24(%rbp)  # imm = 0x46C2A8ED
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB100_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_3 Depth 2
	movl	-8(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB100_1 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB100_3:                              # %for.cond1
                                        #   Parent Loop BB100_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB100_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-20(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-28(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB100_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_3
.LBB100_6:                              # %for.end
                                        #   in Loop: Header=BB100_1 Depth=1
	jmp	.LBB100_7
.LBB100_7:                              # %for.inc17
                                        #   in Loop: Header=BB100_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_1
.LBB100_8:                              # %for.end19
	cmpl	$1187162349, -24(%rbp)  # imm = 0x46C2A8ED
	jne	.LBB100_10
.LBB100_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB100_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB100_9
.Lfunc_end100:
	.size	IntraChromaPrediction4x4.59, .Lfunc_end100-IntraChromaPrediction4x4.59
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode.60 # -- Begin function writeChromaIntraPredMode.60
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.60,@function
writeChromaIntraPredMode.60:            # @writeChromaIntraPredMode.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1065737103, -36(%rbp)  # imm = 0x3F85DB8F
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -72(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB101_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB101_3
.LBB101_2:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB101_3:                              # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-64(%rbp), %rax
	movq	24(%rax), %rax
	movq	-56(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-72(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$1065737103, -36(%rbp)  # imm = 0x3F85DB8F
	jne	.LBB101_5
.LBB101_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB101_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB101_4
.Lfunc_end101:
	.size	writeChromaIntraPredMode.60, .Lfunc_end101-writeChromaIntraPredMode.60
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit.61 # -- Begin function write_terminating_bit.61
	.p2align	4, 0x90
	.type	write_terminating_bit.61,@function
write_terminating_bit.61:               # @write_terminating_bit.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$395256368, -8(%rbp)    # imm = 0x178F2230
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$395256368, -8(%rbp)    # imm = 0x178F2230
	jne	.LBB102_2
.LBB102_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB102_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB102_1
.Lfunc_end102:
	.size	write_terminating_bit.61, .Lfunc_end102-write_terminating_bit.61
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.62       # -- Begin function find_sad_16x16.62
	.p2align	4, 0x90
	.type	find_sad_16x16.62,@function
find_sad_16x16.62:                      # @find_sad_16x16.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$573595689, -80(%rbp)   # imm = 0x22306029
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$0, -12(%rbp)
.LBB103_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB103_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB103_1 Depth=1
	movl	-76(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB103_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB103_1
.LBB103_4:                              # %for.end
	movl	-76(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB103_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB103_20
.LBB103_6:                              # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB103_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB103_9
.LBB103_8:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB103_9
.LBB103_9:                              # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -64(%rbp)
.LBB103_10:                             # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB103_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB103_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB103_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB103_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB103_14
.LBB103_13:                             # %cond.false23
                                        #   in Loop: Header=BB103_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB103_14
.LBB103_14:                             # %cond.end24
                                        #   in Loop: Header=BB103_10 Depth=1
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB103_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB103_10
.LBB103_16:                             # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB103_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB103_19
.LBB103_18:                             # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB103_19
.LBB103_19:                             # %cond.end39
	movl	%eax, -72(%rbp)
.LBB103_20:                             # %if.end
	movl	$999999, -60(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB103_21:                             # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_42 Depth 2
                                        #       Child Loop BB103_44 Depth 3
                                        #     Child Loop BB103_50 Depth 2
                                        #       Child Loop BB103_52 Depth 3
                                        #         Child Loop BB103_54 Depth 4
                                        #         Child Loop BB103_58 Depth 4
                                        #           Child Loop BB103_60 Depth 5
                                        #     Child Loop BB103_72 Depth 2
                                        #       Child Loop BB103_74 Depth 3
                                        #     Child Loop BB103_80 Depth 2
                                        #     Child Loop BB103_84 Depth 2
                                        #       Child Loop BB103_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB103_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB103_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB103_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB103_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB103_32
.LBB103_24:                             # %if.then46
                                        #   in Loop: Header=BB103_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB103_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB103_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB103_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB103_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB103_28
.LBB103_27:                             # %if.then51
                                        #   in Loop: Header=BB103_21 Depth=1
	jmp	.LBB103_95
.LBB103_28:                             # %if.end52
                                        #   in Loop: Header=BB103_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB103_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB103_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB103_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB103_21 Depth=1
	jmp	.LBB103_95
.LBB103_31:                             # %if.end57
                                        #   in Loop: Header=BB103_21 Depth=1
	jmp	.LBB103_32
.LBB103_32:                             # %if.end58
                                        #   in Loop: Header=BB103_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB103_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB103_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB103_40
.LBB103_34:                             # %lor.lhs.false62
                                        #   in Loop: Header=BB103_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB103_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB103_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB103_40
.LBB103_36:                             # %lor.lhs.false66
                                        #   in Loop: Header=BB103_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB103_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB103_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB103_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB103_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB103_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB103_21 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB103_41
.LBB103_40:                             # %if.then74
                                        #   in Loop: Header=BB103_21 Depth=1
	jmp	.LBB103_94
.LBB103_41:                             # %if.else75
                                        #   in Loop: Header=BB103_21 Depth=1
	movl	$0, -16(%rbp)
.LBB103_42:                             # %for.cond76
                                        #   Parent Loop BB103_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB103_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB103_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB103_42 Depth=2
	movl	$0, -12(%rbp)
.LBB103_44:                             # %for.cond79
                                        #   Parent Loop BB103_21 Depth=1
                                        #     Parent Loop BB103_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB103_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB103_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB103_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB103_44
.LBB103_47:                             # %for.end115
                                        #   in Loop: Header=BB103_42 Depth=2
	jmp	.LBB103_48
.LBB103_48:                             # %for.inc116
                                        #   in Loop: Header=BB103_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB103_42
.LBB103_49:                             # %for.end118
                                        #   in Loop: Header=BB103_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB103_50:                             # %for.cond119
                                        #   Parent Loop BB103_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB103_52 Depth 3
                                        #         Child Loop BB103_54 Depth 4
                                        #         Child Loop BB103_58 Depth 4
                                        #           Child Loop BB103_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB103_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB103_50 Depth=2
	movl	$0, -24(%rbp)
.LBB103_52:                             # %for.cond123
                                        #   Parent Loop BB103_21 Depth=1
                                        #     Parent Loop BB103_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB103_54 Depth 4
                                        #         Child Loop BB103_58 Depth 4
                                        #           Child Loop BB103_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB103_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB103_52 Depth=3
	movl	$0, -16(%rbp)
.LBB103_54:                             # %for.cond127
                                        #   Parent Loop BB103_21 Depth=1
                                        #     Parent Loop BB103_50 Depth=2
                                        #       Parent Loop BB103_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB103_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB103_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB103_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB103_54
.LBB103_57:                             # %for.end237
                                        #   in Loop: Header=BB103_52 Depth=3
	movl	$0, -12(%rbp)
.LBB103_58:                             # %for.cond238
                                        #   Parent Loop BB103_21 Depth=1
                                        #     Parent Loop BB103_50 Depth=2
                                        #       Parent Loop BB103_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB103_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB103_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB103_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB103_60:                             # %for.cond346
                                        #   Parent Loop BB103_21 Depth=1
                                        #     Parent Loop BB103_50 Depth=2
                                        #       Parent Loop BB103_52 Depth=3
                                        #         Parent Loop BB103_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB103_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB103_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB103_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB103_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB103_63:                             # %if.end363
                                        #   in Loop: Header=BB103_60 Depth=5
	jmp	.LBB103_64
.LBB103_64:                             # %for.inc364
                                        #   in Loop: Header=BB103_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB103_60
.LBB103_65:                             # %for.end366
                                        #   in Loop: Header=BB103_58 Depth=4
	jmp	.LBB103_66
.LBB103_66:                             # %for.inc367
                                        #   in Loop: Header=BB103_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB103_58
.LBB103_67:                             # %for.end369
                                        #   in Loop: Header=BB103_52 Depth=3
	jmp	.LBB103_68
.LBB103_68:                             # %for.inc370
                                        #   in Loop: Header=BB103_52 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB103_52
.LBB103_69:                             # %for.end372
                                        #   in Loop: Header=BB103_50 Depth=2
	jmp	.LBB103_70
.LBB103_70:                             # %for.inc373
                                        #   in Loop: Header=BB103_50 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB103_50
.LBB103_71:                             # %for.end375
                                        #   in Loop: Header=BB103_21 Depth=1
	movl	$0, -16(%rbp)
.LBB103_72:                             # %for.cond376
                                        #   Parent Loop BB103_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB103_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB103_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB103_72 Depth=2
	movl	$0, -12(%rbp)
.LBB103_74:                             # %for.cond380
                                        #   Parent Loop BB103_21 Depth=1
                                        #     Parent Loop BB103_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB103_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB103_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB103_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB103_74
.LBB103_77:                             # %for.end397
                                        #   in Loop: Header=BB103_72 Depth=2
	jmp	.LBB103_78
.LBB103_78:                             # %for.inc398
                                        #   in Loop: Header=BB103_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB103_72
.LBB103_79:                             # %for.end400
                                        #   in Loop: Header=BB103_21 Depth=1
	movl	$0, -16(%rbp)
.LBB103_80:                             # %for.cond401
                                        #   Parent Loop BB103_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB103_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB103_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB103_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB103_80
.LBB103_83:                             # %for.end463
                                        #   in Loop: Header=BB103_21 Depth=1
	movl	$0, -12(%rbp)
.LBB103_84:                             # %for.cond464
                                        #   Parent Loop BB103_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB103_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB103_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB103_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB103_86:                             # %for.cond524
                                        #   Parent Loop BB103_21 Depth=1
                                        #     Parent Loop BB103_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB103_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB103_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB103_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB103_86
.LBB103_89:                             # %for.end536
                                        #   in Loop: Header=BB103_84 Depth=2
	jmp	.LBB103_90
.LBB103_90:                             # %for.inc537
                                        #   in Loop: Header=BB103_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB103_84
.LBB103_91:                             # %for.end539
                                        #   in Loop: Header=BB103_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB103_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB103_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB103_93:                             # %if.end543
                                        #   in Loop: Header=BB103_21 Depth=1
	jmp	.LBB103_94
.LBB103_94:                             # %if.end544
                                        #   in Loop: Header=BB103_21 Depth=1
	jmp	.LBB103_95
.LBB103_95:                             # %for.inc545
                                        #   in Loop: Header=BB103_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB103_21
.LBB103_96:                             # %for.end547
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ebx
	cmpl	$573595689, -80(%rbp)   # imm = 0x22306029
	jne	.LBB103_98
.LBB103_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB103_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB103_97
.Lfunc_end103:
	.size	find_sad_16x16.62, .Lfunc_end103-find_sad_16x16.62
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.63  # -- Begin function writeReferenceFrame.63
	.p2align	4, 0x90
	.type	writeReferenceFrame.63,@function
writeReferenceFrame.63:                 # @writeReferenceFrame.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$720541516, -68(%rbp)   # imm = 0x2AF2974C
	movl	%edi, -80(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB104_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB104_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB104_4
.LBB104_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB104_4
.LBB104_4:                              # %cond.end
	movl	%ecx, -52(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB104_6
# %bb.5:                                # %cond.true10
	movl	-52(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB104_7
.LBB104_6:                              # %cond.false13
	movl	-52(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB104_7:                              # %cond.end17
	movl	%eax, -44(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$1, -44(%rbp)
	jne	.LBB104_9
# %bb.8:                                # %if.then
	movl	$0, -48(%rbp)
	jmp	.LBB104_18
.LBB104_9:                              # %if.end
	cmpl	$2, -44(%rbp)
	jne	.LBB104_11
# %bb.10:                               # %if.then20
	movl	$1, -40(%rbp)
.LBB104_11:                             # %if.end21
	movl	-72(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB104_16
# %bb.12:                               # %if.then28
	cmpl	$0, -40(%rbp)
	je	.LBB104_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB104_15
.LBB104_14:                             # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB104_15:                             # %if.end33
	jmp	.LBB104_17
.LBB104_16:                             # %if.else34
	movl	-80(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-84(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-76(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB104_17:                             # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB104_18:                             # %return
	movl	-48(%rbp), %ebx
	cmpl	$720541516, -68(%rbp)   # imm = 0x2AF2974C
	jne	.LBB104_20
.LBB104_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB104_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB104_19
.Lfunc_end104:
	.size	writeReferenceFrame.63, .Lfunc_end104-writeReferenceFrame.63
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.64   # -- Begin function writeIntra4x4Modes.64
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.64,@function
writeIntra4x4Modes.64:                  # @writeIntra4x4Modes.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1732719773, -80(%rbp)  # imm = 0x6747349D
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -16(%rbp)
.LBB105_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_9 Depth 2
                                        #       Child Loop BB105_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB105_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB105_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB105_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB105_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB105_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB105_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB105_8
.LBB105_5:                              # %lor.lhs.false10
                                        #   in Loop: Header=BB105_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB105_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB105_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB105_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB105_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB105_17
.LBB105_8:                              # %if.then
                                        #   in Loop: Header=BB105_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -76(%rbp)
	movl	%ecx, -72(%rbp)
	movl	-72(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movl	-76(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -32(%rbp)
.LBB105_9:                              # %for.cond24
                                        #   Parent Loop BB105_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB105_11 Depth 3
	cmpl	$2, -32(%rbp)
	jge	.LBB105_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB105_9 Depth=2
	movl	$0, -12(%rbp)
.LBB105_11:                             # %for.cond27
                                        #   Parent Loop BB105_1 Depth=1
                                        #     Parent Loop BB105_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB105_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB105_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB105_11 Depth=3
	movl	-68(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_11
.LBB105_14:                             # %for.end
                                        #   in Loop: Header=BB105_9 Depth=2
	jmp	.LBB105_15
.LBB105_15:                             # %for.inc42
                                        #   in Loop: Header=BB105_9 Depth=2
	movl	-84(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB105_9
.LBB105_16:                             # %for.end44
                                        #   in Loop: Header=BB105_1 Depth=1
	jmp	.LBB105_17
.LBB105_17:                             # %if.end
                                        #   in Loop: Header=BB105_1 Depth=1
	jmp	.LBB105_18
.LBB105_18:                             # %for.inc45
                                        #   in Loop: Header=BB105_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB105_1
.LBB105_19:                             # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB105_20:                             # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB105_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB105_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB105_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB105_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB105_23:                             # %if.end57
                                        #   in Loop: Header=BB105_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB105_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB105_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB105_26
.LBB105_25:                             # %if.else
                                        #   in Loop: Header=BB105_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB105_26:                             # %if.end65
                                        #   in Loop: Header=BB105_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB105_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_20
.LBB105_28:                             # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$1732719773, -80(%rbp)  # imm = 0x6747349D
	jne	.LBB105_30
.LBB105_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB105_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB105_29
.Lfunc_end105:
	.size	writeIntra4x4Modes.64, .Lfunc_end105-writeIntra4x4Modes.64
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.65   # -- Begin function LumaResidualCoding.65
	.p2align	4, 0x90
	.type	LumaResidualCoding.65,@function
LumaResidualCoding.65:                  # @LumaResidualCoding.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1834020195, -52(%rbp)  # imm = 0x6D50ED63
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB106_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -8(%rbp)
	jge	.LBB106_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB106_1 Depth=1
	movl	-8(%rbp), %edi
	leaq	-22(%rbp), %rsi
	leaq	-40(%rbp), %rdx
	leaq	-36(%rbp), %rcx
	leaq	-18(%rbp), %r8
	leaq	-20(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-8(%rbp), %edx
	movw	-22(%rbp), %ax
	movl	-40(%rbp), %r8d
	movl	-36(%rbp), %r9d
	movw	-18(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-20(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB106_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_1
.LBB106_4:                              # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB106_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB106_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB106_33
.LBB106_7:                              # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -4(%rbp)
.LBB106_8:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_10 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB106_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB106_8 Depth=1
	movl	$0, -12(%rbp)
.LBB106_10:                             # %for.cond13
                                        #   Parent Loop BB106_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB106_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB106_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB106_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB106_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB106_14
.LBB106_13:                             # %if.else
                                        #   in Loop: Header=BB106_10 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB106_14:                             # %if.end
                                        #   in Loop: Header=BB106_10 Depth=2
	jmp	.LBB106_15
.LBB106_15:                             # %for.inc31
                                        #   in Loop: Header=BB106_10 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB106_10
.LBB106_16:                             # %for.end33
                                        #   in Loop: Header=BB106_8 Depth=1
	jmp	.LBB106_17
.LBB106_17:                             # %for.inc34
                                        #   in Loop: Header=BB106_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_8
.LBB106_18:                             # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB106_32
# %bb.19:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB106_20:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_22 Depth 2
                                        #       Child Loop BB106_24 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB106_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB106_20 Depth=1
	movl	-8(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-8(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB106_22:                             # %for.cond45
                                        #   Parent Loop BB106_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB106_24 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB106_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB106_22 Depth=2
	movl	$0, -12(%rbp)
.LBB106_24:                             # %for.cond48
                                        #   Parent Loop BB106_20 Depth=1
                                        #     Parent Loop BB106_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -12(%rbp)
	jge	.LBB106_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB106_24 Depth=3
	movl	-48(%rbp), %edi
	addl	-4(%rbp), %edi
	movl	-44(%rbp), %esi
	addl	-12(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB106_24 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB106_24
.LBB106_27:                             # %for.end55
                                        #   in Loop: Header=BB106_22 Depth=2
	jmp	.LBB106_28
.LBB106_28:                             # %for.inc56
                                        #   in Loop: Header=BB106_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_22
.LBB106_29:                             # %for.end58
                                        #   in Loop: Header=BB106_20 Depth=1
	jmp	.LBB106_30
.LBB106_30:                             # %for.inc59
                                        #   in Loop: Header=BB106_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_20
.LBB106_31:                             # %for.end61
	jmp	.LBB106_32
.LBB106_32:                             # %if.end62
	jmp	.LBB106_33
.LBB106_33:                             # %if.end63
	cmpl	$1834020195, -52(%rbp)  # imm = 0x6D50ED63
	jne	.LBB106_35
.LBB106_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB106_35:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB106_34
.Lfunc_end106:
	.size	LumaResidualCoding.65, .Lfunc_end106-LumaResidualCoding.65
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.66   # -- Begin function predict_nnz_chroma.66
	.p2align	4, 0x90
	.type	predict_nnz_chroma.66,@function
predict_nnz_chroma.66:                  # @predict_nnz_chroma.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$118830127, -64(%rbp)   # imm = 0x715342F
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -56(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB107_14
# %bb.1:                                # %if.then
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB107_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB107_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB107_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB107_5:                              # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB107_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB107_7:                              # %if.end19
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB107_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB107_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB107_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB107_11:                             # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB107_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB107_13:                             # %if.end57
	jmp	.LBB107_27
.LBB107_14:                             # %if.else
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB107_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB107_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB107_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB107_18:                             # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB107_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB107_20:                             # %if.end90
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB107_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB107_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB107_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB107_24:                             # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB107_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB107_26:                             # %if.end124
	jmp	.LBB107_27
.LBB107_27:                             # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB107_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB107_29:                             # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$118830127, -64(%rbp)   # imm = 0x715342F
	jne	.LBB107_31
.LBB107_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB107_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB107_30
.Lfunc_end107:
	.size	predict_nnz_chroma.66, .Lfunc_end107-predict_nnz_chroma.66
	.cfi_endproc
                                        # -- End function
	.globl	BType2CtxRef.67         # -- Begin function BType2CtxRef.67
	.p2align	4, 0x90
	.type	BType2CtxRef.67,@function
BType2CtxRef.67:                        # @BType2CtxRef.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1408336115, -16(%rbp)  # imm = 0x53F180F3
	movl	%edi, -20(%rbp)
	cmpl	$4, -20(%rbp)
	jge	.LBB108_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB108_3
.LBB108_2:                              # %if.else
	movl	$1, -12(%rbp)
.LBB108_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1408336115, -16(%rbp)  # imm = 0x53F180F3
	jne	.LBB108_5
.LBB108_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB108_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB108_4
.Lfunc_end108:
	.size	BType2CtxRef.67, .Lfunc_end108-BType2CtxRef.67
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding.68 # -- Begin function ChromaResidualCoding.68
	.p2align	4, 0x90
	.type	ChromaResidualCoding.68,@function
ChromaResidualCoding.68:                # @ChromaResidualCoding.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$250412385, -68(%rbp)   # imm = 0xEECFD61
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB109_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB109_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB109_3:                              # %lor.end
.LBB109_4:                              # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -76(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB109_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_7 Depth 2
                                        #       Child Loop BB109_9 Depth 3
                                        #     Child Loop BB109_16 Depth 2
                                        #       Child Loop BB109_18 Depth 3
                                        #     Child Loop BB109_33 Depth 2
                                        #       Child Loop BB109_35 Depth 3
                                        #     Child Loop BB109_43 Depth 2
                                        #       Child Loop BB109_45 Depth 3
                                        #     Child Loop BB109_58 Depth 2
                                        #       Child Loop BB109_60 Depth 3
                                        #     Child Loop BB109_87 Depth 2
                                        #       Child Loop BB109_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB109_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	$0, -60(%rbp)
	movl	$0, -20(%rbp)
.LBB109_7:                              # %for.cond5
                                        #   Parent Loop BB109_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_9 Depth 3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB109_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB109_7 Depth=2
	movl	$0, -16(%rbp)
.LBB109_9:                              # %for.cond8
                                        #   Parent Loop BB109_5 Depth=1
                                        #     Parent Loop BB109_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB109_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB109_9 Depth=3
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %edi
	leaq	-52(%rbp), %rsi
	leaq	-80(%rbp), %rdx
	leaq	-72(%rbp), %rcx
	leaq	-54(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-52(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movl	-72(%rbp), %r9d
	movw	-54(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-50(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB109_9 Depth=3
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_9
.LBB109_12:                             # %for.end
                                        #   in Loop: Header=BB109_7 Depth=2
	jmp	.LBB109_13
.LBB109_13:                             # %for.inc18
                                        #   in Loop: Header=BB109_7 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_7
.LBB109_14:                             # %for.end20
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB109_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	$0, -8(%rbp)
.LBB109_16:                             # %for.cond21
                                        #   Parent Loop BB109_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_18 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB109_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB109_16 Depth=2
	movl	$0, -4(%rbp)
.LBB109_18:                             # %for.cond26
                                        #   Parent Loop BB109_5 Depth=1
                                        #     Parent Loop BB109_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB109_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB109_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB109_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB109_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB109_25
.LBB109_21:                             # %if.else
                                        #   in Loop: Header=BB109_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB109_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB109_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB109_24
.LBB109_23:                             # %if.else52
                                        #   in Loop: Header=BB109_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB109_24:                             # %if.end
                                        #   in Loop: Header=BB109_18 Depth=3
	jmp	.LBB109_25
.LBB109_25:                             # %if.end57
                                        #   in Loop: Header=BB109_18 Depth=3
	jmp	.LBB109_26
.LBB109_26:                             # %for.inc58
                                        #   in Loop: Header=BB109_18 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_18
.LBB109_27:                             # %for.end59
                                        #   in Loop: Header=BB109_16 Depth=2
	jmp	.LBB109_28
.LBB109_28:                             # %for.inc60
                                        #   in Loop: Header=BB109_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_16
.LBB109_29:                             # %for.end62
                                        #   in Loop: Header=BB109_5 Depth=1
	jmp	.LBB109_74
.LBB109_30:                             # %if.else63
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB109_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB109_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	$0, -8(%rbp)
.LBB109_33:                             # %for.cond69
                                        #   Parent Loop BB109_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_35 Depth 3
	cmpl	$8, -8(%rbp)
	jge	.LBB109_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB109_33 Depth=2
	movl	$0, -4(%rbp)
.LBB109_35:                             # %for.cond73
                                        #   Parent Loop BB109_5 Depth=1
                                        #     Parent Loop BB109_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -4(%rbp)
	jge	.LBB109_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB109_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB109_35 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_35
.LBB109_38:                             # %for.end83
                                        #   in Loop: Header=BB109_33 Depth=2
	jmp	.LBB109_39
.LBB109_39:                             # %for.inc84
                                        #   in Loop: Header=BB109_33 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_33
.LBB109_40:                             # %for.end86
                                        #   in Loop: Header=BB109_5 Depth=1
	jmp	.LBB109_73
.LBB109_41:                             # %if.else87
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB109_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	$0, -8(%rbp)
.LBB109_43:                             # %for.cond90
                                        #   Parent Loop BB109_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_45 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB109_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB109_43 Depth=2
	movl	$0, -4(%rbp)
.LBB109_45:                             # %for.cond95
                                        #   Parent Loop BB109_5 Depth=1
                                        #     Parent Loop BB109_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB109_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB109_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB109_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB109_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB109_52
.LBB109_48:                             # %if.else119
                                        #   in Loop: Header=BB109_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB109_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB109_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB109_51
.LBB109_50:                             # %if.else127
                                        #   in Loop: Header=BB109_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB109_51:                             # %if.end132
                                        #   in Loop: Header=BB109_45 Depth=3
	jmp	.LBB109_52
.LBB109_52:                             # %if.end133
                                        #   in Loop: Header=BB109_45 Depth=3
	jmp	.LBB109_53
.LBB109_53:                             # %for.inc134
                                        #   in Loop: Header=BB109_45 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_45
.LBB109_54:                             # %for.end136
                                        #   in Loop: Header=BB109_43 Depth=2
	jmp	.LBB109_55
.LBB109_55:                             # %for.inc137
                                        #   in Loop: Header=BB109_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_43
.LBB109_56:                             # %for.end139
                                        #   in Loop: Header=BB109_5 Depth=1
	jmp	.LBB109_72
.LBB109_57:                             # %if.else140
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	$0, -8(%rbp)
.LBB109_58:                             # %for.cond141
                                        #   Parent Loop BB109_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_60 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB109_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB109_58 Depth=2
	movl	$0, -4(%rbp)
.LBB109_60:                             # %for.cond146
                                        #   Parent Loop BB109_5 Depth=1
                                        #     Parent Loop BB109_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB109_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB109_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB109_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB109_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB109_67
.LBB109_63:                             # %if.else175
                                        #   in Loop: Header=BB109_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB109_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB109_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB109_66
.LBB109_65:                             # %if.else188
                                        #   in Loop: Header=BB109_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB109_66:                             # %if.end198
                                        #   in Loop: Header=BB109_60 Depth=3
	jmp	.LBB109_67
.LBB109_67:                             # %if.end199
                                        #   in Loop: Header=BB109_60 Depth=3
	jmp	.LBB109_68
.LBB109_68:                             # %for.inc200
                                        #   in Loop: Header=BB109_60 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_60
.LBB109_69:                             # %for.end202
                                        #   in Loop: Header=BB109_58 Depth=2
	jmp	.LBB109_70
.LBB109_70:                             # %for.inc203
                                        #   in Loop: Header=BB109_58 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_58
.LBB109_71:                             # %for.end205
                                        #   in Loop: Header=BB109_5 Depth=1
	jmp	.LBB109_72
.LBB109_72:                             # %if.end206
                                        #   in Loop: Header=BB109_5 Depth=1
	jmp	.LBB109_73
.LBB109_73:                             # %if.end207
                                        #   in Loop: Header=BB109_5 Depth=1
	jmp	.LBB109_74
.LBB109_74:                             # %if.end208
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB109_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB109_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB109_100
.LBB109_77:                             # %if.else215
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB109_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB109_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB109_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB109_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB109_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB109_84
.LBB109_83:                             # %if.then247
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB109_85
.LBB109_84:                             # %if.else249
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB109_85:                             # %if.end251
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB109_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	$0, -8(%rbp)
.LBB109_87:                             # %for.cond255
                                        #   Parent Loop BB109_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_89 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB109_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB109_87 Depth=2
	movl	$0, -4(%rbp)
.LBB109_89:                             # %for.cond260
                                        #   Parent Loop BB109_5 Depth=1
                                        #     Parent Loop BB109_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB109_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB109_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB109_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB109_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB109_93
.LBB109_92:                             # %if.else277
                                        #   in Loop: Header=BB109_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB109_93:                             # %if.end287
                                        #   in Loop: Header=BB109_89 Depth=3
	jmp	.LBB109_94
.LBB109_94:                             # %for.inc288
                                        #   in Loop: Header=BB109_89 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_89
.LBB109_95:                             # %for.end290
                                        #   in Loop: Header=BB109_87 Depth=2
	jmp	.LBB109_96
.LBB109_96:                             # %for.inc291
                                        #   in Loop: Header=BB109_87 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_87
.LBB109_97:                             # %for.end293
                                        #   in Loop: Header=BB109_5 Depth=1
	jmp	.LBB109_98
.LBB109_98:                             # %if.end294
                                        #   in Loop: Header=BB109_5 Depth=1
	jmp	.LBB109_99
.LBB109_99:                             # %if.end295
                                        #   in Loop: Header=BB109_5 Depth=1
	jmp	.LBB109_100
.LBB109_100:                            # %if.end296
                                        #   in Loop: Header=BB109_5 Depth=1
	jmp	.LBB109_101
.LBB109_101:                            # %for.inc297
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_5
.LBB109_102:                            # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB109_139
# %bb.103:                              # %if.then307
	movl	$0, -8(%rbp)
.LBB109_104:                            # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_106 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB109_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB109_104 Depth=1
	movl	$0, -4(%rbp)
.LBB109_106:                            # %for.cond312
                                        #   Parent Loop BB109_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB109_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB109_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -64(%rbp)
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-64(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB109_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB109_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB109_110
.LBB109_109:                            # %cond.false
                                        #   in Loop: Header=BB109_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB109_110:                            # %cond.end
                                        #   in Loop: Header=BB109_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB109_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB109_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB109_116
.LBB109_112:                            # %cond.false358
                                        #   in Loop: Header=BB109_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB109_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB109_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB109_115
.LBB109_114:                            # %cond.false367
                                        #   in Loop: Header=BB109_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB109_115:                            # %cond.end373
                                        #   in Loop: Header=BB109_106 Depth=2
.LBB109_116:                            # %cond.end375
                                        #   in Loop: Header=BB109_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-36(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB109_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB109_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB109_119
.LBB109_118:                            # %cond.false394
                                        #   in Loop: Header=BB109_106 Depth=2
	movl	-36(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB109_119:                            # %cond.end400
                                        #   in Loop: Header=BB109_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB109_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB109_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB109_125
.LBB109_121:                            # %cond.false406
                                        #   in Loop: Header=BB109_106 Depth=2
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB109_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB109_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB109_124
.LBB109_123:                            # %cond.false415
                                        #   in Loop: Header=BB109_106 Depth=2
	movl	-36(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB109_124:                            # %cond.end421
                                        #   in Loop: Header=BB109_106 Depth=2
.LBB109_125:                            # %cond.end423
                                        #   in Loop: Header=BB109_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-32(%rbp), %esi
	movslq	-4(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-8(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB109_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB109_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB109_128
.LBB109_127:                            # %cond.false443
                                        #   in Loop: Header=BB109_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-32(%rbp), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB109_128:                            # %cond.end449
                                        #   in Loop: Header=BB109_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB109_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB109_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB109_134
.LBB109_130:                            # %cond.false455
                                        #   in Loop: Header=BB109_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-32(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB109_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB109_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB109_133
.LBB109_132:                            # %cond.false464
                                        #   in Loop: Header=BB109_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-32(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB109_133:                            # %cond.end470
                                        #   in Loop: Header=BB109_106 Depth=2
.LBB109_134:                            # %cond.end472
                                        #   in Loop: Header=BB109_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB109_106 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_106
.LBB109_136:                            # %for.end487
                                        #   in Loop: Header=BB109_104 Depth=1
	jmp	.LBB109_137
.LBB109_137:                            # %for.inc488
                                        #   in Loop: Header=BB109_104 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_104
.LBB109_138:                            # %for.end490
	jmp	.LBB109_139
.LBB109_139:                            # %if.end491
	cmpl	$250412385, -68(%rbp)   # imm = 0xEECFD61
	jne	.LBB109_141
.LBB109_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB109_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB109_140
.Lfunc_end109:
	.size	ChromaResidualCoding.68, .Lfunc_end109-ChromaResidualCoding.68
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.69   # -- Begin function predict_nnz_chroma.69
	.p2align	4, 0x90
	.type	predict_nnz_chroma.69,@function
predict_nnz_chroma.69:                  # @predict_nnz_chroma.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$1924855771, -64(%rbp)  # imm = 0x72BAF7DB
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -56(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB110_14
# %bb.1:                                # %if.then
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB110_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB110_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB110_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB110_5:                              # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB110_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB110_7:                              # %if.end19
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB110_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB110_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB110_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB110_11:                             # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB110_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB110_13:                             # %if.end57
	jmp	.LBB110_27
.LBB110_14:                             # %if.else
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB110_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB110_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB110_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB110_18:                             # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB110_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB110_20:                             # %if.end90
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB110_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB110_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB110_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB110_24:                             # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB110_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB110_26:                             # %if.end124
	jmp	.LBB110_27
.LBB110_27:                             # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB110_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB110_29:                             # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$1924855771, -64(%rbp)  # imm = 0x72BAF7DB
	jne	.LBB110_31
.LBB110_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB110_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB110_30
.Lfunc_end110:
	.size	predict_nnz_chroma.69, .Lfunc_end110-predict_nnz_chroma.69
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8.70 # -- Begin function writeMotionVector8x8.70
	.p2align	4, 0x90
	.type	writeMotionVector8x8.70,@function
writeMotionVector8x8.70:                # @writeMotionVector8x8.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$1238728550, -88(%rbp)  # imm = 0x49D57F66
	movl	%edi, -84(%rbp)
	movl	%esi, -96(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -100(%rbp)
	movl	%r8d, -92(%rbp)
	movl	%r9d, -36(%rbp)
	movl	$0, -60(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -136(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB111_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB111_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB111_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -64(%rbp)
	jne	.LBB111_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB111_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB111_7
.LBB111_6:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB111_7:                              # %cond.end
	movq	%rax, -112(%rbp)
.LBB111_8:                              # %if.end
	movl	-96(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB111_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_11 Depth 2
                                        #       Child Loop BB111_13 Depth 3
                                        #         Child Loop BB111_15 Depth 4
                                        #           Child Loop BB111_17 Depth 5
	movl	-16(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB111_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB111_9 Depth=1
	movl	-84(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB111_11:                             # %for.cond22
                                        #   Parent Loop BB111_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB111_13 Depth 3
                                        #         Child Loop BB111_15 Depth 4
                                        #           Child Loop BB111_17 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-80(%rbp), %eax
	jge	.LBB111_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB111_11 Depth=2
	movl	$0, -20(%rbp)
.LBB111_13:                             # %for.cond25
                                        #   Parent Loop BB111_9 Depth=1
                                        #     Parent Loop BB111_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB111_15 Depth 4
                                        #           Child Loop BB111_17 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB111_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB111_13 Depth=3
	movq	-112(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-128(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -44(%rbp)
.LBB111_15:                             # %for.cond53
                                        #   Parent Loop BB111_9 Depth=1
                                        #     Parent Loop BB111_11 Depth=2
                                        #       Parent Loop BB111_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB111_17 Depth 5
	movl	-44(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB111_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB111_15 Depth=4
	movl	$0, -40(%rbp)
.LBB111_17:                             # %for.cond57
                                        #   Parent Loop BB111_9 Depth=1
                                        #     Parent Loop BB111_11 Depth=2
                                        #       Parent Loop BB111_13 Depth=3
                                        #         Parent Loop BB111_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-40(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB111_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB111_17 Depth=5
	movl	-68(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-36(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-44(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-40(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB111_17 Depth=5
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB111_17
.LBB111_20:                             # %for.end
                                        #   in Loop: Header=BB111_15 Depth=4
	jmp	.LBB111_21
.LBB111_21:                             # %for.inc70
                                        #   in Loop: Header=BB111_15 Depth=4
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB111_15
.LBB111_22:                             # %for.end72
                                        #   in Loop: Header=BB111_13 Depth=3
	movl	-68(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB111_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB111_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB111_25
.LBB111_24:                             # %if.else
                                        #   in Loop: Header=BB111_13 Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB111_25:                             # %if.end78
                                        #   in Loop: Header=BB111_13 Depth=3
	movq	-144(%rbp), %rax
	movq	24(%rax), %rax
	movq	-136(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB111_13 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB111_13
.LBB111_27:                             # %for.end90
                                        #   in Loop: Header=BB111_11 Depth=2
	jmp	.LBB111_28
.LBB111_28:                             # %for.inc91
                                        #   in Loop: Header=BB111_11 Depth=2
	movl	-72(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_11
.LBB111_29:                             # %for.end93
                                        #   in Loop: Header=BB111_9 Depth=1
	jmp	.LBB111_30
.LBB111_30:                             # %for.inc94
                                        #   in Loop: Header=BB111_9 Depth=1
	movl	-76(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB111_9
.LBB111_31:                             # %for.end96
	movl	-60(%rbp), %ebx
	cmpl	$1238728550, -88(%rbp)  # imm = 0x49D57F66
	jne	.LBB111_33
.LBB111_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB111_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB111_32
.Lfunc_end111:
	.size	writeMotionVector8x8.70, .Lfunc_end111-writeMotionVector8x8.70
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.71 # -- Begin function writeLumaCoeff4x4_CABAC.71
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.71,@function
writeLumaCoeff4x4_CABAC.71:             # @writeLumaCoeff4x4_CABAC.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1706324635, -52(%rbp)  # imm = 0x65B4729B
	movl	%edi, -28(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -80(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB112_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB112_3
.LBB112_2:                              # %cond.false
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB112_3:                              # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB112_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB112_6
.LBB112_5:                              # %cond.false26
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB112_6:                              # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB112_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -12(%rbp)
	jg	.LBB112_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB112_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB112_9:                              # %land.end
                                        #   in Loop: Header=BB112_7 Depth=1
	testb	$1, %al
	jne	.LBB112_10
	jmp	.LBB112_15
.LBB112_10:                             # %for.body
                                        #   in Loop: Header=BB112_7 Depth=1
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB112_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB112_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB112_13
.LBB112_12:                             # %cond.false40
                                        #   in Loop: Header=BB112_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB112_13:                             # %cond.end43
                                        #   in Loop: Header=BB112_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB112_7 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_7
.LBB112_15:                             # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$1706324635, -52(%rbp)  # imm = 0x65B4729B
	jne	.LBB112_17
.LBB112_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB112_17:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB112_16
.Lfunc_end112:
	.size	writeLumaCoeff4x4_CABAC.71, .Lfunc_end112-writeLumaCoeff4x4_CABAC.71
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction.72 # -- Begin function IntraChromaPrediction.72
	.p2align	4, 0x90
	.type	IntraChromaPrediction.72,@function
IntraChromaPrediction.72:               # @IntraChromaPrediction.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$1713666127, -164(%rbp) # imm = 0x6624784F
	movq	%rdi, -176(%rbp)
	movq	%rsi, -192(%rbp)
	movq	%rdx, -184(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -120(%rbp)
	movl	$0, -132(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -112(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB113_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB113_1 Depth=1
	movl	-120(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB113_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_1
.LBB113_4:                              # %for.end
	movl	-120(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB113_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB113_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB113_8
.LBB113_7:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB113_8
.LBB113_8:                              # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB113_9:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB113_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB113_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB113_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB113_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB113_13
.LBB113_12:                             # %cond.false32
                                        #   in Loop: Header=BB113_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB113_13
.LBB113_13:                             # %cond.end33
                                        #   in Loop: Header=BB113_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB113_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_9
.LBB113_15:                             # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB113_16:                             # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB113_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB113_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB113_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB113_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB113_20
.LBB113_19:                             # %cond.false57
                                        #   in Loop: Header=BB113_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB113_20
.LBB113_20:                             # %cond.end58
                                        #   in Loop: Header=BB113_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB113_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_16
.LBB113_22:                             # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB113_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB113_25
.LBB113_24:                             # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB113_25
.LBB113_25:                             # %cond.end75
	movl	%eax, -92(%rbp)
.LBB113_26:                             # %if.end
	cmpq	$0, -176(%rbp)
	je	.LBB113_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB113_28:                             # %if.end79
	cmpq	$0, -192(%rbp)
	je	.LBB113_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB113_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB113_31:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB113_32:                             # %if.end86
	cmpq	$0, -184(%rbp)
	je	.LBB113_34
# %bb.33:                               # %if.then88
	movl	-92(%rbp), %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB113_34:                             # %if.end89
	movl	$0, -24(%rbp)
.LBB113_35:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_37 Depth 2
                                        #       Child Loop BB113_39 Depth 3
                                        #         Child Loop BB113_104 Depth 4
                                        #         Child Loop BB113_110 Depth 4
                                        #         Child Loop BB113_85 Depth 4
                                        #         Child Loop BB113_91 Depth 4
                                        #         Child Loop BB113_66 Depth 4
                                        #         Child Loop BB113_72 Depth 4
                                        #         Child Loop BB113_44 Depth 4
                                        #         Child Loop BB113_50 Depth 4
                                        #         Child Loop BB113_125 Depth 4
                                        #           Child Loop BB113_127 Depth 5
                                        #     Child Loop BB113_138 Depth 2
                                        #     Child Loop BB113_142 Depth 2
                                        #       Child Loop BB113_144 Depth 3
                                        #     Child Loop BB113_153 Depth 2
                                        #     Child Loop BB113_157 Depth 2
                                        #       Child Loop BB113_159 Depth 3
                                        #     Child Loop BB113_170 Depth 2
                                        #     Child Loop BB113_174 Depth 2
                                        #     Child Loop BB113_178 Depth 2
                                        #       Child Loop BB113_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB113_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB113_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -84(%rbp)
.LBB113_37:                             # %for.cond95
                                        #   Parent Loop BB113_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB113_39 Depth 3
                                        #         Child Loop BB113_104 Depth 4
                                        #         Child Loop BB113_110 Depth 4
                                        #         Child Loop BB113_85 Depth 4
                                        #         Child Loop BB113_91 Depth 4
                                        #         Child Loop BB113_66 Depth 4
                                        #         Child Loop BB113_72 Depth 4
                                        #         Child Loop BB113_44 Depth 4
                                        #         Child Loop BB113_50 Depth 4
                                        #         Child Loop BB113_125 Depth 4
                                        #           Child Loop BB113_127 Depth 5
	movl	-84(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB113_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB113_37 Depth=2
	movl	$0, -88(%rbp)
.LBB113_39:                             # %for.cond99
                                        #   Parent Loop BB113_35 Depth=1
                                        #     Parent Loop BB113_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB113_104 Depth 4
                                        #         Child Loop BB113_110 Depth 4
                                        #         Child Loop BB113_85 Depth 4
                                        #         Child Loop BB113_91 Depth 4
                                        #         Child Loop BB113_66 Depth 4
                                        #         Child Loop BB113_72 Depth 4
                                        #         Child Loop BB113_44 Depth 4
                                        #         Child Loop BB113_50 Depth 4
                                        #         Child Loop BB113_125 Depth 4
                                        #           Child Loop BB113_127 Depth 5
	cmpl	$4, -88(%rbp)
	jge	.LBB113_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB113_39 Depth=3
	movslq	-112(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movslq	-112(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movslq	-112(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-84(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-88(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB113_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB113_39 Depth=3
	movq	.LJTI113_0(,%rax,8), %rax
	jmpq	*%rax
.LBB113_42:                             # %sw.bb
                                        #   in Loop: Header=BB113_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB113_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB113_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB113_44:                             # %for.cond124
                                        #   Parent Loop BB113_35 Depth=1
                                        #     Parent Loop BB113_37 Depth=2
                                        #       Parent Loop BB113_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB113_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB113_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_44
.LBB113_47:                             # %for.end138
                                        #   in Loop: Header=BB113_39 Depth=3
	jmp	.LBB113_48
.LBB113_48:                             # %if.end139
                                        #   in Loop: Header=BB113_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB113_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB113_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB113_50:                             # %for.cond143
                                        #   Parent Loop BB113_35 Depth=1
                                        #     Parent Loop BB113_37 Depth=2
                                        #       Parent Loop BB113_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB113_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB113_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_50
.LBB113_53:                             # %for.end162
                                        #   in Loop: Header=BB113_39 Depth=3
	jmp	.LBB113_54
.LBB113_54:                             # %if.end163
                                        #   in Loop: Header=BB113_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB113_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB113_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB113_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB113_39 Depth=3
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB113_63
.LBB113_57:                             # %if.else
                                        #   in Loop: Header=BB113_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB113_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB113_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB113_62
.LBB113_59:                             # %if.else174
                                        #   in Loop: Header=BB113_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB113_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB113_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB113_61:                             # %if.end180
                                        #   in Loop: Header=BB113_39 Depth=3
	jmp	.LBB113_62
.LBB113_62:                             # %if.end181
                                        #   in Loop: Header=BB113_39 Depth=3
	jmp	.LBB113_63
.LBB113_63:                             # %if.end182
                                        #   in Loop: Header=BB113_39 Depth=3
	jmp	.LBB113_124
.LBB113_64:                             # %sw.bb183
                                        #   in Loop: Header=BB113_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB113_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB113_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB113_66:                             # %for.cond186
                                        #   Parent Loop BB113_35 Depth=1
                                        #     Parent Loop BB113_37 Depth=2
                                        #       Parent Loop BB113_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB113_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB113_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_66
.LBB113_69:                             # %for.end202
                                        #   in Loop: Header=BB113_39 Depth=3
	jmp	.LBB113_77
.LBB113_70:                             # %if.else203
                                        #   in Loop: Header=BB113_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB113_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB113_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB113_72:                             # %for.cond207
                                        #   Parent Loop BB113_35 Depth=1
                                        #     Parent Loop BB113_37 Depth=2
                                        #       Parent Loop BB113_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB113_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB113_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_72
.LBB113_75:                             # %for.end226
                                        #   in Loop: Header=BB113_39 Depth=3
	jmp	.LBB113_76
.LBB113_76:                             # %if.end227
                                        #   in Loop: Header=BB113_39 Depth=3
	jmp	.LBB113_77
.LBB113_77:                             # %if.end228
                                        #   in Loop: Header=BB113_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB113_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB113_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB113_82
.LBB113_79:                             # %if.else233
                                        #   in Loop: Header=BB113_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB113_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB113_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB113_81:                             # %if.end239
                                        #   in Loop: Header=BB113_39 Depth=3
	jmp	.LBB113_82
.LBB113_82:                             # %if.end240
                                        #   in Loop: Header=BB113_39 Depth=3
	jmp	.LBB113_124
.LBB113_83:                             # %sw.bb241
                                        #   in Loop: Header=BB113_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB113_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB113_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB113_85:                             # %for.cond245
                                        #   Parent Loop BB113_35 Depth=1
                                        #     Parent Loop BB113_37 Depth=2
                                        #       Parent Loop BB113_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB113_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB113_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_85
.LBB113_88:                             # %for.end264
                                        #   in Loop: Header=BB113_39 Depth=3
	jmp	.LBB113_96
.LBB113_89:                             # %if.else265
                                        #   in Loop: Header=BB113_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB113_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB113_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB113_91:                             # %for.cond268
                                        #   Parent Loop BB113_35 Depth=1
                                        #     Parent Loop BB113_37 Depth=2
                                        #       Parent Loop BB113_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB113_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB113_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_91
.LBB113_94:                             # %for.end284
                                        #   in Loop: Header=BB113_39 Depth=3
	jmp	.LBB113_95
.LBB113_95:                             # %if.end285
                                        #   in Loop: Header=BB113_39 Depth=3
	jmp	.LBB113_96
.LBB113_96:                             # %if.end286
                                        #   in Loop: Header=BB113_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB113_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB113_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB113_101
.LBB113_98:                             # %if.else292
                                        #   in Loop: Header=BB113_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB113_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB113_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB113_100:                            # %if.end297
                                        #   in Loop: Header=BB113_39 Depth=3
	jmp	.LBB113_101
.LBB113_101:                            # %if.end298
                                        #   in Loop: Header=BB113_39 Depth=3
	jmp	.LBB113_124
.LBB113_102:                            # %sw.bb299
                                        #   in Loop: Header=BB113_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB113_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB113_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB113_104:                            # %for.cond302
                                        #   Parent Loop BB113_35 Depth=1
                                        #     Parent Loop BB113_37 Depth=2
                                        #       Parent Loop BB113_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB113_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB113_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_104
.LBB113_107:                            # %for.end318
                                        #   in Loop: Header=BB113_39 Depth=3
	jmp	.LBB113_108
.LBB113_108:                            # %if.end319
                                        #   in Loop: Header=BB113_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB113_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB113_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB113_110:                            # %for.cond323
                                        #   Parent Loop BB113_35 Depth=1
                                        #     Parent Loop BB113_37 Depth=2
                                        #       Parent Loop BB113_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB113_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB113_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_110
.LBB113_113:                            # %for.end342
                                        #   in Loop: Header=BB113_39 Depth=3
	jmp	.LBB113_114
.LBB113_114:                            # %if.end343
                                        #   in Loop: Header=BB113_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB113_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB113_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB113_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB113_39 Depth=3
	movl	-64(%rbp), %eax
	addl	-72(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB113_123
.LBB113_117:                            # %if.else352
                                        #   in Loop: Header=BB113_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB113_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB113_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB113_122
.LBB113_119:                            # %if.else357
                                        #   in Loop: Header=BB113_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB113_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB113_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB113_121:                            # %if.end363
                                        #   in Loop: Header=BB113_39 Depth=3
	jmp	.LBB113_122
.LBB113_122:                            # %if.end364
                                        #   in Loop: Header=BB113_39 Depth=3
	jmp	.LBB113_123
.LBB113_123:                            # %if.end365
                                        #   in Loop: Header=BB113_39 Depth=3
	jmp	.LBB113_124
.LBB113_124:                            # %sw.epilog
                                        #   in Loop: Header=BB113_39 Depth=3
	movl	-48(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB113_125:                            # %for.cond366
                                        #   Parent Loop BB113_35 Depth=1
                                        #     Parent Loop BB113_37 Depth=2
                                        #       Parent Loop BB113_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB113_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB113_125 Depth=4
	movl	-40(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB113_127:                            # %for.cond371
                                        #   Parent Loop BB113_35 Depth=1
                                        #     Parent Loop BB113_37 Depth=2
                                        #       Parent Loop BB113_39 Depth=3
                                        #         Parent Loop BB113_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB113_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB113_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_127
.LBB113_130:                            # %for.end386
                                        #   in Loop: Header=BB113_125 Depth=4
	jmp	.LBB113_131
.LBB113_131:                            # %for.inc387
                                        #   in Loop: Header=BB113_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_125
.LBB113_132:                            # %for.end389
                                        #   in Loop: Header=BB113_39 Depth=3
	jmp	.LBB113_133
.LBB113_133:                            # %for.inc390
                                        #   in Loop: Header=BB113_39 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB113_39
.LBB113_134:                            # %for.end392
                                        #   in Loop: Header=BB113_37 Depth=2
	jmp	.LBB113_135
.LBB113_135:                            # %for.inc393
                                        #   in Loop: Header=BB113_37 Depth=2
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB113_37
.LBB113_136:                            # %for.end395
                                        #   in Loop: Header=BB113_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB113_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB113_35 Depth=1
	movl	$0, -4(%rbp)
.LBB113_138:                            # %for.cond398
                                        #   Parent Loop BB113_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB113_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB113_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB113_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_138
.LBB113_141:                            # %for.end414
                                        #   in Loop: Header=BB113_35 Depth=1
	movl	$0, -4(%rbp)
.LBB113_142:                            # %for.cond415
                                        #   Parent Loop BB113_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB113_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB113_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB113_142 Depth=2
	movl	$0, -8(%rbp)
.LBB113_144:                            # %for.cond419
                                        #   Parent Loop BB113_35 Depth=1
                                        #     Parent Loop BB113_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB113_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB113_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB113_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_144
.LBB113_147:                            # %for.end436
                                        #   in Loop: Header=BB113_142 Depth=2
	jmp	.LBB113_148
.LBB113_148:                            # %for.inc437
                                        #   in Loop: Header=BB113_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_142
.LBB113_149:                            # %for.end439
                                        #   in Loop: Header=BB113_35 Depth=1
	jmp	.LBB113_150
.LBB113_150:                            # %if.end440
                                        #   in Loop: Header=BB113_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB113_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB113_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB113_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB113_35 Depth=1
	movl	$0, -4(%rbp)
.LBB113_153:                            # %for.cond447
                                        #   Parent Loop BB113_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB113_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB113_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB113_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_153
.LBB113_156:                            # %for.end468
                                        #   in Loop: Header=BB113_35 Depth=1
	movl	$0, -4(%rbp)
.LBB113_157:                            # %for.cond469
                                        #   Parent Loop BB113_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB113_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB113_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB113_157 Depth=2
	movl	$0, -8(%rbp)
.LBB113_159:                            # %for.cond473
                                        #   Parent Loop BB113_35 Depth=1
                                        #     Parent Loop BB113_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB113_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB113_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB113_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_159
.LBB113_162:                            # %for.end490
                                        #   in Loop: Header=BB113_157 Depth=2
	jmp	.LBB113_163
.LBB113_163:                            # %for.inc491
                                        #   in Loop: Header=BB113_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_157
.LBB113_164:                            # %for.end493
                                        #   in Loop: Header=BB113_35 Depth=1
	jmp	.LBB113_165
.LBB113_165:                            # %if.end494
                                        #   in Loop: Header=BB113_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB113_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB113_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB113_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB113_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB113_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB113_35 Depth=1
	cmpl	$0, -92(%rbp)
	je	.LBB113_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB113_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -124(%rbp)
	movl	$0, -4(%rbp)
.LBB113_170:                            # %for.cond519
                                        #   Parent Loop BB113_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB113_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB113_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-124(%rbp), %ecx
	movl	%ecx, -124(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB113_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_170
.LBB113_173:                            # %for.end540
                                        #   in Loop: Header=BB113_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -128(%rbp)
	movl	$0, -4(%rbp)
.LBB113_174:                            # %for.cond556
                                        #   Parent Loop BB113_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB113_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB113_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-128(%rbp), %ecx
	movl	%ecx, -128(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB113_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_174
.LBB113_177:                            # %for.end577
                                        #   in Loop: Header=BB113_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-124(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -104(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-128(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -96(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-272(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-336(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -8(%rbp)
.LBB113_178:                            # %for.cond606
                                        #   Parent Loop BB113_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB113_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB113_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB113_178 Depth=2
	movl	$0, -4(%rbp)
.LBB113_180:                            # %for.cond610
                                        #   Parent Loop BB113_35 Depth=1
                                        #     Parent Loop BB113_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB113_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB113_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-108(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-104(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-96(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB113_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB113_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB113_184
.LBB113_183:                            # %cond.false630
                                        #   in Loop: Header=BB113_180 Depth=3
	movl	-108(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-104(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-96(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB113_184:                            # %cond.end643
                                        #   in Loop: Header=BB113_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB113_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB113_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB113_190
.LBB113_186:                            # %cond.false648
                                        #   in Loop: Header=BB113_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-108(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-104(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-96(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB113_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB113_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB113_189
.LBB113_188:                            # %cond.false666
                                        #   in Loop: Header=BB113_180 Depth=3
	movl	-108(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-104(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-96(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB113_189:                            # %cond.end679
                                        #   in Loop: Header=BB113_180 Depth=3
.LBB113_190:                            # %cond.end681
                                        #   in Loop: Header=BB113_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB113_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_180
.LBB113_192:                            # %for.end694
                                        #   in Loop: Header=BB113_178 Depth=2
	jmp	.LBB113_193
.LBB113_193:                            # %for.inc695
                                        #   in Loop: Header=BB113_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_178
.LBB113_194:                            # %for.end697
                                        #   in Loop: Header=BB113_35 Depth=1
	jmp	.LBB113_195
.LBB113_195:                            # %if.end698
                                        #   in Loop: Header=BB113_35 Depth=1
	jmp	.LBB113_196
.LBB113_196:                            # %for.inc699
                                        #   in Loop: Header=BB113_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB113_35
.LBB113_197:                            # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB113_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -136(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB113_199:                            # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB113_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB113_199 Depth=1
	movl	-120(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB113_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_199
.LBB113_202:                            # %for.end712
	movl	$0, -44(%rbp)
.LBB113_203:                            # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_219 Depth 2
                                        #       Child Loop BB113_221 Depth 3
                                        #         Child Loop BB113_223 Depth 4
                                        #           Child Loop BB113_225 Depth 5
                                        #             Child Loop BB113_227 Depth 6
	cmpl	$3, -44(%rbp)
	jg	.LBB113_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB113_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB113_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB113_203 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB113_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB113_203 Depth=1
	jmp	.LBB113_241
.LBB113_207:                            # %if.end723
                                        #   in Loop: Header=BB113_203 Depth=1
	cmpl	$2, -44(%rbp)
	jne	.LBB113_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB113_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB113_217
.LBB113_209:                            # %lor.lhs.false
                                        #   in Loop: Header=BB113_203 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB113_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB113_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB113_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB113_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB113_217
.LBB113_212:                            # %lor.lhs.false736
                                        #   in Loop: Header=BB113_203 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB113_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB113_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB113_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB113_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB113_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB113_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB113_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB113_203 Depth=1
	cmpl	$0, -92(%rbp)
	jne	.LBB113_218
.LBB113_217:                            # %if.then749
                                        #   in Loop: Header=BB113_203 Depth=1
	jmp	.LBB113_241
.LBB113_218:                            # %if.end750
                                        #   in Loop: Header=BB113_203 Depth=1
	movl	$0, -100(%rbp)
	movl	$0, -24(%rbp)
.LBB113_219:                            # %for.cond751
                                        #   Parent Loop BB113_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB113_221 Depth 3
                                        #         Child Loop BB113_223 Depth 4
                                        #           Child Loop BB113_225 Depth 5
                                        #             Child Loop BB113_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB113_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB113_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -48(%rbp)
.LBB113_221:                            # %for.cond757
                                        #   Parent Loop BB113_203 Depth=1
                                        #     Parent Loop BB113_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB113_223 Depth 4
                                        #           Child Loop BB113_225 Depth 5
                                        #             Child Loop BB113_227 Depth 6
	movl	-48(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB113_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB113_221 Depth=3
	movl	$0, -40(%rbp)
.LBB113_223:                            # %for.cond761
                                        #   Parent Loop BB113_203 Depth=1
                                        #     Parent Loop BB113_219 Depth=2
                                        #       Parent Loop BB113_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB113_225 Depth 5
                                        #             Child Loop BB113_227 Depth 6
	movl	-40(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB113_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB113_223 Depth=4
	movl	$0, -116(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB113_225:                            # %for.cond765
                                        #   Parent Loop BB113_203 Depth=1
                                        #     Parent Loop BB113_219 Depth=2
                                        #       Parent Loop BB113_221 Depth=3
                                        #         Parent Loop BB113_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB113_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB113_225 Depth=5
	movl	-40(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB113_227:                            # %for.cond770
                                        #   Parent Loop BB113_203 Depth=1
                                        #     Parent Loop BB113_219 Depth=2
                                        #       Parent Loop BB113_221 Depth=3
                                        #         Parent Loop BB113_223 Depth=4
                                        #           Parent Loop BB113_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB113_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-116(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB113_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB113_227
.LBB113_230:                            # %for.end803
                                        #   in Loop: Header=BB113_225 Depth=5
	jmp	.LBB113_231
.LBB113_231:                            # %for.inc804
                                        #   in Loop: Header=BB113_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_225
.LBB113_232:                            # %for.end806
                                        #   in Loop: Header=BB113_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-100(%rbp), %eax
	movl	%eax, -100(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB113_223 Depth=4
	movl	-40(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB113_223
.LBB113_234:                            # %for.end810
                                        #   in Loop: Header=BB113_221 Depth=3
	jmp	.LBB113_235
.LBB113_235:                            # %for.inc811
                                        #   in Loop: Header=BB113_221 Depth=3
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB113_221
.LBB113_236:                            # %for.end813
                                        #   in Loop: Header=BB113_219 Depth=2
	jmp	.LBB113_237
.LBB113_237:                            # %for.inc814
                                        #   in Loop: Header=BB113_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB113_219
.LBB113_238:                            # %for.end816
                                        #   in Loop: Header=BB113_203 Depth=1
	movl	-100(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB113_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB113_203 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-100(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB113_240:                            # %if.end820
                                        #   in Loop: Header=BB113_203 Depth=1
	jmp	.LBB113_241
.LBB113_241:                            # %for.inc821
                                        #   in Loop: Header=BB113_203 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB113_203
.LBB113_242:                            # %for.end823
	movl	-132(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB113_243:                            # %if.end824
	cmpl	$1713666127, -164(%rbp) # imm = 0x6624784F
	jne	.LBB113_245
.LBB113_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB113_245:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB113_244
.Lfunc_end113:
	.size	IntraChromaPrediction.72, .Lfunc_end113-IntraChromaPrediction.72
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI113_0:
	.quad	.LBB113_42
	.quad	.LBB113_64
	.quad	.LBB113_83
	.quad	.LBB113_102
                                        # -- End function
	.text
	.globl	IntraChromaPrediction4x4.73 # -- Begin function IntraChromaPrediction4x4.73
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.73,@function
IntraChromaPrediction4x4.73:            # @IntraChromaPrediction4x4.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1512609300, -24(%rbp)  # imm = 0x5A289614
	movl	%edi, -28(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB114_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_3 Depth 2
	movl	-8(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB114_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB114_1 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB114_3:                              # %for.cond1
                                        #   Parent Loop BB114_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB114_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB114_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-28(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB114_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_3
.LBB114_6:                              # %for.end
                                        #   in Loop: Header=BB114_1 Depth=1
	jmp	.LBB114_7
.LBB114_7:                              # %for.inc17
                                        #   in Loop: Header=BB114_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_1
.LBB114_8:                              # %for.end19
	cmpl	$1512609300, -24(%rbp)  # imm = 0x5A289614
	jne	.LBB114_10
.LBB114_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB114_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB114_9
.Lfunc_end114:
	.size	IntraChromaPrediction4x4.73, .Lfunc_end114-IntraChromaPrediction4x4.73
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big.74        # -- Begin function slice_too_big.74
	.p2align	4, 0x90
	.type	slice_too_big.74,@function
slice_too_big.74:                       # @slice_too_big.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$7938653, -52(%rbp)     # imm = 0x79225D
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB115_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB115_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB115_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB115_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB115_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB115_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB115_5:                              # %if.end
                                        #   in Loop: Header=BB115_2 Depth=1
	movq	-48(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB115_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB115_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB115_7:                              # %if.end8
                                        #   in Loop: Header=BB115_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB115_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB115_21
.LBB115_9:                              # %if.end11
                                        #   in Loop: Header=BB115_2 Depth=1
	jmp	.LBB115_10
.LBB115_10:                             # %for.inc
                                        #   in Loop: Header=BB115_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_2
.LBB115_11:                             # %for.end
	jmp	.LBB115_12
.LBB115_12:                             # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB115_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB115_14:                             # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB115_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB115_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB115_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB115_21
.LBB115_17:                             # %if.end27
                                        #   in Loop: Header=BB115_14 Depth=1
	jmp	.LBB115_18
.LBB115_18:                             # %for.inc28
                                        #   in Loop: Header=BB115_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_14
.LBB115_19:                             # %for.end30
	jmp	.LBB115_20
.LBB115_20:                             # %if.end31
	movl	$0, -20(%rbp)
.LBB115_21:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$7938653, -52(%rbp)     # imm = 0x79225D
	jne	.LBB115_23
.LBB115_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB115_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB115_22
.Lfunc_end115:
	.size	slice_too_big.74, .Lfunc_end115-slice_too_big.74
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.75     # -- Begin function start_macroblock.75
	.p2align	4, 0x90
	.type	start_macroblock.75,@function
start_macroblock.75:                    # @start_macroblock.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$420810516, -84(%rbp)   # imm = 0x19150F14
	movl	%edi, -52(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB116_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB116_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -44(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-52(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -88(%rbp)
	je	.LBB116_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB116_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB116_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB116_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB116_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB116_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB116_5 Depth=1
	movq	-104(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB116_8:                              # %if.end
                                        #   in Loop: Header=BB116_5 Depth=1
	jmp	.LBB116_9
.LBB116_9:                              # %for.inc
                                        #   in Loop: Header=BB116_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_5
.LBB116_10:                             # %for.end
	jmp	.LBB116_11
.LBB116_11:                             # %if.end19
	jmp	.LBB116_12
.LBB116_12:                             # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB116_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -48(%rbp)
	cmpl	$-1, -48(%rbp)
	jle	.LBB116_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB116_16
.LBB116_15:                             # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB116_16:                             # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB116_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB116_97
.LBB116_18:                             # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB116_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB116_21
.LBB116_20:                             # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB116_96
.LBB116_21:                             # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB116_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB116_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB116_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB116_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB116_34
.LBB116_26:                             # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB116_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB116_32
.LBB116_28:                             # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB116_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB116_31
.LBB116_30:                             # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB116_31:                             # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB116_33
.LBB116_32:                             # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB116_33:                             # %if.end112
	jmp	.LBB116_34
.LBB116_34:                             # %if.end113
	jmp	.LBB116_39
.LBB116_35:                             # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB116_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB116_38
.LBB116_37:                             # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB116_38:                             # %if.end125
	jmp	.LBB116_39
.LBB116_39:                             # %if.end126
	jmp	.LBB116_47
.LBB116_40:                             # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB116_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB116_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB116_44
.LBB116_43:                             # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB116_44:                             # %if.end140
	jmp	.LBB116_46
.LBB116_45:                             # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB116_46:                             # %if.end145
	jmp	.LBB116_47
.LBB116_47:                             # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB116_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB116_93
.LBB116_49:                             # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB116_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB116_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB116_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB116_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB116_74
.LBB116_54:                             # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB116_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB116_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB116_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB116_73
.LBB116_58:                             # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB116_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB116_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB116_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB116_72
.LBB116_62:                             # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB116_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB116_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB116_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB116_71
.LBB116_66:                             # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB116_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB116_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB116_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB116_70:                             # %if.end223
	jmp	.LBB116_71
.LBB116_71:                             # %if.end224
	jmp	.LBB116_72
.LBB116_72:                             # %if.end225
	jmp	.LBB116_73
.LBB116_73:                             # %if.end226
	jmp	.LBB116_74
.LBB116_74:                             # %if.end227
	jmp	.LBB116_75
.LBB116_75:                             # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB116_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB116_77:                             # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB116_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB116_82
.LBB116_79:                             # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB116_81:                             # %if.end256
	jmp	.LBB116_82
.LBB116_82:                             # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB116_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-44(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB116_88
.LBB116_84:                             # %if.else275
	movl	dq, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB116_86
# %bb.85:                               # %if.then278
	movl	-40(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB116_87
.LBB116_86:                             # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB116_87:                             # %if.end292
	jmp	.LBB116_88
.LBB116_88:                             # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB116_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB116_90:                             # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB116_92
.LBB116_91:                             # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB116_92:                             # %if.end305
	jmp	.LBB116_94
.LBB116_93:                             # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB116_94:                             # %if.end309
	jmp	.LBB116_95
.LBB116_95:                             # %if.end310
	jmp	.LBB116_96
.LBB116_96:                             # %if.end311
	jmp	.LBB116_97
.LBB116_97:                             # %if.end312
	jmp	.LBB116_102
.LBB116_98:                             # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	jle	.LBB116_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB116_101
.LBB116_100:                            # %if.else331
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB116_101:                            # %if.end335
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB116_102:                            # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB116_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB116_105
.LBB116_104:                            # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB116_105:                            # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB116_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB116_107:                            # %if.end359
	movl	$0, -16(%rbp)
.LBB116_108:                            # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_110 Depth 2
                                        #       Child Loop BB116_112 Depth 3
                                        #         Child Loop BB116_114 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB116_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB116_108 Depth=1
	movl	$0, -20(%rbp)
.LBB116_110:                            # %for.cond364
                                        #   Parent Loop BB116_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB116_112 Depth 3
                                        #         Child Loop BB116_114 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB116_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB116_110 Depth=2
	movl	$0, -12(%rbp)
.LBB116_112:                            # %for.cond368
                                        #   Parent Loop BB116_108 Depth=1
                                        #     Parent Loop BB116_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB116_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB116_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB116_112 Depth=3
	movl	$0, -36(%rbp)
.LBB116_114:                            # %for.cond372
                                        #   Parent Loop BB116_108 Depth=1
                                        #     Parent Loop BB116_110 Depth=2
                                        #       Parent Loop BB116_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB116_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB116_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB116_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB116_114
.LBB116_117:                            # %for.end388
                                        #   in Loop: Header=BB116_112 Depth=3
	jmp	.LBB116_118
.LBB116_118:                            # %for.inc389
                                        #   in Loop: Header=BB116_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_112
.LBB116_119:                            # %for.end391
                                        #   in Loop: Header=BB116_110 Depth=2
	jmp	.LBB116_120
.LBB116_120:                            # %for.inc392
                                        #   in Loop: Header=BB116_110 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB116_110
.LBB116_121:                            # %for.end394
                                        #   in Loop: Header=BB116_108 Depth=1
	jmp	.LBB116_122
.LBB116_122:                            # %for.inc395
                                        #   in Loop: Header=BB116_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_108
.LBB116_123:                            # %for.end397
	movl	$0, -20(%rbp)
.LBB116_124:                            # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_126 Depth 2
                                        #       Child Loop BB116_128 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB116_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB116_124 Depth=1
	movl	$0, -12(%rbp)
.LBB116_126:                            # %for.cond402
                                        #   Parent Loop BB116_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB116_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB116_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB116_126 Depth=2
	movl	$0, -16(%rbp)
.LBB116_128:                            # %for.cond406
                                        #   Parent Loop BB116_124 Depth=1
                                        #     Parent Loop BB116_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -16(%rbp)
	jge	.LBB116_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB116_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB116_128 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_128
.LBB116_131:                            # %for.end432
                                        #   in Loop: Header=BB116_126 Depth=2
	jmp	.LBB116_132
.LBB116_132:                            # %for.inc433
                                        #   in Loop: Header=BB116_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_126
.LBB116_133:                            # %for.end435
                                        #   in Loop: Header=BB116_124 Depth=1
	jmp	.LBB116_134
.LBB116_134:                            # %for.inc436
                                        #   in Loop: Header=BB116_124 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB116_124
.LBB116_135:                            # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -16(%rbp)
.LBB116_136:                            # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_138 Depth 2
                                        #       Child Loop BB116_140 Depth 3
                                        #         Child Loop BB116_142 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB116_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB116_136 Depth=1
	movl	$0, -20(%rbp)
.LBB116_138:                            # %for.cond443
                                        #   Parent Loop BB116_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB116_140 Depth 3
                                        #         Child Loop BB116_142 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB116_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB116_138 Depth=2
	movl	$0, -12(%rbp)
.LBB116_140:                            # %for.cond447
                                        #   Parent Loop BB116_136 Depth=1
                                        #     Parent Loop BB116_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB116_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB116_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB116_140 Depth=3
	movl	$0, -36(%rbp)
.LBB116_142:                            # %for.cond451
                                        #   Parent Loop BB116_136 Depth=1
                                        #     Parent Loop BB116_138 Depth=2
                                        #       Parent Loop BB116_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB116_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB116_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-16(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB116_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB116_142
.LBB116_145:                            # %for.end465
                                        #   in Loop: Header=BB116_140 Depth=3
	jmp	.LBB116_146
.LBB116_146:                            # %for.inc466
                                        #   in Loop: Header=BB116_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_140
.LBB116_147:                            # %for.end468
                                        #   in Loop: Header=BB116_138 Depth=2
	jmp	.LBB116_148
.LBB116_148:                            # %for.inc469
                                        #   in Loop: Header=BB116_138 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB116_138
.LBB116_149:                            # %for.end471
                                        #   in Loop: Header=BB116_136 Depth=1
	jmp	.LBB116_150
.LBB116_150:                            # %for.inc472
                                        #   in Loop: Header=BB116_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_136
.LBB116_151:                            # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB116_152:                            # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB116_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB116_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB116_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_152
.LBB116_155:                            # %for.end483
	movl	$0, -12(%rbp)
.LBB116_156:                            # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB116_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB116_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB116_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_156
.LBB116_159:                            # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB116_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB116_161:                            # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB116_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB116_166
.LBB116_163:                            # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB116_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB116_165:                            # %if.end520
	jmp	.LBB116_166
.LBB116_166:                            # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB116_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB116_168:                            # %if.end536
	cmpl	$420810516, -84(%rbp)   # imm = 0x19150F14
	jne	.LBB116_170
.LBB116_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB116_170:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB116_169
.Lfunc_end116:
	.size	start_macroblock.75, .Lfunc_end116-start_macroblock.75
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.76   # -- Begin function writeIntra4x4Modes.76
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.76,@function
writeIntra4x4Modes.76:                  # @writeIntra4x4Modes.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$181982306, -72(%rbp)   # imm = 0xAD8D462
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -16(%rbp)
.LBB117_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_9 Depth 2
                                        #       Child Loop BB117_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB117_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB117_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB117_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB117_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB117_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB117_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB117_8
.LBB117_5:                              # %lor.lhs.false10
                                        #   in Loop: Header=BB117_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB117_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB117_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB117_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB117_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB117_17
.LBB117_8:                              # %if.then
                                        #   in Loop: Header=BB117_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movl	%ecx, -68(%rbp)
	movl	-68(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -76(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -80(%rbp)
	movl	$0, -32(%rbp)
.LBB117_9:                              # %for.cond24
                                        #   Parent Loop BB117_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_11 Depth 3
	cmpl	$2, -32(%rbp)
	jge	.LBB117_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB117_9 Depth=2
	movl	$0, -12(%rbp)
.LBB117_11:                             # %for.cond27
                                        #   Parent Loop BB117_1 Depth=1
                                        #     Parent Loop BB117_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB117_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB117_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB117_11 Depth=3
	movl	-76(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB117_11
.LBB117_14:                             # %for.end
                                        #   in Loop: Header=BB117_9 Depth=2
	jmp	.LBB117_15
.LBB117_15:                             # %for.inc42
                                        #   in Loop: Header=BB117_9 Depth=2
	movl	-80(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB117_9
.LBB117_16:                             # %for.end44
                                        #   in Loop: Header=BB117_1 Depth=1
	jmp	.LBB117_17
.LBB117_17:                             # %if.end
                                        #   in Loop: Header=BB117_1 Depth=1
	jmp	.LBB117_18
.LBB117_18:                             # %for.inc45
                                        #   in Loop: Header=BB117_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB117_1
.LBB117_19:                             # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB117_20:                             # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB117_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB117_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB117_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB117_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB117_23:                             # %if.end57
                                        #   in Loop: Header=BB117_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB117_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB117_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB117_26
.LBB117_25:                             # %if.else
                                        #   in Loop: Header=BB117_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB117_26:                             # %if.end65
                                        #   in Loop: Header=BB117_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB117_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB117_20
.LBB117_28:                             # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$181982306, -72(%rbp)   # imm = 0xAD8D462
	jne	.LBB117_30
.LBB117_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB117_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB117_29
.Lfunc_end117:
	.size	writeIntra4x4Modes.76, .Lfunc_end117-writeIntra4x4Modes.76
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock.77 # -- Begin function terminate_macroblock.77
	.p2align	4, 0x90
	.type	terminate_macroblock.77,@function
terminate_macroblock.77:                # @terminate_macroblock.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$2063038483, -112(%rbp) # imm = 0x7AF77813
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-96(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB118_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB118_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB118_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB118_5
.LBB118_4:                              # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB118_8
.LBB118_5:                              # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB118_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB118_7:                              # %if.end
	jmp	.LBB118_8
.LBB118_8:                              # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB118_45
# %bb.9:                                # %if.end18
	movq	.LJTI118_0(,%rax,8), %rax
	jmpq	*%rax
.LBB118_10:                             # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB118_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB118_12:                             # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB118_46
.LBB118_13:                             # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB118_46
.LBB118_14:                             # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB118_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB118_16:                             # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB118_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB118_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB118_22
.LBB118_19:                             # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB118_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB118_21:                             # %if.end64
	jmp	.LBB118_22
.LBB118_22:                             # %if.end65
	jmp	.LBB118_23
.LBB118_23:                             # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB118_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB118_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB118_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB118_27:                             # %if.end79
	jmp	.LBB118_28
.LBB118_28:                             # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB118_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB118_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB118_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB118_32:                             # %if.end89
	jmp	.LBB118_33
.LBB118_33:                             # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB118_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB118_35:                             # %if.end95
	jmp	.LBB118_46
.LBB118_36:                             # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB118_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB118_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB118_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB118_40:                             # %if.end106
	jmp	.LBB118_41
.LBB118_41:                             # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB118_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB118_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB118_44:                             # %if.end118
	jmp	.LBB118_46
.LBB118_45:                             # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB118_46:                             # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB118_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB118_48:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB118_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB118_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB118_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB118_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB118_51:                             # %if.end139
                                        #   in Loop: Header=BB118_48 Depth=1
	jmp	.LBB118_52
.LBB118_52:                             # %for.inc
                                        #   in Loop: Header=BB118_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB118_48
.LBB118_53:                             # %for.end
	jmp	.LBB118_54
.LBB118_54:                             # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB118_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB118_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB118_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB118_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB118_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB118_60:                             # %if.end174
	jmp	.LBB118_62
.LBB118_61:                             # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB118_62:                             # %if.end188
	jmp	.LBB118_63
.LBB118_63:                             # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB118_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB118_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -108(%rbp)
	jne	.LBB118_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB118_67:                             # %if.end218
	cmpl	$2063038483, -112(%rbp) # imm = 0x7AF77813
	jne	.LBB118_69
.LBB118_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB118_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB118_68
.Lfunc_end118:
	.size	terminate_macroblock.77, .Lfunc_end118-terminate_macroblock.77
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI118_0:
	.quad	.LBB118_10
	.quad	.LBB118_13
	.quad	.LBB118_14
	.quad	.LBB118_36
                                        # -- End function
	.text
	.globl	writeMotionVector8x8.78 # -- Begin function writeMotionVector8x8.78
	.p2align	4, 0x90
	.type	writeMotionVector8x8.78,@function
writeMotionVector8x8.78:                # @writeMotionVector8x8.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$701129043, -100(%rbp)  # imm = 0x29CA6153
	movl	%edi, -88(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -92(%rbp)
	movl	%r8d, -96(%rbp)
	movl	%r9d, -44(%rbp)
	movl	$0, -64(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -136(%rbp)
	movl	-96(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB119_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB119_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB119_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -60(%rbp)
	jne	.LBB119_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB119_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB119_7
.LBB119_6:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB119_7:                              # %cond.end
	movq	%rax, -112(%rbp)
.LBB119_8:                              # %if.end
	movl	-80(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB119_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_11 Depth 2
                                        #       Child Loop BB119_13 Depth 3
                                        #         Child Loop BB119_15 Depth 4
                                        #           Child Loop BB119_17 Depth 5
	movl	-20(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jge	.LBB119_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB119_9 Depth=1
	movl	-88(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB119_11:                             # %for.cond22
                                        #   Parent Loop BB119_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_13 Depth 3
                                        #         Child Loop BB119_15 Depth 4
                                        #           Child Loop BB119_17 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB119_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB119_11 Depth=2
	movl	$0, -16(%rbp)
.LBB119_13:                             # %for.cond25
                                        #   Parent Loop BB119_9 Depth=1
                                        #     Parent Loop BB119_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB119_15 Depth 4
                                        #           Child Loop BB119_17 Depth 5
	cmpl	$2, -16(%rbp)
	jge	.LBB119_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB119_13 Depth=3
	movq	-112(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-128(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -40(%rbp)
.LBB119_15:                             # %for.cond53
                                        #   Parent Loop BB119_9 Depth=1
                                        #     Parent Loop BB119_11 Depth=2
                                        #       Parent Loop BB119_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB119_17 Depth 5
	movl	-40(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB119_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB119_15 Depth=4
	movl	$0, -36(%rbp)
.LBB119_17:                             # %for.cond57
                                        #   Parent Loop BB119_9 Depth=1
                                        #     Parent Loop BB119_11 Depth=2
                                        #       Parent Loop BB119_13 Depth=3
                                        #         Parent Loop BB119_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-36(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB119_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB119_17 Depth=5
	movl	-72(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-40(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB119_17 Depth=5
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB119_17
.LBB119_20:                             # %for.end
                                        #   in Loop: Header=BB119_15 Depth=4
	jmp	.LBB119_21
.LBB119_21:                             # %for.inc70
                                        #   in Loop: Header=BB119_15 Depth=4
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB119_15
.LBB119_22:                             # %for.end72
                                        #   in Loop: Header=BB119_13 Depth=3
	movl	-72(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB119_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB119_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB119_25
.LBB119_24:                             # %if.else
                                        #   in Loop: Header=BB119_13 Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB119_25:                             # %if.end78
                                        #   in Loop: Header=BB119_13 Depth=3
	movq	-144(%rbp), %rax
	movq	24(%rax), %rax
	movq	-136(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB119_13 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB119_13
.LBB119_27:                             # %for.end90
                                        #   in Loop: Header=BB119_11 Depth=2
	jmp	.LBB119_28
.LBB119_28:                             # %for.inc91
                                        #   in Loop: Header=BB119_11 Depth=2
	movl	-76(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB119_11
.LBB119_29:                             # %for.end93
                                        #   in Loop: Header=BB119_9 Depth=1
	jmp	.LBB119_30
.LBB119_30:                             # %for.inc94
                                        #   in Loop: Header=BB119_9 Depth=1
	movl	-68(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_9
.LBB119_31:                             # %for.end96
	movl	-64(%rbp), %ebx
	cmpl	$701129043, -100(%rbp)  # imm = 0x29CA6153
	jne	.LBB119_33
.LBB119_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB119_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB119_32
.Lfunc_end119:
	.size	writeMotionVector8x8.78, .Lfunc_end119-writeMotionVector8x8.78
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.79         # -- Begin function MBType2Value.79
	.p2align	4, 0x90
	.type	MBType2Value.79,@function
MBType2Value.79:                        # @MBType2Value.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1986463125, -36(%rbp)  # imm = 0x76670595
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB120_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB120_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB120_4
.LBB120_3:                              # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB120_26
.LBB120_4:                              # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB120_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB120_26
.LBB120_6:                              # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB120_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB120_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB120_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB120_26
.LBB120_10:                             # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB120_26
.LBB120_11:                             # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB120_26
.LBB120_12:                             # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB120_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB120_26
.LBB120_14:                             # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB120_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB120_17
.LBB120_16:                             # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB120_26
.LBB120_17:                             # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB120_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB120_26
.LBB120_19:                             # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB120_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB120_26
.LBB120_21:                             # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB120_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB120_26
.LBB120_23:                             # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB120_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB120_26
.LBB120_25:                             # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB120_26:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$1986463125, -36(%rbp)  # imm = 0x76670595
	jne	.LBB120_28
.LBB120_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB120_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB120_27
.Lfunc_end120:
	.size	MBType2Value.79, .Lfunc_end120-MBType2Value.79
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.80     # -- Begin function start_macroblock.80
	.p2align	4, 0x90
	.type	start_macroblock.80,@function
start_macroblock.80:                    # @start_macroblock.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$35387343, -88(%rbp)    # imm = 0x21BF7CF
	movl	%edi, -48(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB121_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB121_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -40(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-48(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -84(%rbp)
	je	.LBB121_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB121_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB121_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB121_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB121_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB121_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB121_5 Depth=1
	movq	-104(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB121_8:                              # %if.end
                                        #   in Loop: Header=BB121_5 Depth=1
	jmp	.LBB121_9
.LBB121_9:                              # %for.inc
                                        #   in Loop: Header=BB121_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB121_5
.LBB121_10:                             # %for.end
	jmp	.LBB121_11
.LBB121_11:                             # %if.end19
	jmp	.LBB121_12
.LBB121_12:                             # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB121_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	jle	.LBB121_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB121_16
.LBB121_15:                             # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB121_16:                             # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB121_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB121_97
.LBB121_18:                             # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB121_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB121_21
.LBB121_20:                             # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB121_96
.LBB121_21:                             # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB121_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB121_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB121_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB121_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB121_34
.LBB121_26:                             # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB121_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB121_32
.LBB121_28:                             # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB121_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB121_31
.LBB121_30:                             # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB121_31:                             # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB121_33
.LBB121_32:                             # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB121_33:                             # %if.end112
	jmp	.LBB121_34
.LBB121_34:                             # %if.end113
	jmp	.LBB121_39
.LBB121_35:                             # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB121_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB121_38
.LBB121_37:                             # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB121_38:                             # %if.end125
	jmp	.LBB121_39
.LBB121_39:                             # %if.end126
	jmp	.LBB121_47
.LBB121_40:                             # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB121_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB121_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB121_44
.LBB121_43:                             # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB121_44:                             # %if.end140
	jmp	.LBB121_46
.LBB121_45:                             # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB121_46:                             # %if.end145
	jmp	.LBB121_47
.LBB121_47:                             # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB121_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB121_93
.LBB121_49:                             # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB121_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB121_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB121_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB121_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB121_74
.LBB121_54:                             # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB121_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB121_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB121_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB121_73
.LBB121_58:                             # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB121_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB121_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB121_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB121_72
.LBB121_62:                             # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB121_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB121_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB121_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB121_71
.LBB121_66:                             # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB121_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB121_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB121_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB121_70:                             # %if.end223
	jmp	.LBB121_71
.LBB121_71:                             # %if.end224
	jmp	.LBB121_72
.LBB121_72:                             # %if.end225
	jmp	.LBB121_73
.LBB121_73:                             # %if.end226
	jmp	.LBB121_74
.LBB121_74:                             # %if.end227
	jmp	.LBB121_75
.LBB121_75:                             # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB121_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB121_77:                             # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB121_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB121_82
.LBB121_79:                             # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB121_81:                             # %if.end256
	jmp	.LBB121_82
.LBB121_82:                             # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB121_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-40(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB121_88
.LBB121_84:                             # %if.else275
	movl	dq, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB121_86
# %bb.85:                               # %if.then278
	movl	-44(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB121_87
.LBB121_86:                             # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB121_87:                             # %if.end292
	jmp	.LBB121_88
.LBB121_88:                             # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB121_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB121_90:                             # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB121_92
.LBB121_91:                             # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB121_92:                             # %if.end305
	jmp	.LBB121_94
.LBB121_93:                             # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB121_94:                             # %if.end309
	jmp	.LBB121_95
.LBB121_95:                             # %if.end310
	jmp	.LBB121_96
.LBB121_96:                             # %if.end311
	jmp	.LBB121_97
.LBB121_97:                             # %if.end312
	jmp	.LBB121_102
.LBB121_98:                             # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jle	.LBB121_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB121_101
.LBB121_100:                            # %if.else331
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB121_101:                            # %if.end335
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB121_102:                            # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB121_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB121_105
.LBB121_104:                            # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB121_105:                            # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB121_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB121_107:                            # %if.end359
	movl	$0, -16(%rbp)
.LBB121_108:                            # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_110 Depth 2
                                        #       Child Loop BB121_112 Depth 3
                                        #         Child Loop BB121_114 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB121_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB121_108 Depth=1
	movl	$0, -20(%rbp)
.LBB121_110:                            # %for.cond364
                                        #   Parent Loop BB121_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB121_112 Depth 3
                                        #         Child Loop BB121_114 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB121_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB121_110 Depth=2
	movl	$0, -12(%rbp)
.LBB121_112:                            # %for.cond368
                                        #   Parent Loop BB121_108 Depth=1
                                        #     Parent Loop BB121_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB121_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB121_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB121_112 Depth=3
	movl	$0, -36(%rbp)
.LBB121_114:                            # %for.cond372
                                        #   Parent Loop BB121_108 Depth=1
                                        #     Parent Loop BB121_110 Depth=2
                                        #       Parent Loop BB121_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB121_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB121_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB121_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB121_114
.LBB121_117:                            # %for.end388
                                        #   in Loop: Header=BB121_112 Depth=3
	jmp	.LBB121_118
.LBB121_118:                            # %for.inc389
                                        #   in Loop: Header=BB121_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB121_112
.LBB121_119:                            # %for.end391
                                        #   in Loop: Header=BB121_110 Depth=2
	jmp	.LBB121_120
.LBB121_120:                            # %for.inc392
                                        #   in Loop: Header=BB121_110 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_110
.LBB121_121:                            # %for.end394
                                        #   in Loop: Header=BB121_108 Depth=1
	jmp	.LBB121_122
.LBB121_122:                            # %for.inc395
                                        #   in Loop: Header=BB121_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB121_108
.LBB121_123:                            # %for.end397
	movl	$0, -20(%rbp)
.LBB121_124:                            # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_126 Depth 2
                                        #       Child Loop BB121_128 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB121_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB121_124 Depth=1
	movl	$0, -12(%rbp)
.LBB121_126:                            # %for.cond402
                                        #   Parent Loop BB121_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB121_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB121_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB121_126 Depth=2
	movl	$0, -16(%rbp)
.LBB121_128:                            # %for.cond406
                                        #   Parent Loop BB121_124 Depth=1
                                        #     Parent Loop BB121_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -16(%rbp)
	jge	.LBB121_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB121_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB121_128 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB121_128
.LBB121_131:                            # %for.end432
                                        #   in Loop: Header=BB121_126 Depth=2
	jmp	.LBB121_132
.LBB121_132:                            # %for.inc433
                                        #   in Loop: Header=BB121_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB121_126
.LBB121_133:                            # %for.end435
                                        #   in Loop: Header=BB121_124 Depth=1
	jmp	.LBB121_134
.LBB121_134:                            # %for.inc436
                                        #   in Loop: Header=BB121_124 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_124
.LBB121_135:                            # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -16(%rbp)
.LBB121_136:                            # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_138 Depth 2
                                        #       Child Loop BB121_140 Depth 3
                                        #         Child Loop BB121_142 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB121_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB121_136 Depth=1
	movl	$0, -20(%rbp)
.LBB121_138:                            # %for.cond443
                                        #   Parent Loop BB121_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB121_140 Depth 3
                                        #         Child Loop BB121_142 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB121_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB121_138 Depth=2
	movl	$0, -12(%rbp)
.LBB121_140:                            # %for.cond447
                                        #   Parent Loop BB121_136 Depth=1
                                        #     Parent Loop BB121_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB121_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB121_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB121_140 Depth=3
	movl	$0, -36(%rbp)
.LBB121_142:                            # %for.cond451
                                        #   Parent Loop BB121_136 Depth=1
                                        #     Parent Loop BB121_138 Depth=2
                                        #       Parent Loop BB121_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB121_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB121_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-16(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB121_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB121_142
.LBB121_145:                            # %for.end465
                                        #   in Loop: Header=BB121_140 Depth=3
	jmp	.LBB121_146
.LBB121_146:                            # %for.inc466
                                        #   in Loop: Header=BB121_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB121_140
.LBB121_147:                            # %for.end468
                                        #   in Loop: Header=BB121_138 Depth=2
	jmp	.LBB121_148
.LBB121_148:                            # %for.inc469
                                        #   in Loop: Header=BB121_138 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_138
.LBB121_149:                            # %for.end471
                                        #   in Loop: Header=BB121_136 Depth=1
	jmp	.LBB121_150
.LBB121_150:                            # %for.inc472
                                        #   in Loop: Header=BB121_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB121_136
.LBB121_151:                            # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB121_152:                            # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB121_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB121_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB121_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB121_152
.LBB121_155:                            # %for.end483
	movl	$0, -12(%rbp)
.LBB121_156:                            # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB121_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB121_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB121_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB121_156
.LBB121_159:                            # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB121_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB121_161:                            # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB121_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB121_166
.LBB121_163:                            # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB121_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB121_165:                            # %if.end520
	jmp	.LBB121_166
.LBB121_166:                            # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB121_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB121_168:                            # %if.end536
	cmpl	$35387343, -88(%rbp)    # imm = 0x21BF7CF
	jne	.LBB121_170
.LBB121_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB121_170:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB121_169
.Lfunc_end121:
	.size	start_macroblock.80, .Lfunc_end121-start_macroblock.80
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock.81 # -- Begin function terminate_macroblock.81
	.p2align	4, 0x90
	.type	terminate_macroblock.81,@function
terminate_macroblock.81:                # @terminate_macroblock.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1373164045, -108(%rbp) # imm = 0x51D8D20D
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-104(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB122_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB122_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB122_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB122_5
.LBB122_4:                              # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB122_8
.LBB122_5:                              # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB122_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB122_7:                              # %if.end
	jmp	.LBB122_8
.LBB122_8:                              # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB122_45
# %bb.9:                                # %if.end18
	movq	.LJTI122_0(,%rax,8), %rax
	jmpq	*%rax
.LBB122_10:                             # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB122_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB122_12:                             # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB122_46
.LBB122_13:                             # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB122_46
.LBB122_14:                             # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB122_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB122_16:                             # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB122_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB122_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB122_22
.LBB122_19:                             # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB122_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB122_21:                             # %if.end64
	jmp	.LBB122_22
.LBB122_22:                             # %if.end65
	jmp	.LBB122_23
.LBB122_23:                             # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB122_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB122_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB122_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB122_27:                             # %if.end79
	jmp	.LBB122_28
.LBB122_28:                             # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB122_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB122_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB122_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB122_32:                             # %if.end89
	jmp	.LBB122_33
.LBB122_33:                             # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB122_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB122_35:                             # %if.end95
	jmp	.LBB122_46
.LBB122_36:                             # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB122_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB122_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB122_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB122_40:                             # %if.end106
	jmp	.LBB122_41
.LBB122_41:                             # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB122_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB122_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB122_44:                             # %if.end118
	jmp	.LBB122_46
.LBB122_45:                             # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB122_46:                             # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB122_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB122_48:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB122_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB122_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB122_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB122_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB122_51:                             # %if.end139
                                        #   in Loop: Header=BB122_48 Depth=1
	jmp	.LBB122_52
.LBB122_52:                             # %for.inc
                                        #   in Loop: Header=BB122_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB122_48
.LBB122_53:                             # %for.end
	jmp	.LBB122_54
.LBB122_54:                             # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB122_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB122_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB122_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB122_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB122_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-104(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB122_60:                             # %if.end174
	jmp	.LBB122_62
.LBB122_61:                             # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB122_62:                             # %if.end188
	jmp	.LBB122_63
.LBB122_63:                             # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB122_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB122_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -112(%rbp)
	jne	.LBB122_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-104(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB122_67:                             # %if.end218
	cmpl	$1373164045, -108(%rbp) # imm = 0x51D8D20D
	jne	.LBB122_69
.LBB122_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB122_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB122_68
.Lfunc_end122:
	.size	terminate_macroblock.81, .Lfunc_end122-terminate_macroblock.81
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI122_0:
	.quad	.LBB122_10
	.quad	.LBB122_13
	.quad	.LBB122_14
	.quad	.LBB122_36
                                        # -- End function
	.text
	.globl	ChromaResidualCoding.82 # -- Begin function ChromaResidualCoding.82
	.p2align	4, 0x90
	.type	ChromaResidualCoding.82,@function
ChromaResidualCoding.82:                # @ChromaResidualCoding.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$492950812, -76(%rbp)   # imm = 0x1D61D51C
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB123_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB123_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB123_3:                              # %lor.end
.LBB123_4:                              # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -80(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB123_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_7 Depth 2
                                        #       Child Loop BB123_9 Depth 3
                                        #     Child Loop BB123_16 Depth 2
                                        #       Child Loop BB123_18 Depth 3
                                        #     Child Loop BB123_33 Depth 2
                                        #       Child Loop BB123_35 Depth 3
                                        #     Child Loop BB123_43 Depth 2
                                        #       Child Loop BB123_45 Depth 3
                                        #     Child Loop BB123_58 Depth 2
                                        #       Child Loop BB123_60 Depth 3
                                        #     Child Loop BB123_87 Depth 2
                                        #       Child Loop BB123_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB123_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB123_5 Depth=1
	movl	$0, -60(%rbp)
	movl	$0, -24(%rbp)
.LBB123_7:                              # %for.cond5
                                        #   Parent Loop BB123_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB123_9 Depth 3
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB123_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB123_7 Depth=2
	movl	$0, -20(%rbp)
.LBB123_9:                              # %for.cond8
                                        #   Parent Loop BB123_5 Depth=1
                                        #     Parent Loop BB123_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB123_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB123_9 Depth=3
	movslq	-80(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-68(%rbp), %rdx
	leaq	-72(%rbp), %rcx
	leaq	-52(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-54(%rbp), %ecx
	movl	-68(%rbp), %r8d
	movl	-72(%rbp), %r9d
	movw	-52(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-50(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB123_9 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB123_9
.LBB123_12:                             # %for.end
                                        #   in Loop: Header=BB123_7 Depth=2
	jmp	.LBB123_13
.LBB123_13:                             # %for.inc18
                                        #   in Loop: Header=BB123_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB123_7
.LBB123_14:                             # %for.end20
                                        #   in Loop: Header=BB123_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB123_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB123_5 Depth=1
	movl	$0, -8(%rbp)
.LBB123_16:                             # %for.cond21
                                        #   Parent Loop BB123_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB123_18 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB123_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB123_16 Depth=2
	movl	$0, -4(%rbp)
.LBB123_18:                             # %for.cond26
                                        #   Parent Loop BB123_5 Depth=1
                                        #     Parent Loop BB123_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB123_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB123_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB123_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB123_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB123_25
.LBB123_21:                             # %if.else
                                        #   in Loop: Header=BB123_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB123_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB123_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB123_24
.LBB123_23:                             # %if.else52
                                        #   in Loop: Header=BB123_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB123_24:                             # %if.end
                                        #   in Loop: Header=BB123_18 Depth=3
	jmp	.LBB123_25
.LBB123_25:                             # %if.end57
                                        #   in Loop: Header=BB123_18 Depth=3
	jmp	.LBB123_26
.LBB123_26:                             # %for.inc58
                                        #   in Loop: Header=BB123_18 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_18
.LBB123_27:                             # %for.end59
                                        #   in Loop: Header=BB123_16 Depth=2
	jmp	.LBB123_28
.LBB123_28:                             # %for.inc60
                                        #   in Loop: Header=BB123_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_16
.LBB123_29:                             # %for.end62
                                        #   in Loop: Header=BB123_5 Depth=1
	jmp	.LBB123_74
.LBB123_30:                             # %if.else63
                                        #   in Loop: Header=BB123_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB123_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB123_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB123_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB123_5 Depth=1
	movl	$0, -8(%rbp)
.LBB123_33:                             # %for.cond69
                                        #   Parent Loop BB123_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB123_35 Depth 3
	cmpl	$8, -8(%rbp)
	jge	.LBB123_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB123_33 Depth=2
	movl	$0, -4(%rbp)
.LBB123_35:                             # %for.cond73
                                        #   Parent Loop BB123_5 Depth=1
                                        #     Parent Loop BB123_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -4(%rbp)
	jge	.LBB123_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB123_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB123_35 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_35
.LBB123_38:                             # %for.end83
                                        #   in Loop: Header=BB123_33 Depth=2
	jmp	.LBB123_39
.LBB123_39:                             # %for.inc84
                                        #   in Loop: Header=BB123_33 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_33
.LBB123_40:                             # %for.end86
                                        #   in Loop: Header=BB123_5 Depth=1
	jmp	.LBB123_73
.LBB123_41:                             # %if.else87
                                        #   in Loop: Header=BB123_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB123_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB123_5 Depth=1
	movl	$0, -8(%rbp)
.LBB123_43:                             # %for.cond90
                                        #   Parent Loop BB123_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB123_45 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB123_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB123_43 Depth=2
	movl	$0, -4(%rbp)
.LBB123_45:                             # %for.cond95
                                        #   Parent Loop BB123_5 Depth=1
                                        #     Parent Loop BB123_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB123_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB123_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB123_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB123_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB123_52
.LBB123_48:                             # %if.else119
                                        #   in Loop: Header=BB123_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB123_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB123_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB123_51
.LBB123_50:                             # %if.else127
                                        #   in Loop: Header=BB123_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB123_51:                             # %if.end132
                                        #   in Loop: Header=BB123_45 Depth=3
	jmp	.LBB123_52
.LBB123_52:                             # %if.end133
                                        #   in Loop: Header=BB123_45 Depth=3
	jmp	.LBB123_53
.LBB123_53:                             # %for.inc134
                                        #   in Loop: Header=BB123_45 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_45
.LBB123_54:                             # %for.end136
                                        #   in Loop: Header=BB123_43 Depth=2
	jmp	.LBB123_55
.LBB123_55:                             # %for.inc137
                                        #   in Loop: Header=BB123_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_43
.LBB123_56:                             # %for.end139
                                        #   in Loop: Header=BB123_5 Depth=1
	jmp	.LBB123_72
.LBB123_57:                             # %if.else140
                                        #   in Loop: Header=BB123_5 Depth=1
	movl	$0, -8(%rbp)
.LBB123_58:                             # %for.cond141
                                        #   Parent Loop BB123_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB123_60 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB123_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB123_58 Depth=2
	movl	$0, -4(%rbp)
.LBB123_60:                             # %for.cond146
                                        #   Parent Loop BB123_5 Depth=1
                                        #     Parent Loop BB123_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB123_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB123_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB123_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB123_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB123_67
.LBB123_63:                             # %if.else175
                                        #   in Loop: Header=BB123_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB123_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB123_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB123_66
.LBB123_65:                             # %if.else188
                                        #   in Loop: Header=BB123_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB123_66:                             # %if.end198
                                        #   in Loop: Header=BB123_60 Depth=3
	jmp	.LBB123_67
.LBB123_67:                             # %if.end199
                                        #   in Loop: Header=BB123_60 Depth=3
	jmp	.LBB123_68
.LBB123_68:                             # %for.inc200
                                        #   in Loop: Header=BB123_60 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_60
.LBB123_69:                             # %for.end202
                                        #   in Loop: Header=BB123_58 Depth=2
	jmp	.LBB123_70
.LBB123_70:                             # %for.inc203
                                        #   in Loop: Header=BB123_58 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_58
.LBB123_71:                             # %for.end205
                                        #   in Loop: Header=BB123_5 Depth=1
	jmp	.LBB123_72
.LBB123_72:                             # %if.end206
                                        #   in Loop: Header=BB123_5 Depth=1
	jmp	.LBB123_73
.LBB123_73:                             # %if.end207
                                        #   in Loop: Header=BB123_5 Depth=1
	jmp	.LBB123_74
.LBB123_74:                             # %if.end208
                                        #   in Loop: Header=BB123_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB123_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB123_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB123_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB123_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB123_100
.LBB123_77:                             # %if.else215
                                        #   in Loop: Header=BB123_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB123_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB123_5 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB123_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB123_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB123_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB123_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB123_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB123_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB123_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB123_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB123_84
.LBB123_83:                             # %if.then247
                                        #   in Loop: Header=BB123_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB123_85
.LBB123_84:                             # %if.else249
                                        #   in Loop: Header=BB123_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB123_85:                             # %if.end251
                                        #   in Loop: Header=BB123_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB123_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB123_5 Depth=1
	movl	$0, -8(%rbp)
.LBB123_87:                             # %for.cond255
                                        #   Parent Loop BB123_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB123_89 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB123_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB123_87 Depth=2
	movl	$0, -4(%rbp)
.LBB123_89:                             # %for.cond260
                                        #   Parent Loop BB123_5 Depth=1
                                        #     Parent Loop BB123_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB123_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB123_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB123_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB123_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB123_93
.LBB123_92:                             # %if.else277
                                        #   in Loop: Header=BB123_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB123_93:                             # %if.end287
                                        #   in Loop: Header=BB123_89 Depth=3
	jmp	.LBB123_94
.LBB123_94:                             # %for.inc288
                                        #   in Loop: Header=BB123_89 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_89
.LBB123_95:                             # %for.end290
                                        #   in Loop: Header=BB123_87 Depth=2
	jmp	.LBB123_96
.LBB123_96:                             # %for.inc291
                                        #   in Loop: Header=BB123_87 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_87
.LBB123_97:                             # %for.end293
                                        #   in Loop: Header=BB123_5 Depth=1
	jmp	.LBB123_98
.LBB123_98:                             # %if.end294
                                        #   in Loop: Header=BB123_5 Depth=1
	jmp	.LBB123_99
.LBB123_99:                             # %if.end295
                                        #   in Loop: Header=BB123_5 Depth=1
	jmp	.LBB123_100
.LBB123_100:                            # %if.end296
                                        #   in Loop: Header=BB123_5 Depth=1
	jmp	.LBB123_101
.LBB123_101:                            # %for.inc297
                                        #   in Loop: Header=BB123_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB123_5
.LBB123_102:                            # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB123_139
# %bb.103:                              # %if.then307
	movl	$0, -8(%rbp)
.LBB123_104:                            # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_106 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB123_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB123_104 Depth=1
	movl	$0, -4(%rbp)
.LBB123_106:                            # %for.cond312
                                        #   Parent Loop BB123_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB123_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB123_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -64(%rbp)
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-64(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB123_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB123_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB123_110
.LBB123_109:                            # %cond.false
                                        #   in Loop: Header=BB123_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB123_110:                            # %cond.end
                                        #   in Loop: Header=BB123_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB123_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB123_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB123_116
.LBB123_112:                            # %cond.false358
                                        #   in Loop: Header=BB123_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB123_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB123_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB123_115
.LBB123_114:                            # %cond.false367
                                        #   in Loop: Header=BB123_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB123_115:                            # %cond.end373
                                        #   in Loop: Header=BB123_106 Depth=2
.LBB123_116:                            # %cond.end375
                                        #   in Loop: Header=BB123_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-28(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB123_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB123_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB123_119
.LBB123_118:                            # %cond.false394
                                        #   in Loop: Header=BB123_106 Depth=2
	movl	-28(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB123_119:                            # %cond.end400
                                        #   in Loop: Header=BB123_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB123_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB123_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB123_125
.LBB123_121:                            # %cond.false406
                                        #   in Loop: Header=BB123_106 Depth=2
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB123_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB123_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB123_124
.LBB123_123:                            # %cond.false415
                                        #   in Loop: Header=BB123_106 Depth=2
	movl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB123_124:                            # %cond.end421
                                        #   in Loop: Header=BB123_106 Depth=2
.LBB123_125:                            # %cond.end423
                                        #   in Loop: Header=BB123_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-36(%rbp), %esi
	movslq	-4(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-8(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB123_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB123_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB123_128
.LBB123_127:                            # %cond.false443
                                        #   in Loop: Header=BB123_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-36(%rbp), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB123_128:                            # %cond.end449
                                        #   in Loop: Header=BB123_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB123_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB123_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB123_134
.LBB123_130:                            # %cond.false455
                                        #   in Loop: Header=BB123_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-36(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB123_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB123_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB123_133
.LBB123_132:                            # %cond.false464
                                        #   in Loop: Header=BB123_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-36(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB123_133:                            # %cond.end470
                                        #   in Loop: Header=BB123_106 Depth=2
.LBB123_134:                            # %cond.end472
                                        #   in Loop: Header=BB123_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB123_106 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_106
.LBB123_136:                            # %for.end487
                                        #   in Loop: Header=BB123_104 Depth=1
	jmp	.LBB123_137
.LBB123_137:                            # %for.inc488
                                        #   in Loop: Header=BB123_104 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_104
.LBB123_138:                            # %for.end490
	jmp	.LBB123_139
.LBB123_139:                            # %if.end491
	cmpl	$492950812, -76(%rbp)   # imm = 0x1D61D51C
	jne	.LBB123_141
.LBB123_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB123_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB123_140
.Lfunc_end123:
	.size	ChromaResidualCoding.82, .Lfunc_end123-ChromaResidualCoding.82
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL.83  # -- Begin function writeMotionInfo2NAL.83
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.83,@function
writeMotionInfo2NAL.83:                 # @writeMotionInfo2NAL.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$986074545, -56(%rbp)   # imm = 0x3AC64DB1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB124_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB124_3
.LBB124_2:                              # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB124_3:                              # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB124_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB124_6
.LBB124_5:                              # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB124_6:                              # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB124_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB124_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB124_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB124_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB124_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB124_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB124_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB124_39
.LBB124_14:                             # %if.then42
	movl	$0, -12(%rbp)
.LBB124_15:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_17 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB124_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB124_15 Depth=1
	movl	$0, -16(%rbp)
.LBB124_17:                             # %for.cond45
                                        #   Parent Loop BB124_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB124_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB124_17 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB124_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB124_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB124_22
.LBB124_20:                             # %land.lhs.true59
                                        #   in Loop: Header=BB124_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB124_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB124_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB124_22:                             # %if.end
                                        #   in Loop: Header=BB124_17 Depth=2
	jmp	.LBB124_23
.LBB124_23:                             # %for.inc
                                        #   in Loop: Header=BB124_17 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_17
.LBB124_24:                             # %for.end
                                        #   in Loop: Header=BB124_15 Depth=1
	jmp	.LBB124_25
.LBB124_25:                             # %for.inc79
                                        #   in Loop: Header=BB124_15 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_15
.LBB124_26:                             # %for.end81
	movl	$0, -12(%rbp)
.LBB124_27:                             # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_29 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB124_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB124_27 Depth=1
	movl	$0, -16(%rbp)
.LBB124_29:                             # %for.cond86
                                        #   Parent Loop BB124_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB124_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB124_29 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB124_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB124_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB124_34
.LBB124_32:                             # %land.lhs.true103
                                        #   in Loop: Header=BB124_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB124_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB124_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB124_34:                             # %if.end126
                                        #   in Loop: Header=BB124_29 Depth=2
	jmp	.LBB124_35
.LBB124_35:                             # %for.inc127
                                        #   in Loop: Header=BB124_29 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_29
.LBB124_36:                             # %for.end129
                                        #   in Loop: Header=BB124_27 Depth=1
	jmp	.LBB124_37
.LBB124_37:                             # %for.inc130
                                        #   in Loop: Header=BB124_27 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_27
.LBB124_38:                             # %for.end132
	jmp	.LBB124_39
.LBB124_39:                             # %if.end133
	jmp	.LBB124_40
.LBB124_40:                             # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB124_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB124_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB124_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB124_57
# %bb.44:                               # %if.then150
	movl	$0, -12(%rbp)
.LBB124_45:                             # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_47 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB124_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB124_45 Depth=1
	movl	$0, -16(%rbp)
.LBB124_47:                             # %for.cond155
                                        #   Parent Loop BB124_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB124_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB124_47 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB124_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB124_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB124_52
.LBB124_50:                             # %land.lhs.true172
                                        #   in Loop: Header=BB124_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB124_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB124_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB124_52:                             # %if.end197
                                        #   in Loop: Header=BB124_47 Depth=2
	jmp	.LBB124_53
.LBB124_53:                             # %for.inc198
                                        #   in Loop: Header=BB124_47 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_47
.LBB124_54:                             # %for.end200
                                        #   in Loop: Header=BB124_45 Depth=1
	jmp	.LBB124_55
.LBB124_55:                             # %for.inc201
                                        #   in Loop: Header=BB124_45 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_45
.LBB124_56:                             # %for.end203
	jmp	.LBB124_57
.LBB124_57:                             # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB124_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB124_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB124_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB124_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB124_75
# %bb.62:                               # %if.then222
	movl	$0, -12(%rbp)
.LBB124_63:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_65 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB124_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB124_63 Depth=1
	movl	$0, -16(%rbp)
.LBB124_65:                             # %for.cond227
                                        #   Parent Loop BB124_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB124_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB124_65 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB124_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB124_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB124_70
.LBB124_68:                             # %land.lhs.true244
                                        #   in Loop: Header=BB124_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB124_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB124_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB124_70:                             # %if.end269
                                        #   in Loop: Header=BB124_65 Depth=2
	jmp	.LBB124_71
.LBB124_71:                             # %for.inc270
                                        #   in Loop: Header=BB124_65 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_65
.LBB124_72:                             # %for.end272
                                        #   in Loop: Header=BB124_63 Depth=1
	jmp	.LBB124_73
.LBB124_73:                             # %for.inc273
                                        #   in Loop: Header=BB124_63 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_63
.LBB124_74:                             # %for.end275
	jmp	.LBB124_75
.LBB124_75:                             # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$986074545, -56(%rbp)   # imm = 0x3AC64DB1
	jne	.LBB124_77
.LBB124_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB124_77:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB124_76
.Lfunc_end124:
	.size	writeMotionInfo2NAL.83, .Lfunc_end124-writeMotionInfo2NAL.83
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.84 # -- Begin function write_one_macroblock.84
	.p2align	4, 0x90
	.type	write_one_macroblock.84,@function
write_one_macroblock.84:                # @write_one_macroblock.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1486176812, -28(%rbp)  # imm = 0x5895422C
	movl	%edi, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB125_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB125_2:                              # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB125_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB125_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB125_6
.LBB125_5:                              # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB125_6:                              # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB125_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB125_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -32(%rbp)
	je	.LBB125_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB125_10:                             # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB125_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB125_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB125_22
.LBB125_13:                             # %if.then22
	movl	$0, -20(%rbp)
.LBB125_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_16 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB125_14 Depth=1
	movl	$0, -24(%rbp)
.LBB125_16:                             # %for.cond24
                                        #   Parent Loop BB125_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB125_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB125_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB125_16 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_16
.LBB125_19:                             # %for.end
                                        #   in Loop: Header=BB125_14 Depth=1
	jmp	.LBB125_20
.LBB125_20:                             # %for.inc35
                                        #   in Loop: Header=BB125_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_14
.LBB125_21:                             # %for.end37
	jmp	.LBB125_22
.LBB125_22:                             # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB125_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB125_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB125_30
.LBB125_25:                             # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB125_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB125_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB125_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB125_29:                             # %if.end59
	jmp	.LBB125_30
.LBB125_30:                             # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB125_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB125_32:                             # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$1486176812, -28(%rbp)  # imm = 0x5895422C
	jne	.LBB125_34
.LBB125_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB125_34:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB125_33
.Lfunc_end125:
	.size	write_one_macroblock.84, .Lfunc_end125-write_one_macroblock.84
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.85 # -- Begin function writeLumaCoeff8x8_CABAC.85
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.85,@function
writeLumaCoeff8x8_CABAC.85:             # @writeLumaCoeff8x8_CABAC.85
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$592078732, -60(%rbp)   # imm = 0x234A678C
	movl	%edi, -28(%rbp)
	movl	%esi, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -56(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-56(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -72(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -80(%rbp)
	movq	-56(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -104(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -96(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -88(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB126_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB126_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB126_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB126_3:                              # %land.end
                                        #   in Loop: Header=BB126_1 Depth=1
	testb	$1, %al
	jne	.LBB126_4
	jmp	.LBB126_12
.LBB126_4:                              # %for.body
                                        #   in Loop: Header=BB126_1 Depth=1
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB126_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB126_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB126_7
.LBB126_6:                              # %cond.false
                                        #   in Loop: Header=BB126_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB126_7:                              # %cond.end
                                        #   in Loop: Header=BB126_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB126_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB126_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB126_10
.LBB126_9:                              # %if.else
                                        #   in Loop: Header=BB126_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
.LBB126_10:                             # %if.end
                                        #   in Loop: Header=BB126_1 Depth=1
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB126_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB126_1
.LBB126_12:                             # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$592078732, -60(%rbp)   # imm = 0x234A678C
	jne	.LBB126_14
.LBB126_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB126_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB126_13
.Lfunc_end126:
	.size	writeLumaCoeff8x8_CABAC.85, .Lfunc_end126-writeLumaCoeff8x8_CABAC.85
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe.86  # -- Begin function SetModesAndRefframe.86
	.p2align	4, 0x90
	.type	SetModesAndRefframe.86,@function
SetModesAndRefframe.86:                 # @SetModesAndRefframe.86
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$896618601, -60(%rbp)   # imm = 0x35715069
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -40(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -12(%rbp)
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movl	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB127_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB127_12
.LBB127_2:                              # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB127_4
# %bb.3:                                # %if.then18
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB127_11
.LBB127_4:                              # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB127_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB127_10
.LBB127_6:                              # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB127_8
# %bb.7:                                # %if.then45
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB127_9
.LBB127_8:                              # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB127_9:                              # %if.end
	jmp	.LBB127_10
.LBB127_10:                             # %if.end86
	jmp	.LBB127_11
.LBB127_11:                             # %if.end87
	jmp	.LBB127_12
.LBB127_12:                             # %if.end88
	cmpl	$896618601, -60(%rbp)   # imm = 0x35715069
	jne	.LBB127_14
.LBB127_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB127_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB127_13
.Lfunc_end127:
	.size	SetModesAndRefframe.86, .Lfunc_end127-SetModesAndRefframe.86
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.87    # -- Begin function TransformDecision.87
	.p2align	4, 0x90
	.type	TransformDecision.87,@function
TransformDecision.87:                   # @TransformDecision.87
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$270569564, -88(%rbp)   # imm = 0x1020905C
	movl	%edi, -44(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -36(%rbp)
	cmpl	$-1, -44(%rbp)
	jne	.LBB128_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -64(%rbp)
	jmp	.LBB128_3
.LBB128_2:                              # %if.else
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
.LBB128_3:                              # %if.end
	jmp	.LBB128_4
.LBB128_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_6 Depth 2
                                        #       Child Loop BB128_8 Depth 3
                                        #         Child Loop BB128_10 Depth 4
                                        #           Child Loop BB128_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB128_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB128_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-52(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	leaq	-84(%rbp), %rcx
	leaq	-54(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -68(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -60(%rbp)
	movl	$0, -40(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB128_6:                              # %for.cond3
                                        #   Parent Loop BB128_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB128_8 Depth 3
                                        #         Child Loop BB128_10 Depth 4
                                        #           Child Loop BB128_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB128_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB128_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB128_8:                              # %for.cond8
                                        #   Parent Loop BB128_4 Depth=1
                                        #     Parent Loop BB128_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB128_10 Depth 4
                                        #           Child Loop BB128_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB128_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB128_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-16(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-52(%rbp), %edx
	movl	-72(%rbp), %ecx
	movl	-84(%rbp), %r8d
	movw	-54(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-50(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-40(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -28(%rbp)
.LBB128_10:                             # %for.cond13
                                        #   Parent Loop BB128_4 Depth=1
                                        #     Parent Loop BB128_6 Depth=2
                                        #       Parent Loop BB128_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB128_12 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB128_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB128_10 Depth=4
	movl	$0, -24(%rbp)
.LBB128_12:                             # %for.cond17
                                        #   Parent Loop BB128_4 Depth=1
                                        #     Parent Loop BB128_6 Depth=2
                                        #       Parent Loop BB128_8 Depth=3
                                        #         Parent Loop BB128_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB128_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB128_12 Depth=5
	movq	imgY_org, %rax
	movl	-76(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-40(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB128_12 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB128_12
.LBB128_15:                             # %for.end
                                        #   in Loop: Header=BB128_10 Depth=4
	jmp	.LBB128_16
.LBB128_16:                             # %for.inc38
                                        #   in Loop: Header=BB128_10 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB128_10
.LBB128_17:                             # %for.end40
                                        #   in Loop: Header=BB128_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB128_8 Depth=3
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB128_8
.LBB128_19:                             # %for.end44
                                        #   in Loop: Header=BB128_6 Depth=2
	jmp	.LBB128_20
.LBB128_20:                             # %for.inc45
                                        #   in Loop: Header=BB128_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB128_6
.LBB128_21:                             # %for.end47
                                        #   in Loop: Header=BB128_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB128_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB128_4
.LBB128_23:                             # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB128_25
# %bb.24:                               # %if.then56
	movl	$1, -48(%rbp)
	jmp	.LBB128_28
.LBB128_25:                             # %if.else57
	movl	-32(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB128_27
# %bb.26:                               # %if.then60
	movl	$1, -48(%rbp)
	jmp	.LBB128_28
.LBB128_27:                             # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-32(%rbp), %eax
	addl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -48(%rbp)
.LBB128_28:                             # %return
	movl	-48(%rbp), %ebx
	cmpl	$270569564, -88(%rbp)   # imm = 0x1020905C
	jne	.LBB128_30
.LBB128_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB128_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB128_29
.Lfunc_end128:
	.size	TransformDecision.87, .Lfunc_end128-TransformDecision.87
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.88  # -- Begin function ChromaPrediction4x4.88
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.88,@function
ChromaPrediction4x4.88:                 # @ChromaPrediction4x4.88
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$607183698, -72(%rbp)   # imm = 0x2430E352
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -52(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB129_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB129_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB129_6
.LBB129_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB129_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB129_5:                              # %land.end
.LBB129_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB129_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB129_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB129_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -20(%rbp)
	jne	.LBB129_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -56(%rbp)
	jne	.LBB129_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -52(%rbp)
	jne	.LBB129_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB129_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB129_15
.LBB129_14:                             # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB129_15:                             # %cond.end
	movq	%rax, -64(%rbp)
.LBB129_16:                             # %if.end
	cmpl	$-1, -20(%rbp)
	jne	.LBB129_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB129_87
.LBB129_18:                             # %if.end30
	cmpl	$0, -20(%rbp)
	je	.LBB129_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -20(%rbp)
	jne	.LBB129_21
.LBB129_20:                             # %if.then36
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB129_21:                             # %if.end37
	cmpl	$1, -20(%rbp)
	je	.LBB129_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -20(%rbp)
	jne	.LBB129_24
.LBB129_23:                             # %if.then43
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB129_24:                             # %if.end44
	cmpl	$0, -68(%rbp)
	je	.LBB129_56
# %bb.25:                               # %if.then46
	cmpl	$2, -20(%rbp)
	jne	.LBB129_35
# %bb.26:                               # %if.then49
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB129_27:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_29 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB129_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB129_27 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB129_29:                             # %for.cond52
                                        #   Parent Loop BB129_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB129_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB129_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB129_29 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_29
.LBB129_32:                             # %for.end
                                        #   in Loop: Header=BB129_27 Depth=1
	jmp	.LBB129_33
.LBB129_33:                             # %for.inc99
                                        #   in Loop: Header=BB129_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_27
.LBB129_34:                             # %for.end101
	jmp	.LBB129_55
.LBB129_35:                             # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB129_45
# %bb.36:                               # %if.then104
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB129_37:                             # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_39 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB129_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB129_37 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB129_39:                             # %for.cond109
                                        #   Parent Loop BB129_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB129_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB129_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB129_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_39
.LBB129_42:                             # %for.end139
                                        #   in Loop: Header=BB129_37 Depth=1
	jmp	.LBB129_43
.LBB129_43:                             # %for.inc140
                                        #   in Loop: Header=BB129_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_37
.LBB129_44:                             # %for.end142
	jmp	.LBB129_54
.LBB129_45:                             # %if.else143
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB129_46:                             # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_48 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB129_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB129_46 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB129_48:                             # %for.cond148
                                        #   Parent Loop BB129_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB129_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB129_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB129_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_48
.LBB129_51:                             # %for.end178
                                        #   in Loop: Header=BB129_46 Depth=1
	jmp	.LBB129_52
.LBB129_52:                             # %for.inc179
                                        #   in Loop: Header=BB129_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_46
.LBB129_53:                             # %for.end181
	jmp	.LBB129_54
.LBB129_54:                             # %if.end182
	jmp	.LBB129_55
.LBB129_55:                             # %if.end183
	jmp	.LBB129_87
.LBB129_56:                             # %if.else184
	cmpl	$2, -20(%rbp)
	jne	.LBB129_66
# %bb.57:                               # %if.then187
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB129_58:                             # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_60 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB129_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB129_58 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB129_60:                             # %for.cond192
                                        #   Parent Loop BB129_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB129_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB129_60 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB129_60 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_60
.LBB129_63:                             # %for.end208
                                        #   in Loop: Header=BB129_58 Depth=1
	jmp	.LBB129_64
.LBB129_64:                             # %for.inc209
                                        #   in Loop: Header=BB129_58 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_58
.LBB129_65:                             # %for.end211
	jmp	.LBB129_86
.LBB129_66:                             # %if.else212
	cmpl	$0, -20(%rbp)
	jne	.LBB129_76
# %bb.67:                               # %if.then215
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB129_68:                             # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_70 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB129_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB129_68 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB129_70:                             # %for.cond220
                                        #   Parent Loop BB129_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB129_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB129_70 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB129_70 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_70
.LBB129_73:                             # %for.end233
                                        #   in Loop: Header=BB129_68 Depth=1
	jmp	.LBB129_74
.LBB129_74:                             # %for.inc234
                                        #   in Loop: Header=BB129_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_68
.LBB129_75:                             # %for.end236
	jmp	.LBB129_85
.LBB129_76:                             # %if.else237
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB129_77:                             # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_79 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB129_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB129_77 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB129_79:                             # %for.cond242
                                        #   Parent Loop BB129_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB129_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB129_79 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB129_79 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_79
.LBB129_82:                             # %for.end255
                                        #   in Loop: Header=BB129_77 Depth=1
	jmp	.LBB129_83
.LBB129_83:                             # %for.inc256
                                        #   in Loop: Header=BB129_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_77
.LBB129_84:                             # %for.end258
	jmp	.LBB129_85
.LBB129_85:                             # %if.end259
	jmp	.LBB129_86
.LBB129_86:                             # %if.end260
	jmp	.LBB129_87
.LBB129_87:                             # %if.end261
	cmpl	$607183698, -72(%rbp)   # imm = 0x2430E352
	jne	.LBB129_89
.LBB129_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB129_89:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB129_88
.Lfunc_end129:
	.size	ChromaPrediction4x4.88, .Lfunc_end129-ChromaPrediction4x4.88
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding.89 # -- Begin function ChromaResidualCoding.89
	.p2align	4, 0x90
	.type	ChromaResidualCoding.89,@function
ChromaResidualCoding.89:                # @ChromaResidualCoding.89
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$849289821, -76(%rbp)   # imm = 0x329F225D
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB130_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB130_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB130_3:                              # %lor.end
.LBB130_4:                              # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -72(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB130_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB130_7 Depth 2
                                        #       Child Loop BB130_9 Depth 3
                                        #     Child Loop BB130_16 Depth 2
                                        #       Child Loop BB130_18 Depth 3
                                        #     Child Loop BB130_33 Depth 2
                                        #       Child Loop BB130_35 Depth 3
                                        #     Child Loop BB130_43 Depth 2
                                        #       Child Loop BB130_45 Depth 3
                                        #     Child Loop BB130_58 Depth 2
                                        #       Child Loop BB130_60 Depth 3
                                        #     Child Loop BB130_87 Depth 2
                                        #       Child Loop BB130_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB130_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB130_5 Depth=1
	movl	$0, -64(%rbp)
	movl	$0, -16(%rbp)
.LBB130_7:                              # %for.cond5
                                        #   Parent Loop BB130_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB130_9 Depth 3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB130_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB130_7 Depth=2
	movl	$0, -20(%rbp)
.LBB130_9:                              # %for.cond8
                                        #   Parent Loop BB130_5 Depth=1
                                        #     Parent Loop BB130_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB130_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB130_9 Depth=3
	movslq	-72(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %edi
	leaq	-52(%rbp), %rsi
	leaq	-68(%rbp), %rdx
	leaq	-80(%rbp), %rcx
	leaq	-54(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	movswl	-52(%rbp), %ecx
	movl	-68(%rbp), %r8d
	movl	-80(%rbp), %r9d
	movw	-54(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-50(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB130_9 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB130_9
.LBB130_12:                             # %for.end
                                        #   in Loop: Header=BB130_7 Depth=2
	jmp	.LBB130_13
.LBB130_13:                             # %for.inc18
                                        #   in Loop: Header=BB130_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB130_7
.LBB130_14:                             # %for.end20
                                        #   in Loop: Header=BB130_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB130_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB130_5 Depth=1
	movl	$0, -8(%rbp)
.LBB130_16:                             # %for.cond21
                                        #   Parent Loop BB130_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB130_18 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB130_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB130_16 Depth=2
	movl	$0, -4(%rbp)
.LBB130_18:                             # %for.cond26
                                        #   Parent Loop BB130_5 Depth=1
                                        #     Parent Loop BB130_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB130_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB130_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB130_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB130_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB130_25
.LBB130_21:                             # %if.else
                                        #   in Loop: Header=BB130_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB130_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB130_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB130_24
.LBB130_23:                             # %if.else52
                                        #   in Loop: Header=BB130_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB130_24:                             # %if.end
                                        #   in Loop: Header=BB130_18 Depth=3
	jmp	.LBB130_25
.LBB130_25:                             # %if.end57
                                        #   in Loop: Header=BB130_18 Depth=3
	jmp	.LBB130_26
.LBB130_26:                             # %for.inc58
                                        #   in Loop: Header=BB130_18 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB130_18
.LBB130_27:                             # %for.end59
                                        #   in Loop: Header=BB130_16 Depth=2
	jmp	.LBB130_28
.LBB130_28:                             # %for.inc60
                                        #   in Loop: Header=BB130_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB130_16
.LBB130_29:                             # %for.end62
                                        #   in Loop: Header=BB130_5 Depth=1
	jmp	.LBB130_74
.LBB130_30:                             # %if.else63
                                        #   in Loop: Header=BB130_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB130_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB130_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB130_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB130_5 Depth=1
	movl	$0, -8(%rbp)
.LBB130_33:                             # %for.cond69
                                        #   Parent Loop BB130_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB130_35 Depth 3
	cmpl	$8, -8(%rbp)
	jge	.LBB130_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB130_33 Depth=2
	movl	$0, -4(%rbp)
.LBB130_35:                             # %for.cond73
                                        #   Parent Loop BB130_5 Depth=1
                                        #     Parent Loop BB130_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -4(%rbp)
	jge	.LBB130_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB130_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB130_35 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB130_35
.LBB130_38:                             # %for.end83
                                        #   in Loop: Header=BB130_33 Depth=2
	jmp	.LBB130_39
.LBB130_39:                             # %for.inc84
                                        #   in Loop: Header=BB130_33 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB130_33
.LBB130_40:                             # %for.end86
                                        #   in Loop: Header=BB130_5 Depth=1
	jmp	.LBB130_73
.LBB130_41:                             # %if.else87
                                        #   in Loop: Header=BB130_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB130_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB130_5 Depth=1
	movl	$0, -8(%rbp)
.LBB130_43:                             # %for.cond90
                                        #   Parent Loop BB130_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB130_45 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB130_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB130_43 Depth=2
	movl	$0, -4(%rbp)
.LBB130_45:                             # %for.cond95
                                        #   Parent Loop BB130_5 Depth=1
                                        #     Parent Loop BB130_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB130_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB130_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB130_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB130_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB130_52
.LBB130_48:                             # %if.else119
                                        #   in Loop: Header=BB130_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB130_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB130_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB130_51
.LBB130_50:                             # %if.else127
                                        #   in Loop: Header=BB130_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB130_51:                             # %if.end132
                                        #   in Loop: Header=BB130_45 Depth=3
	jmp	.LBB130_52
.LBB130_52:                             # %if.end133
                                        #   in Loop: Header=BB130_45 Depth=3
	jmp	.LBB130_53
.LBB130_53:                             # %for.inc134
                                        #   in Loop: Header=BB130_45 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB130_45
.LBB130_54:                             # %for.end136
                                        #   in Loop: Header=BB130_43 Depth=2
	jmp	.LBB130_55
.LBB130_55:                             # %for.inc137
                                        #   in Loop: Header=BB130_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB130_43
.LBB130_56:                             # %for.end139
                                        #   in Loop: Header=BB130_5 Depth=1
	jmp	.LBB130_72
.LBB130_57:                             # %if.else140
                                        #   in Loop: Header=BB130_5 Depth=1
	movl	$0, -8(%rbp)
.LBB130_58:                             # %for.cond141
                                        #   Parent Loop BB130_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB130_60 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB130_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB130_58 Depth=2
	movl	$0, -4(%rbp)
.LBB130_60:                             # %for.cond146
                                        #   Parent Loop BB130_5 Depth=1
                                        #     Parent Loop BB130_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB130_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB130_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB130_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB130_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB130_67
.LBB130_63:                             # %if.else175
                                        #   in Loop: Header=BB130_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB130_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB130_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB130_66
.LBB130_65:                             # %if.else188
                                        #   in Loop: Header=BB130_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB130_66:                             # %if.end198
                                        #   in Loop: Header=BB130_60 Depth=3
	jmp	.LBB130_67
.LBB130_67:                             # %if.end199
                                        #   in Loop: Header=BB130_60 Depth=3
	jmp	.LBB130_68
.LBB130_68:                             # %for.inc200
                                        #   in Loop: Header=BB130_60 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB130_60
.LBB130_69:                             # %for.end202
                                        #   in Loop: Header=BB130_58 Depth=2
	jmp	.LBB130_70
.LBB130_70:                             # %for.inc203
                                        #   in Loop: Header=BB130_58 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB130_58
.LBB130_71:                             # %for.end205
                                        #   in Loop: Header=BB130_5 Depth=1
	jmp	.LBB130_72
.LBB130_72:                             # %if.end206
                                        #   in Loop: Header=BB130_5 Depth=1
	jmp	.LBB130_73
.LBB130_73:                             # %if.end207
                                        #   in Loop: Header=BB130_5 Depth=1
	jmp	.LBB130_74
.LBB130_74:                             # %if.end208
                                        #   in Loop: Header=BB130_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB130_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB130_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB130_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB130_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB130_100
.LBB130_77:                             # %if.else215
                                        #   in Loop: Header=BB130_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB130_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB130_5 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB130_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB130_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB130_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB130_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB130_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB130_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB130_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB130_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB130_84
.LBB130_83:                             # %if.then247
                                        #   in Loop: Header=BB130_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB130_85
.LBB130_84:                             # %if.else249
                                        #   in Loop: Header=BB130_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB130_85:                             # %if.end251
                                        #   in Loop: Header=BB130_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB130_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB130_5 Depth=1
	movl	$0, -8(%rbp)
.LBB130_87:                             # %for.cond255
                                        #   Parent Loop BB130_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB130_89 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB130_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB130_87 Depth=2
	movl	$0, -4(%rbp)
.LBB130_89:                             # %for.cond260
                                        #   Parent Loop BB130_5 Depth=1
                                        #     Parent Loop BB130_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB130_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB130_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB130_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB130_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB130_93
.LBB130_92:                             # %if.else277
                                        #   in Loop: Header=BB130_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB130_93:                             # %if.end287
                                        #   in Loop: Header=BB130_89 Depth=3
	jmp	.LBB130_94
.LBB130_94:                             # %for.inc288
                                        #   in Loop: Header=BB130_89 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB130_89
.LBB130_95:                             # %for.end290
                                        #   in Loop: Header=BB130_87 Depth=2
	jmp	.LBB130_96
.LBB130_96:                             # %for.inc291
                                        #   in Loop: Header=BB130_87 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB130_87
.LBB130_97:                             # %for.end293
                                        #   in Loop: Header=BB130_5 Depth=1
	jmp	.LBB130_98
.LBB130_98:                             # %if.end294
                                        #   in Loop: Header=BB130_5 Depth=1
	jmp	.LBB130_99
.LBB130_99:                             # %if.end295
                                        #   in Loop: Header=BB130_5 Depth=1
	jmp	.LBB130_100
.LBB130_100:                            # %if.end296
                                        #   in Loop: Header=BB130_5 Depth=1
	jmp	.LBB130_101
.LBB130_101:                            # %for.inc297
                                        #   in Loop: Header=BB130_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB130_5
.LBB130_102:                            # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB130_139
# %bb.103:                              # %if.then307
	movl	$0, -8(%rbp)
.LBB130_104:                            # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB130_106 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB130_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB130_104 Depth=1
	movl	$0, -4(%rbp)
.LBB130_106:                            # %for.cond312
                                        #   Parent Loop BB130_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB130_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB130_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -60(%rbp)
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-60(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB130_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB130_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB130_110
.LBB130_109:                            # %cond.false
                                        #   in Loop: Header=BB130_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB130_110:                            # %cond.end
                                        #   in Loop: Header=BB130_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB130_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB130_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB130_116
.LBB130_112:                            # %cond.false358
                                        #   in Loop: Header=BB130_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB130_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB130_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB130_115
.LBB130_114:                            # %cond.false367
                                        #   in Loop: Header=BB130_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB130_115:                            # %cond.end373
                                        #   in Loop: Header=BB130_106 Depth=2
.LBB130_116:                            # %cond.end375
                                        #   in Loop: Header=BB130_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-36(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB130_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB130_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB130_119
.LBB130_118:                            # %cond.false394
                                        #   in Loop: Header=BB130_106 Depth=2
	movl	-36(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB130_119:                            # %cond.end400
                                        #   in Loop: Header=BB130_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB130_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB130_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB130_125
.LBB130_121:                            # %cond.false406
                                        #   in Loop: Header=BB130_106 Depth=2
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB130_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB130_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB130_124
.LBB130_123:                            # %cond.false415
                                        #   in Loop: Header=BB130_106 Depth=2
	movl	-36(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB130_124:                            # %cond.end421
                                        #   in Loop: Header=BB130_106 Depth=2
.LBB130_125:                            # %cond.end423
                                        #   in Loop: Header=BB130_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-28(%rbp), %esi
	movslq	-4(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-8(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB130_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB130_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB130_128
.LBB130_127:                            # %cond.false443
                                        #   in Loop: Header=BB130_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-28(%rbp), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB130_128:                            # %cond.end449
                                        #   in Loop: Header=BB130_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB130_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB130_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB130_134
.LBB130_130:                            # %cond.false455
                                        #   in Loop: Header=BB130_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-28(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB130_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB130_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB130_133
.LBB130_132:                            # %cond.false464
                                        #   in Loop: Header=BB130_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-28(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB130_133:                            # %cond.end470
                                        #   in Loop: Header=BB130_106 Depth=2
.LBB130_134:                            # %cond.end472
                                        #   in Loop: Header=BB130_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB130_106 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB130_106
.LBB130_136:                            # %for.end487
                                        #   in Loop: Header=BB130_104 Depth=1
	jmp	.LBB130_137
.LBB130_137:                            # %for.inc488
                                        #   in Loop: Header=BB130_104 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB130_104
.LBB130_138:                            # %for.end490
	jmp	.LBB130_139
.LBB130_139:                            # %if.end491
	cmpl	$849289821, -76(%rbp)   # imm = 0x329F225D
	jne	.LBB130_141
.LBB130_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB130_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB130_140
.Lfunc_end130:
	.size	ChromaResidualCoding.89, .Lfunc_end130-ChromaResidualCoding.89
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value.90         # -- Begin function B8Mode2Value.90
	.p2align	4, 0x90
	.type	B8Mode2Value.90,@function
B8Mode2Value.90:                        # @B8Mode2Value.90
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$663265767, -24(%rbp)   # imm = 0x2788A1E7
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB131_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB131_3
.LBB131_2:                              # %if.else
	movslq	-12(%rbp), %rax
	movl	B8Mode2Value.b8start(,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	B8Mode2Value.b8inc(,%rcx,4), %ecx
	imull	-20(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
.LBB131_3:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$663265767, -24(%rbp)   # imm = 0x2788A1E7
	jne	.LBB131_5
.LBB131_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB131_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB131_4
.Lfunc_end131:
	.size	B8Mode2Value.90, .Lfunc_end131-B8Mode2Value.90
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.91              # -- Begin function ZeroRef.91
	.p2align	4, 0x90
	.type	ZeroRef.91,@function
ZeroRef.91:                             # @ZeroRef.91
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1480066286, -24(%rbp)  # imm = 0x583804EE
	movq	%rdi, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB132_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB132_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB132_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB132_1 Depth=1
	movl	$0, -16(%rbp)
.LBB132_3:                              # %for.cond1
                                        #   Parent Loop BB132_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB132_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB132_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB132_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB132_11
.LBB132_6:                              # %if.end
                                        #   in Loop: Header=BB132_3 Depth=2
	jmp	.LBB132_7
.LBB132_7:                              # %for.inc
                                        #   in Loop: Header=BB132_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB132_3
.LBB132_8:                              # %for.end
                                        #   in Loop: Header=BB132_1 Depth=1
	jmp	.LBB132_9
.LBB132_9:                              # %for.inc10
                                        #   in Loop: Header=BB132_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB132_1
.LBB132_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB132_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1480066286, -24(%rbp)  # imm = 0x583804EE
	jne	.LBB132_13
.LBB132_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB132_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB132_12
.Lfunc_end132:
	.size	ZeroRef.91, .Lfunc_end132-ZeroRef.91
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit.92 # -- Begin function write_terminating_bit.92
	.p2align	4, 0x90
	.type	write_terminating_bit.92,@function
write_terminating_bit.92:               # @write_terminating_bit.92
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1713265577, -8(%rbp)   # imm = 0x661E5BA9
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$1713265577, -8(%rbp)   # imm = 0x661E5BA9
	jne	.LBB133_2
.LBB133_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB133_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB133_1
.Lfunc_end133:
	.size	write_terminating_bit.92, .Lfunc_end133-write_terminating_bit.92
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.93          # -- Begin function predict_nnz.93
	.p2align	4, 0x90
	.type	predict_nnz.93,@function
predict_nnz.93:                         # @predict_nnz.93
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$459785711, -56(%rbp)   # imm = 0x1B67C5EF
	movl	%edi, -44(%rbp)
	movl	%esi, -48(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %edi
	movl	-44(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB134_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB134_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB134_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB134_4:                              # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB134_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB134_6:                              # %if.end14
	movl	-52(%rbp), %edi
	movl	-44(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB134_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB134_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB134_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB134_10:                             # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB134_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB134_12:                             # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB134_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB134_14:                             # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$459785711, -56(%rbp)   # imm = 0x1B67C5EF
	jne	.LBB134_16
.LBB134_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB134_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB134_15
.Lfunc_end134:
	.size	predict_nnz.93, .Lfunc_end134-predict_nnz.93
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock.94 # -- Begin function proceed2nextMacroblock.94
	.p2align	4, 0x90
	.type	proceed2nextMacroblock.94,@function
proceed2nextMacroblock.94:              # @proceed2nextMacroblock.94
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$849460950, -28(%rbp)   # imm = 0x32A1BED6
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1348(%rcx,%rdx,4), %eax
	movl	%eax, 1348(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1408(%rcx,%rdx,4), %eax
	movl	%eax, 1408(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1388(%rcx,%rdx,4), %eax
	movl	%eax, 1388(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1428(%rcx,%rdx,4), %eax
	movl	%eax, 1428(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	28(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1448(%rcx,%rdx,4), %eax
	movl	%eax, 1448(%rcx,%rdx,4)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB135_3
# %bb.1:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB135_3
# %bb.2:                                # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB135_9
.LBB135_3:                              # %if.then
	movq	stats, %rax
	movq	-8(%rbp), %rcx
	movslq	524(%rcx), %rcx
	movl	672(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 672(%rax,%rcx,4)
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB135_8
# %bb.4:                                # %if.then32
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB135_6
# %bb.5:                                # %if.then33
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB135_7
.LBB135_6:                              # %if.else
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB135_7:                              # %if.end
	jmp	.LBB135_8
.LBB135_8:                              # %if.end48
	jmp	.LBB135_9
.LBB135_9:                              # %if.end49
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addq	$1028, %rcx             # imm = 0x404
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movq	-8(%rbp), %rdx
	movslq	72(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB135_35
# %bb.10:                               # %if.then67
	movq	-8(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB135_26
# %bb.11:                               # %if.then70
	movl	$0, -12(%rbp)
.LBB135_12:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB135_25
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB135_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jle	.LBB135_15
# %bb.14:                               # %if.then75
                                        #   in Loop: Header=BB135_12 Depth=1
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	472(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB135_16
.LBB135_15:                             # %if.else86
                                        #   in Loop: Header=BB135_12 Depth=1
	movq	stats, %rax
	addq	$32, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	572(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB135_16:                             # %if.end94
                                        #   in Loop: Header=BB135_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	jne	.LBB135_23
# %bb.17:                               # %if.then99
                                        #   in Loop: Header=BB135_12 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB135_19
# %bb.18:                               # %land.lhs.true
                                        #   in Loop: Header=BB135_12 Depth=1
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB135_20
.LBB135_19:                             # %lor.lhs.false105
                                        #   in Loop: Header=BB135_12 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB135_21
.LBB135_20:                             # %if.then107
                                        #   in Loop: Header=BB135_12 Depth=1
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB135_22
.LBB135_21:                             # %if.else114
                                        #   in Loop: Header=BB135_12 Depth=1
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB135_22:                             # %if.end121
                                        #   in Loop: Header=BB135_12 Depth=1
	jmp	.LBB135_23
.LBB135_23:                             # %if.end122
                                        #   in Loop: Header=BB135_12 Depth=1
	jmp	.LBB135_24
.LBB135_24:                             # %for.inc
                                        #   in Loop: Header=BB135_12 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB135_12
.LBB135_25:                             # %for.end
	jmp	.LBB135_34
.LBB135_26:                             # %if.else124
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jl	.LBB135_33
# %bb.27:                               # %land.lhs.true127
	movq	-8(%rbp), %rax
	cmpl	$3, 72(%rax)
	jg	.LBB135_33
# %bb.28:                               # %land.lhs.true130
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB135_33
# %bb.29:                               # %if.then134
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB135_31
# %bb.30:                               # %if.then137
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB135_32
.LBB135_31:                             # %if.else146
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB135_32:                             # %if.end155
	jmp	.LBB135_33
.LBB135_33:                             # %if.end156
	jmp	.LBB135_34
.LBB135_34:                             # %if.end157
	jmp	.LBB135_35
.LBB135_35:                             # %if.end158
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB135_37
# %bb.36:                               # %lor.lhs.false161
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB135_38
.LBB135_37:                             # %if.then164
	movq	stats, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
.LBB135_38:                             # %if.end167
	cmpl	$849460950, -28(%rbp)   # imm = 0x32A1BED6
	jne	.LBB135_40
.LBB135_39:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB135_40:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB135_39
.Lfunc_end135:
	.size	proceed2nextMacroblock.94, .Lfunc_end135-proceed2nextMacroblock.94
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.95   # -- Begin function LumaResidualCoding.95
	.p2align	4, 0x90
	.type	LumaResidualCoding.95,@function
LumaResidualCoding.95:                  # @LumaResidualCoding.95
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$407361571, -36(%rbp)   # imm = 0x1847D823
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB136_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB136_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB136_1 Depth=1
	movl	-12(%rbp), %edi
	leaq	-22(%rbp), %rsi
	leaq	-48(%rbp), %rdx
	leaq	-52(%rbp), %rcx
	leaq	-20(%rbp), %r8
	leaq	-18(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-12(%rbp), %edx
	movw	-22(%rbp), %ax
	movl	-48(%rbp), %r8d
	movl	-52(%rbp), %r9d
	movw	-20(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-18(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB136_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB136_1
.LBB136_4:                              # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB136_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB136_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB136_33
.LBB136_7:                              # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -8(%rbp)
.LBB136_8:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB136_10 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB136_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB136_8 Depth=1
	movl	$0, -4(%rbp)
.LBB136_10:                             # %for.cond13
                                        #   Parent Loop BB136_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB136_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB136_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB136_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB136_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB136_14
.LBB136_13:                             # %if.else
                                        #   in Loop: Header=BB136_10 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB136_14:                             # %if.end
                                        #   in Loop: Header=BB136_10 Depth=2
	jmp	.LBB136_15
.LBB136_15:                             # %for.inc31
                                        #   in Loop: Header=BB136_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_10
.LBB136_16:                             # %for.end33
                                        #   in Loop: Header=BB136_8 Depth=1
	jmp	.LBB136_17
.LBB136_17:                             # %for.inc34
                                        #   in Loop: Header=BB136_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB136_8
.LBB136_18:                             # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB136_32
# %bb.19:                               # %if.then38
	movl	$0, -12(%rbp)
.LBB136_20:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB136_22 Depth 2
                                        #       Child Loop BB136_24 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB136_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB136_20 Depth=1
	movl	-12(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-12(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB136_22:                             # %for.cond45
                                        #   Parent Loop BB136_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB136_24 Depth 3
	cmpl	$8, -8(%rbp)
	jge	.LBB136_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB136_22 Depth=2
	movl	$0, -4(%rbp)
.LBB136_24:                             # %for.cond48
                                        #   Parent Loop BB136_20 Depth=1
                                        #     Parent Loop BB136_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -4(%rbp)
	jge	.LBB136_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB136_24 Depth=3
	movl	-44(%rbp), %edi
	addl	-8(%rbp), %edi
	movl	-40(%rbp), %esi
	addl	-4(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB136_24 Depth=3
	movl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_24
.LBB136_27:                             # %for.end55
                                        #   in Loop: Header=BB136_22 Depth=2
	jmp	.LBB136_28
.LBB136_28:                             # %for.inc56
                                        #   in Loop: Header=BB136_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB136_22
.LBB136_29:                             # %for.end58
                                        #   in Loop: Header=BB136_20 Depth=1
	jmp	.LBB136_30
.LBB136_30:                             # %for.inc59
                                        #   in Loop: Header=BB136_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB136_20
.LBB136_31:                             # %for.end61
	jmp	.LBB136_32
.LBB136_32:                             # %if.end62
	jmp	.LBB136_33
.LBB136_33:                             # %if.end63
	cmpl	$407361571, -36(%rbp)   # imm = 0x1847D823
	jne	.LBB136_35
.LBB136_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB136_35:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB136_34
.Lfunc_end136:
	.size	LumaResidualCoding.95, .Lfunc_end136-LumaResidualCoding.95
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock.96 # -- Begin function proceed2nextMacroblock.96
	.p2align	4, 0x90
	.type	proceed2nextMacroblock.96,@function
proceed2nextMacroblock.96:              # @proceed2nextMacroblock.96
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$752847282, -28(%rbp)   # imm = 0x2CDF89B2
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1348(%rcx,%rdx,4), %eax
	movl	%eax, 1348(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1408(%rcx,%rdx,4), %eax
	movl	%eax, 1408(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1388(%rcx,%rdx,4), %eax
	movl	%eax, 1388(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1428(%rcx,%rdx,4), %eax
	movl	%eax, 1428(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	28(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1448(%rcx,%rdx,4), %eax
	movl	%eax, 1448(%rcx,%rdx,4)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB137_3
# %bb.1:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB137_3
# %bb.2:                                # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB137_9
.LBB137_3:                              # %if.then
	movq	stats, %rax
	movq	-8(%rbp), %rcx
	movslq	524(%rcx), %rcx
	movl	672(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 672(%rax,%rcx,4)
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB137_8
# %bb.4:                                # %if.then32
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB137_6
# %bb.5:                                # %if.then33
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB137_7
.LBB137_6:                              # %if.else
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB137_7:                              # %if.end
	jmp	.LBB137_8
.LBB137_8:                              # %if.end48
	jmp	.LBB137_9
.LBB137_9:                              # %if.end49
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addq	$1028, %rcx             # imm = 0x404
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movq	-8(%rbp), %rdx
	movslq	72(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB137_35
# %bb.10:                               # %if.then67
	movq	-8(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB137_26
# %bb.11:                               # %if.then70
	movl	$0, -12(%rbp)
.LBB137_12:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB137_25
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB137_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jle	.LBB137_15
# %bb.14:                               # %if.then75
                                        #   in Loop: Header=BB137_12 Depth=1
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	472(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB137_16
.LBB137_15:                             # %if.else86
                                        #   in Loop: Header=BB137_12 Depth=1
	movq	stats, %rax
	addq	$32, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	572(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB137_16:                             # %if.end94
                                        #   in Loop: Header=BB137_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	jne	.LBB137_23
# %bb.17:                               # %if.then99
                                        #   in Loop: Header=BB137_12 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB137_19
# %bb.18:                               # %land.lhs.true
                                        #   in Loop: Header=BB137_12 Depth=1
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB137_20
.LBB137_19:                             # %lor.lhs.false105
                                        #   in Loop: Header=BB137_12 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB137_21
.LBB137_20:                             # %if.then107
                                        #   in Loop: Header=BB137_12 Depth=1
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB137_22
.LBB137_21:                             # %if.else114
                                        #   in Loop: Header=BB137_12 Depth=1
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB137_22:                             # %if.end121
                                        #   in Loop: Header=BB137_12 Depth=1
	jmp	.LBB137_23
.LBB137_23:                             # %if.end122
                                        #   in Loop: Header=BB137_12 Depth=1
	jmp	.LBB137_24
.LBB137_24:                             # %for.inc
                                        #   in Loop: Header=BB137_12 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB137_12
.LBB137_25:                             # %for.end
	jmp	.LBB137_34
.LBB137_26:                             # %if.else124
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jl	.LBB137_33
# %bb.27:                               # %land.lhs.true127
	movq	-8(%rbp), %rax
	cmpl	$3, 72(%rax)
	jg	.LBB137_33
# %bb.28:                               # %land.lhs.true130
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB137_33
# %bb.29:                               # %if.then134
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB137_31
# %bb.30:                               # %if.then137
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB137_32
.LBB137_31:                             # %if.else146
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB137_32:                             # %if.end155
	jmp	.LBB137_33
.LBB137_33:                             # %if.end156
	jmp	.LBB137_34
.LBB137_34:                             # %if.end157
	jmp	.LBB137_35
.LBB137_35:                             # %if.end158
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB137_37
# %bb.36:                               # %lor.lhs.false161
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB137_38
.LBB137_37:                             # %if.then164
	movq	stats, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
.LBB137_38:                             # %if.end167
	cmpl	$752847282, -28(%rbp)   # imm = 0x2CDF89B2
	jne	.LBB137_40
.LBB137_39:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB137_40:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB137_39
.Lfunc_end137:
	.size	proceed2nextMacroblock.96, .Lfunc_end137-proceed2nextMacroblock.96
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL.97  # -- Begin function writeMotionInfo2NAL.97
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.97,@function
writeMotionInfo2NAL.97:                 # @writeMotionInfo2NAL.97
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1767676965, -56(%rbp)  # imm = 0x695C9C25
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB138_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB138_3
.LBB138_2:                              # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB138_3:                              # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB138_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB138_6
.LBB138_5:                              # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB138_6:                              # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB138_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB138_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB138_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB138_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB138_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB138_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB138_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB138_39
.LBB138_14:                             # %if.then42
	movl	$0, -16(%rbp)
.LBB138_15:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_17 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB138_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB138_15 Depth=1
	movl	$0, -12(%rbp)
.LBB138_17:                             # %for.cond45
                                        #   Parent Loop BB138_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB138_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB138_17 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB138_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB138_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB138_22
.LBB138_20:                             # %land.lhs.true59
                                        #   in Loop: Header=BB138_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB138_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB138_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB138_22:                             # %if.end
                                        #   in Loop: Header=BB138_17 Depth=2
	jmp	.LBB138_23
.LBB138_23:                             # %for.inc
                                        #   in Loop: Header=BB138_17 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB138_17
.LBB138_24:                             # %for.end
                                        #   in Loop: Header=BB138_15 Depth=1
	jmp	.LBB138_25
.LBB138_25:                             # %for.inc79
                                        #   in Loop: Header=BB138_15 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB138_15
.LBB138_26:                             # %for.end81
	movl	$0, -16(%rbp)
.LBB138_27:                             # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_29 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB138_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB138_27 Depth=1
	movl	$0, -12(%rbp)
.LBB138_29:                             # %for.cond86
                                        #   Parent Loop BB138_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB138_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB138_29 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB138_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB138_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB138_34
.LBB138_32:                             # %land.lhs.true103
                                        #   in Loop: Header=BB138_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB138_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB138_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB138_34:                             # %if.end126
                                        #   in Loop: Header=BB138_29 Depth=2
	jmp	.LBB138_35
.LBB138_35:                             # %for.inc127
                                        #   in Loop: Header=BB138_29 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB138_29
.LBB138_36:                             # %for.end129
                                        #   in Loop: Header=BB138_27 Depth=1
	jmp	.LBB138_37
.LBB138_37:                             # %for.inc130
                                        #   in Loop: Header=BB138_27 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB138_27
.LBB138_38:                             # %for.end132
	jmp	.LBB138_39
.LBB138_39:                             # %if.end133
	jmp	.LBB138_40
.LBB138_40:                             # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB138_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB138_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB138_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB138_57
# %bb.44:                               # %if.then150
	movl	$0, -16(%rbp)
.LBB138_45:                             # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_47 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB138_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB138_45 Depth=1
	movl	$0, -12(%rbp)
.LBB138_47:                             # %for.cond155
                                        #   Parent Loop BB138_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB138_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB138_47 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB138_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB138_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB138_52
.LBB138_50:                             # %land.lhs.true172
                                        #   in Loop: Header=BB138_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB138_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB138_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB138_52:                             # %if.end197
                                        #   in Loop: Header=BB138_47 Depth=2
	jmp	.LBB138_53
.LBB138_53:                             # %for.inc198
                                        #   in Loop: Header=BB138_47 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB138_47
.LBB138_54:                             # %for.end200
                                        #   in Loop: Header=BB138_45 Depth=1
	jmp	.LBB138_55
.LBB138_55:                             # %for.inc201
                                        #   in Loop: Header=BB138_45 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB138_45
.LBB138_56:                             # %for.end203
	jmp	.LBB138_57
.LBB138_57:                             # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB138_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB138_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB138_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB138_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB138_75
# %bb.62:                               # %if.then222
	movl	$0, -16(%rbp)
.LBB138_63:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_65 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB138_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB138_63 Depth=1
	movl	$0, -12(%rbp)
.LBB138_65:                             # %for.cond227
                                        #   Parent Loop BB138_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB138_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB138_65 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB138_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB138_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB138_70
.LBB138_68:                             # %land.lhs.true244
                                        #   in Loop: Header=BB138_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB138_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB138_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB138_70:                             # %if.end269
                                        #   in Loop: Header=BB138_65 Depth=2
	jmp	.LBB138_71
.LBB138_71:                             # %for.inc270
                                        #   in Loop: Header=BB138_65 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB138_65
.LBB138_72:                             # %for.end272
                                        #   in Loop: Header=BB138_63 Depth=1
	jmp	.LBB138_73
.LBB138_73:                             # %for.inc273
                                        #   in Loop: Header=BB138_63 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB138_63
.LBB138_74:                             # %for.end275
	jmp	.LBB138_75
.LBB138_75:                             # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$1767676965, -56(%rbp)  # imm = 0x695C9C25
	jne	.LBB138_77
.LBB138_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB138_77:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB138_76
.Lfunc_end138:
	.size	writeMotionInfo2NAL.97, .Lfunc_end138-writeMotionInfo2NAL.97
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.98          # -- Begin function predict_nnz.98
	.p2align	4, 0x90
	.type	predict_nnz.98,@function
predict_nnz.98:                         # @predict_nnz.98
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$123126209, -56(%rbp)   # imm = 0x756C1C1
	movl	%edi, -48(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	movl	-48(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB139_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB139_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB139_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB139_4:                              # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB139_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB139_6:                              # %if.end14
	movl	-44(%rbp), %edi
	movl	-48(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB139_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB139_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB139_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB139_10:                             # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB139_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB139_12:                             # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB139_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB139_14:                             # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$123126209, -56(%rbp)   # imm = 0x756C1C1
	jne	.LBB139_16
.LBB139_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB139_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB139_15
.Lfunc_end139:
	.size	predict_nnz.98, .Lfunc_end139-predict_nnz.98
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.99  # -- Begin function writeCoeff4x4_CAVLC.99
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.99,@function
writeCoeff4x4_CAVLC.99:                 # @writeCoeff4x4_CAVLC.99
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$423374644, -168(%rbp)  # imm = 0x193C2F34
	movl	%edi, -172(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -52(%rbp)
	movl	%ecx, -68(%rbp)
	movl	$0, -40(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -208(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -88(%rbp)
	movl	$0, -156(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -128(%rbp)
	movq	$0, -136(%rbp)
	movl	-172(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB140_22
# %bb.1:                                # %entry
	movq	.LJTI140_0(,%rax,8), %rax
	jmpq	*%rax
.LBB140_2:                              # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -72(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB140_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB140_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB140_6
.LBB140_5:                              # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB140_7
.LBB140_6:                              # %if.else
	movl	$14, -24(%rbp)
.LBB140_7:                              # %if.end
	jmp	.LBB140_23
.LBB140_8:                              # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -72(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB140_23
.LBB140_9:                              # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -72(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB140_23
.LBB140_10:                             # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -88(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-68(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-68(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB140_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB140_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB140_14
.LBB140_13:                             # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB140_15
.LBB140_14:                             # %if.else66
	movl	$13, -24(%rbp)
.LBB140_15:                             # %if.end67
	jmp	.LBB140_23
.LBB140_16:                             # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -72(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -156(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB140_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB140_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB140_20
.LBB140_19:                             # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB140_21
.LBB140_20:                             # %if.else92
	movl	$15, -24(%rbp)
.LBB140_21:                             # %if.end93
	jmp	.LBB140_23
.LBB140_22:                             # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB140_23:                             # %sw.epilog
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -160(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -108(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB140_24:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -88(%rbp)
	je	.LBB140_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB140_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB140_27
.LBB140_26:                             # %cond.false
                                        #   in Loop: Header=BB140_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB140_27
.LBB140_27:                             # %cond.end
                                        #   in Loop: Header=BB140_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB140_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB140_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB140_29:                             # %land.end
                                        #   in Loop: Header=BB140_24 Depth=1
	testb	$1, %dl
	jne	.LBB140_30
	jmp	.LBB140_41
.LBB140_30:                             # %for.body
                                        #   in Loop: Header=BB140_24 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -92(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB140_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB140_24 Depth=1
	cmpl	$0, -92(%rbp)
	je	.LBB140_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB140_24 Depth=1
	movl	-92(%rbp), %eax
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
.LBB140_33:                             # %if.end110
                                        #   in Loop: Header=BB140_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB140_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB140_24 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-160(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -160(%rbp)
	cmpl	$3, -28(%rbp)
	jle	.LBB140_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB140_24 Depth=1
	movl	$3, -28(%rbp)
.LBB140_36:                             # %if.end117
                                        #   in Loop: Header=BB140_24 Depth=1
	jmp	.LBB140_38
.LBB140_37:                             # %if.else118
                                        #   in Loop: Header=BB140_24 Depth=1
	movl	$0, -28(%rbp)
.LBB140_38:                             # %if.end119
                                        #   in Loop: Header=BB140_24 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
.LBB140_39:                             # %if.end121
                                        #   in Loop: Header=BB140_24 Depth=1
	jmp	.LBB140_40
.LBB140_40:                             # %for.inc
                                        #   in Loop: Header=BB140_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB140_24
.LBB140_41:                             # %for.end
	cmpl	$0, -88(%rbp)
	jne	.LBB140_61
# %bb.42:                               # %if.then124
	cmpl	$0, -156(%rbp)
	jne	.LBB140_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB140_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB140_46
.LBB140_45:                             # %cond.false132
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB140_46:                             # %cond.end136
	movl	%eax, -84(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB140_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB140_49
.LBB140_48:                             # %cond.false142
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB140_49:                             # %cond.end145
	movl	%eax, -96(%rbp)
	movl	-84(%rbp), %edi
	movl	-96(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -112(%rbp)
	jmp	.LBB140_51
.LBB140_50:                             # %if.else148
	movl	-68(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -96(%rbp)
	movl	-84(%rbp), %edi
	movl	-96(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -112(%rbp)
.LBB140_51:                             # %if.end151
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-96(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -112(%rbp)
	jge	.LBB140_53
# %bb.52:                               # %if.then160
	movl	$0, -100(%rbp)
	jmp	.LBB140_60
.LBB140_53:                             # %if.else161
	cmpl	$4, -112(%rbp)
	jge	.LBB140_55
# %bb.54:                               # %if.then163
	movl	$1, -100(%rbp)
	jmp	.LBB140_59
.LBB140_55:                             # %if.else164
	cmpl	$8, -112(%rbp)
	jge	.LBB140_57
# %bb.56:                               # %if.then166
	movl	$2, -100(%rbp)
	jmp	.LBB140_58
.LBB140_57:                             # %if.else167
	movl	$3, -100(%rbp)
.LBB140_58:                             # %if.end168
	jmp	.LBB140_59
.LBB140_59:                             # %if.end169
	jmp	.LBB140_60
.LBB140_60:                             # %if.end170
	jmp	.LBB140_62
.LBB140_61:                             # %if.else171
	movl	$0, -100(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -96(%rbp)
.LBB140_62:                             # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-100(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -88(%rbp)
	jne	.LBB140_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB140_65
.LBB140_64:                             # %if.else177
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB140_65:                             # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -36(%rbp)
	jne	.LBB140_67
# %bb.66:                               # %if.then189
	movl	-40(%rbp), %eax
	movl	%eax, -164(%rbp)
	jmp	.LBB140_122
.LBB140_67:                             # %if.end190
	cmpl	$0, -36(%rbp)
	je	.LBB140_121
# %bb.68:                               # %if.then192
	movl	$0, -104(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB140_69:                             # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-76(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB140_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB140_69 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB140_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB140_72:                             # %if.end202
                                        #   in Loop: Header=BB140_69 Depth=1
	movl	-104(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB140_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB140_69 Depth=1
	movl	-104(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -104(%rbp)
.LBB140_74:                             # %if.end205
                                        #   in Loop: Header=BB140_69 Depth=1
	jmp	.LBB140_75
.LBB140_75:                             # %for.inc206
                                        #   in Loop: Header=BB140_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB140_69
.LBB140_76:                             # %for.end207
	cmpl	$0, -28(%rbp)
	je	.LBB140_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-104(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB140_78:                             # %if.end223
	movl	$1, -140(%rbp)
	cmpl	$3, -36(%rbp)
	jle	.LBB140_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -28(%rbp)
	jne	.LBB140_81
# %bb.80:                               # %if.then226
	movl	$0, -140(%rbp)
.LBB140_81:                             # %if.end227
	cmpl	$10, -36(%rbp)
	jle	.LBB140_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -28(%rbp)
	jge	.LBB140_84
# %bb.83:                               # %if.then231
	movl	$1, -32(%rbp)
	jmp	.LBB140_85
.LBB140_84:                             # %if.else232
	movl	$0, -32(%rbp)
.LBB140_85:                             # %if.end233
	movl	-76(%rbp), %eax
	subl	-28(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB140_86:                             # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB140_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB140_86 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -140(%rbp)
	je	.LBB140_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB140_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB140_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB140_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB140_91
.LBB140_90:                             # %if.else249
                                        #   in Loop: Header=BB140_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB140_91:                             # %if.end252
                                        #   in Loop: Header=BB140_86 Depth=1
	movl	$0, -140(%rbp)
.LBB140_92:                             # %if.end253
                                        #   in Loop: Header=BB140_86 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB140_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB140_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB140_95
.LBB140_94:                             # %if.else257
                                        #   in Loop: Header=BB140_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-32(%rbp), %esi
	movq	-120(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB140_95:                             # %if.end259
                                        #   in Loop: Header=BB140_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-32(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB140_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB140_86 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
.LBB140_97:                             # %if.end266
                                        #   in Loop: Header=BB140_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-76(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB140_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB140_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB140_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB140_86 Depth=1
	movl	$2, -32(%rbp)
.LBB140_100:                            # %if.end273
                                        #   in Loop: Header=BB140_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB140_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB140_86
.LBB140_102:                            # %for.end285
	movl	-36(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB140_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -88(%rbp)
	jne	.LBB140_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB140_106
.LBB140_105:                            # %if.else295
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB140_106:                            # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB140_107:                            # %if.end307
	movl	-108(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB140_108:                            # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB140_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB140_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB140_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB140_108 Depth=1
	cmpl	$0, -80(%rbp)
	jne	.LBB140_112
.LBB140_111:                            # %if.then318
	jmp	.LBB140_120
.LBB140_112:                            # %if.end319
                                        #   in Loop: Header=BB140_108 Depth=1
	cmpl	$1, -144(%rbp)
	jle	.LBB140_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB140_108 Depth=1
	cmpl	$0, -80(%rbp)
	je	.LBB140_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB140_108 Depth=1
	movl	-80(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$6, -32(%rbp)
	jle	.LBB140_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB140_108 Depth=1
	movl	$6, -32(%rbp)
.LBB140_116:                            # %if.end327
                                        #   in Loop: Header=BB140_108 Depth=1
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-92(%rbp), %eax
	movl	-80(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -80(%rbp)
	movl	-144(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -144(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB140_117:                            # %if.end341
                                        #   in Loop: Header=BB140_108 Depth=1
	jmp	.LBB140_118
.LBB140_118:                            # %for.inc342
                                        #   in Loop: Header=BB140_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB140_108
.LBB140_119:                            # %for.end344.loopexit
	jmp	.LBB140_120
.LBB140_120:                            # %for.end344
	jmp	.LBB140_121
.LBB140_121:                            # %if.end345
	movl	-40(%rbp), %eax
	movl	%eax, -164(%rbp)
.LBB140_122:                            # %return
	movl	-164(%rbp), %ebx
	cmpl	$423374644, -168(%rbp)  # imm = 0x193C2F34
	jne	.LBB140_124
.LBB140_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB140_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB140_123
.Lfunc_end140:
	.size	writeCoeff4x4_CAVLC.99, .Lfunc_end140-writeCoeff4x4_CAVLC.99
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI140_0:
	.quad	.LBB140_2
	.quad	.LBB140_8
	.quad	.LBB140_9
	.quad	.LBB140_22
	.quad	.LBB140_22
	.quad	.LBB140_22
	.quad	.LBB140_10
	.quad	.LBB140_16
                                        # -- End function
	.text
	.globl	find_sad_16x16.100      # -- Begin function find_sad_16x16.100
	.p2align	4, 0x90
	.type	find_sad_16x16.100,@function
find_sad_16x16.100:                     # @find_sad_16x16.100
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$1809465084, -80(%rbp)  # imm = 0x6BDA3EFC
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$0, -12(%rbp)
.LBB141_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB141_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB141_1 Depth=1
	movl	-76(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB141_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB141_1
.LBB141_4:                              # %for.end
	movl	-76(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB141_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB141_20
.LBB141_6:                              # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB141_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB141_9
.LBB141_8:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB141_9
.LBB141_9:                              # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -64(%rbp)
.LBB141_10:                             # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB141_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB141_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB141_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB141_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB141_14
.LBB141_13:                             # %cond.false23
                                        #   in Loop: Header=BB141_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB141_14
.LBB141_14:                             # %cond.end24
                                        #   in Loop: Header=BB141_10 Depth=1
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB141_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB141_10
.LBB141_16:                             # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB141_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB141_19
.LBB141_18:                             # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB141_19
.LBB141_19:                             # %cond.end39
	movl	%eax, -72(%rbp)
.LBB141_20:                             # %if.end
	movl	$999999, -60(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB141_21:                             # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB141_42 Depth 2
                                        #       Child Loop BB141_44 Depth 3
                                        #     Child Loop BB141_50 Depth 2
                                        #       Child Loop BB141_52 Depth 3
                                        #         Child Loop BB141_54 Depth 4
                                        #         Child Loop BB141_58 Depth 4
                                        #           Child Loop BB141_60 Depth 5
                                        #     Child Loop BB141_72 Depth 2
                                        #       Child Loop BB141_74 Depth 3
                                        #     Child Loop BB141_80 Depth 2
                                        #     Child Loop BB141_84 Depth 2
                                        #       Child Loop BB141_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB141_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB141_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB141_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB141_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB141_32
.LBB141_24:                             # %if.then46
                                        #   in Loop: Header=BB141_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB141_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB141_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB141_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB141_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB141_28
.LBB141_27:                             # %if.then51
                                        #   in Loop: Header=BB141_21 Depth=1
	jmp	.LBB141_95
.LBB141_28:                             # %if.end52
                                        #   in Loop: Header=BB141_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB141_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB141_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB141_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB141_21 Depth=1
	jmp	.LBB141_95
.LBB141_31:                             # %if.end57
                                        #   in Loop: Header=BB141_21 Depth=1
	jmp	.LBB141_32
.LBB141_32:                             # %if.end58
                                        #   in Loop: Header=BB141_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB141_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB141_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB141_40
.LBB141_34:                             # %lor.lhs.false62
                                        #   in Loop: Header=BB141_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB141_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB141_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB141_40
.LBB141_36:                             # %lor.lhs.false66
                                        #   in Loop: Header=BB141_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB141_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB141_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB141_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB141_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB141_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB141_21 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB141_41
.LBB141_40:                             # %if.then74
                                        #   in Loop: Header=BB141_21 Depth=1
	jmp	.LBB141_94
.LBB141_41:                             # %if.else75
                                        #   in Loop: Header=BB141_21 Depth=1
	movl	$0, -16(%rbp)
.LBB141_42:                             # %for.cond76
                                        #   Parent Loop BB141_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB141_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB141_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB141_42 Depth=2
	movl	$0, -12(%rbp)
.LBB141_44:                             # %for.cond79
                                        #   Parent Loop BB141_21 Depth=1
                                        #     Parent Loop BB141_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB141_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB141_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB141_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB141_44
.LBB141_47:                             # %for.end115
                                        #   in Loop: Header=BB141_42 Depth=2
	jmp	.LBB141_48
.LBB141_48:                             # %for.inc116
                                        #   in Loop: Header=BB141_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB141_42
.LBB141_49:                             # %for.end118
                                        #   in Loop: Header=BB141_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB141_50:                             # %for.cond119
                                        #   Parent Loop BB141_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB141_52 Depth 3
                                        #         Child Loop BB141_54 Depth 4
                                        #         Child Loop BB141_58 Depth 4
                                        #           Child Loop BB141_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB141_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB141_50 Depth=2
	movl	$0, -24(%rbp)
.LBB141_52:                             # %for.cond123
                                        #   Parent Loop BB141_21 Depth=1
                                        #     Parent Loop BB141_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB141_54 Depth 4
                                        #         Child Loop BB141_58 Depth 4
                                        #           Child Loop BB141_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB141_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB141_52 Depth=3
	movl	$0, -16(%rbp)
.LBB141_54:                             # %for.cond127
                                        #   Parent Loop BB141_21 Depth=1
                                        #     Parent Loop BB141_50 Depth=2
                                        #       Parent Loop BB141_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB141_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB141_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB141_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB141_54
.LBB141_57:                             # %for.end237
                                        #   in Loop: Header=BB141_52 Depth=3
	movl	$0, -12(%rbp)
.LBB141_58:                             # %for.cond238
                                        #   Parent Loop BB141_21 Depth=1
                                        #     Parent Loop BB141_50 Depth=2
                                        #       Parent Loop BB141_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB141_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB141_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB141_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB141_60:                             # %for.cond346
                                        #   Parent Loop BB141_21 Depth=1
                                        #     Parent Loop BB141_50 Depth=2
                                        #       Parent Loop BB141_52 Depth=3
                                        #         Parent Loop BB141_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB141_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB141_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB141_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB141_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB141_63:                             # %if.end363
                                        #   in Loop: Header=BB141_60 Depth=5
	jmp	.LBB141_64
.LBB141_64:                             # %for.inc364
                                        #   in Loop: Header=BB141_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB141_60
.LBB141_65:                             # %for.end366
                                        #   in Loop: Header=BB141_58 Depth=4
	jmp	.LBB141_66
.LBB141_66:                             # %for.inc367
                                        #   in Loop: Header=BB141_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB141_58
.LBB141_67:                             # %for.end369
                                        #   in Loop: Header=BB141_52 Depth=3
	jmp	.LBB141_68
.LBB141_68:                             # %for.inc370
                                        #   in Loop: Header=BB141_52 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB141_52
.LBB141_69:                             # %for.end372
                                        #   in Loop: Header=BB141_50 Depth=2
	jmp	.LBB141_70
.LBB141_70:                             # %for.inc373
                                        #   in Loop: Header=BB141_50 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB141_50
.LBB141_71:                             # %for.end375
                                        #   in Loop: Header=BB141_21 Depth=1
	movl	$0, -16(%rbp)
.LBB141_72:                             # %for.cond376
                                        #   Parent Loop BB141_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB141_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB141_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB141_72 Depth=2
	movl	$0, -12(%rbp)
.LBB141_74:                             # %for.cond380
                                        #   Parent Loop BB141_21 Depth=1
                                        #     Parent Loop BB141_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB141_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB141_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB141_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB141_74
.LBB141_77:                             # %for.end397
                                        #   in Loop: Header=BB141_72 Depth=2
	jmp	.LBB141_78
.LBB141_78:                             # %for.inc398
                                        #   in Loop: Header=BB141_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB141_72
.LBB141_79:                             # %for.end400
                                        #   in Loop: Header=BB141_21 Depth=1
	movl	$0, -16(%rbp)
.LBB141_80:                             # %for.cond401
                                        #   Parent Loop BB141_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB141_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB141_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB141_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB141_80
.LBB141_83:                             # %for.end463
                                        #   in Loop: Header=BB141_21 Depth=1
	movl	$0, -12(%rbp)
.LBB141_84:                             # %for.cond464
                                        #   Parent Loop BB141_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB141_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB141_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB141_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB141_86:                             # %for.cond524
                                        #   Parent Loop BB141_21 Depth=1
                                        #     Parent Loop BB141_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB141_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB141_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB141_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB141_86
.LBB141_89:                             # %for.end536
                                        #   in Loop: Header=BB141_84 Depth=2
	jmp	.LBB141_90
.LBB141_90:                             # %for.inc537
                                        #   in Loop: Header=BB141_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB141_84
.LBB141_91:                             # %for.end539
                                        #   in Loop: Header=BB141_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB141_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB141_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB141_93:                             # %if.end543
                                        #   in Loop: Header=BB141_21 Depth=1
	jmp	.LBB141_94
.LBB141_94:                             # %if.end544
                                        #   in Loop: Header=BB141_21 Depth=1
	jmp	.LBB141_95
.LBB141_95:                             # %for.inc545
                                        #   in Loop: Header=BB141_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB141_21
.LBB141_96:                             # %for.end547
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ebx
	cmpl	$1809465084, -80(%rbp)  # imm = 0x6BDA3EFC
	jne	.LBB141_98
.LBB141_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB141_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB141_97
.Lfunc_end141:
	.size	find_sad_16x16.100, .Lfunc_end141-find_sad_16x16.100
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.101 # -- Begin function writeCBPandLumaCoeff.101
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.101,@function
writeCBPandLumaCoeff.101:               # @writeCBPandLumaCoeff.101
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1906300418, -108(%rbp) # imm = 0x719FD602
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB142_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB142_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB142_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB142_7
.LBB142_4:                              # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB142_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB142_6:                              # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB142_10
.LBB142_7:                              # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB142_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB142_9:                              # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB142_10:                             # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB142_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB142_12:                             # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB142_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB142_18
.LBB142_14:                             # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB142_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB142_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB142_18
.LBB142_17:                             # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB142_22
.LBB142_18:                             # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB142_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB142_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB142_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB142_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB142_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB142_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB142_26
.LBB142_25:                             # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB142_26:                             # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB142_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB142_29
.LBB142_28:                             # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB142_29:                             # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB142_30:                             # %if.end93
	jmp	.LBB142_31
.LBB142_31:                             # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB142_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB142_42
.LBB142_33:                             # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB142_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB142_36
.LBB142_35:                             # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB142_36:                             # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB142_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB142_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB142_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB142_41
.LBB142_40:                             # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB142_41:                             # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB142_42:                             # %if.end138
	movl	$0, -36(%rbp)
.LBB142_43:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB142_45 Depth 2
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB142_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB142_43 Depth=1
	movl	$0, -20(%rbp)
.LBB142_45:                             # %for.cond141
                                        #   Parent Loop BB142_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB142_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB142_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB142_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB142_45
.LBB142_48:                             # %for.end
                                        #   in Loop: Header=BB142_43 Depth=1
	jmp	.LBB142_49
.LBB142_49:                             # %for.inc152
                                        #   in Loop: Header=BB142_43 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB142_43
.LBB142_50:                             # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB142_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB142_52:                             # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB142_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB142_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB142_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB142_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB142_55:                             # %if.end169
                                        #   in Loop: Header=BB142_52 Depth=1
	jmp	.LBB142_56
.LBB142_56:                             # %for.inc170
                                        #   in Loop: Header=BB142_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB142_52
.LBB142_57:                             # %for.end172
	jmp	.LBB142_101
.LBB142_58:                             # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB142_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB142_70
.LBB142_60:                             # %if.else179
	movl	$1, -60(%rbp)
	movl	$0, -40(%rbp)
.LBB142_61:                             # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jg	.LBB142_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB142_61 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
.LBB142_63:                             # %land.end184
                                        #   in Loop: Header=BB142_61 Depth=1
	testb	$1, %al
	jne	.LBB142_64
	jmp	.LBB142_69
.LBB142_64:                             # %for.body186
                                        #   in Loop: Header=BB142_61 Depth=1
	movq	-136(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -60(%rbp)
	movq	-144(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -100(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB142_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB142_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB142_67
.LBB142_66:                             # %if.else196
                                        #   in Loop: Header=BB142_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB142_67:                             # %if.end198
                                        #   in Loop: Header=BB142_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB142_61 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB142_61
.LBB142_69:                             # %for.end218
	jmp	.LBB142_70
.LBB142_70:                             # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB142_100
# %bb.71:                               # %if.then222
	movl	$0, -52(%rbp)
.LBB142_72:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB142_74 Depth 2
                                        #       Child Loop BB142_76 Depth 3
                                        #         Child Loop BB142_78 Depth 4
                                        #           Child Loop BB142_82 Depth 5
	cmpl	$4, -52(%rbp)
	jge	.LBB142_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB142_72 Depth=1
	movl	$0, -56(%rbp)
.LBB142_74:                             # %for.cond226
                                        #   Parent Loop BB142_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB142_76 Depth 3
                                        #         Child Loop BB142_78 Depth 4
                                        #           Child Loop BB142_82 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB142_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB142_74 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB142_76:                             # %for.cond229
                                        #   Parent Loop BB142_72 Depth=1
                                        #     Parent Loop BB142_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB142_78 Depth 4
                                        #           Child Loop BB142_82 Depth 5
	movl	-36(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB142_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB142_76 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB142_78:                             # %for.cond233
                                        #   Parent Loop BB142_72 Depth=1
                                        #     Parent Loop BB142_74 Depth=2
                                        #       Parent Loop BB142_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB142_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB142_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB142_78 Depth=4
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -68(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB142_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB142_78 Depth=4
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB142_91
.LBB142_81:                             # %if.else247
                                        #   in Loop: Header=BB142_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -60(%rbp)
	movl	$0, -40(%rbp)
.LBB142_82:                             # %for.cond259
                                        #   Parent Loop BB142_72 Depth=1
                                        #     Parent Loop BB142_74 Depth=2
                                        #       Parent Loop BB142_76 Depth=3
                                        #         Parent Loop BB142_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jge	.LBB142_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB142_82 Depth=5
	cmpl	$0, -60(%rbp)
	setne	%al
.LBB142_84:                             # %land.end263
                                        #   in Loop: Header=BB142_82 Depth=5
	testb	$1, %al
	jne	.LBB142_85
	jmp	.LBB142_90
.LBB142_85:                             # %for.body265
                                        #   in Loop: Header=BB142_82 Depth=5
	movq	-128(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -60(%rbp)
	movq	-120(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -100(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB142_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB142_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB142_88
.LBB142_87:                             # %if.else276
                                        #   in Loop: Header=BB142_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB142_88:                             # %if.end278
                                        #   in Loop: Header=BB142_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB142_82 Depth=5
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB142_82
.LBB142_90:                             # %for.end300
                                        #   in Loop: Header=BB142_78 Depth=4
	jmp	.LBB142_91
.LBB142_91:                             # %if.end301
                                        #   in Loop: Header=BB142_78 Depth=4
	jmp	.LBB142_92
.LBB142_92:                             # %for.inc302
                                        #   in Loop: Header=BB142_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB142_78
.LBB142_93:                             # %for.end304
                                        #   in Loop: Header=BB142_76 Depth=3
	jmp	.LBB142_94
.LBB142_94:                             # %for.inc305
                                        #   in Loop: Header=BB142_76 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB142_76
.LBB142_95:                             # %for.end307
                                        #   in Loop: Header=BB142_74 Depth=2
	jmp	.LBB142_96
.LBB142_96:                             # %for.inc308
                                        #   in Loop: Header=BB142_74 Depth=2
	movl	-56(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB142_74
.LBB142_97:                             # %for.end310
                                        #   in Loop: Header=BB142_72 Depth=1
	jmp	.LBB142_98
.LBB142_98:                             # %for.inc311
                                        #   in Loop: Header=BB142_72 Depth=1
	movl	-52(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB142_72
.LBB142_99:                             # %for.end313
	jmp	.LBB142_100
.LBB142_100:                            # %if.end314
	jmp	.LBB142_101
.LBB142_101:                            # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$1906300418, -108(%rbp) # imm = 0x719FD602
	jne	.LBB142_103
.LBB142_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB142_103:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB142_102
.Lfunc_end142:
	.size	writeCBPandLumaCoeff.101, .Lfunc_end142-writeCBPandLumaCoeff.101
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.102 # -- Begin function writeLumaCoeff4x4_CABAC.102
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.102,@function
writeLumaCoeff4x4_CABAC.102:            # @writeLumaCoeff4x4_CABAC.102
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$554187763, -52(%rbp)   # imm = 0x21083BF3
	movl	%edi, -28(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -72(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB143_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB143_3
.LBB143_2:                              # %cond.false
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB143_3:                              # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB143_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB143_6
.LBB143_5:                              # %cond.false26
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB143_6:                              # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -16(%rbp)
.LBB143_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -16(%rbp)
	jg	.LBB143_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB143_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB143_9:                              # %land.end
                                        #   in Loop: Header=BB143_7 Depth=1
	testb	$1, %al
	jne	.LBB143_10
	jmp	.LBB143_15
.LBB143_10:                             # %for.body
                                        #   in Loop: Header=BB143_7 Depth=1
	movq	-80(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-104(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -16(%rbp)
	jne	.LBB143_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB143_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB143_13
.LBB143_12:                             # %cond.false40
                                        #   in Loop: Header=BB143_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB143_13:                             # %cond.end43
                                        #   in Loop: Header=BB143_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-88(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB143_7 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB143_7
.LBB143_15:                             # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$554187763, -52(%rbp)   # imm = 0x21083BF3
	jne	.LBB143_17
.LBB143_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB143_17:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB143_16
.Lfunc_end143:
	.size	writeLumaCoeff4x4_CABAC.102, .Lfunc_end143-writeLumaCoeff4x4_CABAC.102
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.103 # -- Begin function writeLumaCoeff4x4_CABAC.103
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.103,@function
writeLumaCoeff4x4_CABAC.103:            # @writeLumaCoeff4x4_CABAC.103
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$917390280, -52(%rbp)   # imm = 0x36AE43C8
	movl	%edi, -28(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB144_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB144_3
.LBB144_2:                              # %cond.false
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB144_3:                              # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB144_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB144_6
.LBB144_5:                              # %cond.false26
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB144_6:                              # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB144_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -12(%rbp)
	jg	.LBB144_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB144_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB144_9:                              # %land.end
                                        #   in Loop: Header=BB144_7 Depth=1
	testb	$1, %al
	jne	.LBB144_10
	jmp	.LBB144_15
.LBB144_10:                             # %for.body
                                        #   in Loop: Header=BB144_7 Depth=1
	movq	-72(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB144_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB144_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB144_13
.LBB144_12:                             # %cond.false40
                                        #   in Loop: Header=BB144_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB144_13:                             # %cond.end43
                                        #   in Loop: Header=BB144_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-88(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB144_7 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB144_7
.LBB144_15:                             # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$917390280, -52(%rbp)   # imm = 0x36AE43C8
	jne	.LBB144_17
.LBB144_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB144_17:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB144_16
.Lfunc_end144:
	.size	writeLumaCoeff4x4_CABAC.103, .Lfunc_end144-writeLumaCoeff4x4_CABAC.103
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode.104 # -- Begin function writeChromaIntraPredMode.104
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.104,@function
writeChromaIntraPredMode.104:           # @writeChromaIntraPredMode.104
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1976856170, -36(%rbp)  # imm = 0x75D46E6A
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB145_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB145_3
.LBB145_2:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB145_3:                              # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-56(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-64(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$1976856170, -36(%rbp)  # imm = 0x75D46E6A
	jne	.LBB145_5
.LBB145_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB145_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB145_4
.Lfunc_end145:
	.size	writeChromaIntraPredMode.104, .Lfunc_end145-writeChromaIntraPredMode.104
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.105 # -- Begin function writeReferenceFrame.105
	.p2align	4, 0x90
	.type	writeReferenceFrame.105,@function
writeReferenceFrame.105:                # @writeReferenceFrame.105
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$375264352, -84(%rbp)   # imm = 0x165E1460
	movl	%edi, -68(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB146_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB146_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB146_4
.LBB146_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB146_4
.LBB146_4:                              # %cond.end
	movl	%ecx, -36(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB146_6
# %bb.5:                                # %cond.true10
	movl	-36(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB146_7
.LBB146_6:                              # %cond.false13
	movl	-36(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB146_7:                              # %cond.end17
	movl	%eax, -44(%rbp)
	movl	$0, -52(%rbp)
	cmpl	$1, -44(%rbp)
	jne	.LBB146_9
# %bb.8:                                # %if.then
	movl	$0, -48(%rbp)
	jmp	.LBB146_18
.LBB146_9:                              # %if.end
	cmpl	$2, -44(%rbp)
	jne	.LBB146_11
# %bb.10:                               # %if.then20
	movl	$1, -52(%rbp)
.LBB146_11:                             # %if.end21
	movl	-72(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB146_16
# %bb.12:                               # %if.then28
	cmpl	$0, -52(%rbp)
	je	.LBB146_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB146_15
.LBB146_14:                             # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB146_15:                             # %if.end33
	jmp	.LBB146_17
.LBB146_16:                             # %if.else34
	movl	-68(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-80(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-76(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-40(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB146_17:                             # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB146_18:                             # %return
	movl	-48(%rbp), %ebx
	cmpl	$375264352, -84(%rbp)   # imm = 0x165E1460
	jne	.LBB146_20
.LBB146_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB146_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB146_19
.Lfunc_end146:
	.size	writeReferenceFrame.105, .Lfunc_end146-writeReferenceFrame.105
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.106         # -- Begin function predict_nnz.106
	.p2align	4, 0x90
	.type	predict_nnz.106,@function
predict_nnz.106:                        # @predict_nnz.106
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1070255231, -56(%rbp)  # imm = 0x3FCACC7F
	movl	%edi, -48(%rbp)
	movl	%esi, -44(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %edi
	movl	-48(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB147_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB147_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB147_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB147_4:                              # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB147_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB147_6:                              # %if.end14
	movl	-52(%rbp), %edi
	movl	-48(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB147_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB147_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB147_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB147_10:                             # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB147_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB147_12:                             # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB147_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB147_14:                             # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$1070255231, -56(%rbp)  # imm = 0x3FCACC7F
	jne	.LBB147_16
.LBB147_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB147_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB147_15
.Lfunc_end147:
	.size	predict_nnz.106, .Lfunc_end147-predict_nnz.106
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.107 # -- Begin function OneComponentChromaPrediction4x4.107
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.107,@function
OneComponentChromaPrediction4x4.107:    # @OneComponentChromaPrediction4x4.107
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$726281410, -112(%rbp)  # imm = 0x2B4A2CC2
	movq	%rdi, -136(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -80(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -60(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-8(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -116(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB148_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB148_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB148_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB148_5
# %bb.4:                                # %if.then7
	movl	$4, -44(%rbp)
	jmp	.LBB148_6
.LBB148_5:                              # %if.else
	movl	$2, -44(%rbp)
.LBB148_6:                              # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB148_8
.LBB148_7:                              # %if.else10
	movl	$0, -44(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB148_8:                              # %if.end13
	movl	-60(%rbp), %eax
	addl	-44(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
.LBB148_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB148_11 Depth 2
	cmpl	$4, -36(%rbp)
	jge	.LBB148_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB148_9 Depth=1
	movl	$0, -28(%rbp)
.LBB148_11:                             # %for.cond20
                                        #   Parent Loop BB148_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -28(%rbp)
	jge	.LBB148_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB148_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-28(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-36(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -128(%rbp)
	movl	-28(%rbp), %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-128(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-36(%rbp), %eax
	addl	-80(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-128(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-144(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB148_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB148_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB148_15
.LBB148_14:                             # %cond.false
                                        #   in Loop: Header=BB148_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB148_15:                             # %cond.end
                                        #   in Loop: Header=BB148_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB148_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB148_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB148_21
.LBB148_17:                             # %cond.false65
                                        #   in Loop: Header=BB148_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB148_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB148_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB148_20
.LBB148_19:                             # %cond.false74
                                        #   in Loop: Header=BB148_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB148_20:                             # %cond.end76
                                        #   in Loop: Header=BB148_11 Depth=2
.LBB148_21:                             # %cond.end78
                                        #   in Loop: Header=BB148_11 Depth=2
	movl	%eax, -56(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB148_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB148_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB148_24
.LBB148_23:                             # %cond.false84
                                        #   in Loop: Header=BB148_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB148_24:                             # %cond.end86
                                        #   in Loop: Header=BB148_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB148_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB148_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB148_30
.LBB148_26:                             # %cond.false91
                                        #   in Loop: Header=BB148_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB148_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB148_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB148_29
.LBB148_28:                             # %cond.false96
                                        #   in Loop: Header=BB148_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB148_29:                             # %cond.end98
                                        #   in Loop: Header=BB148_11 Depth=2
.LBB148_30:                             # %cond.end100
                                        #   in Loop: Header=BB148_11 Depth=2
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB148_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB148_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB148_33
.LBB148_32:                             # %cond.false111
                                        #   in Loop: Header=BB148_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB148_33:                             # %cond.end114
                                        #   in Loop: Header=BB148_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB148_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB148_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB148_39
.LBB148_35:                             # %cond.false119
                                        #   in Loop: Header=BB148_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB148_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB148_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB148_38
.LBB148_37:                             # %cond.false129
                                        #   in Loop: Header=BB148_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB148_38:                             # %cond.end132
                                        #   in Loop: Header=BB148_11 Depth=2
.LBB148_39:                             # %cond.end134
                                        #   in Loop: Header=BB148_11 Depth=2
	movl	%eax, -88(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB148_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB148_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB148_42
.LBB148_41:                             # %cond.false141
                                        #   in Loop: Header=BB148_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB148_42:                             # %cond.end144
                                        #   in Loop: Header=BB148_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB148_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB148_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB148_48
.LBB148_44:                             # %cond.false149
                                        #   in Loop: Header=BB148_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB148_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB148_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB148_47
.LBB148_46:                             # %cond.false155
                                        #   in Loop: Header=BB148_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB148_47:                             # %cond.end158
                                        #   in Loop: Header=BB148_11 Depth=2
.LBB148_48:                             # %cond.end160
                                        #   in Loop: Header=BB148_11 Depth=2
	movl	%eax, -84(%rbp)
	movl	-20(%rbp), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-8(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-12(%rbp), %eax
	andl	-32(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-4(%rbp), %eax
	subl	-48(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-92(%rbp), %eax
	imull	-68(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-52(%rbp), %ecx
	imull	-68(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-76(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-88(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-92(%rbp), %ecx
	imull	-48(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-56(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-52(%rbp), %ecx
	imull	-48(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-88(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-116(%rbp), %eax
	cltd
	idivl	-64(%rbp)
	movq	-136(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -136(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB148_11 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB148_11
.LBB148_50:                             # %for.end
                                        #   in Loop: Header=BB148_9 Depth=1
	jmp	.LBB148_51
.LBB148_51:                             # %for.inc198
                                        #   in Loop: Header=BB148_9 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB148_9
.LBB148_52:                             # %for.end200
	cmpl	$726281410, -112(%rbp)  # imm = 0x2B4A2CC2
	jne	.LBB148_54
.LBB148_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB148_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB148_53
.Lfunc_end148:
	.size	OneComponentChromaPrediction4x4.107, .Lfunc_end148-OneComponentChromaPrediction4x4.107
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.108 # -- Begin function OneComponentChromaPrediction4x4.108
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.108,@function
OneComponentChromaPrediction4x4.108:    # @OneComponentChromaPrediction4x4.108
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$1092174831, -112(%rbp) # imm = 0x411943EF
	movq	%rdi, -144(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -88(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -72(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-4(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -108(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB149_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB149_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -116(%rbp)
	cmpl	$0, -116(%rbp)
	je	.LBB149_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB149_5
# %bb.4:                                # %if.then7
	movl	$4, -48(%rbp)
	jmp	.LBB149_6
.LBB149_5:                              # %if.else
	movl	$2, -48(%rbp)
.LBB149_6:                              # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB149_8
.LBB149_7:                              # %if.else10
	movl	$0, -48(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB149_8:                              # %if.end13
	movl	-72(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -32(%rbp)
.LBB149_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB149_11 Depth 2
	cmpl	$4, -32(%rbp)
	jge	.LBB149_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB149_9 Depth=1
	movl	$0, -28(%rbp)
.LBB149_11:                             # %for.cond20
                                        #   Parent Loop BB149_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -28(%rbp)
	jge	.LBB149_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB149_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-28(%rbp), %ecx
	addl	-64(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-32(%rbp), %ecx
	addl	-88(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -128(%rbp)
	movl	-28(%rbp), %eax
	addl	-64(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-128(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-32(%rbp), %eax
	addl	-88(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-128(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-136(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB149_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB149_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB149_15
.LBB149_14:                             # %cond.false
                                        #   in Loop: Header=BB149_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB149_15:                             # %cond.end
                                        #   in Loop: Header=BB149_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB149_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB149_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB149_21
.LBB149_17:                             # %cond.false65
                                        #   in Loop: Header=BB149_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB149_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB149_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB149_20
.LBB149_19:                             # %cond.false74
                                        #   in Loop: Header=BB149_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB149_20:                             # %cond.end76
                                        #   in Loop: Header=BB149_11 Depth=2
.LBB149_21:                             # %cond.end78
                                        #   in Loop: Header=BB149_11 Depth=2
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB149_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB149_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB149_24
.LBB149_23:                             # %cond.false84
                                        #   in Loop: Header=BB149_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB149_24:                             # %cond.end86
                                        #   in Loop: Header=BB149_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB149_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB149_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB149_30
.LBB149_26:                             # %cond.false91
                                        #   in Loop: Header=BB149_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB149_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB149_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB149_29
.LBB149_28:                             # %cond.false96
                                        #   in Loop: Header=BB149_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB149_29:                             # %cond.end98
                                        #   in Loop: Header=BB149_11 Depth=2
.LBB149_30:                             # %cond.end100
                                        #   in Loop: Header=BB149_11 Depth=2
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB149_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB149_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB149_33
.LBB149_32:                             # %cond.false111
                                        #   in Loop: Header=BB149_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB149_33:                             # %cond.end114
                                        #   in Loop: Header=BB149_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB149_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB149_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB149_39
.LBB149_35:                             # %cond.false119
                                        #   in Loop: Header=BB149_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB149_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB149_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB149_38
.LBB149_37:                             # %cond.false129
                                        #   in Loop: Header=BB149_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB149_38:                             # %cond.end132
                                        #   in Loop: Header=BB149_11 Depth=2
.LBB149_39:                             # %cond.end134
                                        #   in Loop: Header=BB149_11 Depth=2
	movl	%eax, -84(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB149_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB149_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB149_42
.LBB149_41:                             # %cond.false141
                                        #   in Loop: Header=BB149_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB149_42:                             # %cond.end144
                                        #   in Loop: Header=BB149_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB149_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB149_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB149_48
.LBB149_44:                             # %cond.false149
                                        #   in Loop: Header=BB149_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB149_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB149_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB149_47
.LBB149_46:                             # %cond.false155
                                        #   in Loop: Header=BB149_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB149_47:                             # %cond.end158
                                        #   in Loop: Header=BB149_11 Depth=2
.LBB149_48:                             # %cond.end160
                                        #   in Loop: Header=BB149_11 Depth=2
	movl	%eax, -76(%rbp)
	movl	-16(%rbp), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-4(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-12(%rbp), %eax
	andl	-36(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-8(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-56(%rbp), %eax
	imull	-68(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-60(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-44(%rbp), %ecx
	imull	-68(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-80(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-84(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-56(%rbp), %ecx
	imull	-52(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-76(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-60(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-44(%rbp), %ecx
	imull	-52(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-76(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-84(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-108(%rbp), %eax
	cltd
	idivl	-92(%rbp)
	movq	-144(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -144(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB149_11 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB149_11
.LBB149_50:                             # %for.end
                                        #   in Loop: Header=BB149_9 Depth=1
	jmp	.LBB149_51
.LBB149_51:                             # %for.inc198
                                        #   in Loop: Header=BB149_9 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB149_9
.LBB149_52:                             # %for.end200
	cmpl	$1092174831, -112(%rbp) # imm = 0x411943EF
	jne	.LBB149_54
.LBB149_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB149_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB149_53
.Lfunc_end149:
	.size	OneComponentChromaPrediction4x4.108, .Lfunc_end149-OneComponentChromaPrediction4x4.108
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.109 # -- Begin function writeCoeff4x4_CAVLC.109
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.109,@function
writeCoeff4x4_CAVLC.109:                # @writeCoeff4x4_CAVLC.109
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1374700808, -168(%rbp) # imm = 0x51F04508
	movl	%edi, -172(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -52(%rbp)
	movl	%ecx, -72(%rbp)
	movl	$0, -40(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -208(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -160(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -128(%rbp)
	movq	$0, -136(%rbp)
	movl	-172(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB150_22
# %bb.1:                                # %entry
	movq	.LJTI150_0(,%rax,8), %rax
	jmpq	*%rax
.LBB150_2:                              # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -68(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB150_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB150_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB150_6
.LBB150_5:                              # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB150_7
.LBB150_6:                              # %if.else
	movl	$14, -24(%rbp)
.LBB150_7:                              # %if.end
	jmp	.LBB150_23
.LBB150_8:                              # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -68(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB150_23
.LBB150_9:                              # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -68(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB150_23
.LBB150_10:                             # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -68(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -104(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-72(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-72(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB150_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB150_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB150_14
.LBB150_13:                             # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB150_15
.LBB150_14:                             # %if.else66
	movl	$13, -24(%rbp)
.LBB150_15:                             # %if.end67
	jmp	.LBB150_23
.LBB150_16:                             # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -68(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -160(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB150_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB150_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB150_20
.LBB150_19:                             # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB150_21
.LBB150_20:                             # %if.else92
	movl	$15, -24(%rbp)
.LBB150_21:                             # %if.end93
	jmp	.LBB150_23
.LBB150_22:                             # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB150_23:                             # %sw.epilog
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -164(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -108(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB150_24:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -104(%rbp)
	je	.LBB150_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB150_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB150_27
.LBB150_26:                             # %cond.false
                                        #   in Loop: Header=BB150_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB150_27
.LBB150_27:                             # %cond.end
                                        #   in Loop: Header=BB150_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB150_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB150_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB150_29:                             # %land.end
                                        #   in Loop: Header=BB150_24 Depth=1
	testb	$1, %dl
	jne	.LBB150_30
	jmp	.LBB150_41
.LBB150_30:                             # %for.body
                                        #   in Loop: Header=BB150_24 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB150_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB150_24 Depth=1
	cmpl	$0, -100(%rbp)
	je	.LBB150_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB150_24 Depth=1
	movl	-100(%rbp), %eax
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
.LBB150_33:                             # %if.end110
                                        #   in Loop: Header=BB150_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB150_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB150_24 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-164(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -164(%rbp)
	cmpl	$3, -32(%rbp)
	jle	.LBB150_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB150_24 Depth=1
	movl	$3, -32(%rbp)
.LBB150_36:                             # %if.end117
                                        #   in Loop: Header=BB150_24 Depth=1
	jmp	.LBB150_38
.LBB150_37:                             # %if.else118
                                        #   in Loop: Header=BB150_24 Depth=1
	movl	$0, -32(%rbp)
.LBB150_38:                             # %if.end119
                                        #   in Loop: Header=BB150_24 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
.LBB150_39:                             # %if.end121
                                        #   in Loop: Header=BB150_24 Depth=1
	jmp	.LBB150_40
.LBB150_40:                             # %for.inc
                                        #   in Loop: Header=BB150_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB150_24
.LBB150_41:                             # %for.end
	cmpl	$0, -104(%rbp)
	jne	.LBB150_61
# %bb.42:                               # %if.then124
	cmpl	$0, -160(%rbp)
	jne	.LBB150_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB150_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB150_46
.LBB150_45:                             # %cond.false132
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB150_46:                             # %cond.end136
	movl	%eax, -92(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB150_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB150_49
.LBB150_48:                             # %cond.false142
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB150_49:                             # %cond.end145
	movl	%eax, -80(%rbp)
	movl	-92(%rbp), %edi
	movl	-80(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -112(%rbp)
	jmp	.LBB150_51
.LBB150_50:                             # %if.else148
	movl	-72(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -92(%rbp)
	movl	-72(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -80(%rbp)
	movl	-92(%rbp), %edi
	movl	-80(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -112(%rbp)
.LBB150_51:                             # %if.end151
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-92(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -112(%rbp)
	jge	.LBB150_53
# %bb.52:                               # %if.then160
	movl	$0, -88(%rbp)
	jmp	.LBB150_60
.LBB150_53:                             # %if.else161
	cmpl	$4, -112(%rbp)
	jge	.LBB150_55
# %bb.54:                               # %if.then163
	movl	$1, -88(%rbp)
	jmp	.LBB150_59
.LBB150_55:                             # %if.else164
	cmpl	$8, -112(%rbp)
	jge	.LBB150_57
# %bb.56:                               # %if.then166
	movl	$2, -88(%rbp)
	jmp	.LBB150_58
.LBB150_57:                             # %if.else167
	movl	$3, -88(%rbp)
.LBB150_58:                             # %if.end168
	jmp	.LBB150_59
.LBB150_59:                             # %if.end169
	jmp	.LBB150_60
.LBB150_60:                             # %if.end170
	jmp	.LBB150_62
.LBB150_61:                             # %if.else171
	movl	$0, -88(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -80(%rbp)
.LBB150_62:                             # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-88(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -104(%rbp)
	jne	.LBB150_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB150_65
.LBB150_64:                             # %if.else177
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB150_65:                             # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -36(%rbp)
	jne	.LBB150_67
# %bb.66:                               # %if.then189
	movl	-40(%rbp), %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB150_122
.LBB150_67:                             # %if.end190
	cmpl	$0, -36(%rbp)
	je	.LBB150_121
# %bb.68:                               # %if.then192
	movl	$0, -96(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB150_69:                             # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-76(%rbp), %ecx
	subl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB150_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB150_69 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB150_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB150_72:                             # %if.end202
                                        #   in Loop: Header=BB150_69 Depth=1
	movl	-96(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -96(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB150_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB150_69 Depth=1
	movl	-96(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -96(%rbp)
.LBB150_74:                             # %if.end205
                                        #   in Loop: Header=BB150_69 Depth=1
	jmp	.LBB150_75
.LBB150_75:                             # %for.inc206
                                        #   in Loop: Header=BB150_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB150_69
.LBB150_76:                             # %for.end207
	cmpl	$0, -32(%rbp)
	je	.LBB150_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-96(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB150_78:                             # %if.end223
	movl	$1, -144(%rbp)
	cmpl	$3, -36(%rbp)
	jle	.LBB150_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -32(%rbp)
	jne	.LBB150_81
# %bb.80:                               # %if.then226
	movl	$0, -144(%rbp)
.LBB150_81:                             # %if.end227
	cmpl	$10, -36(%rbp)
	jle	.LBB150_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -32(%rbp)
	jge	.LBB150_84
# %bb.83:                               # %if.then231
	movl	$1, -28(%rbp)
	jmp	.LBB150_85
.LBB150_84:                             # %if.else232
	movl	$0, -28(%rbp)
.LBB150_85:                             # %if.end233
	movl	-76(%rbp), %eax
	subl	-32(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB150_86:                             # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB150_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB150_86 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -144(%rbp)
	je	.LBB150_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB150_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB150_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB150_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB150_91
.LBB150_90:                             # %if.else249
                                        #   in Loop: Header=BB150_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB150_91:                             # %if.end252
                                        #   in Loop: Header=BB150_86 Depth=1
	movl	$0, -144(%rbp)
.LBB150_92:                             # %if.end253
                                        #   in Loop: Header=BB150_86 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB150_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB150_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB150_95
.LBB150_94:                             # %if.else257
                                        #   in Loop: Header=BB150_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-28(%rbp), %esi
	movq	-120(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB150_95:                             # %if.end259
                                        #   in Loop: Header=BB150_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB150_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB150_86 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
.LBB150_97:                             # %if.end266
                                        #   in Loop: Header=BB150_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-76(%rbp), %ecx
	subl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB150_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB150_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB150_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB150_86 Depth=1
	movl	$2, -28(%rbp)
.LBB150_100:                            # %if.end273
                                        #   in Loop: Header=BB150_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB150_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB150_86
.LBB150_102:                            # %for.end285
	movl	-36(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB150_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -104(%rbp)
	jne	.LBB150_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB150_106
.LBB150_105:                            # %if.else295
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB150_106:                            # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB150_107:                            # %if.end307
	movl	-108(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB150_108:                            # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB150_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB150_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB150_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB150_108 Depth=1
	cmpl	$0, -84(%rbp)
	jne	.LBB150_112
.LBB150_111:                            # %if.then318
	jmp	.LBB150_120
.LBB150_112:                            # %if.end319
                                        #   in Loop: Header=BB150_108 Depth=1
	cmpl	$1, -140(%rbp)
	jle	.LBB150_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB150_108 Depth=1
	cmpl	$0, -84(%rbp)
	je	.LBB150_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB150_108 Depth=1
	movl	-84(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	cmpl	$6, -28(%rbp)
	jle	.LBB150_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB150_108 Depth=1
	movl	$6, -28(%rbp)
.LBB150_116:                            # %if.end327
                                        #   in Loop: Header=BB150_108 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-100(%rbp), %eax
	movl	-84(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movl	-140(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -140(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB150_117:                            # %if.end341
                                        #   in Loop: Header=BB150_108 Depth=1
	jmp	.LBB150_118
.LBB150_118:                            # %for.inc342
                                        #   in Loop: Header=BB150_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB150_108
.LBB150_119:                            # %for.end344.loopexit
	jmp	.LBB150_120
.LBB150_120:                            # %for.end344
	jmp	.LBB150_121
.LBB150_121:                            # %if.end345
	movl	-40(%rbp), %eax
	movl	%eax, -156(%rbp)
.LBB150_122:                            # %return
	movl	-156(%rbp), %ebx
	cmpl	$1374700808, -168(%rbp) # imm = 0x51F04508
	jne	.LBB150_124
.LBB150_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB150_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB150_123
.Lfunc_end150:
	.size	writeCoeff4x4_CAVLC.109, .Lfunc_end150-writeCoeff4x4_CAVLC.109
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI150_0:
	.quad	.LBB150_2
	.quad	.LBB150_8
	.quad	.LBB150_9
	.quad	.LBB150_22
	.quad	.LBB150_22
	.quad	.LBB150_22
	.quad	.LBB150_10
	.quad	.LBB150_16
                                        # -- End function
	.text
	.globl	writeLumaCoeff8x8.110   # -- Begin function writeLumaCoeff8x8.110
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.110,@function
writeLumaCoeff8x8.110:                  # @writeLumaCoeff8x8.110
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$878887625, -36(%rbp)   # imm = 0x3462C2C9
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	cmpl	$13, -24(%rbp)
	jne	.LBB151_2
# %bb.1:                                # %if.then
	jmp	.LBB151_2
.LBB151_2:                              # %if.end
	cmpl	$0, -32(%rbp)
	je	.LBB151_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB151_15
.LBB151_4:                              # %if.then5
	movl	$0, -16(%rbp)
.LBB151_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB151_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB151_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB151_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB151_5 Depth=1
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -32(%rbp)
	je	.LBB151_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB151_5 Depth=1
	cmpl	$13, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB151_10
.LBB151_9:                              # %cond.false
                                        #   in Loop: Header=BB151_5 Depth=1
	movl	-28(%rbp), %ecx
.LBB151_10:                             # %cond.end
                                        #   in Loop: Header=BB151_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB151_12
.LBB151_11:                             # %if.else
                                        #   in Loop: Header=BB151_5 Depth=1
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-28(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB151_12:                             # %if.end17
                                        #   in Loop: Header=BB151_5 Depth=1
	jmp	.LBB151_13
.LBB151_13:                             # %for.inc
                                        #   in Loop: Header=BB151_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB151_5
.LBB151_14:                             # %for.end
	jmp	.LBB151_19
.LBB151_15:                             # %if.else18
	cmpl	$13, -24(%rbp)
	jne	.LBB151_17
# %bb.16:                               # %if.then21
	movl	-20(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB151_18
.LBB151_17:                             # %if.else24
	movl	-20(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB151_18:                             # %if.end27
	jmp	.LBB151_19
.LBB151_19:                             # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$878887625, -36(%rbp)   # imm = 0x3462C2C9
	jne	.LBB151_21
.LBB151_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB151_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB151_20
.Lfunc_end151:
	.size	writeLumaCoeff8x8.110, .Lfunc_end151-writeLumaCoeff8x8.110
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.111 # -- Begin function writeCoeff4x4_CAVLC.111
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.111,@function
writeCoeff4x4_CAVLC.111:                # @writeCoeff4x4_CAVLC.111
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1773583149, -168(%rbp) # imm = 0x69B6BB2D
	movl	%edi, -172(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -48(%rbp)
	movl	%ecx, -72(%rbp)
	movl	$0, -40(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -200(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -88(%rbp)
	movl	$0, -156(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -128(%rbp)
	movq	$0, -136(%rbp)
	movl	-172(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB152_22
# %bb.1:                                # %entry
	movq	.LJTI152_0(,%rax,8), %rax
	jmpq	*%rax
.LBB152_2:                              # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -76(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB152_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB152_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB152_6
.LBB152_5:                              # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB152_7
.LBB152_6:                              # %if.else
	movl	$14, -24(%rbp)
.LBB152_7:                              # %if.end
	jmp	.LBB152_23
.LBB152_8:                              # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -76(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB152_23
.LBB152_9:                              # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -76(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB152_23
.LBB152_10:                             # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -88(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-72(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-72(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB152_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB152_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB152_14
.LBB152_13:                             # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB152_15
.LBB152_14:                             # %if.else66
	movl	$13, -24(%rbp)
.LBB152_15:                             # %if.end67
	jmp	.LBB152_23
.LBB152_16:                             # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -76(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -156(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB152_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB152_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB152_20
.LBB152_19:                             # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB152_21
.LBB152_20:                             # %if.else92
	movl	$15, -24(%rbp)
.LBB152_21:                             # %if.end93
	jmp	.LBB152_23
.LBB152_22:                             # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB152_23:                             # %sw.epilog
	movq	-208(%rbp), %rax
	movq	24(%rax), %rax
	movq	-200(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -160(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -108(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB152_24:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -88(%rbp)
	je	.LBB152_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB152_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB152_27
.LBB152_26:                             # %cond.false
                                        #   in Loop: Header=BB152_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB152_27
.LBB152_27:                             # %cond.end
                                        #   in Loop: Header=BB152_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB152_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB152_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB152_29:                             # %land.end
                                        #   in Loop: Header=BB152_24 Depth=1
	testb	$1, %dl
	jne	.LBB152_30
	jmp	.LBB152_41
.LBB152_30:                             # %for.body
                                        #   in Loop: Header=BB152_24 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -92(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB152_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB152_24 Depth=1
	cmpl	$0, -92(%rbp)
	je	.LBB152_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB152_24 Depth=1
	movl	-92(%rbp), %eax
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
.LBB152_33:                             # %if.end110
                                        #   in Loop: Header=BB152_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB152_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB152_24 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-160(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -160(%rbp)
	cmpl	$3, -28(%rbp)
	jle	.LBB152_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB152_24 Depth=1
	movl	$3, -28(%rbp)
.LBB152_36:                             # %if.end117
                                        #   in Loop: Header=BB152_24 Depth=1
	jmp	.LBB152_38
.LBB152_37:                             # %if.else118
                                        #   in Loop: Header=BB152_24 Depth=1
	movl	$0, -28(%rbp)
.LBB152_38:                             # %if.end119
                                        #   in Loop: Header=BB152_24 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB152_39:                             # %if.end121
                                        #   in Loop: Header=BB152_24 Depth=1
	jmp	.LBB152_40
.LBB152_40:                             # %for.inc
                                        #   in Loop: Header=BB152_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB152_24
.LBB152_41:                             # %for.end
	cmpl	$0, -88(%rbp)
	jne	.LBB152_61
# %bb.42:                               # %if.then124
	cmpl	$0, -156(%rbp)
	jne	.LBB152_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB152_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB152_46
.LBB152_45:                             # %cond.false132
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB152_46:                             # %cond.end136
	movl	%eax, -80(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB152_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB152_49
.LBB152_48:                             # %cond.false142
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB152_49:                             # %cond.end145
	movl	%eax, -100(%rbp)
	movl	-80(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -112(%rbp)
	jmp	.LBB152_51
.LBB152_50:                             # %if.else148
	movl	-72(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -80(%rbp)
	movl	-72(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -100(%rbp)
	movl	-80(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -112(%rbp)
.LBB152_51:                             # %if.end151
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -112(%rbp)
	jge	.LBB152_53
# %bb.52:                               # %if.then160
	movl	$0, -96(%rbp)
	jmp	.LBB152_60
.LBB152_53:                             # %if.else161
	cmpl	$4, -112(%rbp)
	jge	.LBB152_55
# %bb.54:                               # %if.then163
	movl	$1, -96(%rbp)
	jmp	.LBB152_59
.LBB152_55:                             # %if.else164
	cmpl	$8, -112(%rbp)
	jge	.LBB152_57
# %bb.56:                               # %if.then166
	movl	$2, -96(%rbp)
	jmp	.LBB152_58
.LBB152_57:                             # %if.else167
	movl	$3, -96(%rbp)
.LBB152_58:                             # %if.end168
	jmp	.LBB152_59
.LBB152_59:                             # %if.end169
	jmp	.LBB152_60
.LBB152_60:                             # %if.end170
	jmp	.LBB152_62
.LBB152_61:                             # %if.else171
	movl	$0, -96(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB152_62:                             # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-96(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -88(%rbp)
	jne	.LBB152_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB152_65
.LBB152_64:                             # %if.else177
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB152_65:                             # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -36(%rbp)
	jne	.LBB152_67
# %bb.66:                               # %if.then189
	movl	-40(%rbp), %eax
	movl	%eax, -164(%rbp)
	jmp	.LBB152_122
.LBB152_67:                             # %if.end190
	cmpl	$0, -36(%rbp)
	je	.LBB152_121
# %bb.68:                               # %if.then192
	movl	$0, -84(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB152_69:                             # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB152_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB152_69 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB152_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB152_72:                             # %if.end202
                                        #   in Loop: Header=BB152_69 Depth=1
	movl	-84(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -84(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB152_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB152_69 Depth=1
	movl	-84(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -84(%rbp)
.LBB152_74:                             # %if.end205
                                        #   in Loop: Header=BB152_69 Depth=1
	jmp	.LBB152_75
.LBB152_75:                             # %for.inc206
                                        #   in Loop: Header=BB152_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB152_69
.LBB152_76:                             # %for.end207
	cmpl	$0, -28(%rbp)
	je	.LBB152_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-84(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB152_78:                             # %if.end223
	movl	$1, -144(%rbp)
	cmpl	$3, -36(%rbp)
	jle	.LBB152_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -28(%rbp)
	jne	.LBB152_81
# %bb.80:                               # %if.then226
	movl	$0, -144(%rbp)
.LBB152_81:                             # %if.end227
	cmpl	$10, -36(%rbp)
	jle	.LBB152_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -28(%rbp)
	jge	.LBB152_84
# %bb.83:                               # %if.then231
	movl	$1, -32(%rbp)
	jmp	.LBB152_85
.LBB152_84:                             # %if.else232
	movl	$0, -32(%rbp)
.LBB152_85:                             # %if.end233
	movl	-68(%rbp), %eax
	subl	-28(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB152_86:                             # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB152_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB152_86 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -144(%rbp)
	je	.LBB152_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB152_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB152_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB152_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB152_91
.LBB152_90:                             # %if.else249
                                        #   in Loop: Header=BB152_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB152_91:                             # %if.end252
                                        #   in Loop: Header=BB152_86 Depth=1
	movl	$0, -144(%rbp)
.LBB152_92:                             # %if.end253
                                        #   in Loop: Header=BB152_86 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB152_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB152_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB152_95
.LBB152_94:                             # %if.else257
                                        #   in Loop: Header=BB152_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-32(%rbp), %esi
	movq	-120(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB152_95:                             # %if.end259
                                        #   in Loop: Header=BB152_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-32(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB152_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB152_86 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
.LBB152_97:                             # %if.end266
                                        #   in Loop: Header=BB152_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB152_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB152_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB152_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB152_86 Depth=1
	movl	$2, -32(%rbp)
.LBB152_100:                            # %if.end273
                                        #   in Loop: Header=BB152_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB152_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB152_86
.LBB152_102:                            # %for.end285
	movl	-36(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB152_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -88(%rbp)
	jne	.LBB152_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB152_106
.LBB152_105:                            # %if.else295
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB152_106:                            # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB152_107:                            # %if.end307
	movl	-108(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB152_108:                            # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB152_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB152_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB152_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB152_108 Depth=1
	cmpl	$0, -104(%rbp)
	jne	.LBB152_112
.LBB152_111:                            # %if.then318
	jmp	.LBB152_120
.LBB152_112:                            # %if.end319
                                        #   in Loop: Header=BB152_108 Depth=1
	cmpl	$1, -140(%rbp)
	jle	.LBB152_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB152_108 Depth=1
	cmpl	$0, -104(%rbp)
	je	.LBB152_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB152_108 Depth=1
	movl	-104(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$6, -32(%rbp)
	jle	.LBB152_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB152_108 Depth=1
	movl	$6, -32(%rbp)
.LBB152_116:                            # %if.end327
                                        #   in Loop: Header=BB152_108 Depth=1
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-92(%rbp), %eax
	movl	-104(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -104(%rbp)
	movl	-140(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -140(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB152_117:                            # %if.end341
                                        #   in Loop: Header=BB152_108 Depth=1
	jmp	.LBB152_118
.LBB152_118:                            # %for.inc342
                                        #   in Loop: Header=BB152_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB152_108
.LBB152_119:                            # %for.end344.loopexit
	jmp	.LBB152_120
.LBB152_120:                            # %for.end344
	jmp	.LBB152_121
.LBB152_121:                            # %if.end345
	movl	-40(%rbp), %eax
	movl	%eax, -164(%rbp)
.LBB152_122:                            # %return
	movl	-164(%rbp), %ebx
	cmpl	$1773583149, -168(%rbp) # imm = 0x69B6BB2D
	jne	.LBB152_124
.LBB152_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB152_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB152_123
.Lfunc_end152:
	.size	writeCoeff4x4_CAVLC.111, .Lfunc_end152-writeCoeff4x4_CAVLC.111
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI152_0:
	.quad	.LBB152_2
	.quad	.LBB152_8
	.quad	.LBB152_9
	.quad	.LBB152_22
	.quad	.LBB152_22
	.quad	.LBB152_22
	.quad	.LBB152_10
	.quad	.LBB152_16
                                        # -- End function
	.text
	.globl	terminate_macroblock.112 # -- Begin function terminate_macroblock.112
	.p2align	4, 0x90
	.type	terminate_macroblock.112,@function
terminate_macroblock.112:               # @terminate_macroblock.112
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$519051763, -112(%rbp)  # imm = 0x1EF019F3
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-96(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB153_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB153_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB153_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB153_5
.LBB153_4:                              # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB153_8
.LBB153_5:                              # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB153_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB153_7:                              # %if.end
	jmp	.LBB153_8
.LBB153_8:                              # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB153_45
# %bb.9:                                # %if.end18
	movq	.LJTI153_0(,%rax,8), %rax
	jmpq	*%rax
.LBB153_10:                             # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB153_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB153_12:                             # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB153_46
.LBB153_13:                             # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB153_46
.LBB153_14:                             # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB153_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB153_16:                             # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB153_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB153_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB153_22
.LBB153_19:                             # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB153_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB153_21:                             # %if.end64
	jmp	.LBB153_22
.LBB153_22:                             # %if.end65
	jmp	.LBB153_23
.LBB153_23:                             # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB153_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB153_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB153_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB153_27:                             # %if.end79
	jmp	.LBB153_28
.LBB153_28:                             # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB153_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB153_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB153_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB153_32:                             # %if.end89
	jmp	.LBB153_33
.LBB153_33:                             # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB153_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB153_35:                             # %if.end95
	jmp	.LBB153_46
.LBB153_36:                             # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB153_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB153_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB153_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB153_40:                             # %if.end106
	jmp	.LBB153_41
.LBB153_41:                             # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB153_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB153_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB153_44:                             # %if.end118
	jmp	.LBB153_46
.LBB153_45:                             # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB153_46:                             # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB153_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB153_48:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB153_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB153_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB153_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB153_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB153_51:                             # %if.end139
                                        #   in Loop: Header=BB153_48 Depth=1
	jmp	.LBB153_52
.LBB153_52:                             # %for.inc
                                        #   in Loop: Header=BB153_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB153_48
.LBB153_53:                             # %for.end
	jmp	.LBB153_54
.LBB153_54:                             # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB153_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB153_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB153_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB153_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB153_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB153_60:                             # %if.end174
	jmp	.LBB153_62
.LBB153_61:                             # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB153_62:                             # %if.end188
	jmp	.LBB153_63
.LBB153_63:                             # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB153_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB153_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -108(%rbp)
	jne	.LBB153_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB153_67:                             # %if.end218
	cmpl	$519051763, -112(%rbp)  # imm = 0x1EF019F3
	jne	.LBB153_69
.LBB153_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB153_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB153_68
.Lfunc_end153:
	.size	terminate_macroblock.112, .Lfunc_end153-terminate_macroblock.112
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI153_0:
	.quad	.LBB153_10
	.quad	.LBB153_13
	.quad	.LBB153_14
	.quad	.LBB153_36
                                        # -- End function
	.text
	.globl	LumaPrediction4x4Bi.113 # -- Begin function LumaPrediction4x4Bi.113
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.113,@function
LumaPrediction4x4Bi.113:                # @LumaPrediction4x4Bi.113
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$960751657, -76(%rbp)   # imm = 0x3943E829
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -80(%rbp)
	movl	%r8d, -84(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -64(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -56(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB154_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB154_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB154_6
.LBB154_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB154_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB154_5:                              # %land.end
.LBB154_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB154_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB154_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB154_10
.LBB154_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB154_10
.LBB154_10:                             # %cond.end
	movl	%ecx, -60(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB154_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB154_13
.LBB154_12:                             # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB154_13:                             # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB154_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB154_16
.LBB154_15:                             # %if.then
	movl	-52(%rbp), %esi
	movl	-68(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-80(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-60(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB154_16:                             # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB154_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB154_19
.LBB154_18:                             # %if.then39
	movl	-52(%rbp), %esi
	movl	-68(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-60(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB154_19:                             # %if.end52
	cmpl	$0, -72(%rbp)
	je	.LBB154_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB154_30
# %bb.21:                               # %if.then56
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB154_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB154_24 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB154_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB154_22 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB154_24:                             # %for.cond58
                                        #   Parent Loop BB154_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB154_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB154_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB154_24 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_24
.LBB154_27:                             # %for.end
                                        #   in Loop: Header=BB154_22 Depth=1
	jmp	.LBB154_28
.LBB154_28:                             # %for.inc96
                                        #   in Loop: Header=BB154_22 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB154_22
.LBB154_29:                             # %for.end98
	jmp	.LBB154_50
.LBB154_30:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB154_40
# %bb.31:                               # %if.then101
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB154_32:                             # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB154_34 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB154_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB154_32 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB154_34:                             # %for.cond106
                                        #   Parent Loop BB154_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB154_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB154_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB154_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_34
.LBB154_37:                             # %for.end132
                                        #   in Loop: Header=BB154_32 Depth=1
	jmp	.LBB154_38
.LBB154_38:                             # %for.inc133
                                        #   in Loop: Header=BB154_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB154_32
.LBB154_39:                             # %for.end135
	jmp	.LBB154_49
.LBB154_40:                             # %if.else136
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB154_41:                             # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB154_43 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB154_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB154_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB154_43:                             # %for.cond141
                                        #   Parent Loop BB154_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB154_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB154_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB154_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_43
.LBB154_46:                             # %for.end167
                                        #   in Loop: Header=BB154_41 Depth=1
	jmp	.LBB154_47
.LBB154_47:                             # %for.inc168
                                        #   in Loop: Header=BB154_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB154_41
.LBB154_48:                             # %for.end170
	jmp	.LBB154_49
.LBB154_49:                             # %if.end171
	jmp	.LBB154_50
.LBB154_50:                             # %if.end172
	jmp	.LBB154_82
.LBB154_51:                             # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB154_61
# %bb.52:                               # %if.then176
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB154_53:                             # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB154_55 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB154_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB154_53 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB154_55:                             # %for.cond181
                                        #   Parent Loop BB154_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB154_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB154_55 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB154_55 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_55
.LBB154_58:                             # %for.end197
                                        #   in Loop: Header=BB154_53 Depth=1
	jmp	.LBB154_59
.LBB154_59:                             # %for.inc198
                                        #   in Loop: Header=BB154_53 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB154_53
.LBB154_60:                             # %for.end200
	jmp	.LBB154_81
.LBB154_61:                             # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB154_71
# %bb.62:                               # %if.then204
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB154_63:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB154_65 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB154_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB154_63 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB154_65:                             # %for.cond209
                                        #   Parent Loop BB154_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB154_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB154_65 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB154_65 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_65
.LBB154_68:                             # %for.end222
                                        #   in Loop: Header=BB154_63 Depth=1
	jmp	.LBB154_69
.LBB154_69:                             # %for.inc223
                                        #   in Loop: Header=BB154_63 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB154_63
.LBB154_70:                             # %for.end225
	jmp	.LBB154_80
.LBB154_71:                             # %if.else226
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB154_72:                             # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB154_74 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB154_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB154_72 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB154_74:                             # %for.cond231
                                        #   Parent Loop BB154_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB154_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB154_74 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB154_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_74
.LBB154_77:                             # %for.end244
                                        #   in Loop: Header=BB154_72 Depth=1
	jmp	.LBB154_78
.LBB154_78:                             # %for.inc245
                                        #   in Loop: Header=BB154_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB154_72
.LBB154_79:                             # %for.end247
	jmp	.LBB154_80
.LBB154_80:                             # %if.end248
	jmp	.LBB154_81
.LBB154_81:                             # %if.end249
	jmp	.LBB154_82
.LBB154_82:                             # %if.end250
	cmpl	$960751657, -76(%rbp)   # imm = 0x3943E829
	jne	.LBB154_84
.LBB154_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB154_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB154_83
.Lfunc_end154:
	.size	LumaPrediction4x4Bi.113, .Lfunc_end154-LumaPrediction4x4Bi.113
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.114 # -- Begin function OneComponentLumaPrediction4x4.114
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.114,@function
OneComponentLumaPrediction4x4.114:      # @OneComponentLumaPrediction4x4.114
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1263603256, -92(%rbp)  # imm = 0x4B510E38
	movq	%rdi, -16(%rbp)
	movl	%esi, -88(%rbp)
	movl	%edx, -84(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-84(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-88(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -24(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$1263603256, -92(%rbp)  # imm = 0x4B510E38
	jne	.LBB155_2
.LBB155_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB155_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB155_1
.Lfunc_end155:
	.size	OneComponentLumaPrediction4x4.114, .Lfunc_end155-OneComponentLumaPrediction4x4.114
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value.115        # -- Begin function B8Mode2Value.115
	.p2align	4, 0x90
	.type	B8Mode2Value.115,@function
B8Mode2Value.115:                       # @B8Mode2Value.115
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$493147012, -24(%rbp)   # imm = 0x1D64D384
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB156_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB156_3
.LBB156_2:                              # %if.else
	movslq	-12(%rbp), %rax
	movl	B8Mode2Value.b8start(,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	B8Mode2Value.b8inc(,%rcx,4), %ecx
	imull	-20(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
.LBB156_3:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$493147012, -24(%rbp)   # imm = 0x1D64D384
	jne	.LBB156_5
.LBB156_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB156_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB156_4
.Lfunc_end156:
	.size	B8Mode2Value.115, .Lfunc_end156-B8Mode2Value.115
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.116         # -- Begin function predict_nnz.116
	.p2align	4, 0x90
	.type	predict_nnz.116,@function
predict_nnz.116:                        # @predict_nnz.116
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1129498265, -56(%rbp)  # imm = 0x4352C699
	movl	%edi, -52(%rbp)
	movl	%esi, -48(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	movl	-52(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB157_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB157_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB157_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB157_4:                              # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB157_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB157_6:                              # %if.end14
	movl	-44(%rbp), %edi
	movl	-52(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB157_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB157_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB157_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB157_10:                             # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB157_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB157_12:                             # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB157_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB157_14:                             # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$1129498265, -56(%rbp)  # imm = 0x4352C699
	jne	.LBB157_16
.LBB157_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB157_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB157_15
.Lfunc_end157:
	.size	predict_nnz.116, .Lfunc_end157-predict_nnz.116
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe.117 # -- Begin function SetModesAndRefframe.117
	.p2align	4, 0x90
	.type	SetModesAndRefframe.117,@function
SetModesAndRefframe.117:                # @SetModesAndRefframe.117
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$519105703, -60(%rbp)   # imm = 0x1EF0ECA7
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -40(%rbp)
	movq	%r8, -48(%rbp)
	movq	%r9, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -12(%rbp)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movl	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB158_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB158_12
.LBB158_2:                              # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB158_4
# %bb.3:                                # %if.then18
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB158_11
.LBB158_4:                              # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB158_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB158_10
.LBB158_6:                              # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB158_8
# %bb.7:                                # %if.then45
	movq	-48(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB158_9
.LBB158_8:                              # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB158_9:                              # %if.end
	jmp	.LBB158_10
.LBB158_10:                             # %if.end86
	jmp	.LBB158_11
.LBB158_11:                             # %if.end87
	jmp	.LBB158_12
.LBB158_12:                             # %if.end88
	cmpl	$519105703, -60(%rbp)   # imm = 0x1EF0ECA7
	jne	.LBB158_14
.LBB158_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB158_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB158_13
.Lfunc_end158:
	.size	SetModesAndRefframe.117, .Lfunc_end158-SetModesAndRefframe.117
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.118 # -- Begin function write_one_macroblock.118
	.p2align	4, 0x90
	.type	write_one_macroblock.118,@function
write_one_macroblock.118:               # @write_one_macroblock.118
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1037628176, -28(%rbp)  # imm = 0x3DD8F310
	movl	%edi, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB159_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB159_2:                              # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB159_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB159_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB159_6
.LBB159_5:                              # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB159_6:                              # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB159_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB159_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -32(%rbp)
	je	.LBB159_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB159_10:                             # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB159_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB159_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB159_22
.LBB159_13:                             # %if.then22
	movl	$0, -20(%rbp)
.LBB159_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB159_16 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB159_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB159_14 Depth=1
	movl	$0, -24(%rbp)
.LBB159_16:                             # %for.cond24
                                        #   Parent Loop BB159_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB159_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB159_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB159_16 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB159_16
.LBB159_19:                             # %for.end
                                        #   in Loop: Header=BB159_14 Depth=1
	jmp	.LBB159_20
.LBB159_20:                             # %for.inc35
                                        #   in Loop: Header=BB159_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB159_14
.LBB159_21:                             # %for.end37
	jmp	.LBB159_22
.LBB159_22:                             # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB159_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB159_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB159_30
.LBB159_25:                             # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB159_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB159_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB159_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB159_29:                             # %if.end59
	jmp	.LBB159_30
.LBB159_30:                             # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB159_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB159_32:                             # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$1037628176, -28(%rbp)  # imm = 0x3DD8F310
	jne	.LBB159_34
.LBB159_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB159_34:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB159_33
.Lfunc_end159:
	.size	write_one_macroblock.118, .Lfunc_end159-write_one_macroblock.118
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.119    # -- Begin function writeChromaCoeff.119
	.p2align	4, 0x90
	.type	writeChromaCoeff.119,@function
writeChromaCoeff.119:                   # @writeChromaCoeff.119
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$366857269, -84(%rbp)   # imm = 0x15DDCC35
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB160_24
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB160_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB160_6 Depth 2
	cmpl	$2, -20(%rbp)
	jge	.LBB160_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB160_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB160_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB160_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB160_21
.LBB160_5:                              # %if.else
                                        #   in Loop: Header=BB160_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -24(%rbp)
.LBB160_6:                              # %for.cond18
                                        #   Parent Loop BB160_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB160_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB160_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB160_8:                              # %land.end
                                        #   in Loop: Header=BB160_6 Depth=2
	testb	$1, %al
	jne	.LBB160_9
	jmp	.LBB160_20
.LBB160_9:                              # %for.body21
                                        #   in Loop: Header=BB160_6 Depth=2
	movq	-144(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-120(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB160_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB160_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB160_12
.LBB160_11:                             # %if.else29
                                        #   in Loop: Header=BB160_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB160_12:                             # %if.end
                                        #   in Loop: Header=BB160_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB160_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB160_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB160_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB160_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB160_15:                             # %lor.end
                                        #   in Loop: Header=BB160_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB160_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB160_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB160_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB160_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB160_18:                             # %lor.end45
                                        #   in Loop: Header=BB160_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB160_6 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB160_6
.LBB160_20:                             # %for.end
                                        #   in Loop: Header=BB160_2 Depth=1
	jmp	.LBB160_21
.LBB160_21:                             # %if.end58
                                        #   in Loop: Header=BB160_2 Depth=1
	jmp	.LBB160_22
.LBB160_22:                             # %for.inc59
                                        #   in Loop: Header=BB160_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB160_2
.LBB160_23:                             # %for.end61
	jmp	.LBB160_24
.LBB160_24:                             # %if.end62
	movl	$-1, -20(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB160_52
# %bb.25:                               # %if.then64
	movl	$4, -28(%rbp)
.LBB160_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB160_28 Depth 2
                                        #       Child Loop BB160_32 Depth 3
	movl	-28(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB160_26 Depth=1
	movl	$0, -36(%rbp)
.LBB160_28:                             # %for.cond69
                                        #   Parent Loop BB160_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB160_32 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB160_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB160_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB160_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB160_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %esi
	movl	-36(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB160_47
.LBB160_31:                             # %if.else84
                                        #   in Loop: Header=BB160_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movl	$1, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -24(%rbp)
.LBB160_32:                             # %for.cond115
                                        #   Parent Loop BB160_26 Depth=1
                                        #     Parent Loop BB160_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -24(%rbp)
	jge	.LBB160_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB160_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB160_34:                             # %land.end121
                                        #   in Loop: Header=BB160_32 Depth=3
	testb	$1, %al
	jne	.LBB160_35
	jmp	.LBB160_46
.LBB160_35:                             # %for.body122
                                        #   in Loop: Header=BB160_32 Depth=3
	movq	-128(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-136(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB160_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB160_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB160_38
.LBB160_37:                             # %if.else134
                                        #   in Loop: Header=BB160_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB160_38:                             # %if.end136
                                        #   in Loop: Header=BB160_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB160_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB160_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB160_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB160_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB160_41:                             # %lor.end149
                                        #   in Loop: Header=BB160_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB160_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB160_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB160_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB160_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB160_44:                             # %lor.end164
                                        #   in Loop: Header=BB160_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB160_32 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB160_32
.LBB160_46:                             # %for.end189
                                        #   in Loop: Header=BB160_28 Depth=2
	jmp	.LBB160_47
.LBB160_47:                             # %if.end190
                                        #   in Loop: Header=BB160_28 Depth=2
	jmp	.LBB160_48
.LBB160_48:                             # %for.inc191
                                        #   in Loop: Header=BB160_28 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB160_28
.LBB160_49:                             # %for.end193
                                        #   in Loop: Header=BB160_26 Depth=1
	jmp	.LBB160_50
.LBB160_50:                             # %for.inc194
                                        #   in Loop: Header=BB160_26 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB160_26
.LBB160_51:                             # %for.end196
	jmp	.LBB160_52
.LBB160_52:                             # %if.end197
	movl	-32(%rbp), %ebx
	cmpl	$366857269, -84(%rbp)   # imm = 0x15DDCC35
	jne	.LBB160_54
.LBB160_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB160_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB160_53
.Lfunc_end160:
	.size	writeChromaCoeff.119, .Lfunc_end160-writeChromaCoeff.119
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.120 # -- Begin function writeLumaCoeff8x8_CABAC.120
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.120,@function
writeLumaCoeff8x8_CABAC.120:            # @writeLumaCoeff8x8_CABAC.120
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$1388324202, -60(%rbp)  # imm = 0x52C0256A
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -48(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -80(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -72(%rbp)
	movq	-48(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -104(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -96(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -88(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB161_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB161_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB161_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB161_3:                              # %land.end
                                        #   in Loop: Header=BB161_1 Depth=1
	testb	$1, %al
	jne	.LBB161_4
	jmp	.LBB161_12
.LBB161_4:                              # %for.body
                                        #   in Loop: Header=BB161_1 Depth=1
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB161_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB161_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB161_7
.LBB161_6:                              # %cond.false
                                        #   in Loop: Header=BB161_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB161_7:                              # %cond.end
                                        #   in Loop: Header=BB161_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB161_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB161_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB161_10
.LBB161_9:                              # %if.else
                                        #   in Loop: Header=BB161_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
.LBB161_10:                             # %if.end
                                        #   in Loop: Header=BB161_1 Depth=1
	movq	-56(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB161_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB161_1
.LBB161_12:                             # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$1388324202, -60(%rbp)  # imm = 0x52C0256A
	jne	.LBB161_14
.LBB161_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB161_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB161_13
.Lfunc_end161:
	.size	writeLumaCoeff8x8_CABAC.120, .Lfunc_end161-writeLumaCoeff8x8_CABAC.120
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock.121 # -- Begin function terminate_macroblock.121
	.p2align	4, 0x90
	.type	terminate_macroblock.121,@function
terminate_macroblock.121:               # @terminate_macroblock.121
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$987364378, -108(%rbp)  # imm = 0x3AD9FC1A
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-96(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB162_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB162_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB162_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB162_5
.LBB162_4:                              # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB162_8
.LBB162_5:                              # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB162_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB162_7:                              # %if.end
	jmp	.LBB162_8
.LBB162_8:                              # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB162_45
# %bb.9:                                # %if.end18
	movq	.LJTI162_0(,%rax,8), %rax
	jmpq	*%rax
.LBB162_10:                             # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB162_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB162_12:                             # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB162_46
.LBB162_13:                             # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB162_46
.LBB162_14:                             # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB162_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB162_16:                             # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB162_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB162_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB162_22
.LBB162_19:                             # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB162_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB162_21:                             # %if.end64
	jmp	.LBB162_22
.LBB162_22:                             # %if.end65
	jmp	.LBB162_23
.LBB162_23:                             # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB162_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB162_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB162_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB162_27:                             # %if.end79
	jmp	.LBB162_28
.LBB162_28:                             # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB162_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB162_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB162_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB162_32:                             # %if.end89
	jmp	.LBB162_33
.LBB162_33:                             # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB162_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB162_35:                             # %if.end95
	jmp	.LBB162_46
.LBB162_36:                             # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB162_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB162_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB162_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB162_40:                             # %if.end106
	jmp	.LBB162_41
.LBB162_41:                             # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB162_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB162_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB162_44:                             # %if.end118
	jmp	.LBB162_46
.LBB162_45:                             # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB162_46:                             # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB162_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB162_48:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB162_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB162_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB162_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB162_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB162_51:                             # %if.end139
                                        #   in Loop: Header=BB162_48 Depth=1
	jmp	.LBB162_52
.LBB162_52:                             # %for.inc
                                        #   in Loop: Header=BB162_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB162_48
.LBB162_53:                             # %for.end
	jmp	.LBB162_54
.LBB162_54:                             # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB162_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB162_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB162_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB162_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB162_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB162_60:                             # %if.end174
	jmp	.LBB162_62
.LBB162_61:                             # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB162_62:                             # %if.end188
	jmp	.LBB162_63
.LBB162_63:                             # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB162_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB162_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -112(%rbp)
	jne	.LBB162_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB162_67:                             # %if.end218
	cmpl	$987364378, -108(%rbp)  # imm = 0x3AD9FC1A
	jne	.LBB162_69
.LBB162_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB162_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB162_68
.Lfunc_end162:
	.size	terminate_macroblock.121, .Lfunc_end162-terminate_macroblock.121
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI162_0:
	.quad	.LBB162_10
	.quad	.LBB162_13
	.quad	.LBB162_14
	.quad	.LBB162_36
                                        # -- End function
	.text
	.globl	writeMotionInfo2NAL.122 # -- Begin function writeMotionInfo2NAL.122
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.122,@function
writeMotionInfo2NAL.122:                # @writeMotionInfo2NAL.122
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1705942763, -56(%rbp)  # imm = 0x65AE9EEB
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB163_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB163_3
.LBB163_2:                              # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB163_3:                              # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB163_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB163_6
.LBB163_5:                              # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB163_6:                              # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB163_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB163_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB163_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB163_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB163_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB163_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB163_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB163_39
.LBB163_14:                             # %if.then42
	movl	$0, -16(%rbp)
.LBB163_15:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB163_17 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB163_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB163_15 Depth=1
	movl	$0, -12(%rbp)
.LBB163_17:                             # %for.cond45
                                        #   Parent Loop BB163_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB163_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB163_17 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB163_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB163_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB163_22
.LBB163_20:                             # %land.lhs.true59
                                        #   in Loop: Header=BB163_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB163_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB163_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB163_22:                             # %if.end
                                        #   in Loop: Header=BB163_17 Depth=2
	jmp	.LBB163_23
.LBB163_23:                             # %for.inc
                                        #   in Loop: Header=BB163_17 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB163_17
.LBB163_24:                             # %for.end
                                        #   in Loop: Header=BB163_15 Depth=1
	jmp	.LBB163_25
.LBB163_25:                             # %for.inc79
                                        #   in Loop: Header=BB163_15 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB163_15
.LBB163_26:                             # %for.end81
	movl	$0, -16(%rbp)
.LBB163_27:                             # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB163_29 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB163_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB163_27 Depth=1
	movl	$0, -12(%rbp)
.LBB163_29:                             # %for.cond86
                                        #   Parent Loop BB163_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB163_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB163_29 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB163_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB163_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB163_34
.LBB163_32:                             # %land.lhs.true103
                                        #   in Loop: Header=BB163_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB163_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB163_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB163_34:                             # %if.end126
                                        #   in Loop: Header=BB163_29 Depth=2
	jmp	.LBB163_35
.LBB163_35:                             # %for.inc127
                                        #   in Loop: Header=BB163_29 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB163_29
.LBB163_36:                             # %for.end129
                                        #   in Loop: Header=BB163_27 Depth=1
	jmp	.LBB163_37
.LBB163_37:                             # %for.inc130
                                        #   in Loop: Header=BB163_27 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB163_27
.LBB163_38:                             # %for.end132
	jmp	.LBB163_39
.LBB163_39:                             # %if.end133
	jmp	.LBB163_40
.LBB163_40:                             # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB163_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB163_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB163_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB163_57
# %bb.44:                               # %if.then150
	movl	$0, -16(%rbp)
.LBB163_45:                             # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB163_47 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB163_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB163_45 Depth=1
	movl	$0, -12(%rbp)
.LBB163_47:                             # %for.cond155
                                        #   Parent Loop BB163_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB163_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB163_47 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB163_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB163_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB163_52
.LBB163_50:                             # %land.lhs.true172
                                        #   in Loop: Header=BB163_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB163_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB163_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB163_52:                             # %if.end197
                                        #   in Loop: Header=BB163_47 Depth=2
	jmp	.LBB163_53
.LBB163_53:                             # %for.inc198
                                        #   in Loop: Header=BB163_47 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB163_47
.LBB163_54:                             # %for.end200
                                        #   in Loop: Header=BB163_45 Depth=1
	jmp	.LBB163_55
.LBB163_55:                             # %for.inc201
                                        #   in Loop: Header=BB163_45 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB163_45
.LBB163_56:                             # %for.end203
	jmp	.LBB163_57
.LBB163_57:                             # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB163_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB163_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB163_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB163_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB163_75
# %bb.62:                               # %if.then222
	movl	$0, -16(%rbp)
.LBB163_63:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB163_65 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB163_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB163_63 Depth=1
	movl	$0, -12(%rbp)
.LBB163_65:                             # %for.cond227
                                        #   Parent Loop BB163_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB163_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB163_65 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB163_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB163_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB163_70
.LBB163_68:                             # %land.lhs.true244
                                        #   in Loop: Header=BB163_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB163_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB163_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB163_70:                             # %if.end269
                                        #   in Loop: Header=BB163_65 Depth=2
	jmp	.LBB163_71
.LBB163_71:                             # %for.inc270
                                        #   in Loop: Header=BB163_65 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB163_65
.LBB163_72:                             # %for.end272
                                        #   in Loop: Header=BB163_63 Depth=1
	jmp	.LBB163_73
.LBB163_73:                             # %for.inc273
                                        #   in Loop: Header=BB163_63 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB163_63
.LBB163_74:                             # %for.end275
	jmp	.LBB163_75
.LBB163_75:                             # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$1705942763, -56(%rbp)  # imm = 0x65AE9EEB
	jne	.LBB163_77
.LBB163_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB163_77:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB163_76
.Lfunc_end163:
	.size	writeMotionInfo2NAL.122, .Lfunc_end163-writeMotionInfo2NAL.122
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8.123 # -- Begin function writeMotionVector8x8.123
	.p2align	4, 0x90
	.type	writeMotionVector8x8.123,@function
writeMotionVector8x8.123:               # @writeMotionVector8x8.123
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$1729202188, -80(%rbp)  # imm = 0x6711880C
	movl	%edi, -88(%rbp)
	movl	%esi, -100(%rbp)
	movl	%edx, -92(%rbp)
	movl	%ecx, -96(%rbp)
	movl	%r8d, -84(%rbp)
	movl	%r9d, -36(%rbp)
	movl	$0, -64(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -144(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -136(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB164_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB164_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB164_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -60(%rbp)
	jne	.LBB164_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB164_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB164_7
.LBB164_6:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB164_7:                              # %cond.end
	movq	%rax, -120(%rbp)
.LBB164_8:                              # %if.end
	movl	-100(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB164_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB164_11 Depth 2
                                        #       Child Loop BB164_13 Depth 3
                                        #         Child Loop BB164_15 Depth 4
                                        #           Child Loop BB164_17 Depth 5
	movl	-16(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB164_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB164_9 Depth=1
	movl	-88(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB164_11:                             # %for.cond22
                                        #   Parent Loop BB164_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB164_13 Depth 3
                                        #         Child Loop BB164_15 Depth 4
                                        #           Child Loop BB164_17 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jge	.LBB164_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB164_11 Depth=2
	movl	$0, -20(%rbp)
.LBB164_13:                             # %for.cond25
                                        #   Parent Loop BB164_9 Depth=1
                                        #     Parent Loop BB164_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB164_15 Depth 4
                                        #           Child Loop BB164_17 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB164_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB164_13 Depth=3
	movq	-120(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-152(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -44(%rbp)
.LBB164_15:                             # %for.cond53
                                        #   Parent Loop BB164_9 Depth=1
                                        #     Parent Loop BB164_11 Depth=2
                                        #       Parent Loop BB164_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB164_17 Depth 5
	movl	-44(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB164_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB164_15 Depth=4
	movl	$0, -40(%rbp)
.LBB164_17:                             # %for.cond57
                                        #   Parent Loop BB164_9 Depth=1
                                        #     Parent Loop BB164_11 Depth=2
                                        #       Parent Loop BB164_13 Depth=3
                                        #         Parent Loop BB164_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-40(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB164_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB164_17 Depth=5
	movl	-68(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-36(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-44(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-40(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB164_17 Depth=5
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB164_17
.LBB164_20:                             # %for.end
                                        #   in Loop: Header=BB164_15 Depth=4
	jmp	.LBB164_21
.LBB164_21:                             # %for.inc70
                                        #   in Loop: Header=BB164_15 Depth=4
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB164_15
.LBB164_22:                             # %for.end72
                                        #   in Loop: Header=BB164_13 Depth=3
	movl	-68(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB164_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB164_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB164_25
.LBB164_24:                             # %if.else
                                        #   in Loop: Header=BB164_13 Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB164_25:                             # %if.end78
                                        #   in Loop: Header=BB164_13 Depth=3
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-136(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-112(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-144(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB164_13 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB164_13
.LBB164_27:                             # %for.end90
                                        #   in Loop: Header=BB164_11 Depth=2
	jmp	.LBB164_28
.LBB164_28:                             # %for.inc91
                                        #   in Loop: Header=BB164_11 Depth=2
	movl	-72(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB164_11
.LBB164_29:                             # %for.end93
                                        #   in Loop: Header=BB164_9 Depth=1
	jmp	.LBB164_30
.LBB164_30:                             # %for.inc94
                                        #   in Loop: Header=BB164_9 Depth=1
	movl	-76(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB164_9
.LBB164_31:                             # %for.end96
	movl	-64(%rbp), %ebx
	cmpl	$1729202188, -80(%rbp)  # imm = 0x6711880C
	jne	.LBB164_33
.LBB164_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB164_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB164_32
.Lfunc_end164:
	.size	writeMotionVector8x8.123, .Lfunc_end164-writeMotionVector8x8.123
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.124 # -- Begin function writeLumaCoeff8x8_CABAC.124
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.124,@function
writeLumaCoeff8x8_CABAC.124:            # @writeLumaCoeff8x8_CABAC.124
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$1447673753, -60(%rbp)  # imm = 0x5649BF99
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -56(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-56(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -72(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -80(%rbp)
	movq	-56(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -96(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -104(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB165_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB165_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB165_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB165_3:                              # %land.end
                                        #   in Loop: Header=BB165_1 Depth=1
	testb	$1, %al
	jne	.LBB165_4
	jmp	.LBB165_12
.LBB165_4:                              # %for.body
                                        #   in Loop: Header=BB165_1 Depth=1
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB165_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB165_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB165_7
.LBB165_6:                              # %cond.false
                                        #   in Loop: Header=BB165_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB165_7:                              # %cond.end
                                        #   in Loop: Header=BB165_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB165_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB165_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB165_10
.LBB165_9:                              # %if.else
                                        #   in Loop: Header=BB165_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
.LBB165_10:                             # %if.end
                                        #   in Loop: Header=BB165_1 Depth=1
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB165_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB165_1
.LBB165_12:                             # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$1447673753, -60(%rbp)  # imm = 0x5649BF99
	jne	.LBB165_14
.LBB165_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB165_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB165_13
.Lfunc_end165:
	.size	writeLumaCoeff8x8_CABAC.124, .Lfunc_end165-writeLumaCoeff8x8_CABAC.124
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.125    # -- Begin function start_macroblock.125
	.p2align	4, 0x90
	.type	start_macroblock.125,@function
start_macroblock.125:                   # @start_macroblock.125
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1905946518, -88(%rbp)  # imm = 0x719A6F96
	movl	%edi, -56(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB166_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB166_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -40(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-56(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -84(%rbp)
	je	.LBB166_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB166_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB166_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB166_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB166_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB166_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB166_5 Depth=1
	movq	-104(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB166_8:                              # %if.end
                                        #   in Loop: Header=BB166_5 Depth=1
	jmp	.LBB166_9
.LBB166_9:                              # %for.inc
                                        #   in Loop: Header=BB166_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB166_5
.LBB166_10:                             # %for.end
	jmp	.LBB166_11
.LBB166_11:                             # %if.end19
	jmp	.LBB166_12
.LBB166_12:                             # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB166_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -48(%rbp)
	cmpl	$-1, -48(%rbp)
	jle	.LBB166_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB166_16
.LBB166_15:                             # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB166_16:                             # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB166_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB166_97
.LBB166_18:                             # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB166_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB166_21
.LBB166_20:                             # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB166_96
.LBB166_21:                             # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB166_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB166_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB166_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB166_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB166_34
.LBB166_26:                             # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB166_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB166_32
.LBB166_28:                             # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB166_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB166_31
.LBB166_30:                             # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB166_31:                             # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB166_33
.LBB166_32:                             # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB166_33:                             # %if.end112
	jmp	.LBB166_34
.LBB166_34:                             # %if.end113
	jmp	.LBB166_39
.LBB166_35:                             # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB166_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB166_38
.LBB166_37:                             # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB166_38:                             # %if.end125
	jmp	.LBB166_39
.LBB166_39:                             # %if.end126
	jmp	.LBB166_47
.LBB166_40:                             # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB166_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB166_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB166_44
.LBB166_43:                             # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB166_44:                             # %if.end140
	jmp	.LBB166_46
.LBB166_45:                             # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB166_46:                             # %if.end145
	jmp	.LBB166_47
.LBB166_47:                             # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB166_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB166_93
.LBB166_49:                             # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB166_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB166_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB166_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB166_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB166_74
.LBB166_54:                             # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB166_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB166_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB166_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB166_73
.LBB166_58:                             # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB166_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB166_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB166_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB166_72
.LBB166_62:                             # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB166_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB166_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB166_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB166_71
.LBB166_66:                             # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB166_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB166_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB166_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB166_70:                             # %if.end223
	jmp	.LBB166_71
.LBB166_71:                             # %if.end224
	jmp	.LBB166_72
.LBB166_72:                             # %if.end225
	jmp	.LBB166_73
.LBB166_73:                             # %if.end226
	jmp	.LBB166_74
.LBB166_74:                             # %if.end227
	jmp	.LBB166_75
.LBB166_75:                             # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB166_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB166_77:                             # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB166_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB166_82
.LBB166_79:                             # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB166_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB166_81:                             # %if.end256
	jmp	.LBB166_82
.LBB166_82:                             # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB166_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-40(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB166_88
.LBB166_84:                             # %if.else275
	movl	dq, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB166_86
# %bb.85:                               # %if.then278
	movl	-44(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB166_87
.LBB166_86:                             # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB166_87:                             # %if.end292
	jmp	.LBB166_88
.LBB166_88:                             # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB166_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB166_90:                             # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB166_92
.LBB166_91:                             # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB166_92:                             # %if.end305
	jmp	.LBB166_94
.LBB166_93:                             # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB166_94:                             # %if.end309
	jmp	.LBB166_95
.LBB166_95:                             # %if.end310
	jmp	.LBB166_96
.LBB166_96:                             # %if.end311
	jmp	.LBB166_97
.LBB166_97:                             # %if.end312
	jmp	.LBB166_102
.LBB166_98:                             # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jle	.LBB166_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB166_101
.LBB166_100:                            # %if.else331
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB166_101:                            # %if.end335
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB166_102:                            # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB166_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB166_105
.LBB166_104:                            # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB166_105:                            # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB166_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB166_107:                            # %if.end359
	movl	$0, -16(%rbp)
.LBB166_108:                            # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB166_110 Depth 2
                                        #       Child Loop BB166_112 Depth 3
                                        #         Child Loop BB166_114 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB166_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB166_108 Depth=1
	movl	$0, -20(%rbp)
.LBB166_110:                            # %for.cond364
                                        #   Parent Loop BB166_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB166_112 Depth 3
                                        #         Child Loop BB166_114 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB166_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB166_110 Depth=2
	movl	$0, -12(%rbp)
.LBB166_112:                            # %for.cond368
                                        #   Parent Loop BB166_108 Depth=1
                                        #     Parent Loop BB166_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB166_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB166_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB166_112 Depth=3
	movl	$0, -36(%rbp)
.LBB166_114:                            # %for.cond372
                                        #   Parent Loop BB166_108 Depth=1
                                        #     Parent Loop BB166_110 Depth=2
                                        #       Parent Loop BB166_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB166_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB166_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB166_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB166_114
.LBB166_117:                            # %for.end388
                                        #   in Loop: Header=BB166_112 Depth=3
	jmp	.LBB166_118
.LBB166_118:                            # %for.inc389
                                        #   in Loop: Header=BB166_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB166_112
.LBB166_119:                            # %for.end391
                                        #   in Loop: Header=BB166_110 Depth=2
	jmp	.LBB166_120
.LBB166_120:                            # %for.inc392
                                        #   in Loop: Header=BB166_110 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB166_110
.LBB166_121:                            # %for.end394
                                        #   in Loop: Header=BB166_108 Depth=1
	jmp	.LBB166_122
.LBB166_122:                            # %for.inc395
                                        #   in Loop: Header=BB166_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB166_108
.LBB166_123:                            # %for.end397
	movl	$0, -20(%rbp)
.LBB166_124:                            # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB166_126 Depth 2
                                        #       Child Loop BB166_128 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB166_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB166_124 Depth=1
	movl	$0, -12(%rbp)
.LBB166_126:                            # %for.cond402
                                        #   Parent Loop BB166_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB166_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB166_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB166_126 Depth=2
	movl	$0, -16(%rbp)
.LBB166_128:                            # %for.cond406
                                        #   Parent Loop BB166_124 Depth=1
                                        #     Parent Loop BB166_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -16(%rbp)
	jge	.LBB166_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB166_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB166_128 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB166_128
.LBB166_131:                            # %for.end432
                                        #   in Loop: Header=BB166_126 Depth=2
	jmp	.LBB166_132
.LBB166_132:                            # %for.inc433
                                        #   in Loop: Header=BB166_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB166_126
.LBB166_133:                            # %for.end435
                                        #   in Loop: Header=BB166_124 Depth=1
	jmp	.LBB166_134
.LBB166_134:                            # %for.inc436
                                        #   in Loop: Header=BB166_124 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB166_124
.LBB166_135:                            # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -16(%rbp)
.LBB166_136:                            # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB166_138 Depth 2
                                        #       Child Loop BB166_140 Depth 3
                                        #         Child Loop BB166_142 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB166_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB166_136 Depth=1
	movl	$0, -20(%rbp)
.LBB166_138:                            # %for.cond443
                                        #   Parent Loop BB166_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB166_140 Depth 3
                                        #         Child Loop BB166_142 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB166_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB166_138 Depth=2
	movl	$0, -12(%rbp)
.LBB166_140:                            # %for.cond447
                                        #   Parent Loop BB166_136 Depth=1
                                        #     Parent Loop BB166_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB166_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB166_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB166_140 Depth=3
	movl	$0, -36(%rbp)
.LBB166_142:                            # %for.cond451
                                        #   Parent Loop BB166_136 Depth=1
                                        #     Parent Loop BB166_138 Depth=2
                                        #       Parent Loop BB166_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB166_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB166_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-16(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB166_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB166_142
.LBB166_145:                            # %for.end465
                                        #   in Loop: Header=BB166_140 Depth=3
	jmp	.LBB166_146
.LBB166_146:                            # %for.inc466
                                        #   in Loop: Header=BB166_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB166_140
.LBB166_147:                            # %for.end468
                                        #   in Loop: Header=BB166_138 Depth=2
	jmp	.LBB166_148
.LBB166_148:                            # %for.inc469
                                        #   in Loop: Header=BB166_138 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB166_138
.LBB166_149:                            # %for.end471
                                        #   in Loop: Header=BB166_136 Depth=1
	jmp	.LBB166_150
.LBB166_150:                            # %for.inc472
                                        #   in Loop: Header=BB166_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB166_136
.LBB166_151:                            # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB166_152:                            # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB166_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB166_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB166_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB166_152
.LBB166_155:                            # %for.end483
	movl	$0, -12(%rbp)
.LBB166_156:                            # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB166_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB166_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB166_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB166_156
.LBB166_159:                            # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB166_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB166_161:                            # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB166_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB166_166
.LBB166_163:                            # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB166_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB166_165:                            # %if.end520
	jmp	.LBB166_166
.LBB166_166:                            # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB166_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB166_168:                            # %if.end536
	cmpl	$1905946518, -88(%rbp)  # imm = 0x719A6F96
	jne	.LBB166_170
.LBB166_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB166_170:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB166_169
.Lfunc_end166:
	.size	start_macroblock.125, .Lfunc_end166-start_macroblock.125
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.126   # -- Begin function writeLumaCoeff8x8.126
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.126,@function
writeLumaCoeff8x8.126:                  # @writeLumaCoeff8x8.126
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1043268134, -36(%rbp)  # imm = 0x3E2F0226
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	cmpl	$13, -20(%rbp)
	jne	.LBB167_2
# %bb.1:                                # %if.then
	jmp	.LBB167_2
.LBB167_2:                              # %if.end
	cmpl	$0, -28(%rbp)
	je	.LBB167_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB167_15
.LBB167_4:                              # %if.then5
	movl	$0, -16(%rbp)
.LBB167_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB167_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB167_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB167_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB167_5 Depth=1
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -28(%rbp)
	je	.LBB167_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB167_5 Depth=1
	cmpl	$13, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB167_10
.LBB167_9:                              # %cond.false
                                        #   in Loop: Header=BB167_5 Depth=1
	movl	-32(%rbp), %ecx
.LBB167_10:                             # %cond.end
                                        #   in Loop: Header=BB167_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB167_12
.LBB167_11:                             # %if.else
                                        #   in Loop: Header=BB167_5 Depth=1
	movl	-24(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-32(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB167_12:                             # %if.end17
                                        #   in Loop: Header=BB167_5 Depth=1
	jmp	.LBB167_13
.LBB167_13:                             # %for.inc
                                        #   in Loop: Header=BB167_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB167_5
.LBB167_14:                             # %for.end
	jmp	.LBB167_19
.LBB167_15:                             # %if.else18
	cmpl	$13, -20(%rbp)
	jne	.LBB167_17
# %bb.16:                               # %if.then21
	movl	-24(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB167_18
.LBB167_17:                             # %if.else24
	movl	-24(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB167_18:                             # %if.end27
	jmp	.LBB167_19
.LBB167_19:                             # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$1043268134, -36(%rbp)  # imm = 0x3E2F0226
	jne	.LBB167_21
.LBB167_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB167_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB167_20
.Lfunc_end167:
	.size	writeLumaCoeff8x8.126, .Lfunc_end167-writeLumaCoeff8x8.126
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe.127 # -- Begin function SetModesAndRefframe.127
	.p2align	4, 0x90
	.type	SetModesAndRefframe.127,@function
SetModesAndRefframe.127:                # @SetModesAndRefframe.127
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1342014793, -60(%rbp)  # imm = 0x4FFD8549
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -8(%rbp)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movl	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB168_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB168_12
.LBB168_2:                              # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB168_4
# %bb.3:                                # %if.then18
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB168_11
.LBB168_4:                              # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB168_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB168_10
.LBB168_6:                              # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB168_8
# %bb.7:                                # %if.then45
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB168_9
.LBB168_8:                              # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB168_9:                              # %if.end
	jmp	.LBB168_10
.LBB168_10:                             # %if.end86
	jmp	.LBB168_11
.LBB168_11:                             # %if.end87
	jmp	.LBB168_12
.LBB168_12:                             # %if.end88
	cmpl	$1342014793, -60(%rbp)  # imm = 0x4FFD8549
	jne	.LBB168_14
.LBB168_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB168_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB168_13
.Lfunc_end168:
	.size	SetModesAndRefframe.127, .Lfunc_end168-SetModesAndRefframe.127
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe.128 # -- Begin function SetModesAndRefframe.128
	.p2align	4, 0x90
	.type	SetModesAndRefframe.128,@function
SetModesAndRefframe.128:                # @SetModesAndRefframe.128
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$669721045, -60(%rbp)   # imm = 0x27EB21D5
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -48(%rbp)
	movq	%r9, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -12(%rbp)
	movq	-56(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-40(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB169_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB169_12
.LBB169_2:                              # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB169_4
# %bb.3:                                # %if.then18
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB169_11
.LBB169_4:                              # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB169_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB169_10
.LBB169_6:                              # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB169_8
# %bb.7:                                # %if.then45
	movq	-48(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB169_9
.LBB169_8:                              # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB169_9:                              # %if.end
	jmp	.LBB169_10
.LBB169_10:                             # %if.end86
	jmp	.LBB169_11
.LBB169_11:                             # %if.end87
	jmp	.LBB169_12
.LBB169_12:                             # %if.end88
	cmpl	$669721045, -60(%rbp)   # imm = 0x27EB21D5
	jne	.LBB169_14
.LBB169_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB169_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB169_13
.Lfunc_end169:
	.size	SetModesAndRefframe.128, .Lfunc_end169-SetModesAndRefframe.128
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.129 # -- Begin function OneComponentChromaPrediction4x4.129
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.129,@function
OneComponentChromaPrediction4x4.129:    # @OneComponentChromaPrediction4x4.129
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$1303389575, -112(%rbp) # imm = 0x4DB02587
	movq	%rdi, -144(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -92(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -76(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-4(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -108(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB170_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB170_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -116(%rbp)
	cmpl	$0, -116(%rbp)
	je	.LBB170_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB170_5
# %bb.4:                                # %if.then7
	movl	$4, -52(%rbp)
	jmp	.LBB170_6
.LBB170_5:                              # %if.else
	movl	$2, -52(%rbp)
.LBB170_6:                              # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB170_8
.LBB170_7:                              # %if.else10
	movl	$0, -52(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB170_8:                              # %if.end13
	movl	-76(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -28(%rbp)
.LBB170_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB170_11 Depth 2
	cmpl	$4, -28(%rbp)
	jge	.LBB170_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB170_9 Depth=1
	movl	$0, -40(%rbp)
.LBB170_11:                             # %for.cond20
                                        #   Parent Loop BB170_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -40(%rbp)
	jge	.LBB170_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB170_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-40(%rbp), %ecx
	addl	-56(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-28(%rbp), %ecx
	addl	-92(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -136(%rbp)
	movl	-40(%rbp), %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-136(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-28(%rbp), %eax
	addl	-92(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-136(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-128(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB170_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB170_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB170_15
.LBB170_14:                             # %cond.false
                                        #   in Loop: Header=BB170_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB170_15:                             # %cond.end
                                        #   in Loop: Header=BB170_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB170_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB170_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB170_21
.LBB170_17:                             # %cond.false65
                                        #   in Loop: Header=BB170_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB170_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB170_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB170_20
.LBB170_19:                             # %cond.false74
                                        #   in Loop: Header=BB170_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB170_20:                             # %cond.end76
                                        #   in Loop: Header=BB170_11 Depth=2
.LBB170_21:                             # %cond.end78
                                        #   in Loop: Header=BB170_11 Depth=2
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB170_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB170_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB170_24
.LBB170_23:                             # %cond.false84
                                        #   in Loop: Header=BB170_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB170_24:                             # %cond.end86
                                        #   in Loop: Header=BB170_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB170_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB170_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB170_30
.LBB170_26:                             # %cond.false91
                                        #   in Loop: Header=BB170_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB170_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB170_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB170_29
.LBB170_28:                             # %cond.false96
                                        #   in Loop: Header=BB170_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB170_29:                             # %cond.end98
                                        #   in Loop: Header=BB170_11 Depth=2
.LBB170_30:                             # %cond.end100
                                        #   in Loop: Header=BB170_11 Depth=2
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB170_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB170_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB170_33
.LBB170_32:                             # %cond.false111
                                        #   in Loop: Header=BB170_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB170_33:                             # %cond.end114
                                        #   in Loop: Header=BB170_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB170_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB170_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB170_39
.LBB170_35:                             # %cond.false119
                                        #   in Loop: Header=BB170_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB170_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB170_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB170_38
.LBB170_37:                             # %cond.false129
                                        #   in Loop: Header=BB170_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB170_38:                             # %cond.end132
                                        #   in Loop: Header=BB170_11 Depth=2
.LBB170_39:                             # %cond.end134
                                        #   in Loop: Header=BB170_11 Depth=2
	movl	%eax, -80(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB170_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB170_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB170_42
.LBB170_41:                             # %cond.false141
                                        #   in Loop: Header=BB170_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB170_42:                             # %cond.end144
                                        #   in Loop: Header=BB170_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB170_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB170_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB170_48
.LBB170_44:                             # %cond.false149
                                        #   in Loop: Header=BB170_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB170_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB170_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB170_47
.LBB170_46:                             # %cond.false155
                                        #   in Loop: Header=BB170_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB170_47:                             # %cond.end158
                                        #   in Loop: Header=BB170_11 Depth=2
.LBB170_48:                             # %cond.end160
                                        #   in Loop: Header=BB170_11 Depth=2
	movl	%eax, -88(%rbp)
	movl	-16(%rbp), %eax
	andl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-4(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-12(%rbp), %eax
	andl	-32(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-8(%rbp), %eax
	subl	-48(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-84(%rbp), %eax
	imull	-60(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-44(%rbp), %ecx
	imull	-60(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-72(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-80(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-84(%rbp), %ecx
	imull	-48(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-88(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-64(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-44(%rbp), %ecx
	imull	-48(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-88(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-80(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-108(%rbp), %eax
	cltd
	idivl	-68(%rbp)
	movq	-144(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -144(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB170_11 Depth=2
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB170_11
.LBB170_50:                             # %for.end
                                        #   in Loop: Header=BB170_9 Depth=1
	jmp	.LBB170_51
.LBB170_51:                             # %for.inc198
                                        #   in Loop: Header=BB170_9 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB170_9
.LBB170_52:                             # %for.end200
	cmpl	$1303389575, -112(%rbp) # imm = 0x4DB02587
	jne	.LBB170_54
.LBB170_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB170_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB170_53
.Lfunc_end170:
	.size	OneComponentChromaPrediction4x4.129, .Lfunc_end170-OneComponentChromaPrediction4x4.129
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit.130 # -- Begin function write_terminating_bit.130
	.p2align	4, 0x90
	.type	write_terminating_bit.130,@function
write_terminating_bit.130:              # @write_terminating_bit.130
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1082677805, -8(%rbp)   # imm = 0x40885A2D
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$1082677805, -8(%rbp)   # imm = 0x40885A2D
	jne	.LBB171_2
.LBB171_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB171_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB171_1
.Lfunc_end171:
	.size	write_terminating_bit.130, .Lfunc_end171-write_terminating_bit.130
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.131        # -- Begin function MBType2Value.131
	.p2align	4, 0x90
	.type	MBType2Value.131,@function
MBType2Value.131:                       # @MBType2Value.131
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$810491089, -36(%rbp)   # imm = 0x304F1CD1
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB172_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB172_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB172_4
.LBB172_3:                              # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB172_26
.LBB172_4:                              # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB172_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB172_26
.LBB172_6:                              # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB172_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB172_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB172_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB172_26
.LBB172_10:                             # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB172_26
.LBB172_11:                             # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB172_26
.LBB172_12:                             # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB172_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB172_26
.LBB172_14:                             # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB172_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB172_17
.LBB172_16:                             # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB172_26
.LBB172_17:                             # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB172_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB172_26
.LBB172_19:                             # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB172_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB172_26
.LBB172_21:                             # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB172_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB172_26
.LBB172_23:                             # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB172_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB172_26
.LBB172_25:                             # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB172_26:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$810491089, -36(%rbp)   # imm = 0x304F1CD1
	jne	.LBB172_28
.LBB172_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB172_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB172_27
.Lfunc_end172:
	.size	MBType2Value.131, .Lfunc_end172-MBType2Value.131
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.132 # -- Begin function writeLumaCoeff8x8_CABAC.132
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.132,@function
writeLumaCoeff8x8_CABAC.132:            # @writeLumaCoeff8x8_CABAC.132
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$1855251849, -60(%rbp)  # imm = 0x6E94E589
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -56(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-56(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -80(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -72(%rbp)
	movq	-56(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -96(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -104(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -88(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB173_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB173_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB173_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB173_3:                              # %land.end
                                        #   in Loop: Header=BB173_1 Depth=1
	testb	$1, %al
	jne	.LBB173_4
	jmp	.LBB173_12
.LBB173_4:                              # %for.body
                                        #   in Loop: Header=BB173_1 Depth=1
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB173_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB173_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB173_7
.LBB173_6:                              # %cond.false
                                        #   in Loop: Header=BB173_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB173_7:                              # %cond.end
                                        #   in Loop: Header=BB173_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB173_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB173_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB173_10
.LBB173_9:                              # %if.else
                                        #   in Loop: Header=BB173_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
.LBB173_10:                             # %if.end
                                        #   in Loop: Header=BB173_1 Depth=1
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB173_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB173_1
.LBB173_12:                             # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$1855251849, -60(%rbp)  # imm = 0x6E94E589
	jne	.LBB173_14
.LBB173_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB173_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB173_13
.Lfunc_end173:
	.size	writeLumaCoeff8x8_CABAC.132, .Lfunc_end173-writeLumaCoeff8x8_CABAC.132
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.133    # -- Begin function start_macroblock.133
	.p2align	4, 0x90
	.type	start_macroblock.133,@function
start_macroblock.133:                   # @start_macroblock.133
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1938946272, -88(%rbp)  # imm = 0x7391F8E0
	movl	%edi, -52(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB174_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB174_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -44(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-52(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -84(%rbp)
	je	.LBB174_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB174_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB174_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB174_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB174_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB174_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB174_5 Depth=1
	movq	-104(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB174_8:                              # %if.end
                                        #   in Loop: Header=BB174_5 Depth=1
	jmp	.LBB174_9
.LBB174_9:                              # %for.inc
                                        #   in Loop: Header=BB174_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB174_5
.LBB174_10:                             # %for.end
	jmp	.LBB174_11
.LBB174_11:                             # %if.end19
	jmp	.LBB174_12
.LBB174_12:                             # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB174_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	jle	.LBB174_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB174_16
.LBB174_15:                             # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB174_16:                             # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB174_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB174_97
.LBB174_18:                             # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB174_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB174_21
.LBB174_20:                             # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB174_96
.LBB174_21:                             # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB174_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB174_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB174_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB174_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB174_34
.LBB174_26:                             # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB174_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB174_32
.LBB174_28:                             # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB174_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB174_31
.LBB174_30:                             # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB174_31:                             # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB174_33
.LBB174_32:                             # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB174_33:                             # %if.end112
	jmp	.LBB174_34
.LBB174_34:                             # %if.end113
	jmp	.LBB174_39
.LBB174_35:                             # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB174_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB174_38
.LBB174_37:                             # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB174_38:                             # %if.end125
	jmp	.LBB174_39
.LBB174_39:                             # %if.end126
	jmp	.LBB174_47
.LBB174_40:                             # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB174_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB174_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB174_44
.LBB174_43:                             # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB174_44:                             # %if.end140
	jmp	.LBB174_46
.LBB174_45:                             # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB174_46:                             # %if.end145
	jmp	.LBB174_47
.LBB174_47:                             # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB174_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB174_93
.LBB174_49:                             # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB174_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB174_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB174_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB174_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB174_74
.LBB174_54:                             # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB174_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB174_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB174_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB174_73
.LBB174_58:                             # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB174_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB174_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB174_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB174_72
.LBB174_62:                             # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB174_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB174_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB174_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB174_71
.LBB174_66:                             # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB174_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB174_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB174_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB174_70:                             # %if.end223
	jmp	.LBB174_71
.LBB174_71:                             # %if.end224
	jmp	.LBB174_72
.LBB174_72:                             # %if.end225
	jmp	.LBB174_73
.LBB174_73:                             # %if.end226
	jmp	.LBB174_74
.LBB174_74:                             # %if.end227
	jmp	.LBB174_75
.LBB174_75:                             # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB174_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB174_77:                             # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB174_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB174_82
.LBB174_79:                             # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB174_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB174_81:                             # %if.end256
	jmp	.LBB174_82
.LBB174_82:                             # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB174_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-44(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB174_88
.LBB174_84:                             # %if.else275
	movl	dq, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB174_86
# %bb.85:                               # %if.then278
	movl	-40(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB174_87
.LBB174_86:                             # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB174_87:                             # %if.end292
	jmp	.LBB174_88
.LBB174_88:                             # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB174_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB174_90:                             # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB174_92
.LBB174_91:                             # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB174_92:                             # %if.end305
	jmp	.LBB174_94
.LBB174_93:                             # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB174_94:                             # %if.end309
	jmp	.LBB174_95
.LBB174_95:                             # %if.end310
	jmp	.LBB174_96
.LBB174_96:                             # %if.end311
	jmp	.LBB174_97
.LBB174_97:                             # %if.end312
	jmp	.LBB174_102
.LBB174_98:                             # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -48(%rbp)
	cmpl	$-1, -48(%rbp)
	jle	.LBB174_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB174_101
.LBB174_100:                            # %if.else331
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB174_101:                            # %if.end335
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB174_102:                            # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB174_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB174_105
.LBB174_104:                            # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB174_105:                            # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB174_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB174_107:                            # %if.end359
	movl	$0, -16(%rbp)
.LBB174_108:                            # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB174_110 Depth 2
                                        #       Child Loop BB174_112 Depth 3
                                        #         Child Loop BB174_114 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB174_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB174_108 Depth=1
	movl	$0, -20(%rbp)
.LBB174_110:                            # %for.cond364
                                        #   Parent Loop BB174_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB174_112 Depth 3
                                        #         Child Loop BB174_114 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB174_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB174_110 Depth=2
	movl	$0, -12(%rbp)
.LBB174_112:                            # %for.cond368
                                        #   Parent Loop BB174_108 Depth=1
                                        #     Parent Loop BB174_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB174_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB174_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB174_112 Depth=3
	movl	$0, -36(%rbp)
.LBB174_114:                            # %for.cond372
                                        #   Parent Loop BB174_108 Depth=1
                                        #     Parent Loop BB174_110 Depth=2
                                        #       Parent Loop BB174_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB174_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB174_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB174_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB174_114
.LBB174_117:                            # %for.end388
                                        #   in Loop: Header=BB174_112 Depth=3
	jmp	.LBB174_118
.LBB174_118:                            # %for.inc389
                                        #   in Loop: Header=BB174_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB174_112
.LBB174_119:                            # %for.end391
                                        #   in Loop: Header=BB174_110 Depth=2
	jmp	.LBB174_120
.LBB174_120:                            # %for.inc392
                                        #   in Loop: Header=BB174_110 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB174_110
.LBB174_121:                            # %for.end394
                                        #   in Loop: Header=BB174_108 Depth=1
	jmp	.LBB174_122
.LBB174_122:                            # %for.inc395
                                        #   in Loop: Header=BB174_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB174_108
.LBB174_123:                            # %for.end397
	movl	$0, -20(%rbp)
.LBB174_124:                            # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB174_126 Depth 2
                                        #       Child Loop BB174_128 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB174_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB174_124 Depth=1
	movl	$0, -12(%rbp)
.LBB174_126:                            # %for.cond402
                                        #   Parent Loop BB174_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB174_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB174_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB174_126 Depth=2
	movl	$0, -16(%rbp)
.LBB174_128:                            # %for.cond406
                                        #   Parent Loop BB174_124 Depth=1
                                        #     Parent Loop BB174_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -16(%rbp)
	jge	.LBB174_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB174_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB174_128 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB174_128
.LBB174_131:                            # %for.end432
                                        #   in Loop: Header=BB174_126 Depth=2
	jmp	.LBB174_132
.LBB174_132:                            # %for.inc433
                                        #   in Loop: Header=BB174_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB174_126
.LBB174_133:                            # %for.end435
                                        #   in Loop: Header=BB174_124 Depth=1
	jmp	.LBB174_134
.LBB174_134:                            # %for.inc436
                                        #   in Loop: Header=BB174_124 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB174_124
.LBB174_135:                            # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -16(%rbp)
.LBB174_136:                            # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB174_138 Depth 2
                                        #       Child Loop BB174_140 Depth 3
                                        #         Child Loop BB174_142 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB174_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB174_136 Depth=1
	movl	$0, -20(%rbp)
.LBB174_138:                            # %for.cond443
                                        #   Parent Loop BB174_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB174_140 Depth 3
                                        #         Child Loop BB174_142 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB174_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB174_138 Depth=2
	movl	$0, -12(%rbp)
.LBB174_140:                            # %for.cond447
                                        #   Parent Loop BB174_136 Depth=1
                                        #     Parent Loop BB174_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB174_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB174_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB174_140 Depth=3
	movl	$0, -36(%rbp)
.LBB174_142:                            # %for.cond451
                                        #   Parent Loop BB174_136 Depth=1
                                        #     Parent Loop BB174_138 Depth=2
                                        #       Parent Loop BB174_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB174_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB174_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-16(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB174_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB174_142
.LBB174_145:                            # %for.end465
                                        #   in Loop: Header=BB174_140 Depth=3
	jmp	.LBB174_146
.LBB174_146:                            # %for.inc466
                                        #   in Loop: Header=BB174_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB174_140
.LBB174_147:                            # %for.end468
                                        #   in Loop: Header=BB174_138 Depth=2
	jmp	.LBB174_148
.LBB174_148:                            # %for.inc469
                                        #   in Loop: Header=BB174_138 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB174_138
.LBB174_149:                            # %for.end471
                                        #   in Loop: Header=BB174_136 Depth=1
	jmp	.LBB174_150
.LBB174_150:                            # %for.inc472
                                        #   in Loop: Header=BB174_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB174_136
.LBB174_151:                            # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB174_152:                            # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB174_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB174_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB174_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB174_152
.LBB174_155:                            # %for.end483
	movl	$0, -12(%rbp)
.LBB174_156:                            # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB174_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB174_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB174_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB174_156
.LBB174_159:                            # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB174_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB174_161:                            # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB174_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB174_166
.LBB174_163:                            # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB174_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB174_165:                            # %if.end520
	jmp	.LBB174_166
.LBB174_166:                            # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB174_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB174_168:                            # %if.end536
	cmpl	$1938946272, -88(%rbp)  # imm = 0x7391F8E0
	jne	.LBB174_170
.LBB174_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB174_170:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB174_169
.Lfunc_end174:
	.size	start_macroblock.133, .Lfunc_end174-start_macroblock.133
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.134   # -- Begin function LumaPrediction4x4.134
	.p2align	4, 0x90
	.type	LumaPrediction4x4.134,@function
LumaPrediction4x4.134:                  # @LumaPrediction4x4.134
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$1441957600, -104(%rbp) # imm = 0x55F286E0
	movl	%edi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -72(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -56(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB175_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB175_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB175_6
.LBB175_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB175_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB175_5:                              # %land.end
.LBB175_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB175_9
# %bb.7:                                # %land.lhs.true11
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB175_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB175_10
.LBB175_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB175_10
.LBB175_10:                             # %cond.end
	movl	%ecx, -64(%rbp)
	movq	-88(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB175_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB175_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB175_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -20(%rbp)
	jne	.LBB175_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -60(%rbp)
	jne	.LBB175_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -72(%rbp)
	jne	.LBB175_20
# %bb.16:                               # %if.then
	movq	-88(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB175_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB175_19
.LBB175_18:                             # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB175_19:                             # %cond.end38
	movq	%rax, -96(%rbp)
.LBB175_20:                             # %if.end
	cmpl	$0, -20(%rbp)
	je	.LBB175_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -20(%rbp)
	jne	.LBB175_23
.LBB175_22:                             # %if.then45
	movl	-76(%rbp), %esi
	movl	-52(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-64(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB175_23:                             # %if.end58
	cmpl	$1, -20(%rbp)
	je	.LBB175_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -20(%rbp)
	jne	.LBB175_26
.LBB175_25:                             # %if.then64
	movl	-76(%rbp), %esi
	movl	-52(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-64(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB175_26:                             # %if.end77
	cmpl	$0, -100(%rbp)
	je	.LBB175_58
# %bb.27:                               # %if.then79
	cmpl	$2, -20(%rbp)
	jne	.LBB175_37
# %bb.28:                               # %if.then82
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB175_29:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB175_31 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB175_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB175_29 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB175_31:                             # %for.cond85
                                        #   Parent Loop BB175_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB175_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB175_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB175_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB175_31
.LBB175_34:                             # %for.end
                                        #   in Loop: Header=BB175_29 Depth=1
	jmp	.LBB175_35
.LBB175_35:                             # %for.inc125
                                        #   in Loop: Header=BB175_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB175_29
.LBB175_36:                             # %for.end127
	jmp	.LBB175_57
.LBB175_37:                             # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB175_47
# %bb.38:                               # %if.then130
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB175_39:                             # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB175_41 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB175_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB175_39 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB175_41:                             # %for.cond135
                                        #   Parent Loop BB175_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB175_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB175_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB175_41 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB175_41
.LBB175_44:                             # %for.end161
                                        #   in Loop: Header=BB175_39 Depth=1
	jmp	.LBB175_45
.LBB175_45:                             # %for.inc162
                                        #   in Loop: Header=BB175_39 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB175_39
.LBB175_46:                             # %for.end164
	jmp	.LBB175_56
.LBB175_47:                             # %if.else165
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB175_48:                             # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB175_50 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB175_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB175_48 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB175_50:                             # %for.cond170
                                        #   Parent Loop BB175_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB175_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB175_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB175_50 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB175_50
.LBB175_53:                             # %for.end196
                                        #   in Loop: Header=BB175_48 Depth=1
	jmp	.LBB175_54
.LBB175_54:                             # %for.inc197
                                        #   in Loop: Header=BB175_48 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB175_48
.LBB175_55:                             # %for.end199
	jmp	.LBB175_56
.LBB175_56:                             # %if.end200
	jmp	.LBB175_57
.LBB175_57:                             # %if.end201
	jmp	.LBB175_89
.LBB175_58:                             # %if.else202
	cmpl	$2, -20(%rbp)
	jne	.LBB175_68
# %bb.59:                               # %if.then205
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB175_60:                             # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB175_62 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB175_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB175_60 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB175_62:                             # %for.cond210
                                        #   Parent Loop BB175_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB175_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB175_62 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB175_62 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB175_62
.LBB175_65:                             # %for.end226
                                        #   in Loop: Header=BB175_60 Depth=1
	jmp	.LBB175_66
.LBB175_66:                             # %for.inc227
                                        #   in Loop: Header=BB175_60 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB175_60
.LBB175_67:                             # %for.end229
	jmp	.LBB175_88
.LBB175_68:                             # %if.else230
	cmpl	$0, -20(%rbp)
	jne	.LBB175_78
# %bb.69:                               # %if.then233
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB175_70:                             # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB175_72 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB175_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB175_70 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB175_72:                             # %for.cond238
                                        #   Parent Loop BB175_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB175_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB175_72 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB175_72 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB175_72
.LBB175_75:                             # %for.end251
                                        #   in Loop: Header=BB175_70 Depth=1
	jmp	.LBB175_76
.LBB175_76:                             # %for.inc252
                                        #   in Loop: Header=BB175_70 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB175_70
.LBB175_77:                             # %for.end254
	jmp	.LBB175_87
.LBB175_78:                             # %if.else255
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB175_79:                             # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB175_81 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB175_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB175_79 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB175_81:                             # %for.cond260
                                        #   Parent Loop BB175_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB175_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB175_81 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB175_81 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB175_81
.LBB175_84:                             # %for.end273
                                        #   in Loop: Header=BB175_79 Depth=1
	jmp	.LBB175_85
.LBB175_85:                             # %for.inc274
                                        #   in Loop: Header=BB175_79 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB175_79
.LBB175_86:                             # %for.end276
	jmp	.LBB175_87
.LBB175_87:                             # %if.end277
	jmp	.LBB175_88
.LBB175_88:                             # %if.end278
	jmp	.LBB175_89
.LBB175_89:                             # %if.end279
	cmpl	$1441957600, -104(%rbp) # imm = 0x55F286E0
	jne	.LBB175_91
.LBB175_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB175_91:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB175_90
.Lfunc_end175:
	.size	LumaPrediction4x4.134, .Lfunc_end175-LumaPrediction4x4.134
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer.135        # -- Begin function writeMBLayer.135
	.p2align	4, 0x90
	.type	writeMBLayer.135,@function
writeMBLayer.135:                       # @writeMBLayer.135
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$1094073394, -92(%rbp)  # imm = 0x41363C32
	movl	%edi, -100(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-72(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB176_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-72(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB176_3
.LBB176_2:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB176_3
.LBB176_3:                              # %cond.end
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB176_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB176_9
.LBB176_5:                              # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB176_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB176_8
.LBB176_7:                              # %cond.false13
	movl	$1, %eax
	jmp	.LBB176_8
.LBB176_8:                              # %cond.end14
.LBB176_9:                              # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -64(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB176_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB176_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -64(%rbp)
	jmp	.LBB176_24
.LBB176_12:                             # %if.else
	movq	-112(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB176_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB176_17
	jmp	.LBB176_18
.LBB176_14:                             # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB176_16
# %bb.15:                               # %cond.true28
	movq	-112(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB176_18
	jmp	.LBB176_17
.LBB176_16:                             # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB176_17
	jmp	.LBB176_18
.LBB176_17:                             # %if.then32
	movl	$1, -60(%rbp)
.LBB176_18:                             # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB176_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB176_23
.LBB176_20:                             # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB176_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB176_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB176_23:                             # %if.end50
	jmp	.LBB176_24
.LBB176_24:                             # %if.end51
	jmp	.LBB176_25
.LBB176_25:                             # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB176_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB176_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB176_28:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-120(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB176_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB176_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB176_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB176_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB176_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB176_35
.LBB176_34:                             # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB176_35:                             # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB176_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB176_38
.LBB176_37:                             # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB176_38:                             # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB176_39:                             # %if.end96
	jmp	.LBB176_40
.LBB176_40:                             # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB176_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB176_43
.LBB176_42:                             # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB176_43:                             # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB176_89
.LBB176_44:                             # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB176_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB176_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB176_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -64(%rbp)
	je	.LBB176_49
.LBB176_48:                             # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -96(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-96(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB176_49:                             # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB176_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB176_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB176_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB176_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB176_55
.LBB176_54:                             # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB176_55:                             # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB176_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB176_58
.LBB176_57:                             # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB176_58:                             # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB176_59:                             # %if.end198
	jmp	.LBB176_60
.LBB176_60:                             # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB176_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB176_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB176_64
.LBB176_63:                             # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB176_64:                             # %if.end226
	jmp	.LBB176_88
.LBB176_65:                             # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB176_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB176_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB176_76
.LBB176_68:                             # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB176_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB176_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB176_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB176_72:                             # %if.end281
	jmp	.LBB176_73
.LBB176_73:                             # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB176_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB176_75:                             # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB176_87
.LBB176_76:                             # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -68(%rbp)
.LBB176_77:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB176_79 Depth 2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB176_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB176_77 Depth=1
	movl	$0, -44(%rbp)
.LBB176_79:                             # %for.cond310
                                        #   Parent Loop BB176_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB176_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB176_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB176_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB176_79
.LBB176_82:                             # %for.end
                                        #   in Loop: Header=BB176_77 Depth=1
	jmp	.LBB176_83
.LBB176_83:                             # %for.inc322
                                        #   in Loop: Header=BB176_77 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB176_77
.LBB176_84:                             # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB176_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB176_86:                             # %if.end345
	jmp	.LBB176_87
.LBB176_87:                             # %if.end346
	jmp	.LBB176_88
.LBB176_88:                             # %if.end347
	jmp	.LBB176_89
.LBB176_89:                             # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB176_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB176_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB176_92:                             # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB176_104
# %bb.93:                               # %if.then366
	movq	-120(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB176_94:                             # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB176_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB176_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB176_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB176_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB176_98
.LBB176_97:                             # %if.else380
                                        #   in Loop: Header=BB176_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB176_98:                             # %if.end382
                                        #   in Loop: Header=BB176_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB176_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB176_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB176_101
.LBB176_100:                            # %lor.rhs409
                                        #   in Loop: Header=BB176_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB176_101:                            # %lor.end415
                                        #   in Loop: Header=BB176_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB176_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB176_94
.LBB176_103:                            # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB176_104:                            # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB176_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB176_114
.LBB176_106:                            # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB176_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB176_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB176_110
.LBB176_109:                            # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB176_110:                            # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB176_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB176_113
.LBB176_112:                            # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB176_113:                            # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB176_114:                            # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB176_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB176_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB176_120
.LBB176_117:                            # %if.else480
	cmpl	$0, -100(%rbp)
	jne	.LBB176_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB176_119:                            # %if.end483
	jmp	.LBB176_120
.LBB176_120:                            # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB176_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB176_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB176_123:                            # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB176_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB176_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB176_129
.LBB176_126:                            # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB176_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB176_128:                            # %if.end516
	jmp	.LBB176_129
.LBB176_129:                            # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$1094073394, -92(%rbp)  # imm = 0x41363C32
	jne	.LBB176_131
.LBB176_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB176_131:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB176_130
.Lfunc_end176:
	.size	writeMBLayer.135, .Lfunc_end176-writeMBLayer.135
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.136 # -- Begin function OneComponentChromaPrediction4x4.136
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.136,@function
OneComponentChromaPrediction4x4.136:    # @OneComponentChromaPrediction4x4.136
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$689495301, -112(%rbp)  # imm = 0x2918DD05
	movq	%rdi, -144(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -76(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -92(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-4(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -116(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB177_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB177_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB177_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB177_5
# %bb.4:                                # %if.then7
	movl	$4, -52(%rbp)
	jmp	.LBB177_6
.LBB177_5:                              # %if.else
	movl	$2, -52(%rbp)
.LBB177_6:                              # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB177_8
.LBB177_7:                              # %if.else10
	movl	$0, -52(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB177_8:                              # %if.end13
	movl	-92(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -40(%rbp)
.LBB177_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB177_11 Depth 2
	cmpl	$4, -40(%rbp)
	jge	.LBB177_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB177_9 Depth=1
	movl	$0, -32(%rbp)
.LBB177_11:                             # %for.cond20
                                        #   Parent Loop BB177_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -32(%rbp)
	jge	.LBB177_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB177_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-32(%rbp), %ecx
	addl	-64(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-40(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -136(%rbp)
	movl	-32(%rbp), %eax
	addl	-64(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-136(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-40(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-136(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-128(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB177_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB177_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB177_15
.LBB177_14:                             # %cond.false
                                        #   in Loop: Header=BB177_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB177_15:                             # %cond.end
                                        #   in Loop: Header=BB177_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB177_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB177_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB177_21
.LBB177_17:                             # %cond.false65
                                        #   in Loop: Header=BB177_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB177_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB177_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB177_20
.LBB177_19:                             # %cond.false74
                                        #   in Loop: Header=BB177_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB177_20:                             # %cond.end76
                                        #   in Loop: Header=BB177_11 Depth=2
.LBB177_21:                             # %cond.end78
                                        #   in Loop: Header=BB177_11 Depth=2
	movl	%eax, -56(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB177_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB177_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB177_24
.LBB177_23:                             # %cond.false84
                                        #   in Loop: Header=BB177_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB177_24:                             # %cond.end86
                                        #   in Loop: Header=BB177_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB177_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB177_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB177_30
.LBB177_26:                             # %cond.false91
                                        #   in Loop: Header=BB177_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB177_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB177_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB177_29
.LBB177_28:                             # %cond.false96
                                        #   in Loop: Header=BB177_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB177_29:                             # %cond.end98
                                        #   in Loop: Header=BB177_11 Depth=2
.LBB177_30:                             # %cond.end100
                                        #   in Loop: Header=BB177_11 Depth=2
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB177_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB177_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB177_33
.LBB177_32:                             # %cond.false111
                                        #   in Loop: Header=BB177_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB177_33:                             # %cond.end114
                                        #   in Loop: Header=BB177_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB177_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB177_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB177_39
.LBB177_35:                             # %cond.false119
                                        #   in Loop: Header=BB177_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB177_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB177_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB177_38
.LBB177_37:                             # %cond.false129
                                        #   in Loop: Header=BB177_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB177_38:                             # %cond.end132
                                        #   in Loop: Header=BB177_11 Depth=2
.LBB177_39:                             # %cond.end134
                                        #   in Loop: Header=BB177_11 Depth=2
	movl	%eax, -60(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB177_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB177_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB177_42
.LBB177_41:                             # %cond.false141
                                        #   in Loop: Header=BB177_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB177_42:                             # %cond.end144
                                        #   in Loop: Header=BB177_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB177_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB177_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB177_48
.LBB177_44:                             # %cond.false149
                                        #   in Loop: Header=BB177_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB177_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB177_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB177_47
.LBB177_46:                             # %cond.false155
                                        #   in Loop: Header=BB177_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB177_47:                             # %cond.end158
                                        #   in Loop: Header=BB177_11 Depth=2
.LBB177_48:                             # %cond.end160
                                        #   in Loop: Header=BB177_11 Depth=2
	movl	%eax, -68(%rbp)
	movl	-20(%rbp), %eax
	andl	-28(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-4(%rbp), %eax
	subl	-48(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-12(%rbp), %eax
	andl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-8(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-84(%rbp), %eax
	imull	-88(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-48(%rbp), %ecx
	imull	-88(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-80(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-60(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-84(%rbp), %ecx
	imull	-44(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-56(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-48(%rbp), %ecx
	imull	-44(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-60(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-116(%rbp), %eax
	cltd
	idivl	-72(%rbp)
	movq	-144(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -144(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB177_11 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB177_11
.LBB177_50:                             # %for.end
                                        #   in Loop: Header=BB177_9 Depth=1
	jmp	.LBB177_51
.LBB177_51:                             # %for.inc198
                                        #   in Loop: Header=BB177_9 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB177_9
.LBB177_52:                             # %for.end200
	cmpl	$689495301, -112(%rbp)  # imm = 0x2918DD05
	jne	.LBB177_54
.LBB177_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB177_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB177_53
.Lfunc_end177:
	.size	OneComponentChromaPrediction4x4.136, .Lfunc_end177-OneComponentChromaPrediction4x4.136
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer.137        # -- Begin function writeMBLayer.137
	.p2align	4, 0x90
	.type	writeMBLayer.137,@function
writeMBLayer.137:                       # @writeMBLayer.137
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$1635318918, -92(%rbp)  # imm = 0x6178FC86
	movl	%edi, -100(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-72(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB178_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-72(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB178_3
.LBB178_2:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB178_3
.LBB178_3:                              # %cond.end
	movq	%rax, -120(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB178_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB178_9
.LBB178_5:                              # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB178_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB178_8
.LBB178_7:                              # %cond.false13
	movl	$1, %eax
	jmp	.LBB178_8
.LBB178_8:                              # %cond.end14
.LBB178_9:                              # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -64(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB178_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB178_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -64(%rbp)
	jmp	.LBB178_24
.LBB178_12:                             # %if.else
	movq	-120(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB178_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB178_17
	jmp	.LBB178_18
.LBB178_14:                             # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB178_16
# %bb.15:                               # %cond.true28
	movq	-120(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB178_18
	jmp	.LBB178_17
.LBB178_16:                             # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB178_17
	jmp	.LBB178_18
.LBB178_17:                             # %if.then32
	movl	$1, -60(%rbp)
.LBB178_18:                             # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB178_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB178_23
.LBB178_20:                             # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB178_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB178_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB178_23:                             # %if.end50
	jmp	.LBB178_24
.LBB178_24:                             # %if.end51
	jmp	.LBB178_25
.LBB178_25:                             # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB178_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB178_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB178_28:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB178_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB178_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB178_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB178_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB178_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB178_35
.LBB178_34:                             # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB178_35:                             # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB178_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB178_38
.LBB178_37:                             # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB178_38:                             # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB178_39:                             # %if.end96
	jmp	.LBB178_40
.LBB178_40:                             # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB178_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB178_43
.LBB178_42:                             # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB178_43:                             # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB178_89
.LBB178_44:                             # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB178_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB178_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB178_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -64(%rbp)
	je	.LBB178_49
.LBB178_48:                             # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -96(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-96(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB178_49:                             # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB178_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB178_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB178_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB178_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB178_55
.LBB178_54:                             # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB178_55:                             # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB178_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB178_58
.LBB178_57:                             # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB178_58:                             # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB178_59:                             # %if.end198
	jmp	.LBB178_60
.LBB178_60:                             # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB178_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB178_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB178_64
.LBB178_63:                             # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB178_64:                             # %if.end226
	jmp	.LBB178_88
.LBB178_65:                             # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB178_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB178_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB178_76
.LBB178_68:                             # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB178_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB178_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB178_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB178_72:                             # %if.end281
	jmp	.LBB178_73
.LBB178_73:                             # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB178_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB178_75:                             # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB178_87
.LBB178_76:                             # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -68(%rbp)
.LBB178_77:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB178_79 Depth 2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB178_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB178_77 Depth=1
	movl	$0, -44(%rbp)
.LBB178_79:                             # %for.cond310
                                        #   Parent Loop BB178_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB178_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB178_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB178_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB178_79
.LBB178_82:                             # %for.end
                                        #   in Loop: Header=BB178_77 Depth=1
	jmp	.LBB178_83
.LBB178_83:                             # %for.inc322
                                        #   in Loop: Header=BB178_77 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB178_77
.LBB178_84:                             # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB178_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB178_86:                             # %if.end345
	jmp	.LBB178_87
.LBB178_87:                             # %if.end346
	jmp	.LBB178_88
.LBB178_88:                             # %if.end347
	jmp	.LBB178_89
.LBB178_89:                             # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB178_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB178_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB178_92:                             # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB178_104
# %bb.93:                               # %if.then366
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB178_94:                             # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB178_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB178_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB178_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB178_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB178_98
.LBB178_97:                             # %if.else380
                                        #   in Loop: Header=BB178_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB178_98:                             # %if.end382
                                        #   in Loop: Header=BB178_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB178_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB178_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB178_101
.LBB178_100:                            # %lor.rhs409
                                        #   in Loop: Header=BB178_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB178_101:                            # %lor.end415
                                        #   in Loop: Header=BB178_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB178_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB178_94
.LBB178_103:                            # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB178_104:                            # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB178_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB178_114
.LBB178_106:                            # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB178_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB178_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB178_110
.LBB178_109:                            # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB178_110:                            # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB178_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB178_113
.LBB178_112:                            # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB178_113:                            # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB178_114:                            # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB178_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB178_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB178_120
.LBB178_117:                            # %if.else480
	cmpl	$0, -100(%rbp)
	jne	.LBB178_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB178_119:                            # %if.end483
	jmp	.LBB178_120
.LBB178_120:                            # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB178_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB178_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB178_123:                            # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB178_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB178_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB178_129
.LBB178_126:                            # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB178_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB178_128:                            # %if.end516
	jmp	.LBB178_129
.LBB178_129:                            # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$1635318918, -92(%rbp)  # imm = 0x6178FC86
	jne	.LBB178_131
.LBB178_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB178_131:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB178_130
.Lfunc_end178:
	.size	writeMBLayer.137, .Lfunc_end178-writeMBLayer.137
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.138             # -- Begin function ZeroRef.138
	.p2align	4, 0x90
	.type	ZeroRef.138,@function
ZeroRef.138:                            # @ZeroRef.138
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1482620914, -24(%rbp)  # imm = 0x585EFFF2
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB179_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB179_3 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB179_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB179_1 Depth=1
	movl	$0, -12(%rbp)
.LBB179_3:                              # %for.cond1
                                        #   Parent Loop BB179_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB179_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB179_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB179_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB179_11
.LBB179_6:                              # %if.end
                                        #   in Loop: Header=BB179_3 Depth=2
	jmp	.LBB179_7
.LBB179_7:                              # %for.inc
                                        #   in Loop: Header=BB179_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB179_3
.LBB179_8:                              # %for.end
                                        #   in Loop: Header=BB179_1 Depth=1
	jmp	.LBB179_9
.LBB179_9:                              # %for.inc10
                                        #   in Loop: Header=BB179_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB179_1
.LBB179_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB179_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1482620914, -24(%rbp)  # imm = 0x585EFFF2
	jne	.LBB179_13
.LBB179_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB179_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB179_12
.Lfunc_end179:
	.size	ZeroRef.138, .Lfunc_end179-ZeroRef.138
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.139 # -- Begin function OneComponentLumaPrediction4x4.139
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.139,@function
OneComponentLumaPrediction4x4.139:      # @OneComponentLumaPrediction4x4.139
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1653714524, -84(%rbp)  # imm = 0x6291AE5C
	movq	%rdi, -16(%rbp)
	movl	%esi, -88(%rbp)
	movl	%edx, -92(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-92(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-88(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -24(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$1653714524, -84(%rbp)  # imm = 0x6291AE5C
	jne	.LBB180_2
.LBB180_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB180_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB180_1
.Lfunc_end180:
	.size	OneComponentLumaPrediction4x4.139, .Lfunc_end180-OneComponentLumaPrediction4x4.139
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.140 # -- Begin function writeCBPandLumaCoeff.140
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.140,@function
writeCBPandLumaCoeff.140:               # @writeCBPandLumaCoeff.140
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$228538680, -108(%rbp)  # imm = 0xD9F3938
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB181_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB181_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB181_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB181_7
.LBB181_4:                              # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB181_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB181_6:                              # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB181_10
.LBB181_7:                              # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB181_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB181_9:                              # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB181_10:                             # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB181_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB181_12:                             # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB181_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB181_18
.LBB181_14:                             # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB181_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB181_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB181_18
.LBB181_17:                             # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB181_22
.LBB181_18:                             # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB181_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB181_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB181_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB181_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB181_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB181_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB181_26
.LBB181_25:                             # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB181_26:                             # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB181_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB181_29
.LBB181_28:                             # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB181_29:                             # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB181_30:                             # %if.end93
	jmp	.LBB181_31
.LBB181_31:                             # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB181_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB181_42
.LBB181_33:                             # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB181_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB181_36
.LBB181_35:                             # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB181_36:                             # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB181_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB181_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB181_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB181_41
.LBB181_40:                             # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB181_41:                             # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB181_42:                             # %if.end138
	movl	$0, -40(%rbp)
.LBB181_43:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB181_45 Depth 2
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB181_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB181_43 Depth=1
	movl	$0, -20(%rbp)
.LBB181_45:                             # %for.cond141
                                        #   Parent Loop BB181_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB181_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB181_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB181_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB181_45
.LBB181_48:                             # %for.end
                                        #   in Loop: Header=BB181_43 Depth=1
	jmp	.LBB181_49
.LBB181_49:                             # %for.inc152
                                        #   in Loop: Header=BB181_43 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB181_43
.LBB181_50:                             # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB181_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB181_52:                             # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB181_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB181_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB181_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB181_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB181_55:                             # %if.end169
                                        #   in Loop: Header=BB181_52 Depth=1
	jmp	.LBB181_56
.LBB181_56:                             # %for.inc170
                                        #   in Loop: Header=BB181_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB181_52
.LBB181_57:                             # %for.end172
	jmp	.LBB181_101
.LBB181_58:                             # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB181_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB181_70
.LBB181_60:                             # %if.else179
	movl	$1, -60(%rbp)
	movl	$0, -36(%rbp)
.LBB181_61:                             # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jg	.LBB181_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB181_61 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
.LBB181_63:                             # %land.end184
                                        #   in Loop: Header=BB181_61 Depth=1
	testb	$1, %al
	jne	.LBB181_64
	jmp	.LBB181_69
.LBB181_64:                             # %for.body186
                                        #   in Loop: Header=BB181_61 Depth=1
	movq	-128(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -60(%rbp)
	movq	-136(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -100(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB181_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB181_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB181_67
.LBB181_66:                             # %if.else196
                                        #   in Loop: Header=BB181_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB181_67:                             # %if.end198
                                        #   in Loop: Header=BB181_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB181_61 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB181_61
.LBB181_69:                             # %for.end218
	jmp	.LBB181_70
.LBB181_70:                             # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB181_100
# %bb.71:                               # %if.then222
	movl	$0, -52(%rbp)
.LBB181_72:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB181_74 Depth 2
                                        #       Child Loop BB181_76 Depth 3
                                        #         Child Loop BB181_78 Depth 4
                                        #           Child Loop BB181_82 Depth 5
	cmpl	$4, -52(%rbp)
	jge	.LBB181_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB181_72 Depth=1
	movl	$0, -56(%rbp)
.LBB181_74:                             # %for.cond226
                                        #   Parent Loop BB181_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB181_76 Depth 3
                                        #         Child Loop BB181_78 Depth 4
                                        #           Child Loop BB181_82 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB181_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB181_74 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB181_76:                             # %for.cond229
                                        #   Parent Loop BB181_72 Depth=1
                                        #     Parent Loop BB181_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB181_78 Depth 4
                                        #           Child Loop BB181_82 Depth 5
	movl	-40(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB181_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB181_76 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB181_78:                             # %for.cond233
                                        #   Parent Loop BB181_72 Depth=1
                                        #     Parent Loop BB181_74 Depth=2
                                        #       Parent Loop BB181_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB181_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB181_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB181_78 Depth=4
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -68(%rbp)
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB181_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB181_78 Depth=4
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB181_91
.LBB181_81:                             # %if.else247
                                        #   in Loop: Header=BB181_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -60(%rbp)
	movl	$0, -36(%rbp)
.LBB181_82:                             # %for.cond259
                                        #   Parent Loop BB181_72 Depth=1
                                        #     Parent Loop BB181_74 Depth=2
                                        #       Parent Loop BB181_76 Depth=3
                                        #         Parent Loop BB181_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jge	.LBB181_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB181_82 Depth=5
	cmpl	$0, -60(%rbp)
	setne	%al
.LBB181_84:                             # %land.end263
                                        #   in Loop: Header=BB181_82 Depth=5
	testb	$1, %al
	jne	.LBB181_85
	jmp	.LBB181_90
.LBB181_85:                             # %for.body265
                                        #   in Loop: Header=BB181_82 Depth=5
	movq	-120(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -60(%rbp)
	movq	-144(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -100(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB181_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB181_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB181_88
.LBB181_87:                             # %if.else276
                                        #   in Loop: Header=BB181_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB181_88:                             # %if.end278
                                        #   in Loop: Header=BB181_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB181_82 Depth=5
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB181_82
.LBB181_90:                             # %for.end300
                                        #   in Loop: Header=BB181_78 Depth=4
	jmp	.LBB181_91
.LBB181_91:                             # %if.end301
                                        #   in Loop: Header=BB181_78 Depth=4
	jmp	.LBB181_92
.LBB181_92:                             # %for.inc302
                                        #   in Loop: Header=BB181_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB181_78
.LBB181_93:                             # %for.end304
                                        #   in Loop: Header=BB181_76 Depth=3
	jmp	.LBB181_94
.LBB181_94:                             # %for.inc305
                                        #   in Loop: Header=BB181_76 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB181_76
.LBB181_95:                             # %for.end307
                                        #   in Loop: Header=BB181_74 Depth=2
	jmp	.LBB181_96
.LBB181_96:                             # %for.inc308
                                        #   in Loop: Header=BB181_74 Depth=2
	movl	-56(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB181_74
.LBB181_97:                             # %for.end310
                                        #   in Loop: Header=BB181_72 Depth=1
	jmp	.LBB181_98
.LBB181_98:                             # %for.inc311
                                        #   in Loop: Header=BB181_72 Depth=1
	movl	-52(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB181_72
.LBB181_99:                             # %for.end313
	jmp	.LBB181_100
.LBB181_100:                            # %if.end314
	jmp	.LBB181_101
.LBB181_101:                            # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$228538680, -108(%rbp)  # imm = 0xD9F3938
	jne	.LBB181_103
.LBB181_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB181_103:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB181_102
.Lfunc_end181:
	.size	writeCBPandLumaCoeff.140, .Lfunc_end181-writeCBPandLumaCoeff.140
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.141    # -- Begin function writeChromaCoeff.141
	.p2align	4, 0x90
	.type	writeChromaCoeff.141,@function
writeChromaCoeff.141:                   # @writeChromaCoeff.141
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$1786415041, -84(%rbp)  # imm = 0x6A7A87C1
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB182_24
# %bb.1:                                # %if.then
	movl	$0, -24(%rbp)
.LBB182_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB182_6 Depth 2
	cmpl	$2, -24(%rbp)
	jge	.LBB182_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB182_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB182_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB182_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB182_21
.LBB182_5:                              # %if.else
                                        #   in Loop: Header=BB182_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -20(%rbp)
.LBB182_6:                              # %for.cond18
                                        #   Parent Loop BB182_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB182_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB182_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB182_8:                              # %land.end
                                        #   in Loop: Header=BB182_6 Depth=2
	testb	$1, %al
	jne	.LBB182_9
	jmp	.LBB182_20
.LBB182_9:                              # %for.body21
                                        #   in Loop: Header=BB182_6 Depth=2
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB182_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB182_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB182_12
.LBB182_11:                             # %if.else29
                                        #   in Loop: Header=BB182_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB182_12:                             # %if.end
                                        #   in Loop: Header=BB182_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB182_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB182_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB182_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB182_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB182_15:                             # %lor.end
                                        #   in Loop: Header=BB182_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB182_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB182_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB182_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB182_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB182_18:                             # %lor.end45
                                        #   in Loop: Header=BB182_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB182_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB182_6
.LBB182_20:                             # %for.end
                                        #   in Loop: Header=BB182_2 Depth=1
	jmp	.LBB182_21
.LBB182_21:                             # %if.end58
                                        #   in Loop: Header=BB182_2 Depth=1
	jmp	.LBB182_22
.LBB182_22:                             # %for.inc59
                                        #   in Loop: Header=BB182_2 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB182_2
.LBB182_23:                             # %for.end61
	jmp	.LBB182_24
.LBB182_24:                             # %if.end62
	movl	$-1, -24(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB182_52
# %bb.25:                               # %if.then64
	movl	$4, -28(%rbp)
.LBB182_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB182_28 Depth 2
                                        #       Child Loop BB182_32 Depth 3
	movl	-28(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB182_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB182_26 Depth=1
	movl	$0, -32(%rbp)
.LBB182_28:                             # %for.cond69
                                        #   Parent Loop BB182_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB182_32 Depth 3
	cmpl	$4, -32(%rbp)
	jge	.LBB182_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB182_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB182_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB182_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB182_47
.LBB182_31:                             # %if.else84
                                        #   in Loop: Header=BB182_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movl	$1, -52(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -20(%rbp)
.LBB182_32:                             # %for.cond115
                                        #   Parent Loop BB182_26 Depth=1
                                        #     Parent Loop BB182_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -20(%rbp)
	jge	.LBB182_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB182_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB182_34:                             # %land.end121
                                        #   in Loop: Header=BB182_32 Depth=3
	testb	$1, %al
	jne	.LBB182_35
	jmp	.LBB182_46
.LBB182_35:                             # %for.body122
                                        #   in Loop: Header=BB182_32 Depth=3
	movq	-144(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB182_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB182_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB182_38
.LBB182_37:                             # %if.else134
                                        #   in Loop: Header=BB182_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB182_38:                             # %if.end136
                                        #   in Loop: Header=BB182_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB182_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB182_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB182_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB182_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB182_41:                             # %lor.end149
                                        #   in Loop: Header=BB182_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB182_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB182_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB182_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB182_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB182_44:                             # %lor.end164
                                        #   in Loop: Header=BB182_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB182_32 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB182_32
.LBB182_46:                             # %for.end189
                                        #   in Loop: Header=BB182_28 Depth=2
	jmp	.LBB182_47
.LBB182_47:                             # %if.end190
                                        #   in Loop: Header=BB182_28 Depth=2
	jmp	.LBB182_48
.LBB182_48:                             # %for.inc191
                                        #   in Loop: Header=BB182_28 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB182_28
.LBB182_49:                             # %for.end193
                                        #   in Loop: Header=BB182_26 Depth=1
	jmp	.LBB182_50
.LBB182_50:                             # %for.inc194
                                        #   in Loop: Header=BB182_26 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB182_26
.LBB182_51:                             # %for.end196
	jmp	.LBB182_52
.LBB182_52:                             # %if.end197
	movl	-36(%rbp), %ebx
	cmpl	$1786415041, -84(%rbp)  # imm = 0x6A7A87C1
	jne	.LBB182_54
.LBB182_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB182_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB182_53
.Lfunc_end182:
	.size	writeChromaCoeff.141, .Lfunc_end182-writeChromaCoeff.141
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.142             # -- Begin function ZeroRef.142
	.p2align	4, 0x90
	.type	ZeroRef.142,@function
ZeroRef.142:                            # @ZeroRef.142
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1080538792, -24(%rbp)  # imm = 0x4067B6A8
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB183_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB183_3 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB183_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB183_1 Depth=1
	movl	$0, -12(%rbp)
.LBB183_3:                              # %for.cond1
                                        #   Parent Loop BB183_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB183_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB183_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB183_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB183_11
.LBB183_6:                              # %if.end
                                        #   in Loop: Header=BB183_3 Depth=2
	jmp	.LBB183_7
.LBB183_7:                              # %for.inc
                                        #   in Loop: Header=BB183_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB183_3
.LBB183_8:                              # %for.end
                                        #   in Loop: Header=BB183_1 Depth=1
	jmp	.LBB183_9
.LBB183_9:                              # %for.inc10
                                        #   in Loop: Header=BB183_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB183_1
.LBB183_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB183_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1080538792, -24(%rbp)  # imm = 0x4067B6A8
	jne	.LBB183_13
.LBB183_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB183_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB183_12
.Lfunc_end183:
	.size	ZeroRef.142, .Lfunc_end183-ZeroRef.142
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.143 # -- Begin function OneComponentLumaPrediction4x4.143
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.143,@function
OneComponentLumaPrediction4x4.143:      # @OneComponentLumaPrediction4x4.143
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$189944951, -88(%rbp)   # imm = 0xB525477
	movq	%rdi, -16(%rbp)
	movl	%esi, -92(%rbp)
	movl	%edx, -84(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-84(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-92(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -24(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$189944951, -88(%rbp)   # imm = 0xB525477
	jne	.LBB184_2
.LBB184_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB184_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB184_1
.Lfunc_end184:
	.size	OneComponentLumaPrediction4x4.143, .Lfunc_end184-OneComponentLumaPrediction4x4.143
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.144 # -- Begin function OneComponentLumaPrediction4x4.144
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.144,@function
OneComponentLumaPrediction4x4.144:      # @OneComponentLumaPrediction4x4.144
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$333751952, -92(%rbp)   # imm = 0x13E4A690
	movq	%rdi, -16(%rbp)
	movl	%esi, -88(%rbp)
	movl	%edx, -84(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-84(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-88(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -32(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$333751952, -92(%rbp)   # imm = 0x13E4A690
	jne	.LBB185_2
.LBB185_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB185_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB185_1
.Lfunc_end185:
	.size	OneComponentLumaPrediction4x4.144, .Lfunc_end185-OneComponentLumaPrediction4x4.144
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.145             # -- Begin function ZeroRef.145
	.p2align	4, 0x90
	.type	ZeroRef.145,@function
ZeroRef.145:                            # @ZeroRef.145
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$737768319, -24(%rbp)   # imm = 0x2BF9737F
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB186_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB186_3 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB186_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB186_1 Depth=1
	movl	$0, -12(%rbp)
.LBB186_3:                              # %for.cond1
                                        #   Parent Loop BB186_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB186_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB186_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB186_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB186_11
.LBB186_6:                              # %if.end
                                        #   in Loop: Header=BB186_3 Depth=2
	jmp	.LBB186_7
.LBB186_7:                              # %for.inc
                                        #   in Loop: Header=BB186_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB186_3
.LBB186_8:                              # %for.end
                                        #   in Loop: Header=BB186_1 Depth=1
	jmp	.LBB186_9
.LBB186_9:                              # %for.inc10
                                        #   in Loop: Header=BB186_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB186_1
.LBB186_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB186_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$737768319, -24(%rbp)   # imm = 0x2BF9737F
	jne	.LBB186_13
.LBB186_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB186_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB186_12
.Lfunc_end186:
	.size	ZeroRef.145, .Lfunc_end186-ZeroRef.145
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer.146        # -- Begin function writeMBLayer.146
	.p2align	4, 0x90
	.type	writeMBLayer.146,@function
writeMBLayer.146:                       # @writeMBLayer.146
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$400746814, -100(%rbp)  # imm = 0x17E2E93E
	movl	%edi, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-72(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB187_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-72(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB187_3
.LBB187_2:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB187_3
.LBB187_3:                              # %cond.end
	movq	%rax, -120(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB187_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB187_9
.LBB187_5:                              # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB187_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB187_8
.LBB187_7:                              # %cond.false13
	movl	$1, %eax
	jmp	.LBB187_8
.LBB187_8:                              # %cond.end14
.LBB187_9:                              # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -64(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB187_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB187_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -64(%rbp)
	jmp	.LBB187_24
.LBB187_12:                             # %if.else
	movq	-120(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB187_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB187_17
	jmp	.LBB187_18
.LBB187_14:                             # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB187_16
# %bb.15:                               # %cond.true28
	movq	-120(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB187_18
	jmp	.LBB187_17
.LBB187_16:                             # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB187_17
	jmp	.LBB187_18
.LBB187_17:                             # %if.then32
	movl	$1, -60(%rbp)
.LBB187_18:                             # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB187_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB187_23
.LBB187_20:                             # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB187_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB187_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB187_23:                             # %if.end50
	jmp	.LBB187_24
.LBB187_24:                             # %if.end51
	jmp	.LBB187_25
.LBB187_25:                             # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB187_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB187_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB187_28:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB187_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB187_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB187_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB187_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB187_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB187_35
.LBB187_34:                             # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB187_35:                             # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB187_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB187_38
.LBB187_37:                             # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB187_38:                             # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB187_39:                             # %if.end96
	jmp	.LBB187_40
.LBB187_40:                             # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB187_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB187_43
.LBB187_42:                             # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB187_43:                             # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB187_89
.LBB187_44:                             # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB187_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB187_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB187_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -64(%rbp)
	je	.LBB187_49
.LBB187_48:                             # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -92(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-92(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB187_49:                             # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB187_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB187_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB187_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB187_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB187_55
.LBB187_54:                             # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB187_55:                             # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB187_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB187_58
.LBB187_57:                             # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB187_58:                             # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB187_59:                             # %if.end198
	jmp	.LBB187_60
.LBB187_60:                             # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB187_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB187_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB187_64
.LBB187_63:                             # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB187_64:                             # %if.end226
	jmp	.LBB187_88
.LBB187_65:                             # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB187_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB187_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB187_76
.LBB187_68:                             # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB187_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB187_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB187_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB187_72:                             # %if.end281
	jmp	.LBB187_73
.LBB187_73:                             # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB187_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB187_75:                             # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB187_87
.LBB187_76:                             # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -68(%rbp)
.LBB187_77:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB187_79 Depth 2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB187_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB187_77 Depth=1
	movl	$0, -44(%rbp)
.LBB187_79:                             # %for.cond310
                                        #   Parent Loop BB187_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB187_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB187_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB187_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB187_79
.LBB187_82:                             # %for.end
                                        #   in Loop: Header=BB187_77 Depth=1
	jmp	.LBB187_83
.LBB187_83:                             # %for.inc322
                                        #   in Loop: Header=BB187_77 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB187_77
.LBB187_84:                             # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB187_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB187_86:                             # %if.end345
	jmp	.LBB187_87
.LBB187_87:                             # %if.end346
	jmp	.LBB187_88
.LBB187_88:                             # %if.end347
	jmp	.LBB187_89
.LBB187_89:                             # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB187_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB187_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB187_92:                             # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB187_104
# %bb.93:                               # %if.then366
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB187_94:                             # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB187_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB187_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB187_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB187_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB187_98
.LBB187_97:                             # %if.else380
                                        #   in Loop: Header=BB187_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB187_98:                             # %if.end382
                                        #   in Loop: Header=BB187_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB187_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB187_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB187_101
.LBB187_100:                            # %lor.rhs409
                                        #   in Loop: Header=BB187_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB187_101:                            # %lor.end415
                                        #   in Loop: Header=BB187_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB187_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB187_94
.LBB187_103:                            # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB187_104:                            # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB187_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB187_114
.LBB187_106:                            # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB187_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB187_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB187_110
.LBB187_109:                            # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB187_110:                            # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB187_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB187_113
.LBB187_112:                            # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB187_113:                            # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB187_114:                            # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB187_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB187_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB187_120
.LBB187_117:                            # %if.else480
	cmpl	$0, -96(%rbp)
	jne	.LBB187_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB187_119:                            # %if.end483
	jmp	.LBB187_120
.LBB187_120:                            # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB187_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB187_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB187_123:                            # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB187_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB187_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB187_129
.LBB187_126:                            # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB187_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB187_128:                            # %if.end516
	jmp	.LBB187_129
.LBB187_129:                            # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$400746814, -100(%rbp)  # imm = 0x17E2E93E
	jne	.LBB187_131
.LBB187_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB187_131:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB187_130
.Lfunc_end187:
	.size	writeMBLayer.146, .Lfunc_end187-writeMBLayer.146
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.147    # -- Begin function writeChromaCoeff.147
	.p2align	4, 0x90
	.type	writeChromaCoeff.147,@function
writeChromaCoeff.147:                   # @writeChromaCoeff.147
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$1812214628, -84(%rbp)  # imm = 0x6C043364
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB188_24
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB188_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB188_6 Depth 2
	cmpl	$2, -20(%rbp)
	jge	.LBB188_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB188_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB188_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB188_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB188_21
.LBB188_5:                              # %if.else
                                        #   in Loop: Header=BB188_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -24(%rbp)
.LBB188_6:                              # %for.cond18
                                        #   Parent Loop BB188_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB188_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB188_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB188_8:                              # %land.end
                                        #   in Loop: Header=BB188_6 Depth=2
	testb	$1, %al
	jne	.LBB188_9
	jmp	.LBB188_20
.LBB188_9:                              # %for.body21
                                        #   in Loop: Header=BB188_6 Depth=2
	movq	-136(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-120(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB188_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB188_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB188_12
.LBB188_11:                             # %if.else29
                                        #   in Loop: Header=BB188_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB188_12:                             # %if.end
                                        #   in Loop: Header=BB188_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB188_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB188_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB188_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB188_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB188_15:                             # %lor.end
                                        #   in Loop: Header=BB188_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB188_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB188_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB188_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB188_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB188_18:                             # %lor.end45
                                        #   in Loop: Header=BB188_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB188_6 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB188_6
.LBB188_20:                             # %for.end
                                        #   in Loop: Header=BB188_2 Depth=1
	jmp	.LBB188_21
.LBB188_21:                             # %if.end58
                                        #   in Loop: Header=BB188_2 Depth=1
	jmp	.LBB188_22
.LBB188_22:                             # %for.inc59
                                        #   in Loop: Header=BB188_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB188_2
.LBB188_23:                             # %for.end61
	jmp	.LBB188_24
.LBB188_24:                             # %if.end62
	movl	$-1, -20(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB188_52
# %bb.25:                               # %if.then64
	movl	$4, -32(%rbp)
.LBB188_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB188_28 Depth 2
                                        #       Child Loop BB188_32 Depth 3
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB188_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB188_26 Depth=1
	movl	$0, -28(%rbp)
.LBB188_28:                             # %for.cond69
                                        #   Parent Loop BB188_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB188_32 Depth 3
	cmpl	$4, -28(%rbp)
	jge	.LBB188_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB188_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB188_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB188_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB188_47
.LBB188_31:                             # %if.else84
                                        #   in Loop: Header=BB188_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movl	$1, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -24(%rbp)
.LBB188_32:                             # %for.cond115
                                        #   Parent Loop BB188_26 Depth=1
                                        #     Parent Loop BB188_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -24(%rbp)
	jge	.LBB188_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB188_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB188_34:                             # %land.end121
                                        #   in Loop: Header=BB188_32 Depth=3
	testb	$1, %al
	jne	.LBB188_35
	jmp	.LBB188_46
.LBB188_35:                             # %for.body122
                                        #   in Loop: Header=BB188_32 Depth=3
	movq	-128(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-144(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB188_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB188_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB188_38
.LBB188_37:                             # %if.else134
                                        #   in Loop: Header=BB188_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB188_38:                             # %if.end136
                                        #   in Loop: Header=BB188_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB188_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB188_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB188_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB188_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB188_41:                             # %lor.end149
                                        #   in Loop: Header=BB188_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB188_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB188_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB188_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB188_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB188_44:                             # %lor.end164
                                        #   in Loop: Header=BB188_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB188_32 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB188_32
.LBB188_46:                             # %for.end189
                                        #   in Loop: Header=BB188_28 Depth=2
	jmp	.LBB188_47
.LBB188_47:                             # %if.end190
                                        #   in Loop: Header=BB188_28 Depth=2
	jmp	.LBB188_48
.LBB188_48:                             # %for.inc191
                                        #   in Loop: Header=BB188_28 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB188_28
.LBB188_49:                             # %for.end193
                                        #   in Loop: Header=BB188_26 Depth=1
	jmp	.LBB188_50
.LBB188_50:                             # %for.inc194
                                        #   in Loop: Header=BB188_26 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB188_26
.LBB188_51:                             # %for.end196
	jmp	.LBB188_52
.LBB188_52:                             # %if.end197
	movl	-36(%rbp), %ebx
	cmpl	$1812214628, -84(%rbp)  # imm = 0x6C043364
	jne	.LBB188_54
.LBB188_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB188_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB188_53
.Lfunc_end188:
	.size	writeChromaCoeff.147, .Lfunc_end188-writeChromaCoeff.147
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.148        # -- Begin function MBType2Value.148
	.p2align	4, 0x90
	.type	MBType2Value.148,@function
MBType2Value.148:                       # @MBType2Value.148
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1352975125, -36(%rbp)  # imm = 0x50A4C315
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB189_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB189_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB189_4
.LBB189_3:                              # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB189_26
.LBB189_4:                              # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB189_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB189_26
.LBB189_6:                              # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB189_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB189_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB189_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB189_26
.LBB189_10:                             # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB189_26
.LBB189_11:                             # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB189_26
.LBB189_12:                             # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB189_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB189_26
.LBB189_14:                             # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB189_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB189_17
.LBB189_16:                             # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB189_26
.LBB189_17:                             # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB189_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB189_26
.LBB189_19:                             # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB189_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB189_26
.LBB189_21:                             # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB189_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB189_26
.LBB189_23:                             # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB189_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB189_26
.LBB189_25:                             # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB189_26:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$1352975125, -36(%rbp)  # imm = 0x50A4C315
	jne	.LBB189_28
.LBB189_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB189_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB189_27
.Lfunc_end189:
	.size	MBType2Value.148, .Lfunc_end189-MBType2Value.148
	.cfi_endproc
                                        # -- End function
	.type	MODTAB,@object          # @MODTAB
	.section	.rodata,"a",@progbits
	.globl	MODTAB
	.p2align	4
MODTAB:
	.long	0                       # 0x0
	.long	4                       # 0x4
	.long	16                      # 0x10
	.long	12                      # 0xc
	.long	8                       # 0x8
	.long	20                      # 0x14
	.size	MODTAB, 24

	.type	NCBP,@object            # @NCBP
	.globl	NCBP
	.p2align	4
NCBP:
	.asciz	"\001"
	.ascii	"\n\001"
	.ascii	"\013\002"
	.ascii	"\006\005"
	.ascii	"\f\003"
	.ascii	"\007\006"
	.zero	2,14
	.ascii	"\002\n"
	.ascii	"\r\004"
	.zero	2,15
	.ascii	"\b\007"
	.ascii	"\003\013"
	.ascii	"\t\b"
	.ascii	"\004\f"
	.ascii	"\005\r"
	.ascii	"\000\t"
	.zero	64
	.asciz	"\003"
	.ascii	"\035\002"
	.ascii	"\036\003"
	.ascii	"\021\007"
	.ascii	"\037\004"
	.ascii	"\022\b"
	.ascii	"%\021"
	.ascii	"\b\r"
	.ascii	" \005"
	.ascii	"&\022"
	.ascii	"\023\t"
	.ascii	"\t\016"
	.ascii	"\024\n"
	.ascii	"\n\017"
	.ascii	"\013\020"
	.ascii	"\002\013"
	.ascii	"\020\001"
	.ascii	"! "
	.ascii	"\"!"
	.ascii	"\025$"
	.ascii	"#\""
	.ascii	"\026%"
	.ascii	"',"
	.ascii	"\004("
	.ascii	"$#"
	.ascii	"(-"
	.ascii	"\027&"
	.ascii	"\005)"
	.ascii	"\030'"
	.ascii	"\006*"
	.ascii	"\007+"
	.ascii	"\001\023"
	.ascii	")\006"
	.ascii	"*\030"
	.ascii	"+\031"
	.ascii	"\031\024"
	.ascii	",\032"
	.ascii	"\032\025"
	.zero	2,46
	.ascii	"\f\034"
	.ascii	"-\033"
	.zero	2,47
	.ascii	"\033\026"
	.ascii	"\r\035"
	.ascii	"\034\027"
	.ascii	"\016\036"
	.ascii	"\017\037"
	.ascii	"\000\f"
	.size	NCBP, 192

	.type	subblk_offset_x,@object # @subblk_offset_x
	.globl	subblk_offset_x
	.p2align	4
subblk_offset_x:
	.ascii	"\000\004\000\004"
	.ascii	"\000\004\000\004"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\000\004\000\004"
	.ascii	"\000\004\000\004"
	.ascii	"\000\004\000\004"
	.ascii	"\000\004\000\004"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\000\004\000\004"
	.ascii	"\b\f\b\f"
	.ascii	"\000\004\000\004"
	.ascii	"\b\f\b\f"
	.ascii	"\000\004\000\004"
	.ascii	"\b\f\b\f"
	.ascii	"\000\004\000\004"
	.ascii	"\b\f\b\f"
	.size	subblk_offset_x, 96

	.type	subblk_offset_y,@object # @subblk_offset_y
	.globl	subblk_offset_y
	.p2align	4
subblk_offset_y:
	.ascii	"\000\000\004\004"
	.ascii	"\000\000\004\004"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\000\000\004\004"
	.ascii	"\b\b\f\f"
	.ascii	"\000\000\004\004"
	.ascii	"\b\b\f\f"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\000\000\004\004"
	.ascii	"\000\000\004\004"
	.ascii	"\b\b\f\f"
	.ascii	"\b\b\f\f"
	.ascii	"\000\000\004\004"
	.ascii	"\000\000\004\004"
	.ascii	"\b\b\f\f"
	.ascii	"\b\b\f\f"
	.size	subblk_offset_y, 96

	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	dq,@object              # @dq
	.comm	dq,4,4
	.type	predict_error,@object   # @predict_error
	.comm	predict_error,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	terminate_macroblock.skip,@object # @terminate_macroblock.skip
	.local	terminate_macroblock.skip
	.comm	terminate_macroblock.skip,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"Slice Mode %d not supported"
	.size	.L.str, 28

	.type	LumaPrediction4x4.fw_pred,@object # @LumaPrediction4x4.fw_pred
	.local	LumaPrediction4x4.fw_pred
	.comm	LumaPrediction4x4.fw_pred,64,16
	.type	LumaPrediction4x4.bw_pred,@object # @LumaPrediction4x4.bw_pred
	.local	LumaPrediction4x4.bw_pred
	.comm	LumaPrediction4x4.bw_pred,64,16
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	LumaPrediction4x4Bi.fw_pred,@object # @LumaPrediction4x4Bi.fw_pred
	.local	LumaPrediction4x4Bi.fw_pred
	.comm	LumaPrediction4x4Bi.fw_pred,64,16
	.type	LumaPrediction4x4Bi.bw_pred,@object # @LumaPrediction4x4Bi.bw_pred
	.local	LumaPrediction4x4Bi.bw_pred
	.comm	LumaPrediction4x4Bi.bw_pred,64,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	ChromaPrediction4x4.fw_pred,@object # @ChromaPrediction4x4.fw_pred
	.local	ChromaPrediction4x4.fw_pred
	.comm	ChromaPrediction4x4.fw_pred,64,16
	.type	ChromaPrediction4x4.bw_pred,@object # @ChromaPrediction4x4.bw_pred
	.local	ChromaPrediction4x4.bw_pred
	.comm	ChromaPrediction4x4.bw_pred,64,16
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	.L__const.ChromaResidualCoding.block8x8_idx,@object # @__const.ChromaResidualCoding.block8x8_idx
	.section	.rodata,"a",@progbits
	.p2align	4
.L__const.ChromaResidualCoding.block8x8_idx:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	3                       # 0x3
	.size	.L__const.ChromaResidualCoding.block8x8_idx, 192

	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	.L__const.IntraChromaPrediction.block_pos,@object # @__const.IntraChromaPrediction.block_pos
	.p2align	4
.L__const.IntraChromaPrediction.block_pos:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.zero	16
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	3                       # 0x3
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.size	.L__const.IntraChromaPrediction.block_pos, 192

	.type	MBType2Value.dir1offset,@object # @MBType2Value.dir1offset
	.p2align	2
MBType2Value.dir1offset:
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.size	MBType2Value.dir1offset, 12

	.type	MBType2Value.dir2offset,@object # @MBType2Value.dir2offset
	.p2align	4
MBType2Value.dir2offset:
	.long	0                       # 0x0
	.long	4                       # 0x4
	.long	8                       # 0x8
	.long	6                       # 0x6
	.long	2                       # 0x2
	.long	10                      # 0xa
	.long	12                      # 0xc
	.long	14                      # 0xe
	.long	16                      # 0x10
	.size	MBType2Value.dir2offset, 36

	.type	B8Mode2Value.b8start,@object # @B8Mode2Value.b8start
	.p2align	4
B8Mode2Value.b8start:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	10                      # 0xa
	.size	B8Mode2Value.b8start, 32

	.type	B8Mode2Value.b8inc,@object # @B8Mode2Value.b8inc
	.p2align	4
B8Mode2Value.b8inc:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	1                       # 0x1
	.size	B8Mode2Value.b8inc, 32

	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	.L__const.writeChromaCoeff.chroma_dc_context,@object # @__const.writeChromaCoeff.chroma_dc_context
	.p2align	2
.L__const.writeChromaCoeff.chroma_dc_context:
	.long	6                       # 0x6
	.long	8                       # 0x8
	.long	9                       # 0x9
	.size	.L__const.writeChromaCoeff.chroma_dc_context, 12

	.type	writeChromaCoeff.chroma_ac_param,@object # @writeChromaCoeff.chroma_ac_param
	.data
	.p2align	4
writeChromaCoeff.chroma_ac_param:
	.ascii	"\004\024\005\025"
	.ascii	"$4%5"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\004\024\005\025"
	.ascii	"\006\026\007\027"
	.ascii	"$4%5"
	.ascii	"&6'7"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\004\024\005\025"
	.ascii	"$4%5"
	.ascii	"\006\026\007\027"
	.ascii	"&6'7"
	.ascii	"\b\030\t\031"
	.ascii	"(8)9"
	.ascii	"\n\032\013\033"
	.ascii	"*:+;"
	.size	writeChromaCoeff.chroma_ac_param, 96

	.type	.L__const.predict_nnz_chroma.j_off_tab,@object # @__const.predict_nnz_chroma.j_off_tab
	.section	.rodata,"a",@progbits
	.p2align	4
.L__const.predict_nnz_chroma.j_off_tab:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	8                       # 0x8
	.size	.L__const.predict_nnz_chroma.j_off_tab, 48

	.type	.L__const.writeCoeff4x4_CAVLC.incVlc,@object # @__const.writeCoeff4x4_CAVLC.incVlc
	.p2align	4
.L__const.writeCoeff4x4_CAVLC.incVlc:
	.long	0                       # 0x0
	.long	3                       # 0x3
	.long	6                       # 0x6
	.long	12                      # 0xc
	.long	24                      # 0x18
	.long	48                      # 0x30
	.long	32768                   # 0x8000
	.size	.L__const.writeCoeff4x4_CAVLC.incVlc, 28

	.type	.L.str.1,@object        # @.str.1
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.1:
	.asciz	"%s"
	.size	.L.str.1, 3

	.type	.L.str.2,@object        # @.str.2
.L.str.2:
	.asciz	"Luma"
	.size	.L.str.2, 5

	.type	.L.str.3,@object        # @.str.3
.L.str.3:
	.asciz	"Lum16DC"
	.size	.L.str.3, 8

	.type	.L.str.4,@object        # @.str.4
.L.str.4:
	.asciz	"Lum16AC"
	.size	.L.str.4, 8

	.type	.L.str.5,@object        # @.str.5
.L.str.5:
	.asciz	"ChrDC"
	.size	.L.str.5, 6

	.type	.L.str.6,@object        # @.str.6
.L.str.6:
	.asciz	"ChrAC"
	.size	.L.str.6, 6

	.type	.L.str.7,@object        # @.str.7
.L.str.7:
	.asciz	"writeCoeff4x4_CAVLC: Invalid block type"
	.size	.L.str.7, 40

	.type	.L.str.8,@object        # @.str.8
.L.str.8:
	.asciz	"ERROR: level > 1\n"
	.size	.L.str.8, 18

	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4
	.type	bit_rate,@object        # @bit_rate
	.comm	bit_rate,8,8
	.type	frame_rate,@object      # @frame_rate
	.comm	frame_rate,8,8
	.type	GAMMAP,@object          # @GAMMAP
	.comm	GAMMAP,8,8
	.type	BETAP,@object           # @BETAP
	.comm	BETAP,8,8
	.type	RC_MAX_QUANT,@object    # @RC_MAX_QUANT
	.comm	RC_MAX_QUANT,4,4
	.type	RC_MIN_QUANT,@object    # @RC_MIN_QUANT
	.comm	RC_MIN_QUANT,4,4
	.type	BufferSize,@object      # @BufferSize
	.comm	BufferSize,8,8
	.type	GOPTargetBufferLevel,@object # @GOPTargetBufferLevel
	.comm	GOPTargetBufferLevel,8,8
	.type	CurrentBufferFullness,@object # @CurrentBufferFullness
	.comm	CurrentBufferFullness,8,8
	.type	TargetBufferLevel,@object # @TargetBufferLevel
	.comm	TargetBufferLevel,8,8
	.type	PreviousBit_Rate,@object # @PreviousBit_Rate
	.comm	PreviousBit_Rate,8,8
	.type	AWp,@object             # @AWp
	.comm	AWp,8,8
	.type	AWb,@object             # @AWb
	.comm	AWb,8,8
	.type	MyInitialQp,@object     # @MyInitialQp
	.comm	MyInitialQp,4,4
	.type	PAverageQp,@object      # @PAverageQp
	.comm	PAverageQp,4,4
	.type	PreviousPictureMAD,@object # @PreviousPictureMAD
	.comm	PreviousPictureMAD,8,8
	.type	MADPictureC1,@object    # @MADPictureC1
	.comm	MADPictureC1,8,8
	.type	MADPictureC2,@object    # @MADPictureC2
	.comm	MADPictureC2,8,8
	.type	PMADPictureC1,@object   # @PMADPictureC1
	.comm	PMADPictureC1,8,8
	.type	PMADPictureC2,@object   # @PMADPictureC2
	.comm	PMADPictureC2,8,8
	.type	PictureRejected,@object # @PictureRejected
	.comm	PictureRejected,84,16
	.type	PPictureMAD,@object     # @PPictureMAD
	.comm	PPictureMAD,168,16
	.type	PictureMAD,@object      # @PictureMAD
	.comm	PictureMAD,168,16
	.type	ReferenceMAD,@object    # @ReferenceMAD
	.comm	ReferenceMAD,168,16
	.type	m_rgRejected,@object    # @m_rgRejected
	.comm	m_rgRejected,84,16
	.type	m_rgQp,@object          # @m_rgQp
	.comm	m_rgQp,168,16
	.type	m_rgRp,@object          # @m_rgRp
	.comm	m_rgRp,168,16
	.type	m_X1,@object            # @m_X1
	.comm	m_X1,8,8
	.type	m_X2,@object            # @m_X2
	.comm	m_X2,8,8
	.type	m_Qc,@object            # @m_Qc
	.comm	m_Qc,4,4
	.type	m_Qstep,@object         # @m_Qstep
	.comm	m_Qstep,8,8
	.type	m_Qp,@object            # @m_Qp
	.comm	m_Qp,4,4
	.type	Pm_Qp,@object           # @Pm_Qp
	.comm	Pm_Qp,4,4
	.type	PreAveMBHeader,@object  # @PreAveMBHeader
	.comm	PreAveMBHeader,4,4
	.type	CurAveMBHeader,@object  # @CurAveMBHeader
	.comm	CurAveMBHeader,4,4
	.type	PPreHeader,@object      # @PPreHeader
	.comm	PPreHeader,4,4
	.type	PreviousQp1,@object     # @PreviousQp1
	.comm	PreviousQp1,4,4
	.type	PreviousQp2,@object     # @PreviousQp2
	.comm	PreviousQp2,4,4
	.type	NumberofBFrames,@object # @NumberofBFrames
	.comm	NumberofBFrames,4,4
	.type	TotalFrameQP,@object    # @TotalFrameQP
	.comm	TotalFrameQP,4,4
	.type	NumberofBasicUnit,@object # @NumberofBasicUnit
	.comm	NumberofBasicUnit,4,4
	.type	PAveHeaderBits1,@object # @PAveHeaderBits1
	.comm	PAveHeaderBits1,4,4
	.type	PAveHeaderBits2,@object # @PAveHeaderBits2
	.comm	PAveHeaderBits2,4,4
	.type	PAveHeaderBits3,@object # @PAveHeaderBits3
	.comm	PAveHeaderBits3,4,4
	.type	PAveFrameQP,@object     # @PAveFrameQP
	.comm	PAveFrameQP,4,4
	.type	TotalNumberofBasicUnit,@object # @TotalNumberofBasicUnit
	.comm	TotalNumberofBasicUnit,4,4
	.type	CodedBasicUnit,@object  # @CodedBasicUnit
	.comm	CodedBasicUnit,4,4
	.type	MINVALUE,@object        # @MINVALUE
	.comm	MINVALUE,8,8
	.type	CurrentFrameMAD,@object # @CurrentFrameMAD
	.comm	CurrentFrameMAD,8,8
	.type	CurrentBUMAD,@object    # @CurrentBUMAD
	.comm	CurrentBUMAD,8,8
	.type	TotalBUMAD,@object      # @TotalBUMAD
	.comm	TotalBUMAD,8,8
	.type	PreviousFrameMAD,@object # @PreviousFrameMAD
	.comm	PreviousFrameMAD,8,8
	.type	m_Hp,@object            # @m_Hp
	.comm	m_Hp,4,4
	.type	m_windowSize,@object    # @m_windowSize
	.comm	m_windowSize,4,4
	.type	MADm_windowSize,@object # @MADm_windowSize
	.comm	MADm_windowSize,4,4
	.type	DDquant,@object         # @DDquant
	.comm	DDquant,4,4
	.type	MBPerRow,@object        # @MBPerRow
	.comm	MBPerRow,4,4
	.type	AverageMADPreviousFrame,@object # @AverageMADPreviousFrame
	.comm	AverageMADPreviousFrame,8,8
	.type	TotalBasicUnitBits,@object # @TotalBasicUnitBits
	.comm	TotalBasicUnitBits,4,4
	.type	QPLastPFrame,@object    # @QPLastPFrame
	.comm	QPLastPFrame,4,4
	.type	QPLastGOP,@object       # @QPLastGOP
	.comm	QPLastGOP,4,4
	.type	Pm_rgQp,@object         # @Pm_rgQp
	.comm	Pm_rgQp,160,16
	.type	Pm_rgRp,@object         # @Pm_rgRp
	.comm	Pm_rgRp,160,16
	.type	Pm_X1,@object           # @Pm_X1
	.comm	Pm_X1,8,8
	.type	Pm_X2,@object           # @Pm_X2
	.comm	Pm_X2,8,8
	.type	Pm_Hp,@object           # @Pm_Hp
	.comm	Pm_Hp,4,4
	.type	FieldQPBuffer,@object   # @FieldQPBuffer
	.comm	FieldQPBuffer,4,4
	.type	FrameQPBuffer,@object   # @FrameQPBuffer
	.comm	FrameQPBuffer,4,4
	.type	FrameAveHeaderBits,@object # @FrameAveHeaderBits
	.comm	FrameAveHeaderBits,4,4
	.type	FieldAveHeaderBits,@object # @FieldAveHeaderBits
	.comm	FieldAveHeaderBits,4,4
	.type	BUPFMAD,@object         # @BUPFMAD
	.comm	BUPFMAD,8,8
	.type	BUCFMAD,@object         # @BUCFMAD
	.comm	BUCFMAD,8,8
	.type	FCBUCFMAD,@object       # @FCBUCFMAD
	.comm	FCBUCFMAD,8,8
	.type	FCBUPFMAD,@object       # @FCBUPFMAD
	.comm	FCBUPFMAD,8,8
	.type	GOPOverdue,@object      # @GOPOverdue
	.comm	GOPOverdue,4,4
	.type	diffy,@object           # @diffy
	.comm	diffy,1024,16
	.type	diffyy,@object          # @diffyy
	.comm	diffyy,1024,16
	.type	diffy8,@object          # @diffy8
	.comm	diffy8,1024,16

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
