	.text
	.file	"context_ini.c"
	.globl	create_context_memory   # -- Begin function create_context_memory
	.p2align	4, 0x90
	.type	create_context_memory,@function
create_context_memory:                  # @create_context_memory
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB0_17
# %bb.1:                                # %func_create_context_memory.2
	callq	create_context_memory.2
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_create_context_memory.3
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.3
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_create_context_memory.14
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_create_context_memory.36
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.36
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %func_create_context_memory.52
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.52
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_6:                                # %func_create_context_memory.57
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.57
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_7:                                # %func_create_context_memory.58
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.58
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_8:                                # %func_create_context_memory.65
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.65
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_9:                                # %func_create_context_memory.66
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.66
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_10:                               # %func_create_context_memory.68
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.68
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_11:                               # %func_create_context_memory.70
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.70
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_12:                               # %func_create_context_memory.71
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.71
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_13:                               # %func_create_context_memory.72
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.72
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_14:                               # %func_create_context_memory.79
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.79
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_15:                               # %func_create_context_memory.80
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.80
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_16:                               # %func_create_context_memory.84
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.84
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB0_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB0_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB0_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB0_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB0_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB0_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB0_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB0_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB0_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB0_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB0_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB0_15
	jmp	.LBB0_16
.Lfunc_end0:
	.size	create_context_memory, .Lfunc_end0-create_context_memory
	.cfi_endproc
                                        # -- End function
	.globl	free_context_memory     # -- Begin function free_context_memory
	.p2align	4, 0x90
	.type	free_context_memory,@function
free_context_memory:                    # @free_context_memory
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB1_2
# %bb.1:                                # %func_free_context_memory.1
	callq	free_context_memory.1
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_free_context_memory.7
	.cfi_def_cfa %rbp, 16
	callq	free_context_memory.7
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end1:
	.size	free_context_memory, .Lfunc_end1-free_context_memory
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber       # -- Begin function SetCtxModelNumber
	.p2align	4, 0x90
	.type	SetCtxModelNumber,@function
SetCtxModelNumber:                      # @SetCtxModelNumber
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB2_7
# %bb.1:                                # %func_SetCtxModelNumber.9
	callq	SetCtxModelNumber.9
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_SetCtxModelNumber.11
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.11
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_3:                                # %func_SetCtxModelNumber.16
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.16
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_4:                                # %func_SetCtxModelNumber.39
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.39
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_5:                                # %func_SetCtxModelNumber.45
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.45
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_6:                                # %func_SetCtxModelNumber.48
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.48
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_7:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB2_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB2_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB2_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB2_5
	jmp	.LBB2_6
.Lfunc_end2:
	.size	SetCtxModelNumber, .Lfunc_end2-SetCtxModelNumber
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts           # -- Begin function init_contexts
	.p2align	4, 0x90
	.type	init_contexts,@function
init_contexts:                          # @init_contexts
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB3_17
# %bb.1:                                # %func_init_contexts.21
	callq	init_contexts.21
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_init_contexts.23
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.23
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_init_contexts.25
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.25
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_init_contexts.30
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.30
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %func_init_contexts.41
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.41
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_6:                                # %func_init_contexts.42
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.42
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_7:                                # %func_init_contexts.54
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.54
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_8:                                # %func_init_contexts.55
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.55
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_9:                                # %func_init_contexts.60
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_10:                               # %func_init_contexts.63
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.63
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_11:                               # %func_init_contexts.64
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.64
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_12:                               # %func_init_contexts.67
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.67
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_13:                               # %func_init_contexts.69
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.69
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_14:                               # %func_init_contexts.73
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.73
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_15:                               # %func_init_contexts.74
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.74
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_16:                               # %func_init_contexts.76
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.76
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB3_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB3_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB3_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB3_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB3_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB3_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB3_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB3_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB3_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB3_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB3_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB3_15
	jmp	.LBB3_16
.Lfunc_end3:
	.size	init_contexts, .Lfunc_end3-init_contexts
	.cfi_endproc
                                        # -- End function
	.globl	XRate                   # -- Begin function XRate
	.p2align	4, 0x90
	.type	XRate,@function
XRate:                                  # @XRate
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB4_17
# %bb.1:                                # %func_XRate.6
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.6
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_XRate.10
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.10
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_XRate.24
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.24
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_XRate.27
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.27
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %func_XRate.29
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.29
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_6:                                # %func_XRate.44
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.44
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_7:                                # %func_XRate.53
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.53
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_8:                                # %func_XRate.56
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.56
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_9:                                # %func_XRate.59
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.59
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_10:                               # %func_XRate.62
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.62
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_11:                               # %func_XRate.75
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.75
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_12:                               # %func_XRate.77
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.77
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_13:                               # %func_XRate.78
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.78
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_14:                               # %func_XRate.81
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.81
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_15:                               # %func_XRate.82
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.82
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_16:                               # %func_XRate.83
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.83
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB4_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB4_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB4_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB4_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB4_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB4_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB4_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB4_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB4_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB4_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB4_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB4_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB4_15
	jmp	.LBB4_16
.Lfunc_end4:
	.size	XRate, .Lfunc_end4-XRate
	.cfi_endproc
                                        # -- End function
	.globl	GetCtxModelNumber       # -- Begin function GetCtxModelNumber
	.p2align	4, 0x90
	.type	GetCtxModelNumber,@function
GetCtxModelNumber:                      # @GetCtxModelNumber
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB5_17
# %bb.1:                                # %func_GetCtxModelNumber.5
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.5
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_GetCtxModelNumber.19
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.19
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_GetCtxModelNumber.20
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.20
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_GetCtxModelNumber.22
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.22
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %func_GetCtxModelNumber.26
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.26
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_6:                                # %func_GetCtxModelNumber.28
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.28
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_7:                                # %func_GetCtxModelNumber.31
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.31
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_8:                                # %func_GetCtxModelNumber.32
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.32
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_9:                                # %func_GetCtxModelNumber.35
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.35
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_10:                               # %func_GetCtxModelNumber.37
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.37
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_11:                               # %func_GetCtxModelNumber.38
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.38
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_12:                               # %func_GetCtxModelNumber.40
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.40
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_13:                               # %func_GetCtxModelNumber.46
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.46
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_14:                               # %func_GetCtxModelNumber.49
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.49
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_15:                               # %func_GetCtxModelNumber.51
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.51
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_16:                               # %func_GetCtxModelNumber.61
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.61
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB5_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB5_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB5_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB5_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB5_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB5_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB5_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB5_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB5_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB5_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB5_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB5_15
	jmp	.LBB5_16
.Lfunc_end5:
	.size	GetCtxModelNumber, .Lfunc_end5-GetCtxModelNumber
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts          # -- Begin function store_contexts
	.p2align	4, 0x90
	.type	store_contexts,@function
store_contexts:                         # @store_contexts
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB6_7
# %bb.1:                                # %func_store_contexts.8
	callq	store_contexts.8
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_store_contexts.12
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.12
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_store_contexts.15
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_store_contexts.17
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.17
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %func_store_contexts.18
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.18
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_6:                                # %func_store_contexts.33
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.33
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_7:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB6_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB6_5
	jmp	.LBB6_6
.Lfunc_end6:
	.size	store_contexts, .Lfunc_end6-store_contexts
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts # -- Begin function update_field_frame_contexts
	.p2align	4, 0x90
	.type	update_field_frame_contexts,@function
update_field_frame_contexts:            # @update_field_frame_contexts
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB7_7
# %bb.1:                                # %func_update_field_frame_contexts.4
	movl	%ebx, %edi
	callq	update_field_frame_contexts.4
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_update_field_frame_contexts.13
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.13
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_update_field_frame_contexts.34
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.34
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_update_field_frame_contexts.43
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.43
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %func_update_field_frame_contexts.47
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.47
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_6:                                # %func_update_field_frame_contexts.50
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.50
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_7:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB7_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB7_5
	jmp	.LBB7_6
.Lfunc_end7:
	.size	update_field_frame_contexts, .Lfunc_end7-update_field_frame_contexts
	.cfi_endproc
                                        # -- End function
	.globl	free_context_memory.1   # -- Begin function free_context_memory.1
	.p2align	4, 0x90
	.type	free_context_memory.1,@function
free_context_memory.1:                  # @free_context_memory.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$492501691, -12(%rbp)   # imm = 0x1D5AFABB
	movl	$0, -4(%rbp)
.LBB8_1:                                # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_3 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB8_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB8_1 Depth=1
	movl	$0, -8(%rbp)
.LBB8_3:                                # %for.cond1
                                        #   Parent Loop BB8_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB8_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB8_3 Depth=2
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB8_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB8_3
.LBB8_6:                                # %for.end
                                        #   in Loop: Header=BB8_1 Depth=1
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.7:                                # %for.inc14
                                        #   in Loop: Header=BB8_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB8_1
.LBB8_8:                                # %for.end16
	movq	initialized, %rdi
	callq	free
	movq	model_number, %rdi
	callq	free
	cmpl	$492501691, -12(%rbp)   # imm = 0x1D5AFABB
	jne	.LBB8_10
.LBB8_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_10:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB8_9
.Lfunc_end8:
	.size	free_context_memory.1, .Lfunc_end8-free_context_memory.1
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.2
.LCPI9_0:
	.quad	4611686018427387904     # double 2
.LCPI9_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.2
	.p2align	4, 0x90
	.type	create_context_memory.2,@function
create_context_memory.2:                # @create_context_memory.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$279927856, -20(%rbp)   # imm = 0x10AF5C30
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB9_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB9_3
.LBB9_2:                                # %cond.false
	movl	-16(%rbp), %eax
.LBB9_3:                                # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB9_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB9_5:                                # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB9_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB9_7:                                # %if.end5
	movl	$0, -4(%rbp)
.LBB9_8:                                # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB9_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB9_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB9_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB9_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB9_11:                               # %if.end10
                                        #   in Loop: Header=BB9_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB9_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB9_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB9_13:                               # %if.end16
                                        #   in Loop: Header=BB9_8 Depth=1
	movl	$0, -8(%rbp)
.LBB9_14:                               # %for.cond17
                                        #   Parent Loop BB9_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB9_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB9_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB9_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB9_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB9_17:                               # %if.end28
                                        #   in Loop: Header=BB9_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB9_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB9_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB9_19:                               # %if.end39
                                        #   in Loop: Header=BB9_14 Depth=2
	jmp	.LBB9_20
.LBB9_20:                               # %for.inc
                                        #   in Loop: Header=BB9_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB9_14
.LBB9_21:                               # %for.end
                                        #   in Loop: Header=BB9_8 Depth=1
	jmp	.LBB9_22
.LBB9_22:                               # %for.inc40
                                        #   in Loop: Header=BB9_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_8
.LBB9_23:                               # %for.end42
	movl	$0, -4(%rbp)
.LBB9_24:                               # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_26 Depth 2
                                        #       Child Loop BB9_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB9_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB9_24 Depth=1
	movl	$0, -8(%rbp)
.LBB9_26:                               # %for.cond47
                                        #   Parent Loop BB9_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB9_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB9_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB9_26 Depth=2
	movl	$0, -12(%rbp)
.LBB9_28:                               # %for.cond51
                                        #   Parent Loop BB9_24 Depth=1
                                        #     Parent Loop BB9_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB9_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB9_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB9_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB9_28
.LBB9_31:                               # %for.end63
                                        #   in Loop: Header=BB9_26 Depth=2
	jmp	.LBB9_32
.LBB9_32:                               # %for.inc64
                                        #   in Loop: Header=BB9_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB9_26
.LBB9_33:                               # %for.end66
                                        #   in Loop: Header=BB9_24 Depth=1
	jmp	.LBB9_34
.LBB9_34:                               # %for.inc67
                                        #   in Loop: Header=BB9_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_24
.LBB9_35:                               # %for.end69
	movl	$0, -4(%rbp)
.LBB9_36:                               # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB9_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB9_36 Depth=1
	vmovsd	.LCPI9_1(%rip), %xmm0   # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI9_0(%rip), %xmm0   # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI9_0(%rip), %xmm0   # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB9_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_36
.LBB9_39:                               # %for.end98
	cmpl	$279927856, -20(%rbp)   # imm = 0x10AF5C30
	jne	.LBB9_41
.LBB9_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_41:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB9_40
.Lfunc_end9:
	.size	create_context_memory.2, .Lfunc_end9-create_context_memory.2
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.3
.LCPI10_0:
	.quad	4611686018427387904     # double 2
.LCPI10_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.3
	.p2align	4, 0x90
	.type	create_context_memory.3,@function
create_context_memory.3:                # @create_context_memory.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$935262240, -20(%rbp)   # imm = 0x37BEF820
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB10_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB10_3
.LBB10_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB10_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB10_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB10_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB10_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB10_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB10_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB10_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB10_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB10_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB10_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB10_11:                              # %if.end10
                                        #   in Loop: Header=BB10_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB10_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB10_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB10_13:                              # %if.end16
                                        #   in Loop: Header=BB10_8 Depth=1
	movl	$0, -8(%rbp)
.LBB10_14:                              # %for.cond17
                                        #   Parent Loop BB10_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB10_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB10_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB10_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB10_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB10_17:                              # %if.end28
                                        #   in Loop: Header=BB10_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB10_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB10_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB10_19:                              # %if.end39
                                        #   in Loop: Header=BB10_14 Depth=2
	jmp	.LBB10_20
.LBB10_20:                              # %for.inc
                                        #   in Loop: Header=BB10_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_14
.LBB10_21:                              # %for.end
                                        #   in Loop: Header=BB10_8 Depth=1
	jmp	.LBB10_22
.LBB10_22:                              # %for.inc40
                                        #   in Loop: Header=BB10_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_8
.LBB10_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB10_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_26 Depth 2
                                        #       Child Loop BB10_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB10_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB10_24 Depth=1
	movl	$0, -8(%rbp)
.LBB10_26:                              # %for.cond47
                                        #   Parent Loop BB10_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB10_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB10_26 Depth=2
	movl	$0, -12(%rbp)
.LBB10_28:                              # %for.cond51
                                        #   Parent Loop BB10_24 Depth=1
                                        #     Parent Loop BB10_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB10_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB10_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB10_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_28
.LBB10_31:                              # %for.end63
                                        #   in Loop: Header=BB10_26 Depth=2
	jmp	.LBB10_32
.LBB10_32:                              # %for.inc64
                                        #   in Loop: Header=BB10_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_26
.LBB10_33:                              # %for.end66
                                        #   in Loop: Header=BB10_24 Depth=1
	jmp	.LBB10_34
.LBB10_34:                              # %for.inc67
                                        #   in Loop: Header=BB10_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_24
.LBB10_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB10_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB10_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB10_36 Depth=1
	vmovsd	.LCPI10_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI10_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI10_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB10_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_36
.LBB10_39:                              # %for.end98
	cmpl	$935262240, -20(%rbp)   # imm = 0x37BEF820
	jne	.LBB10_41
.LBB10_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB10_40
.Lfunc_end10:
	.size	create_context_memory.3, .Lfunc_end10-create_context_memory.3
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.4 # -- Begin function update_field_frame_contexts.4
	.p2align	4, 0x90
	.type	update_field_frame_contexts.4,@function
update_field_frame_contexts.4:          # @update_field_frame_contexts.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1727329528, -12(%rbp)  # imm = 0x66F4F4F8
	movl	%edi, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB11_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB11_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_4 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB11_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB11_2 Depth=1
	movl	$0, -4(%rbp)
.LBB11_4:                               # %for.cond1
                                        #   Parent Loop BB11_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB11_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB11_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB11_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_4
.LBB11_7:                               # %for.end
                                        #   in Loop: Header=BB11_2 Depth=1
	jmp	.LBB11_8
.LBB11_8:                               # %for.inc23
                                        #   in Loop: Header=BB11_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_2
.LBB11_9:                               # %for.end25
	jmp	.LBB11_19
.LBB11_10:                              # %if.else
	movl	$0, -8(%rbp)
.LBB11_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB11_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB11_11 Depth=1
	movl	$0, -4(%rbp)
.LBB11_13:                              # %for.cond29
                                        #   Parent Loop BB11_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB11_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB11_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_13
.LBB11_16:                              # %for.end56
                                        #   in Loop: Header=BB11_11 Depth=1
	jmp	.LBB11_17
.LBB11_17:                              # %for.inc57
                                        #   in Loop: Header=BB11_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_11
.LBB11_18:                              # %for.end59
	jmp	.LBB11_19
.LBB11_19:                              # %if.end
	cmpl	$1727329528, -12(%rbp)  # imm = 0x66F4F4F8
	jne	.LBB11_21
.LBB11_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB11_20
.Lfunc_end11:
	.size	update_field_frame_contexts.4, .Lfunc_end11-update_field_frame_contexts.4
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.5
.LCPI12_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.5
	.p2align	4, 0x90
	.type	GetCtxModelNumber.5,@function
GetCtxModelNumber.5:                    # @GetCtxModelNumber.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI12_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$220925972, -48(%rbp)   # imm = 0xD2B1014
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB12_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_3 Depth 2
                                        #       Child Loop BB12_5 Depth 3
                                        #     Child Loop BB12_14 Depth 2
                                        #       Child Loop BB12_16 Depth 3
                                        #     Child Loop BB12_25 Depth 2
                                        #       Child Loop BB12_27 Depth 3
                                        #     Child Loop BB12_36 Depth 2
                                        #       Child Loop BB12_38 Depth 3
                                        #     Child Loop BB12_47 Depth 2
                                        #     Child Loop BB12_54 Depth 2
                                        #     Child Loop BB12_61 Depth 2
                                        #     Child Loop BB12_68 Depth 2
                                        #     Child Loop BB12_75 Depth 2
                                        #     Child Loop BB12_82 Depth 2
                                        #       Child Loop BB12_84 Depth 3
                                        #     Child Loop BB12_93 Depth 2
                                        #       Child Loop BB12_95 Depth 3
                                        #     Child Loop BB12_104 Depth 2
                                        #       Child Loop BB12_106 Depth 3
                                        #     Child Loop BB12_115 Depth 2
                                        #       Child Loop BB12_117 Depth 3
                                        #     Child Loop BB12_126 Depth 2
                                        #       Child Loop BB12_128 Depth 3
                                        #     Child Loop BB12_137 Depth 2
                                        #       Child Loop BB12_139 Depth 3
                                        #     Child Loop BB12_148 Depth 2
                                        #       Child Loop BB12_150 Depth 3
                                        #     Child Loop BB12_159 Depth 2
                                        #       Child Loop BB12_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB12_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB12_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB12_3:                               # %for.cond2
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB12_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB12_3 Depth=2
	movl	$0, -4(%rbp)
.LBB12_5:                               # %for.cond5
                                        #   Parent Loop BB12_1 Depth=1
                                        #     Parent Loop BB12_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB12_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB12_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB12_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB12_9
.LBB12_8:                               # %if.else
                                        #   in Loop: Header=BB12_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB12_9:                               # %if.end
                                        #   in Loop: Header=BB12_5 Depth=3
	jmp	.LBB12_10
.LBB12_10:                              # %for.inc
                                        #   in Loop: Header=BB12_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_5
.LBB12_11:                              # %for.end
                                        #   in Loop: Header=BB12_3 Depth=2
	jmp	.LBB12_12
.LBB12_12:                              # %for.inc33
                                        #   in Loop: Header=BB12_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_3
.LBB12_13:                              # %for.end35
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -8(%rbp)
.LBB12_14:                              # %for.cond36
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB12_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB12_14 Depth=2
	movl	$0, -4(%rbp)
.LBB12_16:                              # %for.cond39
                                        #   Parent Loop BB12_1 Depth=1
                                        #     Parent Loop BB12_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB12_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB12_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB12_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB12_20
.LBB12_19:                              # %if.else58
                                        #   in Loop: Header=BB12_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB12_20:                              # %if.end73
                                        #   in Loop: Header=BB12_16 Depth=3
	jmp	.LBB12_21
.LBB12_21:                              # %for.inc74
                                        #   in Loop: Header=BB12_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_16
.LBB12_22:                              # %for.end76
                                        #   in Loop: Header=BB12_14 Depth=2
	jmp	.LBB12_23
.LBB12_23:                              # %for.inc77
                                        #   in Loop: Header=BB12_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_14
.LBB12_24:                              # %for.end79
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -8(%rbp)
.LBB12_25:                              # %for.cond80
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB12_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB12_25 Depth=2
	movl	$0, -4(%rbp)
.LBB12_27:                              # %for.cond83
                                        #   Parent Loop BB12_1 Depth=1
                                        #     Parent Loop BB12_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB12_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB12_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB12_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB12_31
.LBB12_30:                              # %if.else102
                                        #   in Loop: Header=BB12_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB12_31:                              # %if.end117
                                        #   in Loop: Header=BB12_27 Depth=3
	jmp	.LBB12_32
.LBB12_32:                              # %for.inc118
                                        #   in Loop: Header=BB12_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_27
.LBB12_33:                              # %for.end120
                                        #   in Loop: Header=BB12_25 Depth=2
	jmp	.LBB12_34
.LBB12_34:                              # %for.inc121
                                        #   in Loop: Header=BB12_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_25
.LBB12_35:                              # %for.end123
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -8(%rbp)
.LBB12_36:                              # %for.cond124
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB12_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB12_36 Depth=2
	movl	$0, -4(%rbp)
.LBB12_38:                              # %for.cond127
                                        #   Parent Loop BB12_1 Depth=1
                                        #     Parent Loop BB12_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB12_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB12_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB12_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB12_42
.LBB12_41:                              # %if.else146
                                        #   in Loop: Header=BB12_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB12_42:                              # %if.end161
                                        #   in Loop: Header=BB12_38 Depth=3
	jmp	.LBB12_43
.LBB12_43:                              # %for.inc162
                                        #   in Loop: Header=BB12_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_38
.LBB12_44:                              # %for.end164
                                        #   in Loop: Header=BB12_36 Depth=2
	jmp	.LBB12_45
.LBB12_45:                              # %for.inc165
                                        #   in Loop: Header=BB12_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_36
.LBB12_46:                              # %for.end167
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -4(%rbp)
.LBB12_47:                              # %for.cond168
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB12_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB12_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB12_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB12_51
.LBB12_50:                              # %if.else184
                                        #   in Loop: Header=BB12_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB12_51:                              # %if.end196
                                        #   in Loop: Header=BB12_47 Depth=2
	jmp	.LBB12_52
.LBB12_52:                              # %for.inc197
                                        #   in Loop: Header=BB12_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_47
.LBB12_53:                              # %for.end199
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -4(%rbp)
.LBB12_54:                              # %for.cond200
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB12_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB12_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB12_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB12_58
.LBB12_57:                              # %if.else216
                                        #   in Loop: Header=BB12_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB12_58:                              # %if.end228
                                        #   in Loop: Header=BB12_54 Depth=2
	jmp	.LBB12_59
.LBB12_59:                              # %for.inc229
                                        #   in Loop: Header=BB12_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_54
.LBB12_60:                              # %for.end231
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -4(%rbp)
.LBB12_61:                              # %for.cond232
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB12_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB12_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB12_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB12_65
.LBB12_64:                              # %if.else248
                                        #   in Loop: Header=BB12_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB12_65:                              # %if.end260
                                        #   in Loop: Header=BB12_61 Depth=2
	jmp	.LBB12_66
.LBB12_66:                              # %for.inc261
                                        #   in Loop: Header=BB12_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_61
.LBB12_67:                              # %for.end263
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -4(%rbp)
.LBB12_68:                              # %for.cond264
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB12_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB12_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB12_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB12_72
.LBB12_71:                              # %if.else280
                                        #   in Loop: Header=BB12_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB12_72:                              # %if.end292
                                        #   in Loop: Header=BB12_68 Depth=2
	jmp	.LBB12_73
.LBB12_73:                              # %for.inc293
                                        #   in Loop: Header=BB12_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_68
.LBB12_74:                              # %for.end295
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -4(%rbp)
.LBB12_75:                              # %for.cond296
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB12_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB12_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB12_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB12_79
.LBB12_78:                              # %if.else312
                                        #   in Loop: Header=BB12_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB12_79:                              # %if.end324
                                        #   in Loop: Header=BB12_75 Depth=2
	jmp	.LBB12_80
.LBB12_80:                              # %for.inc325
                                        #   in Loop: Header=BB12_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_75
.LBB12_81:                              # %for.end327
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -8(%rbp)
.LBB12_82:                              # %for.cond328
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB12_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB12_82 Depth=2
	movl	$0, -4(%rbp)
.LBB12_84:                              # %for.cond331
                                        #   Parent Loop BB12_1 Depth=1
                                        #     Parent Loop BB12_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB12_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB12_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB12_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB12_88
.LBB12_87:                              # %if.else350
                                        #   in Loop: Header=BB12_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB12_88:                              # %if.end365
                                        #   in Loop: Header=BB12_84 Depth=3
	jmp	.LBB12_89
.LBB12_89:                              # %for.inc366
                                        #   in Loop: Header=BB12_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_84
.LBB12_90:                              # %for.end368
                                        #   in Loop: Header=BB12_82 Depth=2
	jmp	.LBB12_91
.LBB12_91:                              # %for.inc369
                                        #   in Loop: Header=BB12_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_82
.LBB12_92:                              # %for.end371
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -8(%rbp)
.LBB12_93:                              # %for.cond372
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB12_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB12_93 Depth=2
	movl	$0, -4(%rbp)
.LBB12_95:                              # %for.cond375
                                        #   Parent Loop BB12_1 Depth=1
                                        #     Parent Loop BB12_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB12_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB12_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB12_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB12_99
.LBB12_98:                              # %if.else394
                                        #   in Loop: Header=BB12_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB12_99:                              # %if.end409
                                        #   in Loop: Header=BB12_95 Depth=3
	jmp	.LBB12_100
.LBB12_100:                             # %for.inc410
                                        #   in Loop: Header=BB12_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_95
.LBB12_101:                             # %for.end412
                                        #   in Loop: Header=BB12_93 Depth=2
	jmp	.LBB12_102
.LBB12_102:                             # %for.inc413
                                        #   in Loop: Header=BB12_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_93
.LBB12_103:                             # %for.end415
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -8(%rbp)
.LBB12_104:                             # %for.cond416
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB12_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB12_104 Depth=2
	movl	$0, -4(%rbp)
.LBB12_106:                             # %for.cond419
                                        #   Parent Loop BB12_1 Depth=1
                                        #     Parent Loop BB12_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB12_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB12_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB12_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB12_110
.LBB12_109:                             # %if.else438
                                        #   in Loop: Header=BB12_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB12_110:                             # %if.end453
                                        #   in Loop: Header=BB12_106 Depth=3
	jmp	.LBB12_111
.LBB12_111:                             # %for.inc454
                                        #   in Loop: Header=BB12_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_106
.LBB12_112:                             # %for.end456
                                        #   in Loop: Header=BB12_104 Depth=2
	jmp	.LBB12_113
.LBB12_113:                             # %for.inc457
                                        #   in Loop: Header=BB12_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_104
.LBB12_114:                             # %for.end459
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -8(%rbp)
.LBB12_115:                             # %for.cond460
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB12_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB12_115 Depth=2
	movl	$0, -4(%rbp)
.LBB12_117:                             # %for.cond463
                                        #   Parent Loop BB12_1 Depth=1
                                        #     Parent Loop BB12_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB12_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB12_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB12_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB12_121
.LBB12_120:                             # %if.else482
                                        #   in Loop: Header=BB12_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB12_121:                             # %if.end497
                                        #   in Loop: Header=BB12_117 Depth=3
	jmp	.LBB12_122
.LBB12_122:                             # %for.inc498
                                        #   in Loop: Header=BB12_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_117
.LBB12_123:                             # %for.end500
                                        #   in Loop: Header=BB12_115 Depth=2
	jmp	.LBB12_124
.LBB12_124:                             # %for.inc501
                                        #   in Loop: Header=BB12_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_115
.LBB12_125:                             # %for.end503
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -8(%rbp)
.LBB12_126:                             # %for.cond504
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB12_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB12_126 Depth=2
	movl	$0, -4(%rbp)
.LBB12_128:                             # %for.cond507
                                        #   Parent Loop BB12_1 Depth=1
                                        #     Parent Loop BB12_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB12_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB12_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB12_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB12_132
.LBB12_131:                             # %if.else526
                                        #   in Loop: Header=BB12_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB12_132:                             # %if.end541
                                        #   in Loop: Header=BB12_128 Depth=3
	jmp	.LBB12_133
.LBB12_133:                             # %for.inc542
                                        #   in Loop: Header=BB12_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_128
.LBB12_134:                             # %for.end544
                                        #   in Loop: Header=BB12_126 Depth=2
	jmp	.LBB12_135
.LBB12_135:                             # %for.inc545
                                        #   in Loop: Header=BB12_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_126
.LBB12_136:                             # %for.end547
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -8(%rbp)
.LBB12_137:                             # %for.cond548
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB12_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB12_137 Depth=2
	movl	$0, -4(%rbp)
.LBB12_139:                             # %for.cond551
                                        #   Parent Loop BB12_1 Depth=1
                                        #     Parent Loop BB12_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB12_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB12_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB12_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB12_143
.LBB12_142:                             # %if.else570
                                        #   in Loop: Header=BB12_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB12_143:                             # %if.end585
                                        #   in Loop: Header=BB12_139 Depth=3
	jmp	.LBB12_144
.LBB12_144:                             # %for.inc586
                                        #   in Loop: Header=BB12_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_139
.LBB12_145:                             # %for.end588
                                        #   in Loop: Header=BB12_137 Depth=2
	jmp	.LBB12_146
.LBB12_146:                             # %for.inc589
                                        #   in Loop: Header=BB12_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_137
.LBB12_147:                             # %for.end591
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -8(%rbp)
.LBB12_148:                             # %for.cond592
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB12_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB12_148 Depth=2
	movl	$0, -4(%rbp)
.LBB12_150:                             # %for.cond595
                                        #   Parent Loop BB12_1 Depth=1
                                        #     Parent Loop BB12_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB12_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB12_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB12_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB12_154
.LBB12_153:                             # %if.else614
                                        #   in Loop: Header=BB12_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB12_154:                             # %if.end629
                                        #   in Loop: Header=BB12_150 Depth=3
	jmp	.LBB12_155
.LBB12_155:                             # %for.inc630
                                        #   in Loop: Header=BB12_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_150
.LBB12_156:                             # %for.end632
                                        #   in Loop: Header=BB12_148 Depth=2
	jmp	.LBB12_157
.LBB12_157:                             # %for.inc633
                                        #   in Loop: Header=BB12_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_148
.LBB12_158:                             # %for.end635
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -8(%rbp)
.LBB12_159:                             # %for.cond636
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB12_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB12_159 Depth=2
	movl	$0, -4(%rbp)
.LBB12_161:                             # %for.cond639
                                        #   Parent Loop BB12_1 Depth=1
                                        #     Parent Loop BB12_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB12_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB12_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB12_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB12_165
.LBB12_164:                             # %if.else658
                                        #   in Loop: Header=BB12_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB12_165:                             # %if.end673
                                        #   in Loop: Header=BB12_161 Depth=3
	jmp	.LBB12_166
.LBB12_166:                             # %for.inc674
                                        #   in Loop: Header=BB12_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_161
.LBB12_167:                             # %for.end676
                                        #   in Loop: Header=BB12_159 Depth=2
	jmp	.LBB12_168
.LBB12_168:                             # %for.inc677
                                        #   in Loop: Header=BB12_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_159
.LBB12_169:                             # %for.end679
                                        #   in Loop: Header=BB12_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB12_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB12_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB12_171:                             # %if.end682
                                        #   in Loop: Header=BB12_1 Depth=1
	jmp	.LBB12_172
.LBB12_172:                             # %for.inc683
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_1
.LBB12_173:                             # %for.end685
	cmpl	$220925972, -48(%rbp)   # imm = 0xD2B1014
	jne	.LBB12_175
.LBB12_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB12_174
.Lfunc_end12:
	.size	GetCtxModelNumber.5, .Lfunc_end12-GetCtxModelNumber.5
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.6
.LCPI13_0:
	.quad	4607182418800017408     # double 1
.LCPI13_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI13_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI13_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.6
	.p2align	4, 0x90
	.type	XRate.6,@function
XRate.6:                                # @XRate.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1331923192, -32(%rbp)  # imm = 0x4F6388F8
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB13_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB13_3
.LBB13_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB13_3:                               # %cond.end
	vmovsd	.LCPI13_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI13_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI13_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI13_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB13_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI13_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB13_6
.LBB13_5:                               # %cond.false6
	vmovsd	.LCPI13_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI13_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI13_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB13_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB13_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB13_9
.LBB13_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB13_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB13_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB13_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB13_13
.LBB13_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB13_13:                              # %cond.end26
	jmp	.LBB13_15
.LBB13_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB13_15
.LBB13_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB13_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB13_18
.LBB13_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB13_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1331923192, -32(%rbp)  # imm = 0x4F6388F8
	jne	.LBB13_20
.LBB13_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB13_19
.Lfunc_end13:
	.size	XRate.6, .Lfunc_end13-XRate.6
	.cfi_endproc
                                        # -- End function
	.globl	free_context_memory.7   # -- Begin function free_context_memory.7
	.p2align	4, 0x90
	.type	free_context_memory.7,@function
free_context_memory.7:                  # @free_context_memory.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$182488086, -12(%rbp)   # imm = 0xAE08C16
	movl	$0, -4(%rbp)
.LBB14_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_3 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB14_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB14_1 Depth=1
	movl	$0, -8(%rbp)
.LBB14_3:                               # %for.cond1
                                        #   Parent Loop BB14_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB14_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB14_3 Depth=2
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB14_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_3
.LBB14_6:                               # %for.end
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.7:                                # %for.inc14
                                        #   in Loop: Header=BB14_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_1
.LBB14_8:                               # %for.end16
	movq	initialized, %rdi
	callq	free
	movq	model_number, %rdi
	callq	free
	cmpl	$182488086, -12(%rbp)   # imm = 0xAE08C16
	jne	.LBB14_10
.LBB14_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB14_9
.Lfunc_end14:
	.size	free_context_memory.7, .Lfunc_end14-free_context_memory.7
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.8        # -- Begin function store_contexts.8
	.p2align	4, 0x90
	.type	store_contexts.8,@function
store_contexts.8:                       # @store_contexts.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1029222962, -16(%rbp)  # imm = 0x3D58B232
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -8(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB15_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-8(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB15_3
.LBB15_2:                               # %if.else
	jmp	.LBB15_3
.LBB15_3:                               # %if.end
	cmpl	$1029222962, -16(%rbp)  # imm = 0x3D58B232
	jne	.LBB15_5
.LBB15_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB15_4
.Lfunc_end15:
	.size	store_contexts.8, .Lfunc_end15-store_contexts.8
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.9     # -- Begin function SetCtxModelNumber.9
	.p2align	4, 0x90
	.type	SetCtxModelNumber.9,@function
SetCtxModelNumber.9:                    # @SetCtxModelNumber.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1843981361, -16(%rbp)  # imm = 0x6DE8EC31
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB16_11
.LBB16_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB16_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB16_11
.LBB16_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB16_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB16_11
.LBB16_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB16_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB16_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB16_10
.LBB16_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB16_10:                              # %if.end38
	jmp	.LBB16_11
.LBB16_11:                              # %if.end39
	cmpl	$1843981361, -16(%rbp)  # imm = 0x6DE8EC31
	jne	.LBB16_13
.LBB16_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB16_12
.Lfunc_end16:
	.size	SetCtxModelNumber.9, .Lfunc_end16-SetCtxModelNumber.9
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.10
.LCPI17_0:
	.quad	4607182418800017408     # double 1
.LCPI17_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI17_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI17_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.10
	.p2align	4, 0x90
	.type	XRate.10,@function
XRate.10:                               # @XRate.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1414896035, -32(%rbp)  # imm = 0x545599A3
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB17_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB17_3
.LBB17_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB17_3:                               # %cond.end
	vmovsd	.LCPI17_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI17_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI17_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI17_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB17_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI17_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB17_6
.LBB17_5:                               # %cond.false6
	vmovsd	.LCPI17_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI17_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI17_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB17_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB17_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB17_9
.LBB17_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB17_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB17_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB17_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB17_13
.LBB17_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB17_13:                              # %cond.end26
	jmp	.LBB17_15
.LBB17_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB17_15
.LBB17_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB17_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB17_18
.LBB17_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB17_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1414896035, -32(%rbp)  # imm = 0x545599A3
	jne	.LBB17_20
.LBB17_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB17_19
.Lfunc_end17:
	.size	XRate.10, .Lfunc_end17-XRate.10
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.11    # -- Begin function SetCtxModelNumber.11
	.p2align	4, 0x90
	.type	SetCtxModelNumber.11,@function
SetCtxModelNumber.11:                   # @SetCtxModelNumber.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$2083775499, -16(%rbp)  # imm = 0x7C33E40B
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB18_11
.LBB18_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB18_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB18_11
.LBB18_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB18_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB18_11
.LBB18_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB18_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB18_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB18_10
.LBB18_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB18_10:                              # %if.end38
	jmp	.LBB18_11
.LBB18_11:                              # %if.end39
	cmpl	$2083775499, -16(%rbp)  # imm = 0x7C33E40B
	jne	.LBB18_13
.LBB18_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB18_12
.Lfunc_end18:
	.size	SetCtxModelNumber.11, .Lfunc_end18-SetCtxModelNumber.11
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.12       # -- Begin function store_contexts.12
	.p2align	4, 0x90
	.type	store_contexts.12,@function
store_contexts.12:                      # @store_contexts.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$249345583, -16(%rbp)   # imm = 0xEDCB62F
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB19_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-4(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB19_3
.LBB19_2:                               # %if.else
	jmp	.LBB19_3
.LBB19_3:                               # %if.end
	cmpl	$249345583, -16(%rbp)   # imm = 0xEDCB62F
	jne	.LBB19_5
.LBB19_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB19_4
.Lfunc_end19:
	.size	store_contexts.12, .Lfunc_end19-store_contexts.12
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.13 # -- Begin function update_field_frame_contexts.13
	.p2align	4, 0x90
	.type	update_field_frame_contexts.13,@function
update_field_frame_contexts.13:         # @update_field_frame_contexts.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1297319717, -16(%rbp)  # imm = 0x4D538725
	movl	%edi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB20_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB20_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_4 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB20_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB20_2 Depth=1
	movl	$0, -4(%rbp)
.LBB20_4:                               # %for.cond1
                                        #   Parent Loop BB20_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB20_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB20_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB20_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_4
.LBB20_7:                               # %for.end
                                        #   in Loop: Header=BB20_2 Depth=1
	jmp	.LBB20_8
.LBB20_8:                               # %for.inc23
                                        #   in Loop: Header=BB20_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_2
.LBB20_9:                               # %for.end25
	jmp	.LBB20_19
.LBB20_10:                              # %if.else
	movl	$0, -8(%rbp)
.LBB20_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB20_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB20_11 Depth=1
	movl	$0, -4(%rbp)
.LBB20_13:                              # %for.cond29
                                        #   Parent Loop BB20_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB20_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB20_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_13
.LBB20_16:                              # %for.end56
                                        #   in Loop: Header=BB20_11 Depth=1
	jmp	.LBB20_17
.LBB20_17:                              # %for.inc57
                                        #   in Loop: Header=BB20_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_11
.LBB20_18:                              # %for.end59
	jmp	.LBB20_19
.LBB20_19:                              # %if.end
	cmpl	$1297319717, -16(%rbp)  # imm = 0x4D538725
	jne	.LBB20_21
.LBB20_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB20_20
.Lfunc_end20:
	.size	update_field_frame_contexts.13, .Lfunc_end20-update_field_frame_contexts.13
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.14
.LCPI21_0:
	.quad	4611686018427387904     # double 2
.LCPI21_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.14
	.p2align	4, 0x90
	.type	create_context_memory.14,@function
create_context_memory.14:               # @create_context_memory.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$472448062, -20(%rbp)   # imm = 0x1C28FC3E
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB21_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB21_3
.LBB21_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB21_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB21_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB21_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB21_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB21_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB21_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB21_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB21_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB21_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB21_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB21_11:                              # %if.end10
                                        #   in Loop: Header=BB21_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB21_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB21_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB21_13:                              # %if.end16
                                        #   in Loop: Header=BB21_8 Depth=1
	movl	$0, -8(%rbp)
.LBB21_14:                              # %for.cond17
                                        #   Parent Loop BB21_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB21_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB21_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB21_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB21_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB21_17:                              # %if.end28
                                        #   in Loop: Header=BB21_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB21_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB21_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB21_19:                              # %if.end39
                                        #   in Loop: Header=BB21_14 Depth=2
	jmp	.LBB21_20
.LBB21_20:                              # %for.inc
                                        #   in Loop: Header=BB21_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_14
.LBB21_21:                              # %for.end
                                        #   in Loop: Header=BB21_8 Depth=1
	jmp	.LBB21_22
.LBB21_22:                              # %for.inc40
                                        #   in Loop: Header=BB21_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_8
.LBB21_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB21_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_26 Depth 2
                                        #       Child Loop BB21_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB21_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB21_24 Depth=1
	movl	$0, -8(%rbp)
.LBB21_26:                              # %for.cond47
                                        #   Parent Loop BB21_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB21_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB21_26 Depth=2
	movl	$0, -12(%rbp)
.LBB21_28:                              # %for.cond51
                                        #   Parent Loop BB21_24 Depth=1
                                        #     Parent Loop BB21_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB21_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB21_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB21_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_28
.LBB21_31:                              # %for.end63
                                        #   in Loop: Header=BB21_26 Depth=2
	jmp	.LBB21_32
.LBB21_32:                              # %for.inc64
                                        #   in Loop: Header=BB21_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_26
.LBB21_33:                              # %for.end66
                                        #   in Loop: Header=BB21_24 Depth=1
	jmp	.LBB21_34
.LBB21_34:                              # %for.inc67
                                        #   in Loop: Header=BB21_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_24
.LBB21_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB21_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB21_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB21_36 Depth=1
	vmovsd	.LCPI21_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI21_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI21_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB21_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_36
.LBB21_39:                              # %for.end98
	cmpl	$472448062, -20(%rbp)   # imm = 0x1C28FC3E
	jne	.LBB21_41
.LBB21_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB21_40
.Lfunc_end21:
	.size	create_context_memory.14, .Lfunc_end21-create_context_memory.14
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.15       # -- Begin function store_contexts.15
	.p2align	4, 0x90
	.type	store_contexts.15,@function
store_contexts.15:                      # @store_contexts.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1581011412, -16(%rbp)  # imm = 0x5E3C51D4
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -12(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB22_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-12(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB22_3
.LBB22_2:                               # %if.else
	jmp	.LBB22_3
.LBB22_3:                               # %if.end
	cmpl	$1581011412, -16(%rbp)  # imm = 0x5E3C51D4
	jne	.LBB22_5
.LBB22_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB22_4
.Lfunc_end22:
	.size	store_contexts.15, .Lfunc_end22-store_contexts.15
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.16    # -- Begin function SetCtxModelNumber.16
	.p2align	4, 0x90
	.type	SetCtxModelNumber.16,@function
SetCtxModelNumber.16:                   # @SetCtxModelNumber.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1673101935, -16(%rbp)  # imm = 0x63B9826F
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB23_11
.LBB23_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB23_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB23_11
.LBB23_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB23_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB23_11
.LBB23_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB23_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB23_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB23_10
.LBB23_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB23_10:                              # %if.end38
	jmp	.LBB23_11
.LBB23_11:                              # %if.end39
	cmpl	$1673101935, -16(%rbp)  # imm = 0x63B9826F
	jne	.LBB23_13
.LBB23_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB23_12
.Lfunc_end23:
	.size	SetCtxModelNumber.16, .Lfunc_end23-SetCtxModelNumber.16
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.17       # -- Begin function store_contexts.17
	.p2align	4, 0x90
	.type	store_contexts.17,@function
store_contexts.17:                      # @store_contexts.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$103848815, -16(%rbp)   # imm = 0x6309B6F
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -12(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB24_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-12(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB24_3
.LBB24_2:                               # %if.else
	jmp	.LBB24_3
.LBB24_3:                               # %if.end
	cmpl	$103848815, -16(%rbp)   # imm = 0x6309B6F
	jne	.LBB24_5
.LBB24_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB24_4
.Lfunc_end24:
	.size	store_contexts.17, .Lfunc_end24-store_contexts.17
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.18       # -- Begin function store_contexts.18
	.p2align	4, 0x90
	.type	store_contexts.18,@function
store_contexts.18:                      # @store_contexts.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1545152246, -16(%rbp)  # imm = 0x5C1926F6
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -8(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB25_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-8(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB25_3
.LBB25_2:                               # %if.else
	jmp	.LBB25_3
.LBB25_3:                               # %if.end
	cmpl	$1545152246, -16(%rbp)  # imm = 0x5C1926F6
	jne	.LBB25_5
.LBB25_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB25_4
.Lfunc_end25:
	.size	store_contexts.18, .Lfunc_end25-store_contexts.18
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.19
.LCPI26_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.19
	.p2align	4, 0x90
	.type	GetCtxModelNumber.19,@function
GetCtxModelNumber.19:                   # @GetCtxModelNumber.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI26_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1231600076, -44(%rbp)  # imm = 0x4968B9CC
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB26_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_3 Depth 2
                                        #       Child Loop BB26_5 Depth 3
                                        #     Child Loop BB26_14 Depth 2
                                        #       Child Loop BB26_16 Depth 3
                                        #     Child Loop BB26_25 Depth 2
                                        #       Child Loop BB26_27 Depth 3
                                        #     Child Loop BB26_36 Depth 2
                                        #       Child Loop BB26_38 Depth 3
                                        #     Child Loop BB26_47 Depth 2
                                        #     Child Loop BB26_54 Depth 2
                                        #     Child Loop BB26_61 Depth 2
                                        #     Child Loop BB26_68 Depth 2
                                        #     Child Loop BB26_75 Depth 2
                                        #     Child Loop BB26_82 Depth 2
                                        #       Child Loop BB26_84 Depth 3
                                        #     Child Loop BB26_93 Depth 2
                                        #       Child Loop BB26_95 Depth 3
                                        #     Child Loop BB26_104 Depth 2
                                        #       Child Loop BB26_106 Depth 3
                                        #     Child Loop BB26_115 Depth 2
                                        #       Child Loop BB26_117 Depth 3
                                        #     Child Loop BB26_126 Depth 2
                                        #       Child Loop BB26_128 Depth 3
                                        #     Child Loop BB26_137 Depth 2
                                        #       Child Loop BB26_139 Depth 3
                                        #     Child Loop BB26_148 Depth 2
                                        #       Child Loop BB26_150 Depth 3
                                        #     Child Loop BB26_159 Depth 2
                                        #       Child Loop BB26_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB26_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB26_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB26_3:                               # %for.cond2
                                        #   Parent Loop BB26_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB26_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB26_3 Depth=2
	movl	$0, -4(%rbp)
.LBB26_5:                               # %for.cond5
                                        #   Parent Loop BB26_1 Depth=1
                                        #     Parent Loop BB26_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB26_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB26_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB26_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB26_9
.LBB26_8:                               # %if.else
                                        #   in Loop: Header=BB26_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB26_9:                               # %if.end
                                        #   in Loop: Header=BB26_5 Depth=3
	jmp	.LBB26_10
.LBB26_10:                              # %for.inc
                                        #   in Loop: Header=BB26_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_5
.LBB26_11:                              # %for.end
                                        #   in Loop: Header=BB26_3 Depth=2
	jmp	.LBB26_12
.LBB26_12:                              # %for.inc33
                                        #   in Loop: Header=BB26_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_3
.LBB26_13:                              # %for.end35
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	$0, -8(%rbp)
.LBB26_14:                              # %for.cond36
                                        #   Parent Loop BB26_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB26_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB26_14 Depth=2
	movl	$0, -4(%rbp)
.LBB26_16:                              # %for.cond39
                                        #   Parent Loop BB26_1 Depth=1
                                        #     Parent Loop BB26_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB26_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB26_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB26_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB26_20
.LBB26_19:                              # %if.else58
                                        #   in Loop: Header=BB26_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB26_20:                              # %if.end73
                                        #   in Loop: Header=BB26_16 Depth=3
	jmp	.LBB26_21
.LBB26_21:                              # %for.inc74
                                        #   in Loop: Header=BB26_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_16
.LBB26_22:                              # %for.end76
                                        #   in Loop: Header=BB26_14 Depth=2
	jmp	.LBB26_23
.LBB26_23:                              # %for.inc77
                                        #   in Loop: Header=BB26_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_14
.LBB26_24:                              # %for.end79
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	$0, -8(%rbp)
.LBB26_25:                              # %for.cond80
                                        #   Parent Loop BB26_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB26_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB26_25 Depth=2
	movl	$0, -4(%rbp)
.LBB26_27:                              # %for.cond83
                                        #   Parent Loop BB26_1 Depth=1
                                        #     Parent Loop BB26_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB26_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB26_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB26_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB26_31
.LBB26_30:                              # %if.else102
                                        #   in Loop: Header=BB26_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB26_31:                              # %if.end117
                                        #   in Loop: Header=BB26_27 Depth=3
	jmp	.LBB26_32
.LBB26_32:                              # %for.inc118
                                        #   in Loop: Header=BB26_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_27
.LBB26_33:                              # %for.end120
                                        #   in Loop: Header=BB26_25 Depth=2
	jmp	.LBB26_34
.LBB26_34:                              # %for.inc121
                                        #   in Loop: Header=BB26_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_25
.LBB26_35:                              # %for.end123
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	$0, -8(%rbp)
.LBB26_36:                              # %for.cond124
                                        #   Parent Loop BB26_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB26_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB26_36 Depth=2
	movl	$0, -4(%rbp)
.LBB26_38:                              # %for.cond127
                                        #   Parent Loop BB26_1 Depth=1
                                        #     Parent Loop BB26_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB26_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB26_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB26_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB26_42
.LBB26_41:                              # %if.else146
                                        #   in Loop: Header=BB26_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB26_42:                              # %if.end161
                                        #   in Loop: Header=BB26_38 Depth=3
	jmp	.LBB26_43
.LBB26_43:                              # %for.inc162
                                        #   in Loop: Header=BB26_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_38
.LBB26_44:                              # %for.end164
                                        #   in Loop: Header=BB26_36 Depth=2
	jmp	.LBB26_45
.LBB26_45:                              # %for.inc165
                                        #   in Loop: Header=BB26_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_36
.LBB26_46:                              # %for.end167
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	$0, -4(%rbp)
.LBB26_47:                              # %for.cond168
                                        #   Parent Loop BB26_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB26_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB26_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB26_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB26_51
.LBB26_50:                              # %if.else184
                                        #   in Loop: Header=BB26_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB26_51:                              # %if.end196
                                        #   in Loop: Header=BB26_47 Depth=2
	jmp	.LBB26_52
.LBB26_52:                              # %for.inc197
                                        #   in Loop: Header=BB26_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_47
.LBB26_53:                              # %for.end199
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	$0, -4(%rbp)
.LBB26_54:                              # %for.cond200
                                        #   Parent Loop BB26_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB26_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB26_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB26_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB26_58
.LBB26_57:                              # %if.else216
                                        #   in Loop: Header=BB26_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB26_58:                              # %if.end228
                                        #   in Loop: Header=BB26_54 Depth=2
	jmp	.LBB26_59
.LBB26_59:                              # %for.inc229
                                        #   in Loop: Header=BB26_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_54
.LBB26_60:                              # %for.end231
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	$0, -4(%rbp)
.LBB26_61:                              # %for.cond232
                                        #   Parent Loop BB26_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB26_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB26_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB26_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB26_65
.LBB26_64:                              # %if.else248
                                        #   in Loop: Header=BB26_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB26_65:                              # %if.end260
                                        #   in Loop: Header=BB26_61 Depth=2
	jmp	.LBB26_66
.LBB26_66:                              # %for.inc261
                                        #   in Loop: Header=BB26_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_61
.LBB26_67:                              # %for.end263
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	$0, -4(%rbp)
.LBB26_68:                              # %for.cond264
                                        #   Parent Loop BB26_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB26_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB26_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB26_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB26_72
.LBB26_71:                              # %if.else280
                                        #   in Loop: Header=BB26_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB26_72:                              # %if.end292
                                        #   in Loop: Header=BB26_68 Depth=2
	jmp	.LBB26_73
.LBB26_73:                              # %for.inc293
                                        #   in Loop: Header=BB26_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_68
.LBB26_74:                              # %for.end295
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	$0, -4(%rbp)
.LBB26_75:                              # %for.cond296
                                        #   Parent Loop BB26_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB26_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB26_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB26_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB26_79
.LBB26_78:                              # %if.else312
                                        #   in Loop: Header=BB26_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB26_79:                              # %if.end324
                                        #   in Loop: Header=BB26_75 Depth=2
	jmp	.LBB26_80
.LBB26_80:                              # %for.inc325
                                        #   in Loop: Header=BB26_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_75
.LBB26_81:                              # %for.end327
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	$0, -8(%rbp)
.LBB26_82:                              # %for.cond328
                                        #   Parent Loop BB26_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB26_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB26_82 Depth=2
	movl	$0, -4(%rbp)
.LBB26_84:                              # %for.cond331
                                        #   Parent Loop BB26_1 Depth=1
                                        #     Parent Loop BB26_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB26_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB26_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB26_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB26_88
.LBB26_87:                              # %if.else350
                                        #   in Loop: Header=BB26_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB26_88:                              # %if.end365
                                        #   in Loop: Header=BB26_84 Depth=3
	jmp	.LBB26_89
.LBB26_89:                              # %for.inc366
                                        #   in Loop: Header=BB26_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_84
.LBB26_90:                              # %for.end368
                                        #   in Loop: Header=BB26_82 Depth=2
	jmp	.LBB26_91
.LBB26_91:                              # %for.inc369
                                        #   in Loop: Header=BB26_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_82
.LBB26_92:                              # %for.end371
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	$0, -8(%rbp)
.LBB26_93:                              # %for.cond372
                                        #   Parent Loop BB26_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB26_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB26_93 Depth=2
	movl	$0, -4(%rbp)
.LBB26_95:                              # %for.cond375
                                        #   Parent Loop BB26_1 Depth=1
                                        #     Parent Loop BB26_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB26_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB26_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB26_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB26_99
.LBB26_98:                              # %if.else394
                                        #   in Loop: Header=BB26_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB26_99:                              # %if.end409
                                        #   in Loop: Header=BB26_95 Depth=3
	jmp	.LBB26_100
.LBB26_100:                             # %for.inc410
                                        #   in Loop: Header=BB26_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_95
.LBB26_101:                             # %for.end412
                                        #   in Loop: Header=BB26_93 Depth=2
	jmp	.LBB26_102
.LBB26_102:                             # %for.inc413
                                        #   in Loop: Header=BB26_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_93
.LBB26_103:                             # %for.end415
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	$0, -8(%rbp)
.LBB26_104:                             # %for.cond416
                                        #   Parent Loop BB26_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB26_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB26_104 Depth=2
	movl	$0, -4(%rbp)
.LBB26_106:                             # %for.cond419
                                        #   Parent Loop BB26_1 Depth=1
                                        #     Parent Loop BB26_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB26_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB26_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB26_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB26_110
.LBB26_109:                             # %if.else438
                                        #   in Loop: Header=BB26_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB26_110:                             # %if.end453
                                        #   in Loop: Header=BB26_106 Depth=3
	jmp	.LBB26_111
.LBB26_111:                             # %for.inc454
                                        #   in Loop: Header=BB26_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_106
.LBB26_112:                             # %for.end456
                                        #   in Loop: Header=BB26_104 Depth=2
	jmp	.LBB26_113
.LBB26_113:                             # %for.inc457
                                        #   in Loop: Header=BB26_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_104
.LBB26_114:                             # %for.end459
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	$0, -8(%rbp)
.LBB26_115:                             # %for.cond460
                                        #   Parent Loop BB26_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB26_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB26_115 Depth=2
	movl	$0, -4(%rbp)
.LBB26_117:                             # %for.cond463
                                        #   Parent Loop BB26_1 Depth=1
                                        #     Parent Loop BB26_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB26_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB26_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB26_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB26_121
.LBB26_120:                             # %if.else482
                                        #   in Loop: Header=BB26_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB26_121:                             # %if.end497
                                        #   in Loop: Header=BB26_117 Depth=3
	jmp	.LBB26_122
.LBB26_122:                             # %for.inc498
                                        #   in Loop: Header=BB26_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_117
.LBB26_123:                             # %for.end500
                                        #   in Loop: Header=BB26_115 Depth=2
	jmp	.LBB26_124
.LBB26_124:                             # %for.inc501
                                        #   in Loop: Header=BB26_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_115
.LBB26_125:                             # %for.end503
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	$0, -8(%rbp)
.LBB26_126:                             # %for.cond504
                                        #   Parent Loop BB26_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB26_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB26_126 Depth=2
	movl	$0, -4(%rbp)
.LBB26_128:                             # %for.cond507
                                        #   Parent Loop BB26_1 Depth=1
                                        #     Parent Loop BB26_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB26_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB26_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB26_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB26_132
.LBB26_131:                             # %if.else526
                                        #   in Loop: Header=BB26_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB26_132:                             # %if.end541
                                        #   in Loop: Header=BB26_128 Depth=3
	jmp	.LBB26_133
.LBB26_133:                             # %for.inc542
                                        #   in Loop: Header=BB26_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_128
.LBB26_134:                             # %for.end544
                                        #   in Loop: Header=BB26_126 Depth=2
	jmp	.LBB26_135
.LBB26_135:                             # %for.inc545
                                        #   in Loop: Header=BB26_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_126
.LBB26_136:                             # %for.end547
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	$0, -8(%rbp)
.LBB26_137:                             # %for.cond548
                                        #   Parent Loop BB26_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB26_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB26_137 Depth=2
	movl	$0, -4(%rbp)
.LBB26_139:                             # %for.cond551
                                        #   Parent Loop BB26_1 Depth=1
                                        #     Parent Loop BB26_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB26_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB26_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB26_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB26_143
.LBB26_142:                             # %if.else570
                                        #   in Loop: Header=BB26_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB26_143:                             # %if.end585
                                        #   in Loop: Header=BB26_139 Depth=3
	jmp	.LBB26_144
.LBB26_144:                             # %for.inc586
                                        #   in Loop: Header=BB26_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_139
.LBB26_145:                             # %for.end588
                                        #   in Loop: Header=BB26_137 Depth=2
	jmp	.LBB26_146
.LBB26_146:                             # %for.inc589
                                        #   in Loop: Header=BB26_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_137
.LBB26_147:                             # %for.end591
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	$0, -8(%rbp)
.LBB26_148:                             # %for.cond592
                                        #   Parent Loop BB26_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB26_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB26_148 Depth=2
	movl	$0, -4(%rbp)
.LBB26_150:                             # %for.cond595
                                        #   Parent Loop BB26_1 Depth=1
                                        #     Parent Loop BB26_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB26_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB26_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB26_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB26_154
.LBB26_153:                             # %if.else614
                                        #   in Loop: Header=BB26_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB26_154:                             # %if.end629
                                        #   in Loop: Header=BB26_150 Depth=3
	jmp	.LBB26_155
.LBB26_155:                             # %for.inc630
                                        #   in Loop: Header=BB26_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_150
.LBB26_156:                             # %for.end632
                                        #   in Loop: Header=BB26_148 Depth=2
	jmp	.LBB26_157
.LBB26_157:                             # %for.inc633
                                        #   in Loop: Header=BB26_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_148
.LBB26_158:                             # %for.end635
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	$0, -8(%rbp)
.LBB26_159:                             # %for.cond636
                                        #   Parent Loop BB26_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB26_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB26_159 Depth=2
	movl	$0, -4(%rbp)
.LBB26_161:                             # %for.cond639
                                        #   Parent Loop BB26_1 Depth=1
                                        #     Parent Loop BB26_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB26_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB26_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB26_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB26_165
.LBB26_164:                             # %if.else658
                                        #   in Loop: Header=BB26_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB26_165:                             # %if.end673
                                        #   in Loop: Header=BB26_161 Depth=3
	jmp	.LBB26_166
.LBB26_166:                             # %for.inc674
                                        #   in Loop: Header=BB26_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_161
.LBB26_167:                             # %for.end676
                                        #   in Loop: Header=BB26_159 Depth=2
	jmp	.LBB26_168
.LBB26_168:                             # %for.inc677
                                        #   in Loop: Header=BB26_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_159
.LBB26_169:                             # %for.end679
                                        #   in Loop: Header=BB26_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB26_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB26_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB26_171:                             # %if.end682
                                        #   in Loop: Header=BB26_1 Depth=1
	jmp	.LBB26_172
.LBB26_172:                             # %for.inc683
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_1
.LBB26_173:                             # %for.end685
	cmpl	$1231600076, -44(%rbp)  # imm = 0x4968B9CC
	jne	.LBB26_175
.LBB26_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB26_174
.Lfunc_end26:
	.size	GetCtxModelNumber.19, .Lfunc_end26-GetCtxModelNumber.19
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.20
.LCPI27_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.20
	.p2align	4, 0x90
	.type	GetCtxModelNumber.20,@function
GetCtxModelNumber.20:                   # @GetCtxModelNumber.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI27_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$273180617, -48(%rbp)   # imm = 0x104867C9
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB27_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_3 Depth 2
                                        #       Child Loop BB27_5 Depth 3
                                        #     Child Loop BB27_14 Depth 2
                                        #       Child Loop BB27_16 Depth 3
                                        #     Child Loop BB27_25 Depth 2
                                        #       Child Loop BB27_27 Depth 3
                                        #     Child Loop BB27_36 Depth 2
                                        #       Child Loop BB27_38 Depth 3
                                        #     Child Loop BB27_47 Depth 2
                                        #     Child Loop BB27_54 Depth 2
                                        #     Child Loop BB27_61 Depth 2
                                        #     Child Loop BB27_68 Depth 2
                                        #     Child Loop BB27_75 Depth 2
                                        #     Child Loop BB27_82 Depth 2
                                        #       Child Loop BB27_84 Depth 3
                                        #     Child Loop BB27_93 Depth 2
                                        #       Child Loop BB27_95 Depth 3
                                        #     Child Loop BB27_104 Depth 2
                                        #       Child Loop BB27_106 Depth 3
                                        #     Child Loop BB27_115 Depth 2
                                        #       Child Loop BB27_117 Depth 3
                                        #     Child Loop BB27_126 Depth 2
                                        #       Child Loop BB27_128 Depth 3
                                        #     Child Loop BB27_137 Depth 2
                                        #       Child Loop BB27_139 Depth 3
                                        #     Child Loop BB27_148 Depth 2
                                        #       Child Loop BB27_150 Depth 3
                                        #     Child Loop BB27_159 Depth 2
                                        #       Child Loop BB27_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB27_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB27_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB27_3:                               # %for.cond2
                                        #   Parent Loop BB27_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB27_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB27_3 Depth=2
	movl	$0, -4(%rbp)
.LBB27_5:                               # %for.cond5
                                        #   Parent Loop BB27_1 Depth=1
                                        #     Parent Loop BB27_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB27_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB27_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB27_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB27_9
.LBB27_8:                               # %if.else
                                        #   in Loop: Header=BB27_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB27_9:                               # %if.end
                                        #   in Loop: Header=BB27_5 Depth=3
	jmp	.LBB27_10
.LBB27_10:                              # %for.inc
                                        #   in Loop: Header=BB27_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_5
.LBB27_11:                              # %for.end
                                        #   in Loop: Header=BB27_3 Depth=2
	jmp	.LBB27_12
.LBB27_12:                              # %for.inc33
                                        #   in Loop: Header=BB27_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_3
.LBB27_13:                              # %for.end35
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	$0, -8(%rbp)
.LBB27_14:                              # %for.cond36
                                        #   Parent Loop BB27_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB27_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB27_14 Depth=2
	movl	$0, -4(%rbp)
.LBB27_16:                              # %for.cond39
                                        #   Parent Loop BB27_1 Depth=1
                                        #     Parent Loop BB27_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB27_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB27_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB27_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB27_20
.LBB27_19:                              # %if.else58
                                        #   in Loop: Header=BB27_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB27_20:                              # %if.end73
                                        #   in Loop: Header=BB27_16 Depth=3
	jmp	.LBB27_21
.LBB27_21:                              # %for.inc74
                                        #   in Loop: Header=BB27_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_16
.LBB27_22:                              # %for.end76
                                        #   in Loop: Header=BB27_14 Depth=2
	jmp	.LBB27_23
.LBB27_23:                              # %for.inc77
                                        #   in Loop: Header=BB27_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_14
.LBB27_24:                              # %for.end79
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	$0, -8(%rbp)
.LBB27_25:                              # %for.cond80
                                        #   Parent Loop BB27_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB27_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB27_25 Depth=2
	movl	$0, -4(%rbp)
.LBB27_27:                              # %for.cond83
                                        #   Parent Loop BB27_1 Depth=1
                                        #     Parent Loop BB27_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB27_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB27_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB27_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB27_31
.LBB27_30:                              # %if.else102
                                        #   in Loop: Header=BB27_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB27_31:                              # %if.end117
                                        #   in Loop: Header=BB27_27 Depth=3
	jmp	.LBB27_32
.LBB27_32:                              # %for.inc118
                                        #   in Loop: Header=BB27_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_27
.LBB27_33:                              # %for.end120
                                        #   in Loop: Header=BB27_25 Depth=2
	jmp	.LBB27_34
.LBB27_34:                              # %for.inc121
                                        #   in Loop: Header=BB27_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_25
.LBB27_35:                              # %for.end123
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	$0, -8(%rbp)
.LBB27_36:                              # %for.cond124
                                        #   Parent Loop BB27_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB27_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB27_36 Depth=2
	movl	$0, -4(%rbp)
.LBB27_38:                              # %for.cond127
                                        #   Parent Loop BB27_1 Depth=1
                                        #     Parent Loop BB27_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB27_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB27_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB27_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB27_42
.LBB27_41:                              # %if.else146
                                        #   in Loop: Header=BB27_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB27_42:                              # %if.end161
                                        #   in Loop: Header=BB27_38 Depth=3
	jmp	.LBB27_43
.LBB27_43:                              # %for.inc162
                                        #   in Loop: Header=BB27_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_38
.LBB27_44:                              # %for.end164
                                        #   in Loop: Header=BB27_36 Depth=2
	jmp	.LBB27_45
.LBB27_45:                              # %for.inc165
                                        #   in Loop: Header=BB27_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_36
.LBB27_46:                              # %for.end167
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	$0, -4(%rbp)
.LBB27_47:                              # %for.cond168
                                        #   Parent Loop BB27_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB27_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB27_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB27_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB27_51
.LBB27_50:                              # %if.else184
                                        #   in Loop: Header=BB27_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB27_51:                              # %if.end196
                                        #   in Loop: Header=BB27_47 Depth=2
	jmp	.LBB27_52
.LBB27_52:                              # %for.inc197
                                        #   in Loop: Header=BB27_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_47
.LBB27_53:                              # %for.end199
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	$0, -4(%rbp)
.LBB27_54:                              # %for.cond200
                                        #   Parent Loop BB27_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB27_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB27_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB27_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB27_58
.LBB27_57:                              # %if.else216
                                        #   in Loop: Header=BB27_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB27_58:                              # %if.end228
                                        #   in Loop: Header=BB27_54 Depth=2
	jmp	.LBB27_59
.LBB27_59:                              # %for.inc229
                                        #   in Loop: Header=BB27_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_54
.LBB27_60:                              # %for.end231
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	$0, -4(%rbp)
.LBB27_61:                              # %for.cond232
                                        #   Parent Loop BB27_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB27_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB27_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB27_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB27_65
.LBB27_64:                              # %if.else248
                                        #   in Loop: Header=BB27_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB27_65:                              # %if.end260
                                        #   in Loop: Header=BB27_61 Depth=2
	jmp	.LBB27_66
.LBB27_66:                              # %for.inc261
                                        #   in Loop: Header=BB27_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_61
.LBB27_67:                              # %for.end263
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	$0, -4(%rbp)
.LBB27_68:                              # %for.cond264
                                        #   Parent Loop BB27_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB27_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB27_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB27_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB27_72
.LBB27_71:                              # %if.else280
                                        #   in Loop: Header=BB27_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB27_72:                              # %if.end292
                                        #   in Loop: Header=BB27_68 Depth=2
	jmp	.LBB27_73
.LBB27_73:                              # %for.inc293
                                        #   in Loop: Header=BB27_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_68
.LBB27_74:                              # %for.end295
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	$0, -4(%rbp)
.LBB27_75:                              # %for.cond296
                                        #   Parent Loop BB27_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB27_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB27_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB27_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB27_79
.LBB27_78:                              # %if.else312
                                        #   in Loop: Header=BB27_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB27_79:                              # %if.end324
                                        #   in Loop: Header=BB27_75 Depth=2
	jmp	.LBB27_80
.LBB27_80:                              # %for.inc325
                                        #   in Loop: Header=BB27_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_75
.LBB27_81:                              # %for.end327
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	$0, -8(%rbp)
.LBB27_82:                              # %for.cond328
                                        #   Parent Loop BB27_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB27_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB27_82 Depth=2
	movl	$0, -4(%rbp)
.LBB27_84:                              # %for.cond331
                                        #   Parent Loop BB27_1 Depth=1
                                        #     Parent Loop BB27_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB27_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB27_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB27_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB27_88
.LBB27_87:                              # %if.else350
                                        #   in Loop: Header=BB27_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB27_88:                              # %if.end365
                                        #   in Loop: Header=BB27_84 Depth=3
	jmp	.LBB27_89
.LBB27_89:                              # %for.inc366
                                        #   in Loop: Header=BB27_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_84
.LBB27_90:                              # %for.end368
                                        #   in Loop: Header=BB27_82 Depth=2
	jmp	.LBB27_91
.LBB27_91:                              # %for.inc369
                                        #   in Loop: Header=BB27_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_82
.LBB27_92:                              # %for.end371
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	$0, -8(%rbp)
.LBB27_93:                              # %for.cond372
                                        #   Parent Loop BB27_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB27_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB27_93 Depth=2
	movl	$0, -4(%rbp)
.LBB27_95:                              # %for.cond375
                                        #   Parent Loop BB27_1 Depth=1
                                        #     Parent Loop BB27_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB27_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB27_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB27_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB27_99
.LBB27_98:                              # %if.else394
                                        #   in Loop: Header=BB27_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB27_99:                              # %if.end409
                                        #   in Loop: Header=BB27_95 Depth=3
	jmp	.LBB27_100
.LBB27_100:                             # %for.inc410
                                        #   in Loop: Header=BB27_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_95
.LBB27_101:                             # %for.end412
                                        #   in Loop: Header=BB27_93 Depth=2
	jmp	.LBB27_102
.LBB27_102:                             # %for.inc413
                                        #   in Loop: Header=BB27_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_93
.LBB27_103:                             # %for.end415
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	$0, -8(%rbp)
.LBB27_104:                             # %for.cond416
                                        #   Parent Loop BB27_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB27_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB27_104 Depth=2
	movl	$0, -4(%rbp)
.LBB27_106:                             # %for.cond419
                                        #   Parent Loop BB27_1 Depth=1
                                        #     Parent Loop BB27_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB27_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB27_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB27_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB27_110
.LBB27_109:                             # %if.else438
                                        #   in Loop: Header=BB27_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB27_110:                             # %if.end453
                                        #   in Loop: Header=BB27_106 Depth=3
	jmp	.LBB27_111
.LBB27_111:                             # %for.inc454
                                        #   in Loop: Header=BB27_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_106
.LBB27_112:                             # %for.end456
                                        #   in Loop: Header=BB27_104 Depth=2
	jmp	.LBB27_113
.LBB27_113:                             # %for.inc457
                                        #   in Loop: Header=BB27_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_104
.LBB27_114:                             # %for.end459
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	$0, -8(%rbp)
.LBB27_115:                             # %for.cond460
                                        #   Parent Loop BB27_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB27_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB27_115 Depth=2
	movl	$0, -4(%rbp)
.LBB27_117:                             # %for.cond463
                                        #   Parent Loop BB27_1 Depth=1
                                        #     Parent Loop BB27_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB27_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB27_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB27_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB27_121
.LBB27_120:                             # %if.else482
                                        #   in Loop: Header=BB27_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB27_121:                             # %if.end497
                                        #   in Loop: Header=BB27_117 Depth=3
	jmp	.LBB27_122
.LBB27_122:                             # %for.inc498
                                        #   in Loop: Header=BB27_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_117
.LBB27_123:                             # %for.end500
                                        #   in Loop: Header=BB27_115 Depth=2
	jmp	.LBB27_124
.LBB27_124:                             # %for.inc501
                                        #   in Loop: Header=BB27_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_115
.LBB27_125:                             # %for.end503
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	$0, -8(%rbp)
.LBB27_126:                             # %for.cond504
                                        #   Parent Loop BB27_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB27_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB27_126 Depth=2
	movl	$0, -4(%rbp)
.LBB27_128:                             # %for.cond507
                                        #   Parent Loop BB27_1 Depth=1
                                        #     Parent Loop BB27_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB27_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB27_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB27_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB27_132
.LBB27_131:                             # %if.else526
                                        #   in Loop: Header=BB27_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB27_132:                             # %if.end541
                                        #   in Loop: Header=BB27_128 Depth=3
	jmp	.LBB27_133
.LBB27_133:                             # %for.inc542
                                        #   in Loop: Header=BB27_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_128
.LBB27_134:                             # %for.end544
                                        #   in Loop: Header=BB27_126 Depth=2
	jmp	.LBB27_135
.LBB27_135:                             # %for.inc545
                                        #   in Loop: Header=BB27_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_126
.LBB27_136:                             # %for.end547
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	$0, -8(%rbp)
.LBB27_137:                             # %for.cond548
                                        #   Parent Loop BB27_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB27_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB27_137 Depth=2
	movl	$0, -4(%rbp)
.LBB27_139:                             # %for.cond551
                                        #   Parent Loop BB27_1 Depth=1
                                        #     Parent Loop BB27_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB27_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB27_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB27_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB27_143
.LBB27_142:                             # %if.else570
                                        #   in Loop: Header=BB27_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB27_143:                             # %if.end585
                                        #   in Loop: Header=BB27_139 Depth=3
	jmp	.LBB27_144
.LBB27_144:                             # %for.inc586
                                        #   in Loop: Header=BB27_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_139
.LBB27_145:                             # %for.end588
                                        #   in Loop: Header=BB27_137 Depth=2
	jmp	.LBB27_146
.LBB27_146:                             # %for.inc589
                                        #   in Loop: Header=BB27_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_137
.LBB27_147:                             # %for.end591
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	$0, -8(%rbp)
.LBB27_148:                             # %for.cond592
                                        #   Parent Loop BB27_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB27_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB27_148 Depth=2
	movl	$0, -4(%rbp)
.LBB27_150:                             # %for.cond595
                                        #   Parent Loop BB27_1 Depth=1
                                        #     Parent Loop BB27_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB27_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB27_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB27_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB27_154
.LBB27_153:                             # %if.else614
                                        #   in Loop: Header=BB27_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB27_154:                             # %if.end629
                                        #   in Loop: Header=BB27_150 Depth=3
	jmp	.LBB27_155
.LBB27_155:                             # %for.inc630
                                        #   in Loop: Header=BB27_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_150
.LBB27_156:                             # %for.end632
                                        #   in Loop: Header=BB27_148 Depth=2
	jmp	.LBB27_157
.LBB27_157:                             # %for.inc633
                                        #   in Loop: Header=BB27_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_148
.LBB27_158:                             # %for.end635
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	$0, -8(%rbp)
.LBB27_159:                             # %for.cond636
                                        #   Parent Loop BB27_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB27_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB27_159 Depth=2
	movl	$0, -4(%rbp)
.LBB27_161:                             # %for.cond639
                                        #   Parent Loop BB27_1 Depth=1
                                        #     Parent Loop BB27_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB27_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB27_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB27_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB27_165
.LBB27_164:                             # %if.else658
                                        #   in Loop: Header=BB27_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB27_165:                             # %if.end673
                                        #   in Loop: Header=BB27_161 Depth=3
	jmp	.LBB27_166
.LBB27_166:                             # %for.inc674
                                        #   in Loop: Header=BB27_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_161
.LBB27_167:                             # %for.end676
                                        #   in Loop: Header=BB27_159 Depth=2
	jmp	.LBB27_168
.LBB27_168:                             # %for.inc677
                                        #   in Loop: Header=BB27_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_159
.LBB27_169:                             # %for.end679
                                        #   in Loop: Header=BB27_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB27_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB27_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB27_171:                             # %if.end682
                                        #   in Loop: Header=BB27_1 Depth=1
	jmp	.LBB27_172
.LBB27_172:                             # %for.inc683
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_1
.LBB27_173:                             # %for.end685
	cmpl	$273180617, -48(%rbp)   # imm = 0x104867C9
	jne	.LBB27_175
.LBB27_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB27_174
.Lfunc_end27:
	.size	GetCtxModelNumber.20, .Lfunc_end27-GetCtxModelNumber.20
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.21        # -- Begin function init_contexts.21
	.p2align	4, 0x90
	.type	init_contexts.21,@function
init_contexts.21:                       # @init_contexts.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1713187031, -28(%rbp)  # imm = 0x661D28D7
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB28_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB28_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB28_1 Depth=1
	movl	$0, -4(%rbp)
.LBB28_3:                               # %for.cond2
                                        #   Parent Loop BB28_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB28_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB28_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB28_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB28_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB28_7
.LBB28_6:                               # %if.else
                                        #   in Loop: Header=BB28_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB28_7:                               # %if.end
                                        #   in Loop: Header=BB28_3 Depth=2
	jmp	.LBB28_8
.LBB28_8:                               # %for.inc
                                        #   in Loop: Header=BB28_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_3
.LBB28_9:                               # %for.end
                                        #   in Loop: Header=BB28_1 Depth=1
	jmp	.LBB28_10
.LBB28_10:                              # %for.inc28
                                        #   in Loop: Header=BB28_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_1
.LBB28_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB28_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB28_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB28_12 Depth=1
	movl	$0, -4(%rbp)
.LBB28_14:                              # %for.cond34
                                        #   Parent Loop BB28_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB28_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB28_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB28_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB28_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB28_18
.LBB28_17:                              # %if.else52
                                        #   in Loop: Header=BB28_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB28_18:                              # %if.end66
                                        #   in Loop: Header=BB28_14 Depth=2
	jmp	.LBB28_19
.LBB28_19:                              # %for.inc67
                                        #   in Loop: Header=BB28_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_14
.LBB28_20:                              # %for.end69
                                        #   in Loop: Header=BB28_12 Depth=1
	jmp	.LBB28_21
.LBB28_21:                              # %for.inc70
                                        #   in Loop: Header=BB28_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_12
.LBB28_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB28_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB28_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB28_23 Depth=1
	movl	$0, -4(%rbp)
.LBB28_25:                              # %for.cond76
                                        #   Parent Loop BB28_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB28_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB28_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB28_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB28_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB28_29
.LBB28_28:                              # %if.else94
                                        #   in Loop: Header=BB28_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB28_29:                              # %if.end108
                                        #   in Loop: Header=BB28_25 Depth=2
	jmp	.LBB28_30
.LBB28_30:                              # %for.inc109
                                        #   in Loop: Header=BB28_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_25
.LBB28_31:                              # %for.end111
                                        #   in Loop: Header=BB28_23 Depth=1
	jmp	.LBB28_32
.LBB28_32:                              # %for.inc112
                                        #   in Loop: Header=BB28_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_23
.LBB28_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB28_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB28_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB28_34 Depth=1
	movl	$0, -4(%rbp)
.LBB28_36:                              # %for.cond118
                                        #   Parent Loop BB28_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB28_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB28_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB28_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB28_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB28_40
.LBB28_39:                              # %if.else136
                                        #   in Loop: Header=BB28_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB28_40:                              # %if.end150
                                        #   in Loop: Header=BB28_36 Depth=2
	jmp	.LBB28_41
.LBB28_41:                              # %for.inc151
                                        #   in Loop: Header=BB28_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_36
.LBB28_42:                              # %for.end153
                                        #   in Loop: Header=BB28_34 Depth=1
	jmp	.LBB28_43
.LBB28_43:                              # %for.inc154
                                        #   in Loop: Header=BB28_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_34
.LBB28_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB28_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB28_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB28_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB28_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB28_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB28_49
.LBB28_48:                              # %if.else172
                                        #   in Loop: Header=BB28_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB28_49:                              # %if.end183
                                        #   in Loop: Header=BB28_45 Depth=1
	jmp	.LBB28_50
.LBB28_50:                              # %for.inc184
                                        #   in Loop: Header=BB28_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_45
.LBB28_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB28_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB28_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB28_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB28_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB28_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB28_56
.LBB28_55:                              # %if.else202
                                        #   in Loop: Header=BB28_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB28_56:                              # %if.end213
                                        #   in Loop: Header=BB28_52 Depth=1
	jmp	.LBB28_57
.LBB28_57:                              # %for.inc214
                                        #   in Loop: Header=BB28_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_52
.LBB28_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB28_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB28_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB28_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB28_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB28_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB28_63
.LBB28_62:                              # %if.else232
                                        #   in Loop: Header=BB28_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB28_63:                              # %if.end243
                                        #   in Loop: Header=BB28_59 Depth=1
	jmp	.LBB28_64
.LBB28_64:                              # %for.inc244
                                        #   in Loop: Header=BB28_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_59
.LBB28_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB28_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB28_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB28_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB28_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB28_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB28_70
.LBB28_69:                              # %if.else262
                                        #   in Loop: Header=BB28_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB28_70:                              # %if.end273
                                        #   in Loop: Header=BB28_66 Depth=1
	jmp	.LBB28_71
.LBB28_71:                              # %for.inc274
                                        #   in Loop: Header=BB28_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_66
.LBB28_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB28_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB28_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB28_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB28_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB28_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB28_77
.LBB28_76:                              # %if.else292
                                        #   in Loop: Header=BB28_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB28_77:                              # %if.end303
                                        #   in Loop: Header=BB28_73 Depth=1
	jmp	.LBB28_78
.LBB28_78:                              # %for.inc304
                                        #   in Loop: Header=BB28_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_73
.LBB28_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB28_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB28_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB28_80 Depth=1
	movl	$0, -4(%rbp)
.LBB28_82:                              # %for.cond310
                                        #   Parent Loop BB28_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB28_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB28_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB28_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB28_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB28_86
.LBB28_85:                              # %if.else328
                                        #   in Loop: Header=BB28_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB28_86:                              # %if.end342
                                        #   in Loop: Header=BB28_82 Depth=2
	jmp	.LBB28_87
.LBB28_87:                              # %for.inc343
                                        #   in Loop: Header=BB28_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_82
.LBB28_88:                              # %for.end345
                                        #   in Loop: Header=BB28_80 Depth=1
	jmp	.LBB28_89
.LBB28_89:                              # %for.inc346
                                        #   in Loop: Header=BB28_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_80
.LBB28_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB28_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB28_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB28_91 Depth=1
	movl	$0, -4(%rbp)
.LBB28_93:                              # %for.cond352
                                        #   Parent Loop BB28_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB28_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB28_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB28_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB28_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB28_97
.LBB28_96:                              # %if.else370
                                        #   in Loop: Header=BB28_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB28_97:                              # %if.end384
                                        #   in Loop: Header=BB28_93 Depth=2
	jmp	.LBB28_98
.LBB28_98:                              # %for.inc385
                                        #   in Loop: Header=BB28_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_93
.LBB28_99:                              # %for.end387
                                        #   in Loop: Header=BB28_91 Depth=1
	jmp	.LBB28_100
.LBB28_100:                             # %for.inc388
                                        #   in Loop: Header=BB28_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_91
.LBB28_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB28_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB28_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB28_102 Depth=1
	movl	$0, -4(%rbp)
.LBB28_104:                             # %for.cond394
                                        #   Parent Loop BB28_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB28_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB28_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB28_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB28_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB28_108
.LBB28_107:                             # %if.else412
                                        #   in Loop: Header=BB28_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB28_108:                             # %if.end426
                                        #   in Loop: Header=BB28_104 Depth=2
	jmp	.LBB28_109
.LBB28_109:                             # %for.inc427
                                        #   in Loop: Header=BB28_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_104
.LBB28_110:                             # %for.end429
                                        #   in Loop: Header=BB28_102 Depth=1
	jmp	.LBB28_111
.LBB28_111:                             # %for.inc430
                                        #   in Loop: Header=BB28_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_102
.LBB28_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB28_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB28_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB28_113 Depth=1
	movl	$0, -4(%rbp)
.LBB28_115:                             # %for.cond436
                                        #   Parent Loop BB28_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB28_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB28_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB28_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB28_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB28_119
.LBB28_118:                             # %if.else454
                                        #   in Loop: Header=BB28_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB28_119:                             # %if.end468
                                        #   in Loop: Header=BB28_115 Depth=2
	jmp	.LBB28_120
.LBB28_120:                             # %for.inc469
                                        #   in Loop: Header=BB28_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_115
.LBB28_121:                             # %for.end471
                                        #   in Loop: Header=BB28_113 Depth=1
	jmp	.LBB28_122
.LBB28_122:                             # %for.inc472
                                        #   in Loop: Header=BB28_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_113
.LBB28_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB28_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB28_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB28_124 Depth=1
	movl	$0, -4(%rbp)
.LBB28_126:                             # %for.cond478
                                        #   Parent Loop BB28_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB28_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB28_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB28_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB28_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB28_130
.LBB28_129:                             # %if.else496
                                        #   in Loop: Header=BB28_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB28_130:                             # %if.end510
                                        #   in Loop: Header=BB28_126 Depth=2
	jmp	.LBB28_131
.LBB28_131:                             # %for.inc511
                                        #   in Loop: Header=BB28_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_126
.LBB28_132:                             # %for.end513
                                        #   in Loop: Header=BB28_124 Depth=1
	jmp	.LBB28_133
.LBB28_133:                             # %for.inc514
                                        #   in Loop: Header=BB28_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_124
.LBB28_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB28_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB28_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB28_135 Depth=1
	movl	$0, -4(%rbp)
.LBB28_137:                             # %for.cond520
                                        #   Parent Loop BB28_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB28_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB28_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB28_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB28_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB28_141
.LBB28_140:                             # %if.else538
                                        #   in Loop: Header=BB28_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB28_141:                             # %if.end552
                                        #   in Loop: Header=BB28_137 Depth=2
	jmp	.LBB28_142
.LBB28_142:                             # %for.inc553
                                        #   in Loop: Header=BB28_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_137
.LBB28_143:                             # %for.end555
                                        #   in Loop: Header=BB28_135 Depth=1
	jmp	.LBB28_144
.LBB28_144:                             # %for.inc556
                                        #   in Loop: Header=BB28_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_135
.LBB28_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB28_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB28_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB28_146 Depth=1
	movl	$0, -4(%rbp)
.LBB28_148:                             # %for.cond562
                                        #   Parent Loop BB28_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB28_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB28_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB28_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB28_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB28_152
.LBB28_151:                             # %if.else580
                                        #   in Loop: Header=BB28_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB28_152:                             # %if.end594
                                        #   in Loop: Header=BB28_148 Depth=2
	jmp	.LBB28_153
.LBB28_153:                             # %for.inc595
                                        #   in Loop: Header=BB28_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_148
.LBB28_154:                             # %for.end597
                                        #   in Loop: Header=BB28_146 Depth=1
	jmp	.LBB28_155
.LBB28_155:                             # %for.inc598
                                        #   in Loop: Header=BB28_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_146
.LBB28_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB28_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB28_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB28_157 Depth=1
	movl	$0, -4(%rbp)
.LBB28_159:                             # %for.cond604
                                        #   Parent Loop BB28_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB28_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB28_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB28_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB28_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB28_163
.LBB28_162:                             # %if.else622
                                        #   in Loop: Header=BB28_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB28_163:                             # %if.end636
                                        #   in Loop: Header=BB28_159 Depth=2
	jmp	.LBB28_164
.LBB28_164:                             # %for.inc637
                                        #   in Loop: Header=BB28_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_159
.LBB28_165:                             # %for.end639
                                        #   in Loop: Header=BB28_157 Depth=1
	jmp	.LBB28_166
.LBB28_166:                             # %for.inc640
                                        #   in Loop: Header=BB28_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_157
.LBB28_167:                             # %for.end642
	cmpl	$1713187031, -28(%rbp)  # imm = 0x661D28D7
	jne	.LBB28_169
.LBB28_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB28_168
.Lfunc_end28:
	.size	init_contexts.21, .Lfunc_end28-init_contexts.21
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.22
.LCPI29_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.22
	.p2align	4, 0x90
	.type	GetCtxModelNumber.22,@function
GetCtxModelNumber.22:                   # @GetCtxModelNumber.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI29_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1615911132, -48(%rbp)  # imm = 0x6050D8DC
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB29_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_3 Depth 2
                                        #       Child Loop BB29_5 Depth 3
                                        #     Child Loop BB29_14 Depth 2
                                        #       Child Loop BB29_16 Depth 3
                                        #     Child Loop BB29_25 Depth 2
                                        #       Child Loop BB29_27 Depth 3
                                        #     Child Loop BB29_36 Depth 2
                                        #       Child Loop BB29_38 Depth 3
                                        #     Child Loop BB29_47 Depth 2
                                        #     Child Loop BB29_54 Depth 2
                                        #     Child Loop BB29_61 Depth 2
                                        #     Child Loop BB29_68 Depth 2
                                        #     Child Loop BB29_75 Depth 2
                                        #     Child Loop BB29_82 Depth 2
                                        #       Child Loop BB29_84 Depth 3
                                        #     Child Loop BB29_93 Depth 2
                                        #       Child Loop BB29_95 Depth 3
                                        #     Child Loop BB29_104 Depth 2
                                        #       Child Loop BB29_106 Depth 3
                                        #     Child Loop BB29_115 Depth 2
                                        #       Child Loop BB29_117 Depth 3
                                        #     Child Loop BB29_126 Depth 2
                                        #       Child Loop BB29_128 Depth 3
                                        #     Child Loop BB29_137 Depth 2
                                        #       Child Loop BB29_139 Depth 3
                                        #     Child Loop BB29_148 Depth 2
                                        #       Child Loop BB29_150 Depth 3
                                        #     Child Loop BB29_159 Depth 2
                                        #       Child Loop BB29_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB29_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB29_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB29_3:                               # %for.cond2
                                        #   Parent Loop BB29_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB29_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB29_3 Depth=2
	movl	$0, -4(%rbp)
.LBB29_5:                               # %for.cond5
                                        #   Parent Loop BB29_1 Depth=1
                                        #     Parent Loop BB29_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB29_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB29_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB29_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB29_9
.LBB29_8:                               # %if.else
                                        #   in Loop: Header=BB29_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB29_9:                               # %if.end
                                        #   in Loop: Header=BB29_5 Depth=3
	jmp	.LBB29_10
.LBB29_10:                              # %for.inc
                                        #   in Loop: Header=BB29_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_5
.LBB29_11:                              # %for.end
                                        #   in Loop: Header=BB29_3 Depth=2
	jmp	.LBB29_12
.LBB29_12:                              # %for.inc33
                                        #   in Loop: Header=BB29_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_3
.LBB29_13:                              # %for.end35
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	$0, -8(%rbp)
.LBB29_14:                              # %for.cond36
                                        #   Parent Loop BB29_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB29_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB29_14 Depth=2
	movl	$0, -4(%rbp)
.LBB29_16:                              # %for.cond39
                                        #   Parent Loop BB29_1 Depth=1
                                        #     Parent Loop BB29_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB29_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB29_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB29_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB29_20
.LBB29_19:                              # %if.else58
                                        #   in Loop: Header=BB29_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB29_20:                              # %if.end73
                                        #   in Loop: Header=BB29_16 Depth=3
	jmp	.LBB29_21
.LBB29_21:                              # %for.inc74
                                        #   in Loop: Header=BB29_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_16
.LBB29_22:                              # %for.end76
                                        #   in Loop: Header=BB29_14 Depth=2
	jmp	.LBB29_23
.LBB29_23:                              # %for.inc77
                                        #   in Loop: Header=BB29_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_14
.LBB29_24:                              # %for.end79
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	$0, -8(%rbp)
.LBB29_25:                              # %for.cond80
                                        #   Parent Loop BB29_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB29_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB29_25 Depth=2
	movl	$0, -4(%rbp)
.LBB29_27:                              # %for.cond83
                                        #   Parent Loop BB29_1 Depth=1
                                        #     Parent Loop BB29_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB29_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB29_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB29_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB29_31
.LBB29_30:                              # %if.else102
                                        #   in Loop: Header=BB29_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB29_31:                              # %if.end117
                                        #   in Loop: Header=BB29_27 Depth=3
	jmp	.LBB29_32
.LBB29_32:                              # %for.inc118
                                        #   in Loop: Header=BB29_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_27
.LBB29_33:                              # %for.end120
                                        #   in Loop: Header=BB29_25 Depth=2
	jmp	.LBB29_34
.LBB29_34:                              # %for.inc121
                                        #   in Loop: Header=BB29_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_25
.LBB29_35:                              # %for.end123
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	$0, -8(%rbp)
.LBB29_36:                              # %for.cond124
                                        #   Parent Loop BB29_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB29_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB29_36 Depth=2
	movl	$0, -4(%rbp)
.LBB29_38:                              # %for.cond127
                                        #   Parent Loop BB29_1 Depth=1
                                        #     Parent Loop BB29_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB29_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB29_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB29_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB29_42
.LBB29_41:                              # %if.else146
                                        #   in Loop: Header=BB29_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB29_42:                              # %if.end161
                                        #   in Loop: Header=BB29_38 Depth=3
	jmp	.LBB29_43
.LBB29_43:                              # %for.inc162
                                        #   in Loop: Header=BB29_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_38
.LBB29_44:                              # %for.end164
                                        #   in Loop: Header=BB29_36 Depth=2
	jmp	.LBB29_45
.LBB29_45:                              # %for.inc165
                                        #   in Loop: Header=BB29_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_36
.LBB29_46:                              # %for.end167
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	$0, -4(%rbp)
.LBB29_47:                              # %for.cond168
                                        #   Parent Loop BB29_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB29_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB29_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB29_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB29_51
.LBB29_50:                              # %if.else184
                                        #   in Loop: Header=BB29_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB29_51:                              # %if.end196
                                        #   in Loop: Header=BB29_47 Depth=2
	jmp	.LBB29_52
.LBB29_52:                              # %for.inc197
                                        #   in Loop: Header=BB29_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_47
.LBB29_53:                              # %for.end199
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	$0, -4(%rbp)
.LBB29_54:                              # %for.cond200
                                        #   Parent Loop BB29_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB29_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB29_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB29_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB29_58
.LBB29_57:                              # %if.else216
                                        #   in Loop: Header=BB29_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB29_58:                              # %if.end228
                                        #   in Loop: Header=BB29_54 Depth=2
	jmp	.LBB29_59
.LBB29_59:                              # %for.inc229
                                        #   in Loop: Header=BB29_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_54
.LBB29_60:                              # %for.end231
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	$0, -4(%rbp)
.LBB29_61:                              # %for.cond232
                                        #   Parent Loop BB29_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB29_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB29_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB29_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB29_65
.LBB29_64:                              # %if.else248
                                        #   in Loop: Header=BB29_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB29_65:                              # %if.end260
                                        #   in Loop: Header=BB29_61 Depth=2
	jmp	.LBB29_66
.LBB29_66:                              # %for.inc261
                                        #   in Loop: Header=BB29_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_61
.LBB29_67:                              # %for.end263
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	$0, -4(%rbp)
.LBB29_68:                              # %for.cond264
                                        #   Parent Loop BB29_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB29_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB29_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB29_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB29_72
.LBB29_71:                              # %if.else280
                                        #   in Loop: Header=BB29_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB29_72:                              # %if.end292
                                        #   in Loop: Header=BB29_68 Depth=2
	jmp	.LBB29_73
.LBB29_73:                              # %for.inc293
                                        #   in Loop: Header=BB29_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_68
.LBB29_74:                              # %for.end295
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	$0, -4(%rbp)
.LBB29_75:                              # %for.cond296
                                        #   Parent Loop BB29_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB29_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB29_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB29_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB29_79
.LBB29_78:                              # %if.else312
                                        #   in Loop: Header=BB29_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB29_79:                              # %if.end324
                                        #   in Loop: Header=BB29_75 Depth=2
	jmp	.LBB29_80
.LBB29_80:                              # %for.inc325
                                        #   in Loop: Header=BB29_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_75
.LBB29_81:                              # %for.end327
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	$0, -8(%rbp)
.LBB29_82:                              # %for.cond328
                                        #   Parent Loop BB29_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB29_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB29_82 Depth=2
	movl	$0, -4(%rbp)
.LBB29_84:                              # %for.cond331
                                        #   Parent Loop BB29_1 Depth=1
                                        #     Parent Loop BB29_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB29_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB29_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB29_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB29_88
.LBB29_87:                              # %if.else350
                                        #   in Loop: Header=BB29_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB29_88:                              # %if.end365
                                        #   in Loop: Header=BB29_84 Depth=3
	jmp	.LBB29_89
.LBB29_89:                              # %for.inc366
                                        #   in Loop: Header=BB29_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_84
.LBB29_90:                              # %for.end368
                                        #   in Loop: Header=BB29_82 Depth=2
	jmp	.LBB29_91
.LBB29_91:                              # %for.inc369
                                        #   in Loop: Header=BB29_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_82
.LBB29_92:                              # %for.end371
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	$0, -8(%rbp)
.LBB29_93:                              # %for.cond372
                                        #   Parent Loop BB29_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB29_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB29_93 Depth=2
	movl	$0, -4(%rbp)
.LBB29_95:                              # %for.cond375
                                        #   Parent Loop BB29_1 Depth=1
                                        #     Parent Loop BB29_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB29_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB29_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB29_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB29_99
.LBB29_98:                              # %if.else394
                                        #   in Loop: Header=BB29_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB29_99:                              # %if.end409
                                        #   in Loop: Header=BB29_95 Depth=3
	jmp	.LBB29_100
.LBB29_100:                             # %for.inc410
                                        #   in Loop: Header=BB29_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_95
.LBB29_101:                             # %for.end412
                                        #   in Loop: Header=BB29_93 Depth=2
	jmp	.LBB29_102
.LBB29_102:                             # %for.inc413
                                        #   in Loop: Header=BB29_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_93
.LBB29_103:                             # %for.end415
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	$0, -8(%rbp)
.LBB29_104:                             # %for.cond416
                                        #   Parent Loop BB29_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB29_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB29_104 Depth=2
	movl	$0, -4(%rbp)
.LBB29_106:                             # %for.cond419
                                        #   Parent Loop BB29_1 Depth=1
                                        #     Parent Loop BB29_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB29_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB29_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB29_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB29_110
.LBB29_109:                             # %if.else438
                                        #   in Loop: Header=BB29_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB29_110:                             # %if.end453
                                        #   in Loop: Header=BB29_106 Depth=3
	jmp	.LBB29_111
.LBB29_111:                             # %for.inc454
                                        #   in Loop: Header=BB29_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_106
.LBB29_112:                             # %for.end456
                                        #   in Loop: Header=BB29_104 Depth=2
	jmp	.LBB29_113
.LBB29_113:                             # %for.inc457
                                        #   in Loop: Header=BB29_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_104
.LBB29_114:                             # %for.end459
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	$0, -8(%rbp)
.LBB29_115:                             # %for.cond460
                                        #   Parent Loop BB29_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB29_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB29_115 Depth=2
	movl	$0, -4(%rbp)
.LBB29_117:                             # %for.cond463
                                        #   Parent Loop BB29_1 Depth=1
                                        #     Parent Loop BB29_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB29_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB29_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB29_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB29_121
.LBB29_120:                             # %if.else482
                                        #   in Loop: Header=BB29_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB29_121:                             # %if.end497
                                        #   in Loop: Header=BB29_117 Depth=3
	jmp	.LBB29_122
.LBB29_122:                             # %for.inc498
                                        #   in Loop: Header=BB29_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_117
.LBB29_123:                             # %for.end500
                                        #   in Loop: Header=BB29_115 Depth=2
	jmp	.LBB29_124
.LBB29_124:                             # %for.inc501
                                        #   in Loop: Header=BB29_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_115
.LBB29_125:                             # %for.end503
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	$0, -8(%rbp)
.LBB29_126:                             # %for.cond504
                                        #   Parent Loop BB29_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB29_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB29_126 Depth=2
	movl	$0, -4(%rbp)
.LBB29_128:                             # %for.cond507
                                        #   Parent Loop BB29_1 Depth=1
                                        #     Parent Loop BB29_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB29_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB29_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB29_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB29_132
.LBB29_131:                             # %if.else526
                                        #   in Loop: Header=BB29_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB29_132:                             # %if.end541
                                        #   in Loop: Header=BB29_128 Depth=3
	jmp	.LBB29_133
.LBB29_133:                             # %for.inc542
                                        #   in Loop: Header=BB29_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_128
.LBB29_134:                             # %for.end544
                                        #   in Loop: Header=BB29_126 Depth=2
	jmp	.LBB29_135
.LBB29_135:                             # %for.inc545
                                        #   in Loop: Header=BB29_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_126
.LBB29_136:                             # %for.end547
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	$0, -8(%rbp)
.LBB29_137:                             # %for.cond548
                                        #   Parent Loop BB29_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB29_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB29_137 Depth=2
	movl	$0, -4(%rbp)
.LBB29_139:                             # %for.cond551
                                        #   Parent Loop BB29_1 Depth=1
                                        #     Parent Loop BB29_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB29_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB29_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB29_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB29_143
.LBB29_142:                             # %if.else570
                                        #   in Loop: Header=BB29_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB29_143:                             # %if.end585
                                        #   in Loop: Header=BB29_139 Depth=3
	jmp	.LBB29_144
.LBB29_144:                             # %for.inc586
                                        #   in Loop: Header=BB29_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_139
.LBB29_145:                             # %for.end588
                                        #   in Loop: Header=BB29_137 Depth=2
	jmp	.LBB29_146
.LBB29_146:                             # %for.inc589
                                        #   in Loop: Header=BB29_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_137
.LBB29_147:                             # %for.end591
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	$0, -8(%rbp)
.LBB29_148:                             # %for.cond592
                                        #   Parent Loop BB29_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB29_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB29_148 Depth=2
	movl	$0, -4(%rbp)
.LBB29_150:                             # %for.cond595
                                        #   Parent Loop BB29_1 Depth=1
                                        #     Parent Loop BB29_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB29_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB29_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB29_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB29_154
.LBB29_153:                             # %if.else614
                                        #   in Loop: Header=BB29_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB29_154:                             # %if.end629
                                        #   in Loop: Header=BB29_150 Depth=3
	jmp	.LBB29_155
.LBB29_155:                             # %for.inc630
                                        #   in Loop: Header=BB29_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_150
.LBB29_156:                             # %for.end632
                                        #   in Loop: Header=BB29_148 Depth=2
	jmp	.LBB29_157
.LBB29_157:                             # %for.inc633
                                        #   in Loop: Header=BB29_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_148
.LBB29_158:                             # %for.end635
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	$0, -8(%rbp)
.LBB29_159:                             # %for.cond636
                                        #   Parent Loop BB29_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB29_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB29_159 Depth=2
	movl	$0, -4(%rbp)
.LBB29_161:                             # %for.cond639
                                        #   Parent Loop BB29_1 Depth=1
                                        #     Parent Loop BB29_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB29_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB29_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB29_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB29_165
.LBB29_164:                             # %if.else658
                                        #   in Loop: Header=BB29_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB29_165:                             # %if.end673
                                        #   in Loop: Header=BB29_161 Depth=3
	jmp	.LBB29_166
.LBB29_166:                             # %for.inc674
                                        #   in Loop: Header=BB29_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_161
.LBB29_167:                             # %for.end676
                                        #   in Loop: Header=BB29_159 Depth=2
	jmp	.LBB29_168
.LBB29_168:                             # %for.inc677
                                        #   in Loop: Header=BB29_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_159
.LBB29_169:                             # %for.end679
                                        #   in Loop: Header=BB29_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB29_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB29_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB29_171:                             # %if.end682
                                        #   in Loop: Header=BB29_1 Depth=1
	jmp	.LBB29_172
.LBB29_172:                             # %for.inc683
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_1
.LBB29_173:                             # %for.end685
	cmpl	$1615911132, -48(%rbp)  # imm = 0x6050D8DC
	jne	.LBB29_175
.LBB29_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB29_174
.Lfunc_end29:
	.size	GetCtxModelNumber.22, .Lfunc_end29-GetCtxModelNumber.22
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.23        # -- Begin function init_contexts.23
	.p2align	4, 0x90
	.type	init_contexts.23,@function
init_contexts.23:                       # @init_contexts.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$24223365, -28(%rbp)    # imm = 0x1719E85
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB30_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB30_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	$0, -4(%rbp)
.LBB30_3:                               # %for.cond2
                                        #   Parent Loop BB30_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB30_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB30_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB30_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB30_7
.LBB30_6:                               # %if.else
                                        #   in Loop: Header=BB30_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB30_7:                               # %if.end
                                        #   in Loop: Header=BB30_3 Depth=2
	jmp	.LBB30_8
.LBB30_8:                               # %for.inc
                                        #   in Loop: Header=BB30_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_3
.LBB30_9:                               # %for.end
                                        #   in Loop: Header=BB30_1 Depth=1
	jmp	.LBB30_10
.LBB30_10:                              # %for.inc28
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_1
.LBB30_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB30_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB30_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB30_12 Depth=1
	movl	$0, -4(%rbp)
.LBB30_14:                              # %for.cond34
                                        #   Parent Loop BB30_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB30_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB30_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB30_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB30_18
.LBB30_17:                              # %if.else52
                                        #   in Loop: Header=BB30_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB30_18:                              # %if.end66
                                        #   in Loop: Header=BB30_14 Depth=2
	jmp	.LBB30_19
.LBB30_19:                              # %for.inc67
                                        #   in Loop: Header=BB30_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_14
.LBB30_20:                              # %for.end69
                                        #   in Loop: Header=BB30_12 Depth=1
	jmp	.LBB30_21
.LBB30_21:                              # %for.inc70
                                        #   in Loop: Header=BB30_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_12
.LBB30_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB30_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB30_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB30_23 Depth=1
	movl	$0, -4(%rbp)
.LBB30_25:                              # %for.cond76
                                        #   Parent Loop BB30_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB30_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB30_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB30_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB30_29
.LBB30_28:                              # %if.else94
                                        #   in Loop: Header=BB30_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB30_29:                              # %if.end108
                                        #   in Loop: Header=BB30_25 Depth=2
	jmp	.LBB30_30
.LBB30_30:                              # %for.inc109
                                        #   in Loop: Header=BB30_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_25
.LBB30_31:                              # %for.end111
                                        #   in Loop: Header=BB30_23 Depth=1
	jmp	.LBB30_32
.LBB30_32:                              # %for.inc112
                                        #   in Loop: Header=BB30_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_23
.LBB30_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB30_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB30_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB30_34 Depth=1
	movl	$0, -4(%rbp)
.LBB30_36:                              # %for.cond118
                                        #   Parent Loop BB30_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB30_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB30_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB30_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB30_40
.LBB30_39:                              # %if.else136
                                        #   in Loop: Header=BB30_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB30_40:                              # %if.end150
                                        #   in Loop: Header=BB30_36 Depth=2
	jmp	.LBB30_41
.LBB30_41:                              # %for.inc151
                                        #   in Loop: Header=BB30_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_36
.LBB30_42:                              # %for.end153
                                        #   in Loop: Header=BB30_34 Depth=1
	jmp	.LBB30_43
.LBB30_43:                              # %for.inc154
                                        #   in Loop: Header=BB30_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_34
.LBB30_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB30_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB30_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB30_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB30_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB30_49
.LBB30_48:                              # %if.else172
                                        #   in Loop: Header=BB30_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB30_49:                              # %if.end183
                                        #   in Loop: Header=BB30_45 Depth=1
	jmp	.LBB30_50
.LBB30_50:                              # %for.inc184
                                        #   in Loop: Header=BB30_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_45
.LBB30_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB30_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB30_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB30_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB30_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB30_56
.LBB30_55:                              # %if.else202
                                        #   in Loop: Header=BB30_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB30_56:                              # %if.end213
                                        #   in Loop: Header=BB30_52 Depth=1
	jmp	.LBB30_57
.LBB30_57:                              # %for.inc214
                                        #   in Loop: Header=BB30_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_52
.LBB30_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB30_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB30_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB30_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB30_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB30_63
.LBB30_62:                              # %if.else232
                                        #   in Loop: Header=BB30_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB30_63:                              # %if.end243
                                        #   in Loop: Header=BB30_59 Depth=1
	jmp	.LBB30_64
.LBB30_64:                              # %for.inc244
                                        #   in Loop: Header=BB30_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_59
.LBB30_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB30_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB30_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB30_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB30_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB30_70
.LBB30_69:                              # %if.else262
                                        #   in Loop: Header=BB30_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB30_70:                              # %if.end273
                                        #   in Loop: Header=BB30_66 Depth=1
	jmp	.LBB30_71
.LBB30_71:                              # %for.inc274
                                        #   in Loop: Header=BB30_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_66
.LBB30_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB30_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB30_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB30_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB30_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB30_77
.LBB30_76:                              # %if.else292
                                        #   in Loop: Header=BB30_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB30_77:                              # %if.end303
                                        #   in Loop: Header=BB30_73 Depth=1
	jmp	.LBB30_78
.LBB30_78:                              # %for.inc304
                                        #   in Loop: Header=BB30_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_73
.LBB30_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB30_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB30_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB30_80 Depth=1
	movl	$0, -4(%rbp)
.LBB30_82:                              # %for.cond310
                                        #   Parent Loop BB30_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB30_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB30_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB30_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB30_86
.LBB30_85:                              # %if.else328
                                        #   in Loop: Header=BB30_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB30_86:                              # %if.end342
                                        #   in Loop: Header=BB30_82 Depth=2
	jmp	.LBB30_87
.LBB30_87:                              # %for.inc343
                                        #   in Loop: Header=BB30_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_82
.LBB30_88:                              # %for.end345
                                        #   in Loop: Header=BB30_80 Depth=1
	jmp	.LBB30_89
.LBB30_89:                              # %for.inc346
                                        #   in Loop: Header=BB30_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_80
.LBB30_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB30_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB30_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB30_91 Depth=1
	movl	$0, -4(%rbp)
.LBB30_93:                              # %for.cond352
                                        #   Parent Loop BB30_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB30_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB30_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB30_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB30_97
.LBB30_96:                              # %if.else370
                                        #   in Loop: Header=BB30_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB30_97:                              # %if.end384
                                        #   in Loop: Header=BB30_93 Depth=2
	jmp	.LBB30_98
.LBB30_98:                              # %for.inc385
                                        #   in Loop: Header=BB30_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_93
.LBB30_99:                              # %for.end387
                                        #   in Loop: Header=BB30_91 Depth=1
	jmp	.LBB30_100
.LBB30_100:                             # %for.inc388
                                        #   in Loop: Header=BB30_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_91
.LBB30_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB30_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB30_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB30_102 Depth=1
	movl	$0, -4(%rbp)
.LBB30_104:                             # %for.cond394
                                        #   Parent Loop BB30_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB30_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB30_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB30_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB30_108
.LBB30_107:                             # %if.else412
                                        #   in Loop: Header=BB30_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB30_108:                             # %if.end426
                                        #   in Loop: Header=BB30_104 Depth=2
	jmp	.LBB30_109
.LBB30_109:                             # %for.inc427
                                        #   in Loop: Header=BB30_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_104
.LBB30_110:                             # %for.end429
                                        #   in Loop: Header=BB30_102 Depth=1
	jmp	.LBB30_111
.LBB30_111:                             # %for.inc430
                                        #   in Loop: Header=BB30_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_102
.LBB30_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB30_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB30_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB30_113 Depth=1
	movl	$0, -4(%rbp)
.LBB30_115:                             # %for.cond436
                                        #   Parent Loop BB30_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB30_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB30_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB30_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB30_119
.LBB30_118:                             # %if.else454
                                        #   in Loop: Header=BB30_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB30_119:                             # %if.end468
                                        #   in Loop: Header=BB30_115 Depth=2
	jmp	.LBB30_120
.LBB30_120:                             # %for.inc469
                                        #   in Loop: Header=BB30_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_115
.LBB30_121:                             # %for.end471
                                        #   in Loop: Header=BB30_113 Depth=1
	jmp	.LBB30_122
.LBB30_122:                             # %for.inc472
                                        #   in Loop: Header=BB30_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_113
.LBB30_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB30_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB30_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB30_124 Depth=1
	movl	$0, -4(%rbp)
.LBB30_126:                             # %for.cond478
                                        #   Parent Loop BB30_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB30_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB30_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB30_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB30_130
.LBB30_129:                             # %if.else496
                                        #   in Loop: Header=BB30_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB30_130:                             # %if.end510
                                        #   in Loop: Header=BB30_126 Depth=2
	jmp	.LBB30_131
.LBB30_131:                             # %for.inc511
                                        #   in Loop: Header=BB30_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_126
.LBB30_132:                             # %for.end513
                                        #   in Loop: Header=BB30_124 Depth=1
	jmp	.LBB30_133
.LBB30_133:                             # %for.inc514
                                        #   in Loop: Header=BB30_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_124
.LBB30_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB30_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB30_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB30_135 Depth=1
	movl	$0, -4(%rbp)
.LBB30_137:                             # %for.cond520
                                        #   Parent Loop BB30_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB30_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB30_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB30_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB30_141
.LBB30_140:                             # %if.else538
                                        #   in Loop: Header=BB30_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB30_141:                             # %if.end552
                                        #   in Loop: Header=BB30_137 Depth=2
	jmp	.LBB30_142
.LBB30_142:                             # %for.inc553
                                        #   in Loop: Header=BB30_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_137
.LBB30_143:                             # %for.end555
                                        #   in Loop: Header=BB30_135 Depth=1
	jmp	.LBB30_144
.LBB30_144:                             # %for.inc556
                                        #   in Loop: Header=BB30_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_135
.LBB30_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB30_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB30_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB30_146 Depth=1
	movl	$0, -4(%rbp)
.LBB30_148:                             # %for.cond562
                                        #   Parent Loop BB30_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB30_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB30_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB30_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB30_152
.LBB30_151:                             # %if.else580
                                        #   in Loop: Header=BB30_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB30_152:                             # %if.end594
                                        #   in Loop: Header=BB30_148 Depth=2
	jmp	.LBB30_153
.LBB30_153:                             # %for.inc595
                                        #   in Loop: Header=BB30_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_148
.LBB30_154:                             # %for.end597
                                        #   in Loop: Header=BB30_146 Depth=1
	jmp	.LBB30_155
.LBB30_155:                             # %for.inc598
                                        #   in Loop: Header=BB30_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_146
.LBB30_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB30_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB30_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB30_157 Depth=1
	movl	$0, -4(%rbp)
.LBB30_159:                             # %for.cond604
                                        #   Parent Loop BB30_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB30_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB30_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB30_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB30_163
.LBB30_162:                             # %if.else622
                                        #   in Loop: Header=BB30_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB30_163:                             # %if.end636
                                        #   in Loop: Header=BB30_159 Depth=2
	jmp	.LBB30_164
.LBB30_164:                             # %for.inc637
                                        #   in Loop: Header=BB30_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_159
.LBB30_165:                             # %for.end639
                                        #   in Loop: Header=BB30_157 Depth=1
	jmp	.LBB30_166
.LBB30_166:                             # %for.inc640
                                        #   in Loop: Header=BB30_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_157
.LBB30_167:                             # %for.end642
	cmpl	$24223365, -28(%rbp)    # imm = 0x1719E85
	jne	.LBB30_169
.LBB30_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_168
.Lfunc_end30:
	.size	init_contexts.23, .Lfunc_end30-init_contexts.23
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.24
.LCPI31_0:
	.quad	4607182418800017408     # double 1
.LCPI31_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI31_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI31_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.24
	.p2align	4, 0x90
	.type	XRate.24,@function
XRate.24:                               # @XRate.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1558377437, -32(%rbp)  # imm = 0x5CE2F3DD
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB31_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB31_3
.LBB31_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB31_3:                               # %cond.end
	vmovsd	.LCPI31_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI31_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI31_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI31_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB31_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI31_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB31_6
.LBB31_5:                               # %cond.false6
	vmovsd	.LCPI31_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI31_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI31_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB31_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB31_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB31_9
.LBB31_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB31_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB31_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB31_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB31_13
.LBB31_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB31_13:                              # %cond.end26
	jmp	.LBB31_15
.LBB31_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB31_15
.LBB31_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB31_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB31_18
.LBB31_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB31_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1558377437, -32(%rbp)  # imm = 0x5CE2F3DD
	jne	.LBB31_20
.LBB31_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB31_19
.Lfunc_end31:
	.size	XRate.24, .Lfunc_end31-XRate.24
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.25        # -- Begin function init_contexts.25
	.p2align	4, 0x90
	.type	init_contexts.25,@function
init_contexts.25:                       # @init_contexts.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1067620532, -28(%rbp)  # imm = 0x3FA298B4
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB32_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB32_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	$0, -4(%rbp)
.LBB32_3:                               # %for.cond2
                                        #   Parent Loop BB32_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB32_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB32_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB32_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB32_7
.LBB32_6:                               # %if.else
                                        #   in Loop: Header=BB32_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB32_7:                               # %if.end
                                        #   in Loop: Header=BB32_3 Depth=2
	jmp	.LBB32_8
.LBB32_8:                               # %for.inc
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_3
.LBB32_9:                               # %for.end
                                        #   in Loop: Header=BB32_1 Depth=1
	jmp	.LBB32_10
.LBB32_10:                              # %for.inc28
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_1
.LBB32_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB32_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB32_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB32_12 Depth=1
	movl	$0, -4(%rbp)
.LBB32_14:                              # %for.cond34
                                        #   Parent Loop BB32_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB32_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB32_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB32_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB32_18
.LBB32_17:                              # %if.else52
                                        #   in Loop: Header=BB32_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB32_18:                              # %if.end66
                                        #   in Loop: Header=BB32_14 Depth=2
	jmp	.LBB32_19
.LBB32_19:                              # %for.inc67
                                        #   in Loop: Header=BB32_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_14
.LBB32_20:                              # %for.end69
                                        #   in Loop: Header=BB32_12 Depth=1
	jmp	.LBB32_21
.LBB32_21:                              # %for.inc70
                                        #   in Loop: Header=BB32_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_12
.LBB32_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB32_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB32_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB32_23 Depth=1
	movl	$0, -4(%rbp)
.LBB32_25:                              # %for.cond76
                                        #   Parent Loop BB32_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB32_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB32_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB32_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB32_29
.LBB32_28:                              # %if.else94
                                        #   in Loop: Header=BB32_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB32_29:                              # %if.end108
                                        #   in Loop: Header=BB32_25 Depth=2
	jmp	.LBB32_30
.LBB32_30:                              # %for.inc109
                                        #   in Loop: Header=BB32_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_25
.LBB32_31:                              # %for.end111
                                        #   in Loop: Header=BB32_23 Depth=1
	jmp	.LBB32_32
.LBB32_32:                              # %for.inc112
                                        #   in Loop: Header=BB32_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_23
.LBB32_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB32_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB32_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB32_34 Depth=1
	movl	$0, -4(%rbp)
.LBB32_36:                              # %for.cond118
                                        #   Parent Loop BB32_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB32_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB32_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB32_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB32_40
.LBB32_39:                              # %if.else136
                                        #   in Loop: Header=BB32_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB32_40:                              # %if.end150
                                        #   in Loop: Header=BB32_36 Depth=2
	jmp	.LBB32_41
.LBB32_41:                              # %for.inc151
                                        #   in Loop: Header=BB32_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_36
.LBB32_42:                              # %for.end153
                                        #   in Loop: Header=BB32_34 Depth=1
	jmp	.LBB32_43
.LBB32_43:                              # %for.inc154
                                        #   in Loop: Header=BB32_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_34
.LBB32_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB32_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB32_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB32_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB32_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB32_49
.LBB32_48:                              # %if.else172
                                        #   in Loop: Header=BB32_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB32_49:                              # %if.end183
                                        #   in Loop: Header=BB32_45 Depth=1
	jmp	.LBB32_50
.LBB32_50:                              # %for.inc184
                                        #   in Loop: Header=BB32_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_45
.LBB32_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB32_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB32_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB32_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB32_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB32_56
.LBB32_55:                              # %if.else202
                                        #   in Loop: Header=BB32_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB32_56:                              # %if.end213
                                        #   in Loop: Header=BB32_52 Depth=1
	jmp	.LBB32_57
.LBB32_57:                              # %for.inc214
                                        #   in Loop: Header=BB32_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_52
.LBB32_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB32_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB32_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB32_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB32_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB32_63
.LBB32_62:                              # %if.else232
                                        #   in Loop: Header=BB32_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB32_63:                              # %if.end243
                                        #   in Loop: Header=BB32_59 Depth=1
	jmp	.LBB32_64
.LBB32_64:                              # %for.inc244
                                        #   in Loop: Header=BB32_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_59
.LBB32_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB32_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB32_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB32_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB32_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB32_70
.LBB32_69:                              # %if.else262
                                        #   in Loop: Header=BB32_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB32_70:                              # %if.end273
                                        #   in Loop: Header=BB32_66 Depth=1
	jmp	.LBB32_71
.LBB32_71:                              # %for.inc274
                                        #   in Loop: Header=BB32_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_66
.LBB32_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB32_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB32_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB32_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB32_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB32_77
.LBB32_76:                              # %if.else292
                                        #   in Loop: Header=BB32_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB32_77:                              # %if.end303
                                        #   in Loop: Header=BB32_73 Depth=1
	jmp	.LBB32_78
.LBB32_78:                              # %for.inc304
                                        #   in Loop: Header=BB32_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_73
.LBB32_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB32_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB32_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB32_80 Depth=1
	movl	$0, -4(%rbp)
.LBB32_82:                              # %for.cond310
                                        #   Parent Loop BB32_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB32_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB32_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB32_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB32_86
.LBB32_85:                              # %if.else328
                                        #   in Loop: Header=BB32_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB32_86:                              # %if.end342
                                        #   in Loop: Header=BB32_82 Depth=2
	jmp	.LBB32_87
.LBB32_87:                              # %for.inc343
                                        #   in Loop: Header=BB32_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_82
.LBB32_88:                              # %for.end345
                                        #   in Loop: Header=BB32_80 Depth=1
	jmp	.LBB32_89
.LBB32_89:                              # %for.inc346
                                        #   in Loop: Header=BB32_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_80
.LBB32_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB32_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB32_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB32_91 Depth=1
	movl	$0, -4(%rbp)
.LBB32_93:                              # %for.cond352
                                        #   Parent Loop BB32_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB32_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB32_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB32_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB32_97
.LBB32_96:                              # %if.else370
                                        #   in Loop: Header=BB32_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB32_97:                              # %if.end384
                                        #   in Loop: Header=BB32_93 Depth=2
	jmp	.LBB32_98
.LBB32_98:                              # %for.inc385
                                        #   in Loop: Header=BB32_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_93
.LBB32_99:                              # %for.end387
                                        #   in Loop: Header=BB32_91 Depth=1
	jmp	.LBB32_100
.LBB32_100:                             # %for.inc388
                                        #   in Loop: Header=BB32_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_91
.LBB32_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB32_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB32_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB32_102 Depth=1
	movl	$0, -4(%rbp)
.LBB32_104:                             # %for.cond394
                                        #   Parent Loop BB32_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB32_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB32_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB32_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB32_108
.LBB32_107:                             # %if.else412
                                        #   in Loop: Header=BB32_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB32_108:                             # %if.end426
                                        #   in Loop: Header=BB32_104 Depth=2
	jmp	.LBB32_109
.LBB32_109:                             # %for.inc427
                                        #   in Loop: Header=BB32_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_104
.LBB32_110:                             # %for.end429
                                        #   in Loop: Header=BB32_102 Depth=1
	jmp	.LBB32_111
.LBB32_111:                             # %for.inc430
                                        #   in Loop: Header=BB32_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_102
.LBB32_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB32_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB32_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB32_113 Depth=1
	movl	$0, -4(%rbp)
.LBB32_115:                             # %for.cond436
                                        #   Parent Loop BB32_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB32_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB32_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB32_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB32_119
.LBB32_118:                             # %if.else454
                                        #   in Loop: Header=BB32_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB32_119:                             # %if.end468
                                        #   in Loop: Header=BB32_115 Depth=2
	jmp	.LBB32_120
.LBB32_120:                             # %for.inc469
                                        #   in Loop: Header=BB32_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_115
.LBB32_121:                             # %for.end471
                                        #   in Loop: Header=BB32_113 Depth=1
	jmp	.LBB32_122
.LBB32_122:                             # %for.inc472
                                        #   in Loop: Header=BB32_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_113
.LBB32_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB32_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB32_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB32_124 Depth=1
	movl	$0, -4(%rbp)
.LBB32_126:                             # %for.cond478
                                        #   Parent Loop BB32_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB32_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB32_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB32_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB32_130
.LBB32_129:                             # %if.else496
                                        #   in Loop: Header=BB32_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB32_130:                             # %if.end510
                                        #   in Loop: Header=BB32_126 Depth=2
	jmp	.LBB32_131
.LBB32_131:                             # %for.inc511
                                        #   in Loop: Header=BB32_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_126
.LBB32_132:                             # %for.end513
                                        #   in Loop: Header=BB32_124 Depth=1
	jmp	.LBB32_133
.LBB32_133:                             # %for.inc514
                                        #   in Loop: Header=BB32_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_124
.LBB32_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB32_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB32_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB32_135 Depth=1
	movl	$0, -4(%rbp)
.LBB32_137:                             # %for.cond520
                                        #   Parent Loop BB32_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB32_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB32_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB32_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB32_141
.LBB32_140:                             # %if.else538
                                        #   in Loop: Header=BB32_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB32_141:                             # %if.end552
                                        #   in Loop: Header=BB32_137 Depth=2
	jmp	.LBB32_142
.LBB32_142:                             # %for.inc553
                                        #   in Loop: Header=BB32_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_137
.LBB32_143:                             # %for.end555
                                        #   in Loop: Header=BB32_135 Depth=1
	jmp	.LBB32_144
.LBB32_144:                             # %for.inc556
                                        #   in Loop: Header=BB32_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_135
.LBB32_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB32_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB32_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB32_146 Depth=1
	movl	$0, -4(%rbp)
.LBB32_148:                             # %for.cond562
                                        #   Parent Loop BB32_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB32_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB32_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB32_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB32_152
.LBB32_151:                             # %if.else580
                                        #   in Loop: Header=BB32_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB32_152:                             # %if.end594
                                        #   in Loop: Header=BB32_148 Depth=2
	jmp	.LBB32_153
.LBB32_153:                             # %for.inc595
                                        #   in Loop: Header=BB32_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_148
.LBB32_154:                             # %for.end597
                                        #   in Loop: Header=BB32_146 Depth=1
	jmp	.LBB32_155
.LBB32_155:                             # %for.inc598
                                        #   in Loop: Header=BB32_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_146
.LBB32_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB32_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB32_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB32_157 Depth=1
	movl	$0, -4(%rbp)
.LBB32_159:                             # %for.cond604
                                        #   Parent Loop BB32_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB32_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB32_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB32_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB32_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB32_163
.LBB32_162:                             # %if.else622
                                        #   in Loop: Header=BB32_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB32_163:                             # %if.end636
                                        #   in Loop: Header=BB32_159 Depth=2
	jmp	.LBB32_164
.LBB32_164:                             # %for.inc637
                                        #   in Loop: Header=BB32_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_159
.LBB32_165:                             # %for.end639
                                        #   in Loop: Header=BB32_157 Depth=1
	jmp	.LBB32_166
.LBB32_166:                             # %for.inc640
                                        #   in Loop: Header=BB32_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_157
.LBB32_167:                             # %for.end642
	cmpl	$1067620532, -28(%rbp)  # imm = 0x3FA298B4
	jne	.LBB32_169
.LBB32_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_168
.Lfunc_end32:
	.size	init_contexts.25, .Lfunc_end32-init_contexts.25
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.26
.LCPI33_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.26
	.p2align	4, 0x90
	.type	GetCtxModelNumber.26,@function
GetCtxModelNumber.26:                   # @GetCtxModelNumber.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI33_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$641775873, -44(%rbp)   # imm = 0x2640B901
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB33_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_3 Depth 2
                                        #       Child Loop BB33_5 Depth 3
                                        #     Child Loop BB33_14 Depth 2
                                        #       Child Loop BB33_16 Depth 3
                                        #     Child Loop BB33_25 Depth 2
                                        #       Child Loop BB33_27 Depth 3
                                        #     Child Loop BB33_36 Depth 2
                                        #       Child Loop BB33_38 Depth 3
                                        #     Child Loop BB33_47 Depth 2
                                        #     Child Loop BB33_54 Depth 2
                                        #     Child Loop BB33_61 Depth 2
                                        #     Child Loop BB33_68 Depth 2
                                        #     Child Loop BB33_75 Depth 2
                                        #     Child Loop BB33_82 Depth 2
                                        #       Child Loop BB33_84 Depth 3
                                        #     Child Loop BB33_93 Depth 2
                                        #       Child Loop BB33_95 Depth 3
                                        #     Child Loop BB33_104 Depth 2
                                        #       Child Loop BB33_106 Depth 3
                                        #     Child Loop BB33_115 Depth 2
                                        #       Child Loop BB33_117 Depth 3
                                        #     Child Loop BB33_126 Depth 2
                                        #       Child Loop BB33_128 Depth 3
                                        #     Child Loop BB33_137 Depth 2
                                        #       Child Loop BB33_139 Depth 3
                                        #     Child Loop BB33_148 Depth 2
                                        #       Child Loop BB33_150 Depth 3
                                        #     Child Loop BB33_159 Depth 2
                                        #       Child Loop BB33_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB33_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB33_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB33_3:                               # %for.cond2
                                        #   Parent Loop BB33_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB33_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB33_3 Depth=2
	movl	$0, -4(%rbp)
.LBB33_5:                               # %for.cond5
                                        #   Parent Loop BB33_1 Depth=1
                                        #     Parent Loop BB33_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB33_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB33_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB33_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB33_9
.LBB33_8:                               # %if.else
                                        #   in Loop: Header=BB33_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB33_9:                               # %if.end
                                        #   in Loop: Header=BB33_5 Depth=3
	jmp	.LBB33_10
.LBB33_10:                              # %for.inc
                                        #   in Loop: Header=BB33_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_5
.LBB33_11:                              # %for.end
                                        #   in Loop: Header=BB33_3 Depth=2
	jmp	.LBB33_12
.LBB33_12:                              # %for.inc33
                                        #   in Loop: Header=BB33_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_3
.LBB33_13:                              # %for.end35
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	$0, -8(%rbp)
.LBB33_14:                              # %for.cond36
                                        #   Parent Loop BB33_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB33_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB33_14 Depth=2
	movl	$0, -4(%rbp)
.LBB33_16:                              # %for.cond39
                                        #   Parent Loop BB33_1 Depth=1
                                        #     Parent Loop BB33_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB33_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB33_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB33_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB33_20
.LBB33_19:                              # %if.else58
                                        #   in Loop: Header=BB33_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB33_20:                              # %if.end73
                                        #   in Loop: Header=BB33_16 Depth=3
	jmp	.LBB33_21
.LBB33_21:                              # %for.inc74
                                        #   in Loop: Header=BB33_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_16
.LBB33_22:                              # %for.end76
                                        #   in Loop: Header=BB33_14 Depth=2
	jmp	.LBB33_23
.LBB33_23:                              # %for.inc77
                                        #   in Loop: Header=BB33_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_14
.LBB33_24:                              # %for.end79
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	$0, -8(%rbp)
.LBB33_25:                              # %for.cond80
                                        #   Parent Loop BB33_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB33_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB33_25 Depth=2
	movl	$0, -4(%rbp)
.LBB33_27:                              # %for.cond83
                                        #   Parent Loop BB33_1 Depth=1
                                        #     Parent Loop BB33_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB33_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB33_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB33_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB33_31
.LBB33_30:                              # %if.else102
                                        #   in Loop: Header=BB33_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB33_31:                              # %if.end117
                                        #   in Loop: Header=BB33_27 Depth=3
	jmp	.LBB33_32
.LBB33_32:                              # %for.inc118
                                        #   in Loop: Header=BB33_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_27
.LBB33_33:                              # %for.end120
                                        #   in Loop: Header=BB33_25 Depth=2
	jmp	.LBB33_34
.LBB33_34:                              # %for.inc121
                                        #   in Loop: Header=BB33_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_25
.LBB33_35:                              # %for.end123
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	$0, -8(%rbp)
.LBB33_36:                              # %for.cond124
                                        #   Parent Loop BB33_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB33_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB33_36 Depth=2
	movl	$0, -4(%rbp)
.LBB33_38:                              # %for.cond127
                                        #   Parent Loop BB33_1 Depth=1
                                        #     Parent Loop BB33_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB33_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB33_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB33_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB33_42
.LBB33_41:                              # %if.else146
                                        #   in Loop: Header=BB33_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB33_42:                              # %if.end161
                                        #   in Loop: Header=BB33_38 Depth=3
	jmp	.LBB33_43
.LBB33_43:                              # %for.inc162
                                        #   in Loop: Header=BB33_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_38
.LBB33_44:                              # %for.end164
                                        #   in Loop: Header=BB33_36 Depth=2
	jmp	.LBB33_45
.LBB33_45:                              # %for.inc165
                                        #   in Loop: Header=BB33_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_36
.LBB33_46:                              # %for.end167
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	$0, -4(%rbp)
.LBB33_47:                              # %for.cond168
                                        #   Parent Loop BB33_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB33_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB33_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB33_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB33_51
.LBB33_50:                              # %if.else184
                                        #   in Loop: Header=BB33_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB33_51:                              # %if.end196
                                        #   in Loop: Header=BB33_47 Depth=2
	jmp	.LBB33_52
.LBB33_52:                              # %for.inc197
                                        #   in Loop: Header=BB33_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_47
.LBB33_53:                              # %for.end199
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	$0, -4(%rbp)
.LBB33_54:                              # %for.cond200
                                        #   Parent Loop BB33_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB33_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB33_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB33_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB33_58
.LBB33_57:                              # %if.else216
                                        #   in Loop: Header=BB33_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB33_58:                              # %if.end228
                                        #   in Loop: Header=BB33_54 Depth=2
	jmp	.LBB33_59
.LBB33_59:                              # %for.inc229
                                        #   in Loop: Header=BB33_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_54
.LBB33_60:                              # %for.end231
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	$0, -4(%rbp)
.LBB33_61:                              # %for.cond232
                                        #   Parent Loop BB33_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB33_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB33_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB33_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB33_65
.LBB33_64:                              # %if.else248
                                        #   in Loop: Header=BB33_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB33_65:                              # %if.end260
                                        #   in Loop: Header=BB33_61 Depth=2
	jmp	.LBB33_66
.LBB33_66:                              # %for.inc261
                                        #   in Loop: Header=BB33_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_61
.LBB33_67:                              # %for.end263
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	$0, -4(%rbp)
.LBB33_68:                              # %for.cond264
                                        #   Parent Loop BB33_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB33_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB33_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB33_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB33_72
.LBB33_71:                              # %if.else280
                                        #   in Loop: Header=BB33_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB33_72:                              # %if.end292
                                        #   in Loop: Header=BB33_68 Depth=2
	jmp	.LBB33_73
.LBB33_73:                              # %for.inc293
                                        #   in Loop: Header=BB33_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_68
.LBB33_74:                              # %for.end295
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	$0, -4(%rbp)
.LBB33_75:                              # %for.cond296
                                        #   Parent Loop BB33_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB33_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB33_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB33_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB33_79
.LBB33_78:                              # %if.else312
                                        #   in Loop: Header=BB33_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB33_79:                              # %if.end324
                                        #   in Loop: Header=BB33_75 Depth=2
	jmp	.LBB33_80
.LBB33_80:                              # %for.inc325
                                        #   in Loop: Header=BB33_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_75
.LBB33_81:                              # %for.end327
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	$0, -8(%rbp)
.LBB33_82:                              # %for.cond328
                                        #   Parent Loop BB33_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB33_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB33_82 Depth=2
	movl	$0, -4(%rbp)
.LBB33_84:                              # %for.cond331
                                        #   Parent Loop BB33_1 Depth=1
                                        #     Parent Loop BB33_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB33_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB33_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB33_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB33_88
.LBB33_87:                              # %if.else350
                                        #   in Loop: Header=BB33_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB33_88:                              # %if.end365
                                        #   in Loop: Header=BB33_84 Depth=3
	jmp	.LBB33_89
.LBB33_89:                              # %for.inc366
                                        #   in Loop: Header=BB33_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_84
.LBB33_90:                              # %for.end368
                                        #   in Loop: Header=BB33_82 Depth=2
	jmp	.LBB33_91
.LBB33_91:                              # %for.inc369
                                        #   in Loop: Header=BB33_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_82
.LBB33_92:                              # %for.end371
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	$0, -8(%rbp)
.LBB33_93:                              # %for.cond372
                                        #   Parent Loop BB33_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB33_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB33_93 Depth=2
	movl	$0, -4(%rbp)
.LBB33_95:                              # %for.cond375
                                        #   Parent Loop BB33_1 Depth=1
                                        #     Parent Loop BB33_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB33_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB33_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB33_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB33_99
.LBB33_98:                              # %if.else394
                                        #   in Loop: Header=BB33_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB33_99:                              # %if.end409
                                        #   in Loop: Header=BB33_95 Depth=3
	jmp	.LBB33_100
.LBB33_100:                             # %for.inc410
                                        #   in Loop: Header=BB33_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_95
.LBB33_101:                             # %for.end412
                                        #   in Loop: Header=BB33_93 Depth=2
	jmp	.LBB33_102
.LBB33_102:                             # %for.inc413
                                        #   in Loop: Header=BB33_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_93
.LBB33_103:                             # %for.end415
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	$0, -8(%rbp)
.LBB33_104:                             # %for.cond416
                                        #   Parent Loop BB33_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB33_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB33_104 Depth=2
	movl	$0, -4(%rbp)
.LBB33_106:                             # %for.cond419
                                        #   Parent Loop BB33_1 Depth=1
                                        #     Parent Loop BB33_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB33_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB33_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB33_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB33_110
.LBB33_109:                             # %if.else438
                                        #   in Loop: Header=BB33_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB33_110:                             # %if.end453
                                        #   in Loop: Header=BB33_106 Depth=3
	jmp	.LBB33_111
.LBB33_111:                             # %for.inc454
                                        #   in Loop: Header=BB33_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_106
.LBB33_112:                             # %for.end456
                                        #   in Loop: Header=BB33_104 Depth=2
	jmp	.LBB33_113
.LBB33_113:                             # %for.inc457
                                        #   in Loop: Header=BB33_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_104
.LBB33_114:                             # %for.end459
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	$0, -8(%rbp)
.LBB33_115:                             # %for.cond460
                                        #   Parent Loop BB33_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB33_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB33_115 Depth=2
	movl	$0, -4(%rbp)
.LBB33_117:                             # %for.cond463
                                        #   Parent Loop BB33_1 Depth=1
                                        #     Parent Loop BB33_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB33_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB33_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB33_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB33_121
.LBB33_120:                             # %if.else482
                                        #   in Loop: Header=BB33_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB33_121:                             # %if.end497
                                        #   in Loop: Header=BB33_117 Depth=3
	jmp	.LBB33_122
.LBB33_122:                             # %for.inc498
                                        #   in Loop: Header=BB33_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_117
.LBB33_123:                             # %for.end500
                                        #   in Loop: Header=BB33_115 Depth=2
	jmp	.LBB33_124
.LBB33_124:                             # %for.inc501
                                        #   in Loop: Header=BB33_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_115
.LBB33_125:                             # %for.end503
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	$0, -8(%rbp)
.LBB33_126:                             # %for.cond504
                                        #   Parent Loop BB33_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB33_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB33_126 Depth=2
	movl	$0, -4(%rbp)
.LBB33_128:                             # %for.cond507
                                        #   Parent Loop BB33_1 Depth=1
                                        #     Parent Loop BB33_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB33_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB33_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB33_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB33_132
.LBB33_131:                             # %if.else526
                                        #   in Loop: Header=BB33_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB33_132:                             # %if.end541
                                        #   in Loop: Header=BB33_128 Depth=3
	jmp	.LBB33_133
.LBB33_133:                             # %for.inc542
                                        #   in Loop: Header=BB33_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_128
.LBB33_134:                             # %for.end544
                                        #   in Loop: Header=BB33_126 Depth=2
	jmp	.LBB33_135
.LBB33_135:                             # %for.inc545
                                        #   in Loop: Header=BB33_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_126
.LBB33_136:                             # %for.end547
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	$0, -8(%rbp)
.LBB33_137:                             # %for.cond548
                                        #   Parent Loop BB33_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB33_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB33_137 Depth=2
	movl	$0, -4(%rbp)
.LBB33_139:                             # %for.cond551
                                        #   Parent Loop BB33_1 Depth=1
                                        #     Parent Loop BB33_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB33_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB33_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB33_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB33_143
.LBB33_142:                             # %if.else570
                                        #   in Loop: Header=BB33_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB33_143:                             # %if.end585
                                        #   in Loop: Header=BB33_139 Depth=3
	jmp	.LBB33_144
.LBB33_144:                             # %for.inc586
                                        #   in Loop: Header=BB33_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_139
.LBB33_145:                             # %for.end588
                                        #   in Loop: Header=BB33_137 Depth=2
	jmp	.LBB33_146
.LBB33_146:                             # %for.inc589
                                        #   in Loop: Header=BB33_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_137
.LBB33_147:                             # %for.end591
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	$0, -8(%rbp)
.LBB33_148:                             # %for.cond592
                                        #   Parent Loop BB33_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB33_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB33_148 Depth=2
	movl	$0, -4(%rbp)
.LBB33_150:                             # %for.cond595
                                        #   Parent Loop BB33_1 Depth=1
                                        #     Parent Loop BB33_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB33_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB33_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB33_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB33_154
.LBB33_153:                             # %if.else614
                                        #   in Loop: Header=BB33_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB33_154:                             # %if.end629
                                        #   in Loop: Header=BB33_150 Depth=3
	jmp	.LBB33_155
.LBB33_155:                             # %for.inc630
                                        #   in Loop: Header=BB33_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_150
.LBB33_156:                             # %for.end632
                                        #   in Loop: Header=BB33_148 Depth=2
	jmp	.LBB33_157
.LBB33_157:                             # %for.inc633
                                        #   in Loop: Header=BB33_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_148
.LBB33_158:                             # %for.end635
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	$0, -8(%rbp)
.LBB33_159:                             # %for.cond636
                                        #   Parent Loop BB33_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB33_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB33_159 Depth=2
	movl	$0, -4(%rbp)
.LBB33_161:                             # %for.cond639
                                        #   Parent Loop BB33_1 Depth=1
                                        #     Parent Loop BB33_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB33_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB33_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB33_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB33_165
.LBB33_164:                             # %if.else658
                                        #   in Loop: Header=BB33_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB33_165:                             # %if.end673
                                        #   in Loop: Header=BB33_161 Depth=3
	jmp	.LBB33_166
.LBB33_166:                             # %for.inc674
                                        #   in Loop: Header=BB33_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_161
.LBB33_167:                             # %for.end676
                                        #   in Loop: Header=BB33_159 Depth=2
	jmp	.LBB33_168
.LBB33_168:                             # %for.inc677
                                        #   in Loop: Header=BB33_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_159
.LBB33_169:                             # %for.end679
                                        #   in Loop: Header=BB33_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB33_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB33_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB33_171:                             # %if.end682
                                        #   in Loop: Header=BB33_1 Depth=1
	jmp	.LBB33_172
.LBB33_172:                             # %for.inc683
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_1
.LBB33_173:                             # %for.end685
	cmpl	$641775873, -44(%rbp)   # imm = 0x2640B901
	jne	.LBB33_175
.LBB33_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_174
.Lfunc_end33:
	.size	GetCtxModelNumber.26, .Lfunc_end33-GetCtxModelNumber.26
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.27
.LCPI34_0:
	.quad	4607182418800017408     # double 1
.LCPI34_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI34_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI34_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.27
	.p2align	4, 0x90
	.type	XRate.27,@function
XRate.27:                               # @XRate.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$401776859, -32(%rbp)   # imm = 0x17F2A0DB
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB34_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB34_3
.LBB34_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB34_3:                               # %cond.end
	vmovsd	.LCPI34_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI34_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI34_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI34_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB34_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI34_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB34_6
.LBB34_5:                               # %cond.false6
	vmovsd	.LCPI34_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI34_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI34_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB34_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB34_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB34_9
.LBB34_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB34_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB34_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB34_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB34_13
.LBB34_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB34_13:                              # %cond.end26
	jmp	.LBB34_15
.LBB34_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB34_15
.LBB34_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB34_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB34_18
.LBB34_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB34_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$401776859, -32(%rbp)   # imm = 0x17F2A0DB
	jne	.LBB34_20
.LBB34_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB34_19
.Lfunc_end34:
	.size	XRate.27, .Lfunc_end34-XRate.27
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.28
.LCPI35_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.28
	.p2align	4, 0x90
	.type	GetCtxModelNumber.28,@function
GetCtxModelNumber.28:                   # @GetCtxModelNumber.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI35_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1071634220, -44(%rbp)  # imm = 0x3FDFD72C
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB35_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_3 Depth 2
                                        #       Child Loop BB35_5 Depth 3
                                        #     Child Loop BB35_14 Depth 2
                                        #       Child Loop BB35_16 Depth 3
                                        #     Child Loop BB35_25 Depth 2
                                        #       Child Loop BB35_27 Depth 3
                                        #     Child Loop BB35_36 Depth 2
                                        #       Child Loop BB35_38 Depth 3
                                        #     Child Loop BB35_47 Depth 2
                                        #     Child Loop BB35_54 Depth 2
                                        #     Child Loop BB35_61 Depth 2
                                        #     Child Loop BB35_68 Depth 2
                                        #     Child Loop BB35_75 Depth 2
                                        #     Child Loop BB35_82 Depth 2
                                        #       Child Loop BB35_84 Depth 3
                                        #     Child Loop BB35_93 Depth 2
                                        #       Child Loop BB35_95 Depth 3
                                        #     Child Loop BB35_104 Depth 2
                                        #       Child Loop BB35_106 Depth 3
                                        #     Child Loop BB35_115 Depth 2
                                        #       Child Loop BB35_117 Depth 3
                                        #     Child Loop BB35_126 Depth 2
                                        #       Child Loop BB35_128 Depth 3
                                        #     Child Loop BB35_137 Depth 2
                                        #       Child Loop BB35_139 Depth 3
                                        #     Child Loop BB35_148 Depth 2
                                        #       Child Loop BB35_150 Depth 3
                                        #     Child Loop BB35_159 Depth 2
                                        #       Child Loop BB35_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB35_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB35_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB35_3:                               # %for.cond2
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB35_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB35_3 Depth=2
	movl	$0, -4(%rbp)
.LBB35_5:                               # %for.cond5
                                        #   Parent Loop BB35_1 Depth=1
                                        #     Parent Loop BB35_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB35_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB35_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB35_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB35_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB35_9
.LBB35_8:                               # %if.else
                                        #   in Loop: Header=BB35_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB35_9:                               # %if.end
                                        #   in Loop: Header=BB35_5 Depth=3
	jmp	.LBB35_10
.LBB35_10:                              # %for.inc
                                        #   in Loop: Header=BB35_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_5
.LBB35_11:                              # %for.end
                                        #   in Loop: Header=BB35_3 Depth=2
	jmp	.LBB35_12
.LBB35_12:                              # %for.inc33
                                        #   in Loop: Header=BB35_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_3
.LBB35_13:                              # %for.end35
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -8(%rbp)
.LBB35_14:                              # %for.cond36
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB35_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB35_14 Depth=2
	movl	$0, -4(%rbp)
.LBB35_16:                              # %for.cond39
                                        #   Parent Loop BB35_1 Depth=1
                                        #     Parent Loop BB35_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB35_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB35_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB35_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB35_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB35_20
.LBB35_19:                              # %if.else58
                                        #   in Loop: Header=BB35_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB35_20:                              # %if.end73
                                        #   in Loop: Header=BB35_16 Depth=3
	jmp	.LBB35_21
.LBB35_21:                              # %for.inc74
                                        #   in Loop: Header=BB35_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_16
.LBB35_22:                              # %for.end76
                                        #   in Loop: Header=BB35_14 Depth=2
	jmp	.LBB35_23
.LBB35_23:                              # %for.inc77
                                        #   in Loop: Header=BB35_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_14
.LBB35_24:                              # %for.end79
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -8(%rbp)
.LBB35_25:                              # %for.cond80
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB35_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB35_25 Depth=2
	movl	$0, -4(%rbp)
.LBB35_27:                              # %for.cond83
                                        #   Parent Loop BB35_1 Depth=1
                                        #     Parent Loop BB35_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB35_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB35_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB35_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB35_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB35_31
.LBB35_30:                              # %if.else102
                                        #   in Loop: Header=BB35_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB35_31:                              # %if.end117
                                        #   in Loop: Header=BB35_27 Depth=3
	jmp	.LBB35_32
.LBB35_32:                              # %for.inc118
                                        #   in Loop: Header=BB35_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_27
.LBB35_33:                              # %for.end120
                                        #   in Loop: Header=BB35_25 Depth=2
	jmp	.LBB35_34
.LBB35_34:                              # %for.inc121
                                        #   in Loop: Header=BB35_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_25
.LBB35_35:                              # %for.end123
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -8(%rbp)
.LBB35_36:                              # %for.cond124
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB35_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB35_36 Depth=2
	movl	$0, -4(%rbp)
.LBB35_38:                              # %for.cond127
                                        #   Parent Loop BB35_1 Depth=1
                                        #     Parent Loop BB35_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB35_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB35_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB35_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB35_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB35_42
.LBB35_41:                              # %if.else146
                                        #   in Loop: Header=BB35_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB35_42:                              # %if.end161
                                        #   in Loop: Header=BB35_38 Depth=3
	jmp	.LBB35_43
.LBB35_43:                              # %for.inc162
                                        #   in Loop: Header=BB35_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_38
.LBB35_44:                              # %for.end164
                                        #   in Loop: Header=BB35_36 Depth=2
	jmp	.LBB35_45
.LBB35_45:                              # %for.inc165
                                        #   in Loop: Header=BB35_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_36
.LBB35_46:                              # %for.end167
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -4(%rbp)
.LBB35_47:                              # %for.cond168
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB35_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB35_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB35_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB35_51
.LBB35_50:                              # %if.else184
                                        #   in Loop: Header=BB35_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB35_51:                              # %if.end196
                                        #   in Loop: Header=BB35_47 Depth=2
	jmp	.LBB35_52
.LBB35_52:                              # %for.inc197
                                        #   in Loop: Header=BB35_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_47
.LBB35_53:                              # %for.end199
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -4(%rbp)
.LBB35_54:                              # %for.cond200
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB35_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB35_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB35_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB35_58
.LBB35_57:                              # %if.else216
                                        #   in Loop: Header=BB35_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB35_58:                              # %if.end228
                                        #   in Loop: Header=BB35_54 Depth=2
	jmp	.LBB35_59
.LBB35_59:                              # %for.inc229
                                        #   in Loop: Header=BB35_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_54
.LBB35_60:                              # %for.end231
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -4(%rbp)
.LBB35_61:                              # %for.cond232
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB35_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB35_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB35_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB35_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB35_65
.LBB35_64:                              # %if.else248
                                        #   in Loop: Header=BB35_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB35_65:                              # %if.end260
                                        #   in Loop: Header=BB35_61 Depth=2
	jmp	.LBB35_66
.LBB35_66:                              # %for.inc261
                                        #   in Loop: Header=BB35_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_61
.LBB35_67:                              # %for.end263
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -4(%rbp)
.LBB35_68:                              # %for.cond264
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB35_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB35_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB35_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB35_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB35_72
.LBB35_71:                              # %if.else280
                                        #   in Loop: Header=BB35_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB35_72:                              # %if.end292
                                        #   in Loop: Header=BB35_68 Depth=2
	jmp	.LBB35_73
.LBB35_73:                              # %for.inc293
                                        #   in Loop: Header=BB35_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_68
.LBB35_74:                              # %for.end295
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -4(%rbp)
.LBB35_75:                              # %for.cond296
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB35_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB35_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB35_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB35_79
.LBB35_78:                              # %if.else312
                                        #   in Loop: Header=BB35_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB35_79:                              # %if.end324
                                        #   in Loop: Header=BB35_75 Depth=2
	jmp	.LBB35_80
.LBB35_80:                              # %for.inc325
                                        #   in Loop: Header=BB35_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_75
.LBB35_81:                              # %for.end327
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -8(%rbp)
.LBB35_82:                              # %for.cond328
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB35_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB35_82 Depth=2
	movl	$0, -4(%rbp)
.LBB35_84:                              # %for.cond331
                                        #   Parent Loop BB35_1 Depth=1
                                        #     Parent Loop BB35_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB35_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB35_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB35_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB35_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB35_88
.LBB35_87:                              # %if.else350
                                        #   in Loop: Header=BB35_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB35_88:                              # %if.end365
                                        #   in Loop: Header=BB35_84 Depth=3
	jmp	.LBB35_89
.LBB35_89:                              # %for.inc366
                                        #   in Loop: Header=BB35_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_84
.LBB35_90:                              # %for.end368
                                        #   in Loop: Header=BB35_82 Depth=2
	jmp	.LBB35_91
.LBB35_91:                              # %for.inc369
                                        #   in Loop: Header=BB35_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_82
.LBB35_92:                              # %for.end371
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -8(%rbp)
.LBB35_93:                              # %for.cond372
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB35_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB35_93 Depth=2
	movl	$0, -4(%rbp)
.LBB35_95:                              # %for.cond375
                                        #   Parent Loop BB35_1 Depth=1
                                        #     Parent Loop BB35_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB35_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB35_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB35_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB35_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB35_99
.LBB35_98:                              # %if.else394
                                        #   in Loop: Header=BB35_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB35_99:                              # %if.end409
                                        #   in Loop: Header=BB35_95 Depth=3
	jmp	.LBB35_100
.LBB35_100:                             # %for.inc410
                                        #   in Loop: Header=BB35_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_95
.LBB35_101:                             # %for.end412
                                        #   in Loop: Header=BB35_93 Depth=2
	jmp	.LBB35_102
.LBB35_102:                             # %for.inc413
                                        #   in Loop: Header=BB35_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_93
.LBB35_103:                             # %for.end415
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -8(%rbp)
.LBB35_104:                             # %for.cond416
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB35_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB35_104 Depth=2
	movl	$0, -4(%rbp)
.LBB35_106:                             # %for.cond419
                                        #   Parent Loop BB35_1 Depth=1
                                        #     Parent Loop BB35_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB35_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB35_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB35_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB35_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB35_110
.LBB35_109:                             # %if.else438
                                        #   in Loop: Header=BB35_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB35_110:                             # %if.end453
                                        #   in Loop: Header=BB35_106 Depth=3
	jmp	.LBB35_111
.LBB35_111:                             # %for.inc454
                                        #   in Loop: Header=BB35_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_106
.LBB35_112:                             # %for.end456
                                        #   in Loop: Header=BB35_104 Depth=2
	jmp	.LBB35_113
.LBB35_113:                             # %for.inc457
                                        #   in Loop: Header=BB35_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_104
.LBB35_114:                             # %for.end459
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -8(%rbp)
.LBB35_115:                             # %for.cond460
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB35_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB35_115 Depth=2
	movl	$0, -4(%rbp)
.LBB35_117:                             # %for.cond463
                                        #   Parent Loop BB35_1 Depth=1
                                        #     Parent Loop BB35_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB35_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB35_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB35_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB35_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB35_121
.LBB35_120:                             # %if.else482
                                        #   in Loop: Header=BB35_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB35_121:                             # %if.end497
                                        #   in Loop: Header=BB35_117 Depth=3
	jmp	.LBB35_122
.LBB35_122:                             # %for.inc498
                                        #   in Loop: Header=BB35_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_117
.LBB35_123:                             # %for.end500
                                        #   in Loop: Header=BB35_115 Depth=2
	jmp	.LBB35_124
.LBB35_124:                             # %for.inc501
                                        #   in Loop: Header=BB35_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_115
.LBB35_125:                             # %for.end503
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -8(%rbp)
.LBB35_126:                             # %for.cond504
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB35_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB35_126 Depth=2
	movl	$0, -4(%rbp)
.LBB35_128:                             # %for.cond507
                                        #   Parent Loop BB35_1 Depth=1
                                        #     Parent Loop BB35_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB35_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB35_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB35_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB35_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB35_132
.LBB35_131:                             # %if.else526
                                        #   in Loop: Header=BB35_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB35_132:                             # %if.end541
                                        #   in Loop: Header=BB35_128 Depth=3
	jmp	.LBB35_133
.LBB35_133:                             # %for.inc542
                                        #   in Loop: Header=BB35_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_128
.LBB35_134:                             # %for.end544
                                        #   in Loop: Header=BB35_126 Depth=2
	jmp	.LBB35_135
.LBB35_135:                             # %for.inc545
                                        #   in Loop: Header=BB35_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_126
.LBB35_136:                             # %for.end547
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -8(%rbp)
.LBB35_137:                             # %for.cond548
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB35_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB35_137 Depth=2
	movl	$0, -4(%rbp)
.LBB35_139:                             # %for.cond551
                                        #   Parent Loop BB35_1 Depth=1
                                        #     Parent Loop BB35_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB35_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB35_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB35_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB35_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB35_143
.LBB35_142:                             # %if.else570
                                        #   in Loop: Header=BB35_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB35_143:                             # %if.end585
                                        #   in Loop: Header=BB35_139 Depth=3
	jmp	.LBB35_144
.LBB35_144:                             # %for.inc586
                                        #   in Loop: Header=BB35_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_139
.LBB35_145:                             # %for.end588
                                        #   in Loop: Header=BB35_137 Depth=2
	jmp	.LBB35_146
.LBB35_146:                             # %for.inc589
                                        #   in Loop: Header=BB35_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_137
.LBB35_147:                             # %for.end591
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -8(%rbp)
.LBB35_148:                             # %for.cond592
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB35_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB35_148 Depth=2
	movl	$0, -4(%rbp)
.LBB35_150:                             # %for.cond595
                                        #   Parent Loop BB35_1 Depth=1
                                        #     Parent Loop BB35_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB35_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB35_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB35_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB35_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB35_154
.LBB35_153:                             # %if.else614
                                        #   in Loop: Header=BB35_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB35_154:                             # %if.end629
                                        #   in Loop: Header=BB35_150 Depth=3
	jmp	.LBB35_155
.LBB35_155:                             # %for.inc630
                                        #   in Loop: Header=BB35_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_150
.LBB35_156:                             # %for.end632
                                        #   in Loop: Header=BB35_148 Depth=2
	jmp	.LBB35_157
.LBB35_157:                             # %for.inc633
                                        #   in Loop: Header=BB35_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_148
.LBB35_158:                             # %for.end635
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -8(%rbp)
.LBB35_159:                             # %for.cond636
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB35_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB35_159 Depth=2
	movl	$0, -4(%rbp)
.LBB35_161:                             # %for.cond639
                                        #   Parent Loop BB35_1 Depth=1
                                        #     Parent Loop BB35_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB35_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB35_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB35_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB35_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB35_165
.LBB35_164:                             # %if.else658
                                        #   in Loop: Header=BB35_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB35_165:                             # %if.end673
                                        #   in Loop: Header=BB35_161 Depth=3
	jmp	.LBB35_166
.LBB35_166:                             # %for.inc674
                                        #   in Loop: Header=BB35_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_161
.LBB35_167:                             # %for.end676
                                        #   in Loop: Header=BB35_159 Depth=2
	jmp	.LBB35_168
.LBB35_168:                             # %for.inc677
                                        #   in Loop: Header=BB35_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_159
.LBB35_169:                             # %for.end679
                                        #   in Loop: Header=BB35_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB35_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB35_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB35_171:                             # %if.end682
                                        #   in Loop: Header=BB35_1 Depth=1
	jmp	.LBB35_172
.LBB35_172:                             # %for.inc683
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_1
.LBB35_173:                             # %for.end685
	cmpl	$1071634220, -44(%rbp)  # imm = 0x3FDFD72C
	jne	.LBB35_175
.LBB35_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_174
.Lfunc_end35:
	.size	GetCtxModelNumber.28, .Lfunc_end35-GetCtxModelNumber.28
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.29
.LCPI36_0:
	.quad	4607182418800017408     # double 1
.LCPI36_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI36_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI36_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.29
	.p2align	4, 0x90
	.type	XRate.29,@function
XRate.29:                               # @XRate.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1112334932, -36(%rbp)  # imm = 0x424CE254
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB36_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB36_3
.LBB36_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB36_3:                               # %cond.end
	vmovsd	.LCPI36_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI36_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI36_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI36_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB36_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI36_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB36_6
.LBB36_5:                               # %cond.false6
	vmovsd	.LCPI36_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI36_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI36_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB36_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB36_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB36_9
.LBB36_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB36_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB36_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB36_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB36_13
.LBB36_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB36_13:                              # %cond.end26
	jmp	.LBB36_15
.LBB36_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB36_15
.LBB36_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB36_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB36_18
.LBB36_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB36_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1112334932, -36(%rbp)  # imm = 0x424CE254
	jne	.LBB36_20
.LBB36_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB36_19
.Lfunc_end36:
	.size	XRate.29, .Lfunc_end36-XRate.29
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.30        # -- Begin function init_contexts.30
	.p2align	4, 0x90
	.type	init_contexts.30,@function
init_contexts.30:                       # @init_contexts.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$337187098, -28(%rbp)   # imm = 0x1419111A
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB37_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB37_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	$0, -4(%rbp)
.LBB37_3:                               # %for.cond2
                                        #   Parent Loop BB37_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB37_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB37_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB37_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_7
.LBB37_6:                               # %if.else
                                        #   in Loop: Header=BB37_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_7:                               # %if.end
                                        #   in Loop: Header=BB37_3 Depth=2
	jmp	.LBB37_8
.LBB37_8:                               # %for.inc
                                        #   in Loop: Header=BB37_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_3
.LBB37_9:                               # %for.end
                                        #   in Loop: Header=BB37_1 Depth=1
	jmp	.LBB37_10
.LBB37_10:                              # %for.inc28
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_1
.LBB37_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB37_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB37_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB37_12 Depth=1
	movl	$0, -4(%rbp)
.LBB37_14:                              # %for.cond34
                                        #   Parent Loop BB37_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB37_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB37_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB37_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_18
.LBB37_17:                              # %if.else52
                                        #   in Loop: Header=BB37_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_18:                              # %if.end66
                                        #   in Loop: Header=BB37_14 Depth=2
	jmp	.LBB37_19
.LBB37_19:                              # %for.inc67
                                        #   in Loop: Header=BB37_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_14
.LBB37_20:                              # %for.end69
                                        #   in Loop: Header=BB37_12 Depth=1
	jmp	.LBB37_21
.LBB37_21:                              # %for.inc70
                                        #   in Loop: Header=BB37_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_12
.LBB37_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB37_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB37_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB37_23 Depth=1
	movl	$0, -4(%rbp)
.LBB37_25:                              # %for.cond76
                                        #   Parent Loop BB37_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB37_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB37_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB37_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_29
.LBB37_28:                              # %if.else94
                                        #   in Loop: Header=BB37_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_29:                              # %if.end108
                                        #   in Loop: Header=BB37_25 Depth=2
	jmp	.LBB37_30
.LBB37_30:                              # %for.inc109
                                        #   in Loop: Header=BB37_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_25
.LBB37_31:                              # %for.end111
                                        #   in Loop: Header=BB37_23 Depth=1
	jmp	.LBB37_32
.LBB37_32:                              # %for.inc112
                                        #   in Loop: Header=BB37_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_23
.LBB37_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB37_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB37_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB37_34 Depth=1
	movl	$0, -4(%rbp)
.LBB37_36:                              # %for.cond118
                                        #   Parent Loop BB37_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB37_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB37_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB37_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_40
.LBB37_39:                              # %if.else136
                                        #   in Loop: Header=BB37_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_40:                              # %if.end150
                                        #   in Loop: Header=BB37_36 Depth=2
	jmp	.LBB37_41
.LBB37_41:                              # %for.inc151
                                        #   in Loop: Header=BB37_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_36
.LBB37_42:                              # %for.end153
                                        #   in Loop: Header=BB37_34 Depth=1
	jmp	.LBB37_43
.LBB37_43:                              # %for.inc154
                                        #   in Loop: Header=BB37_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_34
.LBB37_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB37_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB37_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB37_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB37_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_49
.LBB37_48:                              # %if.else172
                                        #   in Loop: Header=BB37_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_49:                              # %if.end183
                                        #   in Loop: Header=BB37_45 Depth=1
	jmp	.LBB37_50
.LBB37_50:                              # %for.inc184
                                        #   in Loop: Header=BB37_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_45
.LBB37_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB37_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB37_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB37_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB37_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_56
.LBB37_55:                              # %if.else202
                                        #   in Loop: Header=BB37_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_56:                              # %if.end213
                                        #   in Loop: Header=BB37_52 Depth=1
	jmp	.LBB37_57
.LBB37_57:                              # %for.inc214
                                        #   in Loop: Header=BB37_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_52
.LBB37_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB37_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB37_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB37_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB37_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_63
.LBB37_62:                              # %if.else232
                                        #   in Loop: Header=BB37_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_63:                              # %if.end243
                                        #   in Loop: Header=BB37_59 Depth=1
	jmp	.LBB37_64
.LBB37_64:                              # %for.inc244
                                        #   in Loop: Header=BB37_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_59
.LBB37_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB37_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB37_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB37_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB37_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_70
.LBB37_69:                              # %if.else262
                                        #   in Loop: Header=BB37_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_70:                              # %if.end273
                                        #   in Loop: Header=BB37_66 Depth=1
	jmp	.LBB37_71
.LBB37_71:                              # %for.inc274
                                        #   in Loop: Header=BB37_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_66
.LBB37_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB37_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB37_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB37_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB37_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_77
.LBB37_76:                              # %if.else292
                                        #   in Loop: Header=BB37_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_77:                              # %if.end303
                                        #   in Loop: Header=BB37_73 Depth=1
	jmp	.LBB37_78
.LBB37_78:                              # %for.inc304
                                        #   in Loop: Header=BB37_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_73
.LBB37_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB37_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB37_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB37_80 Depth=1
	movl	$0, -4(%rbp)
.LBB37_82:                              # %for.cond310
                                        #   Parent Loop BB37_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB37_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB37_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB37_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_86
.LBB37_85:                              # %if.else328
                                        #   in Loop: Header=BB37_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_86:                              # %if.end342
                                        #   in Loop: Header=BB37_82 Depth=2
	jmp	.LBB37_87
.LBB37_87:                              # %for.inc343
                                        #   in Loop: Header=BB37_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_82
.LBB37_88:                              # %for.end345
                                        #   in Loop: Header=BB37_80 Depth=1
	jmp	.LBB37_89
.LBB37_89:                              # %for.inc346
                                        #   in Loop: Header=BB37_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_80
.LBB37_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB37_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB37_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB37_91 Depth=1
	movl	$0, -4(%rbp)
.LBB37_93:                              # %for.cond352
                                        #   Parent Loop BB37_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB37_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB37_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB37_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_97
.LBB37_96:                              # %if.else370
                                        #   in Loop: Header=BB37_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_97:                              # %if.end384
                                        #   in Loop: Header=BB37_93 Depth=2
	jmp	.LBB37_98
.LBB37_98:                              # %for.inc385
                                        #   in Loop: Header=BB37_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_93
.LBB37_99:                              # %for.end387
                                        #   in Loop: Header=BB37_91 Depth=1
	jmp	.LBB37_100
.LBB37_100:                             # %for.inc388
                                        #   in Loop: Header=BB37_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_91
.LBB37_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB37_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB37_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB37_102 Depth=1
	movl	$0, -4(%rbp)
.LBB37_104:                             # %for.cond394
                                        #   Parent Loop BB37_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB37_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB37_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB37_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_108
.LBB37_107:                             # %if.else412
                                        #   in Loop: Header=BB37_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_108:                             # %if.end426
                                        #   in Loop: Header=BB37_104 Depth=2
	jmp	.LBB37_109
.LBB37_109:                             # %for.inc427
                                        #   in Loop: Header=BB37_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_104
.LBB37_110:                             # %for.end429
                                        #   in Loop: Header=BB37_102 Depth=1
	jmp	.LBB37_111
.LBB37_111:                             # %for.inc430
                                        #   in Loop: Header=BB37_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_102
.LBB37_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB37_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB37_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB37_113 Depth=1
	movl	$0, -4(%rbp)
.LBB37_115:                             # %for.cond436
                                        #   Parent Loop BB37_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB37_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB37_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB37_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_119
.LBB37_118:                             # %if.else454
                                        #   in Loop: Header=BB37_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_119:                             # %if.end468
                                        #   in Loop: Header=BB37_115 Depth=2
	jmp	.LBB37_120
.LBB37_120:                             # %for.inc469
                                        #   in Loop: Header=BB37_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_115
.LBB37_121:                             # %for.end471
                                        #   in Loop: Header=BB37_113 Depth=1
	jmp	.LBB37_122
.LBB37_122:                             # %for.inc472
                                        #   in Loop: Header=BB37_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_113
.LBB37_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB37_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB37_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB37_124 Depth=1
	movl	$0, -4(%rbp)
.LBB37_126:                             # %for.cond478
                                        #   Parent Loop BB37_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB37_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB37_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB37_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_130
.LBB37_129:                             # %if.else496
                                        #   in Loop: Header=BB37_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_130:                             # %if.end510
                                        #   in Loop: Header=BB37_126 Depth=2
	jmp	.LBB37_131
.LBB37_131:                             # %for.inc511
                                        #   in Loop: Header=BB37_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_126
.LBB37_132:                             # %for.end513
                                        #   in Loop: Header=BB37_124 Depth=1
	jmp	.LBB37_133
.LBB37_133:                             # %for.inc514
                                        #   in Loop: Header=BB37_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_124
.LBB37_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB37_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB37_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB37_135 Depth=1
	movl	$0, -4(%rbp)
.LBB37_137:                             # %for.cond520
                                        #   Parent Loop BB37_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB37_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB37_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB37_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_141
.LBB37_140:                             # %if.else538
                                        #   in Loop: Header=BB37_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_141:                             # %if.end552
                                        #   in Loop: Header=BB37_137 Depth=2
	jmp	.LBB37_142
.LBB37_142:                             # %for.inc553
                                        #   in Loop: Header=BB37_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_137
.LBB37_143:                             # %for.end555
                                        #   in Loop: Header=BB37_135 Depth=1
	jmp	.LBB37_144
.LBB37_144:                             # %for.inc556
                                        #   in Loop: Header=BB37_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_135
.LBB37_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB37_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB37_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB37_146 Depth=1
	movl	$0, -4(%rbp)
.LBB37_148:                             # %for.cond562
                                        #   Parent Loop BB37_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB37_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB37_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB37_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_152
.LBB37_151:                             # %if.else580
                                        #   in Loop: Header=BB37_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_152:                             # %if.end594
                                        #   in Loop: Header=BB37_148 Depth=2
	jmp	.LBB37_153
.LBB37_153:                             # %for.inc595
                                        #   in Loop: Header=BB37_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_148
.LBB37_154:                             # %for.end597
                                        #   in Loop: Header=BB37_146 Depth=1
	jmp	.LBB37_155
.LBB37_155:                             # %for.inc598
                                        #   in Loop: Header=BB37_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_146
.LBB37_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB37_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB37_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB37_157 Depth=1
	movl	$0, -4(%rbp)
.LBB37_159:                             # %for.cond604
                                        #   Parent Loop BB37_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB37_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB37_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB37_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_163
.LBB37_162:                             # %if.else622
                                        #   in Loop: Header=BB37_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_163:                             # %if.end636
                                        #   in Loop: Header=BB37_159 Depth=2
	jmp	.LBB37_164
.LBB37_164:                             # %for.inc637
                                        #   in Loop: Header=BB37_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_159
.LBB37_165:                             # %for.end639
                                        #   in Loop: Header=BB37_157 Depth=1
	jmp	.LBB37_166
.LBB37_166:                             # %for.inc640
                                        #   in Loop: Header=BB37_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_157
.LBB37_167:                             # %for.end642
	cmpl	$337187098, -28(%rbp)   # imm = 0x1419111A
	jne	.LBB37_169
.LBB37_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_168
.Lfunc_end37:
	.size	init_contexts.30, .Lfunc_end37-init_contexts.30
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.31
.LCPI38_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.31
	.p2align	4, 0x90
	.type	GetCtxModelNumber.31,@function
GetCtxModelNumber.31:                   # @GetCtxModelNumber.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI38_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1643927872, -44(%rbp)  # imm = 0x61FC5940
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB38_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_3 Depth 2
                                        #       Child Loop BB38_5 Depth 3
                                        #     Child Loop BB38_14 Depth 2
                                        #       Child Loop BB38_16 Depth 3
                                        #     Child Loop BB38_25 Depth 2
                                        #       Child Loop BB38_27 Depth 3
                                        #     Child Loop BB38_36 Depth 2
                                        #       Child Loop BB38_38 Depth 3
                                        #     Child Loop BB38_47 Depth 2
                                        #     Child Loop BB38_54 Depth 2
                                        #     Child Loop BB38_61 Depth 2
                                        #     Child Loop BB38_68 Depth 2
                                        #     Child Loop BB38_75 Depth 2
                                        #     Child Loop BB38_82 Depth 2
                                        #       Child Loop BB38_84 Depth 3
                                        #     Child Loop BB38_93 Depth 2
                                        #       Child Loop BB38_95 Depth 3
                                        #     Child Loop BB38_104 Depth 2
                                        #       Child Loop BB38_106 Depth 3
                                        #     Child Loop BB38_115 Depth 2
                                        #       Child Loop BB38_117 Depth 3
                                        #     Child Loop BB38_126 Depth 2
                                        #       Child Loop BB38_128 Depth 3
                                        #     Child Loop BB38_137 Depth 2
                                        #       Child Loop BB38_139 Depth 3
                                        #     Child Loop BB38_148 Depth 2
                                        #       Child Loop BB38_150 Depth 3
                                        #     Child Loop BB38_159 Depth 2
                                        #       Child Loop BB38_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB38_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB38_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB38_3:                               # %for.cond2
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB38_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB38_3 Depth=2
	movl	$0, -4(%rbp)
.LBB38_5:                               # %for.cond5
                                        #   Parent Loop BB38_1 Depth=1
                                        #     Parent Loop BB38_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB38_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB38_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB38_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB38_9
.LBB38_8:                               # %if.else
                                        #   in Loop: Header=BB38_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB38_9:                               # %if.end
                                        #   in Loop: Header=BB38_5 Depth=3
	jmp	.LBB38_10
.LBB38_10:                              # %for.inc
                                        #   in Loop: Header=BB38_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_5
.LBB38_11:                              # %for.end
                                        #   in Loop: Header=BB38_3 Depth=2
	jmp	.LBB38_12
.LBB38_12:                              # %for.inc33
                                        #   in Loop: Header=BB38_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_3
.LBB38_13:                              # %for.end35
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -8(%rbp)
.LBB38_14:                              # %for.cond36
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB38_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB38_14 Depth=2
	movl	$0, -4(%rbp)
.LBB38_16:                              # %for.cond39
                                        #   Parent Loop BB38_1 Depth=1
                                        #     Parent Loop BB38_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB38_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB38_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB38_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB38_20
.LBB38_19:                              # %if.else58
                                        #   in Loop: Header=BB38_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB38_20:                              # %if.end73
                                        #   in Loop: Header=BB38_16 Depth=3
	jmp	.LBB38_21
.LBB38_21:                              # %for.inc74
                                        #   in Loop: Header=BB38_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_16
.LBB38_22:                              # %for.end76
                                        #   in Loop: Header=BB38_14 Depth=2
	jmp	.LBB38_23
.LBB38_23:                              # %for.inc77
                                        #   in Loop: Header=BB38_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_14
.LBB38_24:                              # %for.end79
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -8(%rbp)
.LBB38_25:                              # %for.cond80
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB38_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB38_25 Depth=2
	movl	$0, -4(%rbp)
.LBB38_27:                              # %for.cond83
                                        #   Parent Loop BB38_1 Depth=1
                                        #     Parent Loop BB38_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB38_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB38_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB38_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB38_31
.LBB38_30:                              # %if.else102
                                        #   in Loop: Header=BB38_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB38_31:                              # %if.end117
                                        #   in Loop: Header=BB38_27 Depth=3
	jmp	.LBB38_32
.LBB38_32:                              # %for.inc118
                                        #   in Loop: Header=BB38_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_27
.LBB38_33:                              # %for.end120
                                        #   in Loop: Header=BB38_25 Depth=2
	jmp	.LBB38_34
.LBB38_34:                              # %for.inc121
                                        #   in Loop: Header=BB38_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_25
.LBB38_35:                              # %for.end123
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -8(%rbp)
.LBB38_36:                              # %for.cond124
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB38_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB38_36 Depth=2
	movl	$0, -4(%rbp)
.LBB38_38:                              # %for.cond127
                                        #   Parent Loop BB38_1 Depth=1
                                        #     Parent Loop BB38_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB38_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB38_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB38_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB38_42
.LBB38_41:                              # %if.else146
                                        #   in Loop: Header=BB38_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB38_42:                              # %if.end161
                                        #   in Loop: Header=BB38_38 Depth=3
	jmp	.LBB38_43
.LBB38_43:                              # %for.inc162
                                        #   in Loop: Header=BB38_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_38
.LBB38_44:                              # %for.end164
                                        #   in Loop: Header=BB38_36 Depth=2
	jmp	.LBB38_45
.LBB38_45:                              # %for.inc165
                                        #   in Loop: Header=BB38_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_36
.LBB38_46:                              # %for.end167
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -4(%rbp)
.LBB38_47:                              # %for.cond168
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB38_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB38_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB38_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB38_51
.LBB38_50:                              # %if.else184
                                        #   in Loop: Header=BB38_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB38_51:                              # %if.end196
                                        #   in Loop: Header=BB38_47 Depth=2
	jmp	.LBB38_52
.LBB38_52:                              # %for.inc197
                                        #   in Loop: Header=BB38_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_47
.LBB38_53:                              # %for.end199
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -4(%rbp)
.LBB38_54:                              # %for.cond200
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB38_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB38_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB38_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB38_58
.LBB38_57:                              # %if.else216
                                        #   in Loop: Header=BB38_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB38_58:                              # %if.end228
                                        #   in Loop: Header=BB38_54 Depth=2
	jmp	.LBB38_59
.LBB38_59:                              # %for.inc229
                                        #   in Loop: Header=BB38_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_54
.LBB38_60:                              # %for.end231
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -4(%rbp)
.LBB38_61:                              # %for.cond232
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB38_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB38_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB38_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB38_65
.LBB38_64:                              # %if.else248
                                        #   in Loop: Header=BB38_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB38_65:                              # %if.end260
                                        #   in Loop: Header=BB38_61 Depth=2
	jmp	.LBB38_66
.LBB38_66:                              # %for.inc261
                                        #   in Loop: Header=BB38_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_61
.LBB38_67:                              # %for.end263
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -4(%rbp)
.LBB38_68:                              # %for.cond264
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB38_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB38_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB38_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB38_72
.LBB38_71:                              # %if.else280
                                        #   in Loop: Header=BB38_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB38_72:                              # %if.end292
                                        #   in Loop: Header=BB38_68 Depth=2
	jmp	.LBB38_73
.LBB38_73:                              # %for.inc293
                                        #   in Loop: Header=BB38_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_68
.LBB38_74:                              # %for.end295
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -4(%rbp)
.LBB38_75:                              # %for.cond296
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB38_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB38_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB38_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB38_79
.LBB38_78:                              # %if.else312
                                        #   in Loop: Header=BB38_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB38_79:                              # %if.end324
                                        #   in Loop: Header=BB38_75 Depth=2
	jmp	.LBB38_80
.LBB38_80:                              # %for.inc325
                                        #   in Loop: Header=BB38_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_75
.LBB38_81:                              # %for.end327
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -8(%rbp)
.LBB38_82:                              # %for.cond328
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB38_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB38_82 Depth=2
	movl	$0, -4(%rbp)
.LBB38_84:                              # %for.cond331
                                        #   Parent Loop BB38_1 Depth=1
                                        #     Parent Loop BB38_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB38_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB38_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB38_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB38_88
.LBB38_87:                              # %if.else350
                                        #   in Loop: Header=BB38_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB38_88:                              # %if.end365
                                        #   in Loop: Header=BB38_84 Depth=3
	jmp	.LBB38_89
.LBB38_89:                              # %for.inc366
                                        #   in Loop: Header=BB38_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_84
.LBB38_90:                              # %for.end368
                                        #   in Loop: Header=BB38_82 Depth=2
	jmp	.LBB38_91
.LBB38_91:                              # %for.inc369
                                        #   in Loop: Header=BB38_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_82
.LBB38_92:                              # %for.end371
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -8(%rbp)
.LBB38_93:                              # %for.cond372
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB38_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB38_93 Depth=2
	movl	$0, -4(%rbp)
.LBB38_95:                              # %for.cond375
                                        #   Parent Loop BB38_1 Depth=1
                                        #     Parent Loop BB38_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB38_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB38_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB38_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB38_99
.LBB38_98:                              # %if.else394
                                        #   in Loop: Header=BB38_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB38_99:                              # %if.end409
                                        #   in Loop: Header=BB38_95 Depth=3
	jmp	.LBB38_100
.LBB38_100:                             # %for.inc410
                                        #   in Loop: Header=BB38_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_95
.LBB38_101:                             # %for.end412
                                        #   in Loop: Header=BB38_93 Depth=2
	jmp	.LBB38_102
.LBB38_102:                             # %for.inc413
                                        #   in Loop: Header=BB38_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_93
.LBB38_103:                             # %for.end415
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -8(%rbp)
.LBB38_104:                             # %for.cond416
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB38_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB38_104 Depth=2
	movl	$0, -4(%rbp)
.LBB38_106:                             # %for.cond419
                                        #   Parent Loop BB38_1 Depth=1
                                        #     Parent Loop BB38_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB38_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB38_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB38_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB38_110
.LBB38_109:                             # %if.else438
                                        #   in Loop: Header=BB38_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB38_110:                             # %if.end453
                                        #   in Loop: Header=BB38_106 Depth=3
	jmp	.LBB38_111
.LBB38_111:                             # %for.inc454
                                        #   in Loop: Header=BB38_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_106
.LBB38_112:                             # %for.end456
                                        #   in Loop: Header=BB38_104 Depth=2
	jmp	.LBB38_113
.LBB38_113:                             # %for.inc457
                                        #   in Loop: Header=BB38_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_104
.LBB38_114:                             # %for.end459
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -8(%rbp)
.LBB38_115:                             # %for.cond460
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB38_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB38_115 Depth=2
	movl	$0, -4(%rbp)
.LBB38_117:                             # %for.cond463
                                        #   Parent Loop BB38_1 Depth=1
                                        #     Parent Loop BB38_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB38_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB38_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB38_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB38_121
.LBB38_120:                             # %if.else482
                                        #   in Loop: Header=BB38_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB38_121:                             # %if.end497
                                        #   in Loop: Header=BB38_117 Depth=3
	jmp	.LBB38_122
.LBB38_122:                             # %for.inc498
                                        #   in Loop: Header=BB38_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_117
.LBB38_123:                             # %for.end500
                                        #   in Loop: Header=BB38_115 Depth=2
	jmp	.LBB38_124
.LBB38_124:                             # %for.inc501
                                        #   in Loop: Header=BB38_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_115
.LBB38_125:                             # %for.end503
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -8(%rbp)
.LBB38_126:                             # %for.cond504
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB38_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB38_126 Depth=2
	movl	$0, -4(%rbp)
.LBB38_128:                             # %for.cond507
                                        #   Parent Loop BB38_1 Depth=1
                                        #     Parent Loop BB38_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB38_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB38_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB38_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB38_132
.LBB38_131:                             # %if.else526
                                        #   in Loop: Header=BB38_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB38_132:                             # %if.end541
                                        #   in Loop: Header=BB38_128 Depth=3
	jmp	.LBB38_133
.LBB38_133:                             # %for.inc542
                                        #   in Loop: Header=BB38_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_128
.LBB38_134:                             # %for.end544
                                        #   in Loop: Header=BB38_126 Depth=2
	jmp	.LBB38_135
.LBB38_135:                             # %for.inc545
                                        #   in Loop: Header=BB38_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_126
.LBB38_136:                             # %for.end547
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -8(%rbp)
.LBB38_137:                             # %for.cond548
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB38_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB38_137 Depth=2
	movl	$0, -4(%rbp)
.LBB38_139:                             # %for.cond551
                                        #   Parent Loop BB38_1 Depth=1
                                        #     Parent Loop BB38_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB38_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB38_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB38_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB38_143
.LBB38_142:                             # %if.else570
                                        #   in Loop: Header=BB38_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB38_143:                             # %if.end585
                                        #   in Loop: Header=BB38_139 Depth=3
	jmp	.LBB38_144
.LBB38_144:                             # %for.inc586
                                        #   in Loop: Header=BB38_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_139
.LBB38_145:                             # %for.end588
                                        #   in Loop: Header=BB38_137 Depth=2
	jmp	.LBB38_146
.LBB38_146:                             # %for.inc589
                                        #   in Loop: Header=BB38_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_137
.LBB38_147:                             # %for.end591
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -8(%rbp)
.LBB38_148:                             # %for.cond592
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB38_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB38_148 Depth=2
	movl	$0, -4(%rbp)
.LBB38_150:                             # %for.cond595
                                        #   Parent Loop BB38_1 Depth=1
                                        #     Parent Loop BB38_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB38_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB38_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB38_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB38_154
.LBB38_153:                             # %if.else614
                                        #   in Loop: Header=BB38_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB38_154:                             # %if.end629
                                        #   in Loop: Header=BB38_150 Depth=3
	jmp	.LBB38_155
.LBB38_155:                             # %for.inc630
                                        #   in Loop: Header=BB38_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_150
.LBB38_156:                             # %for.end632
                                        #   in Loop: Header=BB38_148 Depth=2
	jmp	.LBB38_157
.LBB38_157:                             # %for.inc633
                                        #   in Loop: Header=BB38_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_148
.LBB38_158:                             # %for.end635
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -8(%rbp)
.LBB38_159:                             # %for.cond636
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB38_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB38_159 Depth=2
	movl	$0, -4(%rbp)
.LBB38_161:                             # %for.cond639
                                        #   Parent Loop BB38_1 Depth=1
                                        #     Parent Loop BB38_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB38_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB38_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB38_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB38_165
.LBB38_164:                             # %if.else658
                                        #   in Loop: Header=BB38_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB38_165:                             # %if.end673
                                        #   in Loop: Header=BB38_161 Depth=3
	jmp	.LBB38_166
.LBB38_166:                             # %for.inc674
                                        #   in Loop: Header=BB38_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_161
.LBB38_167:                             # %for.end676
                                        #   in Loop: Header=BB38_159 Depth=2
	jmp	.LBB38_168
.LBB38_168:                             # %for.inc677
                                        #   in Loop: Header=BB38_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_159
.LBB38_169:                             # %for.end679
                                        #   in Loop: Header=BB38_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB38_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB38_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB38_171:                             # %if.end682
                                        #   in Loop: Header=BB38_1 Depth=1
	jmp	.LBB38_172
.LBB38_172:                             # %for.inc683
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_1
.LBB38_173:                             # %for.end685
	cmpl	$1643927872, -44(%rbp)  # imm = 0x61FC5940
	jne	.LBB38_175
.LBB38_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_174
.Lfunc_end38:
	.size	GetCtxModelNumber.31, .Lfunc_end38-GetCtxModelNumber.31
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.32
.LCPI39_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.32
	.p2align	4, 0x90
	.type	GetCtxModelNumber.32,@function
GetCtxModelNumber.32:                   # @GetCtxModelNumber.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI39_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$771750034, -44(%rbp)   # imm = 0x2DFFF892
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB39_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_3 Depth 2
                                        #       Child Loop BB39_5 Depth 3
                                        #     Child Loop BB39_14 Depth 2
                                        #       Child Loop BB39_16 Depth 3
                                        #     Child Loop BB39_25 Depth 2
                                        #       Child Loop BB39_27 Depth 3
                                        #     Child Loop BB39_36 Depth 2
                                        #       Child Loop BB39_38 Depth 3
                                        #     Child Loop BB39_47 Depth 2
                                        #     Child Loop BB39_54 Depth 2
                                        #     Child Loop BB39_61 Depth 2
                                        #     Child Loop BB39_68 Depth 2
                                        #     Child Loop BB39_75 Depth 2
                                        #     Child Loop BB39_82 Depth 2
                                        #       Child Loop BB39_84 Depth 3
                                        #     Child Loop BB39_93 Depth 2
                                        #       Child Loop BB39_95 Depth 3
                                        #     Child Loop BB39_104 Depth 2
                                        #       Child Loop BB39_106 Depth 3
                                        #     Child Loop BB39_115 Depth 2
                                        #       Child Loop BB39_117 Depth 3
                                        #     Child Loop BB39_126 Depth 2
                                        #       Child Loop BB39_128 Depth 3
                                        #     Child Loop BB39_137 Depth 2
                                        #       Child Loop BB39_139 Depth 3
                                        #     Child Loop BB39_148 Depth 2
                                        #       Child Loop BB39_150 Depth 3
                                        #     Child Loop BB39_159 Depth 2
                                        #       Child Loop BB39_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB39_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB39_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB39_3:                               # %for.cond2
                                        #   Parent Loop BB39_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB39_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB39_3 Depth=2
	movl	$0, -4(%rbp)
.LBB39_5:                               # %for.cond5
                                        #   Parent Loop BB39_1 Depth=1
                                        #     Parent Loop BB39_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB39_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB39_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB39_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB39_9
.LBB39_8:                               # %if.else
                                        #   in Loop: Header=BB39_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB39_9:                               # %if.end
                                        #   in Loop: Header=BB39_5 Depth=3
	jmp	.LBB39_10
.LBB39_10:                              # %for.inc
                                        #   in Loop: Header=BB39_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_5
.LBB39_11:                              # %for.end
                                        #   in Loop: Header=BB39_3 Depth=2
	jmp	.LBB39_12
.LBB39_12:                              # %for.inc33
                                        #   in Loop: Header=BB39_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_3
.LBB39_13:                              # %for.end35
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	$0, -8(%rbp)
.LBB39_14:                              # %for.cond36
                                        #   Parent Loop BB39_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB39_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB39_14 Depth=2
	movl	$0, -4(%rbp)
.LBB39_16:                              # %for.cond39
                                        #   Parent Loop BB39_1 Depth=1
                                        #     Parent Loop BB39_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB39_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB39_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB39_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB39_20
.LBB39_19:                              # %if.else58
                                        #   in Loop: Header=BB39_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB39_20:                              # %if.end73
                                        #   in Loop: Header=BB39_16 Depth=3
	jmp	.LBB39_21
.LBB39_21:                              # %for.inc74
                                        #   in Loop: Header=BB39_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_16
.LBB39_22:                              # %for.end76
                                        #   in Loop: Header=BB39_14 Depth=2
	jmp	.LBB39_23
.LBB39_23:                              # %for.inc77
                                        #   in Loop: Header=BB39_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_14
.LBB39_24:                              # %for.end79
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	$0, -8(%rbp)
.LBB39_25:                              # %for.cond80
                                        #   Parent Loop BB39_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB39_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB39_25 Depth=2
	movl	$0, -4(%rbp)
.LBB39_27:                              # %for.cond83
                                        #   Parent Loop BB39_1 Depth=1
                                        #     Parent Loop BB39_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB39_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB39_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB39_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB39_31
.LBB39_30:                              # %if.else102
                                        #   in Loop: Header=BB39_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB39_31:                              # %if.end117
                                        #   in Loop: Header=BB39_27 Depth=3
	jmp	.LBB39_32
.LBB39_32:                              # %for.inc118
                                        #   in Loop: Header=BB39_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_27
.LBB39_33:                              # %for.end120
                                        #   in Loop: Header=BB39_25 Depth=2
	jmp	.LBB39_34
.LBB39_34:                              # %for.inc121
                                        #   in Loop: Header=BB39_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_25
.LBB39_35:                              # %for.end123
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	$0, -8(%rbp)
.LBB39_36:                              # %for.cond124
                                        #   Parent Loop BB39_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB39_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB39_36 Depth=2
	movl	$0, -4(%rbp)
.LBB39_38:                              # %for.cond127
                                        #   Parent Loop BB39_1 Depth=1
                                        #     Parent Loop BB39_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB39_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB39_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB39_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB39_42
.LBB39_41:                              # %if.else146
                                        #   in Loop: Header=BB39_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB39_42:                              # %if.end161
                                        #   in Loop: Header=BB39_38 Depth=3
	jmp	.LBB39_43
.LBB39_43:                              # %for.inc162
                                        #   in Loop: Header=BB39_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_38
.LBB39_44:                              # %for.end164
                                        #   in Loop: Header=BB39_36 Depth=2
	jmp	.LBB39_45
.LBB39_45:                              # %for.inc165
                                        #   in Loop: Header=BB39_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_36
.LBB39_46:                              # %for.end167
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	$0, -4(%rbp)
.LBB39_47:                              # %for.cond168
                                        #   Parent Loop BB39_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB39_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB39_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB39_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB39_51
.LBB39_50:                              # %if.else184
                                        #   in Loop: Header=BB39_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB39_51:                              # %if.end196
                                        #   in Loop: Header=BB39_47 Depth=2
	jmp	.LBB39_52
.LBB39_52:                              # %for.inc197
                                        #   in Loop: Header=BB39_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_47
.LBB39_53:                              # %for.end199
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	$0, -4(%rbp)
.LBB39_54:                              # %for.cond200
                                        #   Parent Loop BB39_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB39_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB39_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB39_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB39_58
.LBB39_57:                              # %if.else216
                                        #   in Loop: Header=BB39_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB39_58:                              # %if.end228
                                        #   in Loop: Header=BB39_54 Depth=2
	jmp	.LBB39_59
.LBB39_59:                              # %for.inc229
                                        #   in Loop: Header=BB39_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_54
.LBB39_60:                              # %for.end231
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	$0, -4(%rbp)
.LBB39_61:                              # %for.cond232
                                        #   Parent Loop BB39_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB39_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB39_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB39_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB39_65
.LBB39_64:                              # %if.else248
                                        #   in Loop: Header=BB39_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB39_65:                              # %if.end260
                                        #   in Loop: Header=BB39_61 Depth=2
	jmp	.LBB39_66
.LBB39_66:                              # %for.inc261
                                        #   in Loop: Header=BB39_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_61
.LBB39_67:                              # %for.end263
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	$0, -4(%rbp)
.LBB39_68:                              # %for.cond264
                                        #   Parent Loop BB39_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB39_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB39_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB39_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB39_72
.LBB39_71:                              # %if.else280
                                        #   in Loop: Header=BB39_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB39_72:                              # %if.end292
                                        #   in Loop: Header=BB39_68 Depth=2
	jmp	.LBB39_73
.LBB39_73:                              # %for.inc293
                                        #   in Loop: Header=BB39_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_68
.LBB39_74:                              # %for.end295
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	$0, -4(%rbp)
.LBB39_75:                              # %for.cond296
                                        #   Parent Loop BB39_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB39_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB39_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB39_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB39_79
.LBB39_78:                              # %if.else312
                                        #   in Loop: Header=BB39_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB39_79:                              # %if.end324
                                        #   in Loop: Header=BB39_75 Depth=2
	jmp	.LBB39_80
.LBB39_80:                              # %for.inc325
                                        #   in Loop: Header=BB39_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_75
.LBB39_81:                              # %for.end327
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	$0, -8(%rbp)
.LBB39_82:                              # %for.cond328
                                        #   Parent Loop BB39_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB39_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB39_82 Depth=2
	movl	$0, -4(%rbp)
.LBB39_84:                              # %for.cond331
                                        #   Parent Loop BB39_1 Depth=1
                                        #     Parent Loop BB39_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB39_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB39_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB39_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB39_88
.LBB39_87:                              # %if.else350
                                        #   in Loop: Header=BB39_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB39_88:                              # %if.end365
                                        #   in Loop: Header=BB39_84 Depth=3
	jmp	.LBB39_89
.LBB39_89:                              # %for.inc366
                                        #   in Loop: Header=BB39_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_84
.LBB39_90:                              # %for.end368
                                        #   in Loop: Header=BB39_82 Depth=2
	jmp	.LBB39_91
.LBB39_91:                              # %for.inc369
                                        #   in Loop: Header=BB39_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_82
.LBB39_92:                              # %for.end371
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	$0, -8(%rbp)
.LBB39_93:                              # %for.cond372
                                        #   Parent Loop BB39_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB39_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB39_93 Depth=2
	movl	$0, -4(%rbp)
.LBB39_95:                              # %for.cond375
                                        #   Parent Loop BB39_1 Depth=1
                                        #     Parent Loop BB39_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB39_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB39_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB39_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB39_99
.LBB39_98:                              # %if.else394
                                        #   in Loop: Header=BB39_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB39_99:                              # %if.end409
                                        #   in Loop: Header=BB39_95 Depth=3
	jmp	.LBB39_100
.LBB39_100:                             # %for.inc410
                                        #   in Loop: Header=BB39_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_95
.LBB39_101:                             # %for.end412
                                        #   in Loop: Header=BB39_93 Depth=2
	jmp	.LBB39_102
.LBB39_102:                             # %for.inc413
                                        #   in Loop: Header=BB39_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_93
.LBB39_103:                             # %for.end415
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	$0, -8(%rbp)
.LBB39_104:                             # %for.cond416
                                        #   Parent Loop BB39_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB39_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB39_104 Depth=2
	movl	$0, -4(%rbp)
.LBB39_106:                             # %for.cond419
                                        #   Parent Loop BB39_1 Depth=1
                                        #     Parent Loop BB39_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB39_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB39_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB39_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB39_110
.LBB39_109:                             # %if.else438
                                        #   in Loop: Header=BB39_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB39_110:                             # %if.end453
                                        #   in Loop: Header=BB39_106 Depth=3
	jmp	.LBB39_111
.LBB39_111:                             # %for.inc454
                                        #   in Loop: Header=BB39_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_106
.LBB39_112:                             # %for.end456
                                        #   in Loop: Header=BB39_104 Depth=2
	jmp	.LBB39_113
.LBB39_113:                             # %for.inc457
                                        #   in Loop: Header=BB39_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_104
.LBB39_114:                             # %for.end459
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	$0, -8(%rbp)
.LBB39_115:                             # %for.cond460
                                        #   Parent Loop BB39_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB39_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB39_115 Depth=2
	movl	$0, -4(%rbp)
.LBB39_117:                             # %for.cond463
                                        #   Parent Loop BB39_1 Depth=1
                                        #     Parent Loop BB39_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB39_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB39_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB39_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB39_121
.LBB39_120:                             # %if.else482
                                        #   in Loop: Header=BB39_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB39_121:                             # %if.end497
                                        #   in Loop: Header=BB39_117 Depth=3
	jmp	.LBB39_122
.LBB39_122:                             # %for.inc498
                                        #   in Loop: Header=BB39_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_117
.LBB39_123:                             # %for.end500
                                        #   in Loop: Header=BB39_115 Depth=2
	jmp	.LBB39_124
.LBB39_124:                             # %for.inc501
                                        #   in Loop: Header=BB39_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_115
.LBB39_125:                             # %for.end503
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	$0, -8(%rbp)
.LBB39_126:                             # %for.cond504
                                        #   Parent Loop BB39_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB39_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB39_126 Depth=2
	movl	$0, -4(%rbp)
.LBB39_128:                             # %for.cond507
                                        #   Parent Loop BB39_1 Depth=1
                                        #     Parent Loop BB39_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB39_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB39_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB39_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB39_132
.LBB39_131:                             # %if.else526
                                        #   in Loop: Header=BB39_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB39_132:                             # %if.end541
                                        #   in Loop: Header=BB39_128 Depth=3
	jmp	.LBB39_133
.LBB39_133:                             # %for.inc542
                                        #   in Loop: Header=BB39_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_128
.LBB39_134:                             # %for.end544
                                        #   in Loop: Header=BB39_126 Depth=2
	jmp	.LBB39_135
.LBB39_135:                             # %for.inc545
                                        #   in Loop: Header=BB39_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_126
.LBB39_136:                             # %for.end547
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	$0, -8(%rbp)
.LBB39_137:                             # %for.cond548
                                        #   Parent Loop BB39_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB39_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB39_137 Depth=2
	movl	$0, -4(%rbp)
.LBB39_139:                             # %for.cond551
                                        #   Parent Loop BB39_1 Depth=1
                                        #     Parent Loop BB39_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB39_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB39_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB39_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB39_143
.LBB39_142:                             # %if.else570
                                        #   in Loop: Header=BB39_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB39_143:                             # %if.end585
                                        #   in Loop: Header=BB39_139 Depth=3
	jmp	.LBB39_144
.LBB39_144:                             # %for.inc586
                                        #   in Loop: Header=BB39_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_139
.LBB39_145:                             # %for.end588
                                        #   in Loop: Header=BB39_137 Depth=2
	jmp	.LBB39_146
.LBB39_146:                             # %for.inc589
                                        #   in Loop: Header=BB39_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_137
.LBB39_147:                             # %for.end591
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	$0, -8(%rbp)
.LBB39_148:                             # %for.cond592
                                        #   Parent Loop BB39_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB39_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB39_148 Depth=2
	movl	$0, -4(%rbp)
.LBB39_150:                             # %for.cond595
                                        #   Parent Loop BB39_1 Depth=1
                                        #     Parent Loop BB39_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB39_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB39_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB39_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB39_154
.LBB39_153:                             # %if.else614
                                        #   in Loop: Header=BB39_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB39_154:                             # %if.end629
                                        #   in Loop: Header=BB39_150 Depth=3
	jmp	.LBB39_155
.LBB39_155:                             # %for.inc630
                                        #   in Loop: Header=BB39_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_150
.LBB39_156:                             # %for.end632
                                        #   in Loop: Header=BB39_148 Depth=2
	jmp	.LBB39_157
.LBB39_157:                             # %for.inc633
                                        #   in Loop: Header=BB39_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_148
.LBB39_158:                             # %for.end635
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	$0, -8(%rbp)
.LBB39_159:                             # %for.cond636
                                        #   Parent Loop BB39_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB39_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB39_159 Depth=2
	movl	$0, -4(%rbp)
.LBB39_161:                             # %for.cond639
                                        #   Parent Loop BB39_1 Depth=1
                                        #     Parent Loop BB39_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB39_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB39_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB39_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB39_165
.LBB39_164:                             # %if.else658
                                        #   in Loop: Header=BB39_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB39_165:                             # %if.end673
                                        #   in Loop: Header=BB39_161 Depth=3
	jmp	.LBB39_166
.LBB39_166:                             # %for.inc674
                                        #   in Loop: Header=BB39_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_161
.LBB39_167:                             # %for.end676
                                        #   in Loop: Header=BB39_159 Depth=2
	jmp	.LBB39_168
.LBB39_168:                             # %for.inc677
                                        #   in Loop: Header=BB39_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_159
.LBB39_169:                             # %for.end679
                                        #   in Loop: Header=BB39_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB39_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB39_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB39_171:                             # %if.end682
                                        #   in Loop: Header=BB39_1 Depth=1
	jmp	.LBB39_172
.LBB39_172:                             # %for.inc683
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_1
.LBB39_173:                             # %for.end685
	cmpl	$771750034, -44(%rbp)   # imm = 0x2DFFF892
	jne	.LBB39_175
.LBB39_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_174
.Lfunc_end39:
	.size	GetCtxModelNumber.32, .Lfunc_end39-GetCtxModelNumber.32
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.33       # -- Begin function store_contexts.33
	.p2align	4, 0x90
	.type	store_contexts.33,@function
store_contexts.33:                      # @store_contexts.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$845066301, -16(%rbp)   # imm = 0x325EB03D
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB40_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-4(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB40_3
.LBB40_2:                               # %if.else
	jmp	.LBB40_3
.LBB40_3:                               # %if.end
	cmpl	$845066301, -16(%rbp)   # imm = 0x325EB03D
	jne	.LBB40_5
.LBB40_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_4
.Lfunc_end40:
	.size	store_contexts.33, .Lfunc_end40-store_contexts.33
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.34 # -- Begin function update_field_frame_contexts.34
	.p2align	4, 0x90
	.type	update_field_frame_contexts.34,@function
update_field_frame_contexts.34:         # @update_field_frame_contexts.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$187402149, -12(%rbp)   # imm = 0xB2B87A5
	movl	%edi, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB41_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB41_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_4 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB41_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB41_2 Depth=1
	movl	$0, -8(%rbp)
.LBB41_4:                               # %for.cond1
                                        #   Parent Loop BB41_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB41_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB41_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB41_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_4
.LBB41_7:                               # %for.end
                                        #   in Loop: Header=BB41_2 Depth=1
	jmp	.LBB41_8
.LBB41_8:                               # %for.inc23
                                        #   in Loop: Header=BB41_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_2
.LBB41_9:                               # %for.end25
	jmp	.LBB41_19
.LBB41_10:                              # %if.else
	movl	$0, -4(%rbp)
.LBB41_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_13 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB41_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB41_11 Depth=1
	movl	$0, -8(%rbp)
.LBB41_13:                              # %for.cond29
                                        #   Parent Loop BB41_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB41_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB41_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_13
.LBB41_16:                              # %for.end56
                                        #   in Loop: Header=BB41_11 Depth=1
	jmp	.LBB41_17
.LBB41_17:                              # %for.inc57
                                        #   in Loop: Header=BB41_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_11
.LBB41_18:                              # %for.end59
	jmp	.LBB41_19
.LBB41_19:                              # %if.end
	cmpl	$187402149, -12(%rbp)   # imm = 0xB2B87A5
	jne	.LBB41_21
.LBB41_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_20
.Lfunc_end41:
	.size	update_field_frame_contexts.34, .Lfunc_end41-update_field_frame_contexts.34
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.35
.LCPI42_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.35
	.p2align	4, 0x90
	.type	GetCtxModelNumber.35,@function
GetCtxModelNumber.35:                   # @GetCtxModelNumber.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI42_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$408275224, -48(%rbp)   # imm = 0x1855C918
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB42_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_3 Depth 2
                                        #       Child Loop BB42_5 Depth 3
                                        #     Child Loop BB42_14 Depth 2
                                        #       Child Loop BB42_16 Depth 3
                                        #     Child Loop BB42_25 Depth 2
                                        #       Child Loop BB42_27 Depth 3
                                        #     Child Loop BB42_36 Depth 2
                                        #       Child Loop BB42_38 Depth 3
                                        #     Child Loop BB42_47 Depth 2
                                        #     Child Loop BB42_54 Depth 2
                                        #     Child Loop BB42_61 Depth 2
                                        #     Child Loop BB42_68 Depth 2
                                        #     Child Loop BB42_75 Depth 2
                                        #     Child Loop BB42_82 Depth 2
                                        #       Child Loop BB42_84 Depth 3
                                        #     Child Loop BB42_93 Depth 2
                                        #       Child Loop BB42_95 Depth 3
                                        #     Child Loop BB42_104 Depth 2
                                        #       Child Loop BB42_106 Depth 3
                                        #     Child Loop BB42_115 Depth 2
                                        #       Child Loop BB42_117 Depth 3
                                        #     Child Loop BB42_126 Depth 2
                                        #       Child Loop BB42_128 Depth 3
                                        #     Child Loop BB42_137 Depth 2
                                        #       Child Loop BB42_139 Depth 3
                                        #     Child Loop BB42_148 Depth 2
                                        #       Child Loop BB42_150 Depth 3
                                        #     Child Loop BB42_159 Depth 2
                                        #       Child Loop BB42_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB42_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB42_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB42_3:                               # %for.cond2
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB42_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB42_3 Depth=2
	movl	$0, -4(%rbp)
.LBB42_5:                               # %for.cond5
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB42_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB42_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB42_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_9
.LBB42_8:                               # %if.else
                                        #   in Loop: Header=BB42_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_9:                               # %if.end
                                        #   in Loop: Header=BB42_5 Depth=3
	jmp	.LBB42_10
.LBB42_10:                              # %for.inc
                                        #   in Loop: Header=BB42_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_5
.LBB42_11:                              # %for.end
                                        #   in Loop: Header=BB42_3 Depth=2
	jmp	.LBB42_12
.LBB42_12:                              # %for.inc33
                                        #   in Loop: Header=BB42_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_3
.LBB42_13:                              # %for.end35
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_14:                              # %for.cond36
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB42_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB42_14 Depth=2
	movl	$0, -4(%rbp)
.LBB42_16:                              # %for.cond39
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB42_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB42_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB42_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_20
.LBB42_19:                              # %if.else58
                                        #   in Loop: Header=BB42_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_20:                              # %if.end73
                                        #   in Loop: Header=BB42_16 Depth=3
	jmp	.LBB42_21
.LBB42_21:                              # %for.inc74
                                        #   in Loop: Header=BB42_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_16
.LBB42_22:                              # %for.end76
                                        #   in Loop: Header=BB42_14 Depth=2
	jmp	.LBB42_23
.LBB42_23:                              # %for.inc77
                                        #   in Loop: Header=BB42_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_14
.LBB42_24:                              # %for.end79
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_25:                              # %for.cond80
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB42_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB42_25 Depth=2
	movl	$0, -4(%rbp)
.LBB42_27:                              # %for.cond83
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB42_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB42_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB42_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_31
.LBB42_30:                              # %if.else102
                                        #   in Loop: Header=BB42_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_31:                              # %if.end117
                                        #   in Loop: Header=BB42_27 Depth=3
	jmp	.LBB42_32
.LBB42_32:                              # %for.inc118
                                        #   in Loop: Header=BB42_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_27
.LBB42_33:                              # %for.end120
                                        #   in Loop: Header=BB42_25 Depth=2
	jmp	.LBB42_34
.LBB42_34:                              # %for.inc121
                                        #   in Loop: Header=BB42_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_25
.LBB42_35:                              # %for.end123
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_36:                              # %for.cond124
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB42_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB42_36 Depth=2
	movl	$0, -4(%rbp)
.LBB42_38:                              # %for.cond127
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB42_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB42_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB42_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_42
.LBB42_41:                              # %if.else146
                                        #   in Loop: Header=BB42_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_42:                              # %if.end161
                                        #   in Loop: Header=BB42_38 Depth=3
	jmp	.LBB42_43
.LBB42_43:                              # %for.inc162
                                        #   in Loop: Header=BB42_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_38
.LBB42_44:                              # %for.end164
                                        #   in Loop: Header=BB42_36 Depth=2
	jmp	.LBB42_45
.LBB42_45:                              # %for.inc165
                                        #   in Loop: Header=BB42_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_36
.LBB42_46:                              # %for.end167
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -4(%rbp)
.LBB42_47:                              # %for.cond168
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB42_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB42_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB42_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_51
.LBB42_50:                              # %if.else184
                                        #   in Loop: Header=BB42_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_51:                              # %if.end196
                                        #   in Loop: Header=BB42_47 Depth=2
	jmp	.LBB42_52
.LBB42_52:                              # %for.inc197
                                        #   in Loop: Header=BB42_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_47
.LBB42_53:                              # %for.end199
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -4(%rbp)
.LBB42_54:                              # %for.cond200
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB42_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB42_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB42_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_58
.LBB42_57:                              # %if.else216
                                        #   in Loop: Header=BB42_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_58:                              # %if.end228
                                        #   in Loop: Header=BB42_54 Depth=2
	jmp	.LBB42_59
.LBB42_59:                              # %for.inc229
                                        #   in Loop: Header=BB42_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_54
.LBB42_60:                              # %for.end231
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -4(%rbp)
.LBB42_61:                              # %for.cond232
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB42_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB42_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB42_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_65
.LBB42_64:                              # %if.else248
                                        #   in Loop: Header=BB42_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_65:                              # %if.end260
                                        #   in Loop: Header=BB42_61 Depth=2
	jmp	.LBB42_66
.LBB42_66:                              # %for.inc261
                                        #   in Loop: Header=BB42_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_61
.LBB42_67:                              # %for.end263
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -4(%rbp)
.LBB42_68:                              # %for.cond264
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB42_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB42_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB42_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_72
.LBB42_71:                              # %if.else280
                                        #   in Loop: Header=BB42_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_72:                              # %if.end292
                                        #   in Loop: Header=BB42_68 Depth=2
	jmp	.LBB42_73
.LBB42_73:                              # %for.inc293
                                        #   in Loop: Header=BB42_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_68
.LBB42_74:                              # %for.end295
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -4(%rbp)
.LBB42_75:                              # %for.cond296
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB42_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB42_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB42_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_79
.LBB42_78:                              # %if.else312
                                        #   in Loop: Header=BB42_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_79:                              # %if.end324
                                        #   in Loop: Header=BB42_75 Depth=2
	jmp	.LBB42_80
.LBB42_80:                              # %for.inc325
                                        #   in Loop: Header=BB42_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_75
.LBB42_81:                              # %for.end327
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_82:                              # %for.cond328
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB42_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB42_82 Depth=2
	movl	$0, -4(%rbp)
.LBB42_84:                              # %for.cond331
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB42_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB42_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB42_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_88
.LBB42_87:                              # %if.else350
                                        #   in Loop: Header=BB42_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_88:                              # %if.end365
                                        #   in Loop: Header=BB42_84 Depth=3
	jmp	.LBB42_89
.LBB42_89:                              # %for.inc366
                                        #   in Loop: Header=BB42_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_84
.LBB42_90:                              # %for.end368
                                        #   in Loop: Header=BB42_82 Depth=2
	jmp	.LBB42_91
.LBB42_91:                              # %for.inc369
                                        #   in Loop: Header=BB42_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_82
.LBB42_92:                              # %for.end371
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_93:                              # %for.cond372
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB42_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB42_93 Depth=2
	movl	$0, -4(%rbp)
.LBB42_95:                              # %for.cond375
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB42_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB42_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB42_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_99
.LBB42_98:                              # %if.else394
                                        #   in Loop: Header=BB42_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_99:                              # %if.end409
                                        #   in Loop: Header=BB42_95 Depth=3
	jmp	.LBB42_100
.LBB42_100:                             # %for.inc410
                                        #   in Loop: Header=BB42_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_95
.LBB42_101:                             # %for.end412
                                        #   in Loop: Header=BB42_93 Depth=2
	jmp	.LBB42_102
.LBB42_102:                             # %for.inc413
                                        #   in Loop: Header=BB42_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_93
.LBB42_103:                             # %for.end415
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_104:                             # %for.cond416
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB42_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB42_104 Depth=2
	movl	$0, -4(%rbp)
.LBB42_106:                             # %for.cond419
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB42_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB42_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB42_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_110
.LBB42_109:                             # %if.else438
                                        #   in Loop: Header=BB42_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_110:                             # %if.end453
                                        #   in Loop: Header=BB42_106 Depth=3
	jmp	.LBB42_111
.LBB42_111:                             # %for.inc454
                                        #   in Loop: Header=BB42_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_106
.LBB42_112:                             # %for.end456
                                        #   in Loop: Header=BB42_104 Depth=2
	jmp	.LBB42_113
.LBB42_113:                             # %for.inc457
                                        #   in Loop: Header=BB42_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_104
.LBB42_114:                             # %for.end459
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_115:                             # %for.cond460
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB42_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB42_115 Depth=2
	movl	$0, -4(%rbp)
.LBB42_117:                             # %for.cond463
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB42_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB42_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB42_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_121
.LBB42_120:                             # %if.else482
                                        #   in Loop: Header=BB42_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_121:                             # %if.end497
                                        #   in Loop: Header=BB42_117 Depth=3
	jmp	.LBB42_122
.LBB42_122:                             # %for.inc498
                                        #   in Loop: Header=BB42_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_117
.LBB42_123:                             # %for.end500
                                        #   in Loop: Header=BB42_115 Depth=2
	jmp	.LBB42_124
.LBB42_124:                             # %for.inc501
                                        #   in Loop: Header=BB42_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_115
.LBB42_125:                             # %for.end503
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_126:                             # %for.cond504
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB42_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB42_126 Depth=2
	movl	$0, -4(%rbp)
.LBB42_128:                             # %for.cond507
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB42_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB42_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB42_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_132
.LBB42_131:                             # %if.else526
                                        #   in Loop: Header=BB42_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_132:                             # %if.end541
                                        #   in Loop: Header=BB42_128 Depth=3
	jmp	.LBB42_133
.LBB42_133:                             # %for.inc542
                                        #   in Loop: Header=BB42_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_128
.LBB42_134:                             # %for.end544
                                        #   in Loop: Header=BB42_126 Depth=2
	jmp	.LBB42_135
.LBB42_135:                             # %for.inc545
                                        #   in Loop: Header=BB42_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_126
.LBB42_136:                             # %for.end547
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_137:                             # %for.cond548
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB42_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB42_137 Depth=2
	movl	$0, -4(%rbp)
.LBB42_139:                             # %for.cond551
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB42_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB42_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB42_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_143
.LBB42_142:                             # %if.else570
                                        #   in Loop: Header=BB42_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_143:                             # %if.end585
                                        #   in Loop: Header=BB42_139 Depth=3
	jmp	.LBB42_144
.LBB42_144:                             # %for.inc586
                                        #   in Loop: Header=BB42_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_139
.LBB42_145:                             # %for.end588
                                        #   in Loop: Header=BB42_137 Depth=2
	jmp	.LBB42_146
.LBB42_146:                             # %for.inc589
                                        #   in Loop: Header=BB42_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_137
.LBB42_147:                             # %for.end591
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_148:                             # %for.cond592
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB42_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB42_148 Depth=2
	movl	$0, -4(%rbp)
.LBB42_150:                             # %for.cond595
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB42_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB42_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB42_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_154
.LBB42_153:                             # %if.else614
                                        #   in Loop: Header=BB42_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_154:                             # %if.end629
                                        #   in Loop: Header=BB42_150 Depth=3
	jmp	.LBB42_155
.LBB42_155:                             # %for.inc630
                                        #   in Loop: Header=BB42_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_150
.LBB42_156:                             # %for.end632
                                        #   in Loop: Header=BB42_148 Depth=2
	jmp	.LBB42_157
.LBB42_157:                             # %for.inc633
                                        #   in Loop: Header=BB42_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_148
.LBB42_158:                             # %for.end635
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_159:                             # %for.cond636
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB42_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB42_159 Depth=2
	movl	$0, -4(%rbp)
.LBB42_161:                             # %for.cond639
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB42_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB42_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB42_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_165
.LBB42_164:                             # %if.else658
                                        #   in Loop: Header=BB42_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_165:                             # %if.end673
                                        #   in Loop: Header=BB42_161 Depth=3
	jmp	.LBB42_166
.LBB42_166:                             # %for.inc674
                                        #   in Loop: Header=BB42_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_161
.LBB42_167:                             # %for.end676
                                        #   in Loop: Header=BB42_159 Depth=2
	jmp	.LBB42_168
.LBB42_168:                             # %for.inc677
                                        #   in Loop: Header=BB42_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_159
.LBB42_169:                             # %for.end679
                                        #   in Loop: Header=BB42_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB42_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB42_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB42_171:                             # %if.end682
                                        #   in Loop: Header=BB42_1 Depth=1
	jmp	.LBB42_172
.LBB42_172:                             # %for.inc683
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_1
.LBB42_173:                             # %for.end685
	cmpl	$408275224, -48(%rbp)   # imm = 0x1855C918
	jne	.LBB42_175
.LBB42_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_174
.Lfunc_end42:
	.size	GetCtxModelNumber.35, .Lfunc_end42-GetCtxModelNumber.35
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.36
.LCPI43_0:
	.quad	4611686018427387904     # double 2
.LCPI43_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.36
	.p2align	4, 0x90
	.type	create_context_memory.36,@function
create_context_memory.36:               # @create_context_memory.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$295810520, -20(%rbp)   # imm = 0x11A1B5D8
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB43_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB43_3
.LBB43_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB43_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB43_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB43_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB43_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB43_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB43_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB43_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB43_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB43_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB43_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB43_11:                              # %if.end10
                                        #   in Loop: Header=BB43_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB43_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB43_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB43_13:                              # %if.end16
                                        #   in Loop: Header=BB43_8 Depth=1
	movl	$0, -8(%rbp)
.LBB43_14:                              # %for.cond17
                                        #   Parent Loop BB43_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB43_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB43_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB43_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB43_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB43_17:                              # %if.end28
                                        #   in Loop: Header=BB43_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB43_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB43_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB43_19:                              # %if.end39
                                        #   in Loop: Header=BB43_14 Depth=2
	jmp	.LBB43_20
.LBB43_20:                              # %for.inc
                                        #   in Loop: Header=BB43_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_14
.LBB43_21:                              # %for.end
                                        #   in Loop: Header=BB43_8 Depth=1
	jmp	.LBB43_22
.LBB43_22:                              # %for.inc40
                                        #   in Loop: Header=BB43_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_8
.LBB43_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB43_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_26 Depth 2
                                        #       Child Loop BB43_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB43_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB43_24 Depth=1
	movl	$0, -8(%rbp)
.LBB43_26:                              # %for.cond47
                                        #   Parent Loop BB43_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB43_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB43_26 Depth=2
	movl	$0, -12(%rbp)
.LBB43_28:                              # %for.cond51
                                        #   Parent Loop BB43_24 Depth=1
                                        #     Parent Loop BB43_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB43_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB43_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB43_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_28
.LBB43_31:                              # %for.end63
                                        #   in Loop: Header=BB43_26 Depth=2
	jmp	.LBB43_32
.LBB43_32:                              # %for.inc64
                                        #   in Loop: Header=BB43_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_26
.LBB43_33:                              # %for.end66
                                        #   in Loop: Header=BB43_24 Depth=1
	jmp	.LBB43_34
.LBB43_34:                              # %for.inc67
                                        #   in Loop: Header=BB43_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_24
.LBB43_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB43_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB43_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB43_36 Depth=1
	vmovsd	.LCPI43_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI43_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI43_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB43_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_36
.LBB43_39:                              # %for.end98
	cmpl	$295810520, -20(%rbp)   # imm = 0x11A1B5D8
	jne	.LBB43_41
.LBB43_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_40
.Lfunc_end43:
	.size	create_context_memory.36, .Lfunc_end43-create_context_memory.36
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.37
.LCPI44_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.37
	.p2align	4, 0x90
	.type	GetCtxModelNumber.37,@function
GetCtxModelNumber.37:                   # @GetCtxModelNumber.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI44_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$2051956556, -48(%rbp)  # imm = 0x7A4E5F4C
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB44_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_3 Depth 2
                                        #       Child Loop BB44_5 Depth 3
                                        #     Child Loop BB44_14 Depth 2
                                        #       Child Loop BB44_16 Depth 3
                                        #     Child Loop BB44_25 Depth 2
                                        #       Child Loop BB44_27 Depth 3
                                        #     Child Loop BB44_36 Depth 2
                                        #       Child Loop BB44_38 Depth 3
                                        #     Child Loop BB44_47 Depth 2
                                        #     Child Loop BB44_54 Depth 2
                                        #     Child Loop BB44_61 Depth 2
                                        #     Child Loop BB44_68 Depth 2
                                        #     Child Loop BB44_75 Depth 2
                                        #     Child Loop BB44_82 Depth 2
                                        #       Child Loop BB44_84 Depth 3
                                        #     Child Loop BB44_93 Depth 2
                                        #       Child Loop BB44_95 Depth 3
                                        #     Child Loop BB44_104 Depth 2
                                        #       Child Loop BB44_106 Depth 3
                                        #     Child Loop BB44_115 Depth 2
                                        #       Child Loop BB44_117 Depth 3
                                        #     Child Loop BB44_126 Depth 2
                                        #       Child Loop BB44_128 Depth 3
                                        #     Child Loop BB44_137 Depth 2
                                        #       Child Loop BB44_139 Depth 3
                                        #     Child Loop BB44_148 Depth 2
                                        #       Child Loop BB44_150 Depth 3
                                        #     Child Loop BB44_159 Depth 2
                                        #       Child Loop BB44_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB44_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB44_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB44_3:                               # %for.cond2
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB44_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	$0, -4(%rbp)
.LBB44_5:                               # %for.cond5
                                        #   Parent Loop BB44_1 Depth=1
                                        #     Parent Loop BB44_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB44_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB44_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB44_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB44_9
.LBB44_8:                               # %if.else
                                        #   in Loop: Header=BB44_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB44_9:                               # %if.end
                                        #   in Loop: Header=BB44_5 Depth=3
	jmp	.LBB44_10
.LBB44_10:                              # %for.inc
                                        #   in Loop: Header=BB44_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_5
.LBB44_11:                              # %for.end
                                        #   in Loop: Header=BB44_3 Depth=2
	jmp	.LBB44_12
.LBB44_12:                              # %for.inc33
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_3
.LBB44_13:                              # %for.end35
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -8(%rbp)
.LBB44_14:                              # %for.cond36
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB44_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB44_14 Depth=2
	movl	$0, -4(%rbp)
.LBB44_16:                              # %for.cond39
                                        #   Parent Loop BB44_1 Depth=1
                                        #     Parent Loop BB44_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB44_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB44_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB44_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB44_20
.LBB44_19:                              # %if.else58
                                        #   in Loop: Header=BB44_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB44_20:                              # %if.end73
                                        #   in Loop: Header=BB44_16 Depth=3
	jmp	.LBB44_21
.LBB44_21:                              # %for.inc74
                                        #   in Loop: Header=BB44_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_16
.LBB44_22:                              # %for.end76
                                        #   in Loop: Header=BB44_14 Depth=2
	jmp	.LBB44_23
.LBB44_23:                              # %for.inc77
                                        #   in Loop: Header=BB44_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_14
.LBB44_24:                              # %for.end79
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -8(%rbp)
.LBB44_25:                              # %for.cond80
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB44_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB44_25 Depth=2
	movl	$0, -4(%rbp)
.LBB44_27:                              # %for.cond83
                                        #   Parent Loop BB44_1 Depth=1
                                        #     Parent Loop BB44_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB44_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB44_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB44_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB44_31
.LBB44_30:                              # %if.else102
                                        #   in Loop: Header=BB44_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB44_31:                              # %if.end117
                                        #   in Loop: Header=BB44_27 Depth=3
	jmp	.LBB44_32
.LBB44_32:                              # %for.inc118
                                        #   in Loop: Header=BB44_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_27
.LBB44_33:                              # %for.end120
                                        #   in Loop: Header=BB44_25 Depth=2
	jmp	.LBB44_34
.LBB44_34:                              # %for.inc121
                                        #   in Loop: Header=BB44_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_25
.LBB44_35:                              # %for.end123
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -8(%rbp)
.LBB44_36:                              # %for.cond124
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB44_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB44_36 Depth=2
	movl	$0, -4(%rbp)
.LBB44_38:                              # %for.cond127
                                        #   Parent Loop BB44_1 Depth=1
                                        #     Parent Loop BB44_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB44_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB44_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB44_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB44_42
.LBB44_41:                              # %if.else146
                                        #   in Loop: Header=BB44_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB44_42:                              # %if.end161
                                        #   in Loop: Header=BB44_38 Depth=3
	jmp	.LBB44_43
.LBB44_43:                              # %for.inc162
                                        #   in Loop: Header=BB44_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_38
.LBB44_44:                              # %for.end164
                                        #   in Loop: Header=BB44_36 Depth=2
	jmp	.LBB44_45
.LBB44_45:                              # %for.inc165
                                        #   in Loop: Header=BB44_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_36
.LBB44_46:                              # %for.end167
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -4(%rbp)
.LBB44_47:                              # %for.cond168
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB44_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB44_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB44_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB44_51
.LBB44_50:                              # %if.else184
                                        #   in Loop: Header=BB44_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB44_51:                              # %if.end196
                                        #   in Loop: Header=BB44_47 Depth=2
	jmp	.LBB44_52
.LBB44_52:                              # %for.inc197
                                        #   in Loop: Header=BB44_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_47
.LBB44_53:                              # %for.end199
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -4(%rbp)
.LBB44_54:                              # %for.cond200
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB44_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB44_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB44_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB44_58
.LBB44_57:                              # %if.else216
                                        #   in Loop: Header=BB44_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB44_58:                              # %if.end228
                                        #   in Loop: Header=BB44_54 Depth=2
	jmp	.LBB44_59
.LBB44_59:                              # %for.inc229
                                        #   in Loop: Header=BB44_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_54
.LBB44_60:                              # %for.end231
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -4(%rbp)
.LBB44_61:                              # %for.cond232
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB44_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB44_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB44_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB44_65
.LBB44_64:                              # %if.else248
                                        #   in Loop: Header=BB44_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB44_65:                              # %if.end260
                                        #   in Loop: Header=BB44_61 Depth=2
	jmp	.LBB44_66
.LBB44_66:                              # %for.inc261
                                        #   in Loop: Header=BB44_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_61
.LBB44_67:                              # %for.end263
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -4(%rbp)
.LBB44_68:                              # %for.cond264
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB44_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB44_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB44_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB44_72
.LBB44_71:                              # %if.else280
                                        #   in Loop: Header=BB44_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB44_72:                              # %if.end292
                                        #   in Loop: Header=BB44_68 Depth=2
	jmp	.LBB44_73
.LBB44_73:                              # %for.inc293
                                        #   in Loop: Header=BB44_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_68
.LBB44_74:                              # %for.end295
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -4(%rbp)
.LBB44_75:                              # %for.cond296
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB44_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB44_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB44_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB44_79
.LBB44_78:                              # %if.else312
                                        #   in Loop: Header=BB44_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB44_79:                              # %if.end324
                                        #   in Loop: Header=BB44_75 Depth=2
	jmp	.LBB44_80
.LBB44_80:                              # %for.inc325
                                        #   in Loop: Header=BB44_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_75
.LBB44_81:                              # %for.end327
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -8(%rbp)
.LBB44_82:                              # %for.cond328
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB44_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB44_82 Depth=2
	movl	$0, -4(%rbp)
.LBB44_84:                              # %for.cond331
                                        #   Parent Loop BB44_1 Depth=1
                                        #     Parent Loop BB44_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB44_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB44_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB44_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB44_88
.LBB44_87:                              # %if.else350
                                        #   in Loop: Header=BB44_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB44_88:                              # %if.end365
                                        #   in Loop: Header=BB44_84 Depth=3
	jmp	.LBB44_89
.LBB44_89:                              # %for.inc366
                                        #   in Loop: Header=BB44_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_84
.LBB44_90:                              # %for.end368
                                        #   in Loop: Header=BB44_82 Depth=2
	jmp	.LBB44_91
.LBB44_91:                              # %for.inc369
                                        #   in Loop: Header=BB44_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_82
.LBB44_92:                              # %for.end371
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -8(%rbp)
.LBB44_93:                              # %for.cond372
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB44_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB44_93 Depth=2
	movl	$0, -4(%rbp)
.LBB44_95:                              # %for.cond375
                                        #   Parent Loop BB44_1 Depth=1
                                        #     Parent Loop BB44_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB44_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB44_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB44_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB44_99
.LBB44_98:                              # %if.else394
                                        #   in Loop: Header=BB44_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB44_99:                              # %if.end409
                                        #   in Loop: Header=BB44_95 Depth=3
	jmp	.LBB44_100
.LBB44_100:                             # %for.inc410
                                        #   in Loop: Header=BB44_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_95
.LBB44_101:                             # %for.end412
                                        #   in Loop: Header=BB44_93 Depth=2
	jmp	.LBB44_102
.LBB44_102:                             # %for.inc413
                                        #   in Loop: Header=BB44_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_93
.LBB44_103:                             # %for.end415
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -8(%rbp)
.LBB44_104:                             # %for.cond416
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB44_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB44_104 Depth=2
	movl	$0, -4(%rbp)
.LBB44_106:                             # %for.cond419
                                        #   Parent Loop BB44_1 Depth=1
                                        #     Parent Loop BB44_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB44_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB44_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB44_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB44_110
.LBB44_109:                             # %if.else438
                                        #   in Loop: Header=BB44_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB44_110:                             # %if.end453
                                        #   in Loop: Header=BB44_106 Depth=3
	jmp	.LBB44_111
.LBB44_111:                             # %for.inc454
                                        #   in Loop: Header=BB44_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_106
.LBB44_112:                             # %for.end456
                                        #   in Loop: Header=BB44_104 Depth=2
	jmp	.LBB44_113
.LBB44_113:                             # %for.inc457
                                        #   in Loop: Header=BB44_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_104
.LBB44_114:                             # %for.end459
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -8(%rbp)
.LBB44_115:                             # %for.cond460
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB44_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB44_115 Depth=2
	movl	$0, -4(%rbp)
.LBB44_117:                             # %for.cond463
                                        #   Parent Loop BB44_1 Depth=1
                                        #     Parent Loop BB44_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB44_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB44_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB44_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB44_121
.LBB44_120:                             # %if.else482
                                        #   in Loop: Header=BB44_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB44_121:                             # %if.end497
                                        #   in Loop: Header=BB44_117 Depth=3
	jmp	.LBB44_122
.LBB44_122:                             # %for.inc498
                                        #   in Loop: Header=BB44_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_117
.LBB44_123:                             # %for.end500
                                        #   in Loop: Header=BB44_115 Depth=2
	jmp	.LBB44_124
.LBB44_124:                             # %for.inc501
                                        #   in Loop: Header=BB44_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_115
.LBB44_125:                             # %for.end503
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -8(%rbp)
.LBB44_126:                             # %for.cond504
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB44_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB44_126 Depth=2
	movl	$0, -4(%rbp)
.LBB44_128:                             # %for.cond507
                                        #   Parent Loop BB44_1 Depth=1
                                        #     Parent Loop BB44_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB44_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB44_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB44_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB44_132
.LBB44_131:                             # %if.else526
                                        #   in Loop: Header=BB44_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB44_132:                             # %if.end541
                                        #   in Loop: Header=BB44_128 Depth=3
	jmp	.LBB44_133
.LBB44_133:                             # %for.inc542
                                        #   in Loop: Header=BB44_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_128
.LBB44_134:                             # %for.end544
                                        #   in Loop: Header=BB44_126 Depth=2
	jmp	.LBB44_135
.LBB44_135:                             # %for.inc545
                                        #   in Loop: Header=BB44_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_126
.LBB44_136:                             # %for.end547
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -8(%rbp)
.LBB44_137:                             # %for.cond548
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB44_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB44_137 Depth=2
	movl	$0, -4(%rbp)
.LBB44_139:                             # %for.cond551
                                        #   Parent Loop BB44_1 Depth=1
                                        #     Parent Loop BB44_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB44_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB44_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB44_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB44_143
.LBB44_142:                             # %if.else570
                                        #   in Loop: Header=BB44_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB44_143:                             # %if.end585
                                        #   in Loop: Header=BB44_139 Depth=3
	jmp	.LBB44_144
.LBB44_144:                             # %for.inc586
                                        #   in Loop: Header=BB44_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_139
.LBB44_145:                             # %for.end588
                                        #   in Loop: Header=BB44_137 Depth=2
	jmp	.LBB44_146
.LBB44_146:                             # %for.inc589
                                        #   in Loop: Header=BB44_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_137
.LBB44_147:                             # %for.end591
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -8(%rbp)
.LBB44_148:                             # %for.cond592
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB44_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB44_148 Depth=2
	movl	$0, -4(%rbp)
.LBB44_150:                             # %for.cond595
                                        #   Parent Loop BB44_1 Depth=1
                                        #     Parent Loop BB44_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB44_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB44_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB44_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB44_154
.LBB44_153:                             # %if.else614
                                        #   in Loop: Header=BB44_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB44_154:                             # %if.end629
                                        #   in Loop: Header=BB44_150 Depth=3
	jmp	.LBB44_155
.LBB44_155:                             # %for.inc630
                                        #   in Loop: Header=BB44_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_150
.LBB44_156:                             # %for.end632
                                        #   in Loop: Header=BB44_148 Depth=2
	jmp	.LBB44_157
.LBB44_157:                             # %for.inc633
                                        #   in Loop: Header=BB44_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_148
.LBB44_158:                             # %for.end635
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -8(%rbp)
.LBB44_159:                             # %for.cond636
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB44_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB44_159 Depth=2
	movl	$0, -4(%rbp)
.LBB44_161:                             # %for.cond639
                                        #   Parent Loop BB44_1 Depth=1
                                        #     Parent Loop BB44_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB44_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB44_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB44_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB44_165
.LBB44_164:                             # %if.else658
                                        #   in Loop: Header=BB44_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB44_165:                             # %if.end673
                                        #   in Loop: Header=BB44_161 Depth=3
	jmp	.LBB44_166
.LBB44_166:                             # %for.inc674
                                        #   in Loop: Header=BB44_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_161
.LBB44_167:                             # %for.end676
                                        #   in Loop: Header=BB44_159 Depth=2
	jmp	.LBB44_168
.LBB44_168:                             # %for.inc677
                                        #   in Loop: Header=BB44_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_159
.LBB44_169:                             # %for.end679
                                        #   in Loop: Header=BB44_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB44_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB44_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB44_171:                             # %if.end682
                                        #   in Loop: Header=BB44_1 Depth=1
	jmp	.LBB44_172
.LBB44_172:                             # %for.inc683
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_1
.LBB44_173:                             # %for.end685
	cmpl	$2051956556, -48(%rbp)  # imm = 0x7A4E5F4C
	jne	.LBB44_175
.LBB44_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_174
.Lfunc_end44:
	.size	GetCtxModelNumber.37, .Lfunc_end44-GetCtxModelNumber.37
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.38
.LCPI45_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.38
	.p2align	4, 0x90
	.type	GetCtxModelNumber.38,@function
GetCtxModelNumber.38:                   # @GetCtxModelNumber.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI45_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$917499580, -44(%rbp)   # imm = 0x36AFEEBC
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB45_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_3 Depth 2
                                        #       Child Loop BB45_5 Depth 3
                                        #     Child Loop BB45_14 Depth 2
                                        #       Child Loop BB45_16 Depth 3
                                        #     Child Loop BB45_25 Depth 2
                                        #       Child Loop BB45_27 Depth 3
                                        #     Child Loop BB45_36 Depth 2
                                        #       Child Loop BB45_38 Depth 3
                                        #     Child Loop BB45_47 Depth 2
                                        #     Child Loop BB45_54 Depth 2
                                        #     Child Loop BB45_61 Depth 2
                                        #     Child Loop BB45_68 Depth 2
                                        #     Child Loop BB45_75 Depth 2
                                        #     Child Loop BB45_82 Depth 2
                                        #       Child Loop BB45_84 Depth 3
                                        #     Child Loop BB45_93 Depth 2
                                        #       Child Loop BB45_95 Depth 3
                                        #     Child Loop BB45_104 Depth 2
                                        #       Child Loop BB45_106 Depth 3
                                        #     Child Loop BB45_115 Depth 2
                                        #       Child Loop BB45_117 Depth 3
                                        #     Child Loop BB45_126 Depth 2
                                        #       Child Loop BB45_128 Depth 3
                                        #     Child Loop BB45_137 Depth 2
                                        #       Child Loop BB45_139 Depth 3
                                        #     Child Loop BB45_148 Depth 2
                                        #       Child Loop BB45_150 Depth 3
                                        #     Child Loop BB45_159 Depth 2
                                        #       Child Loop BB45_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB45_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB45_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB45_3:                               # %for.cond2
                                        #   Parent Loop BB45_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB45_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB45_3 Depth=2
	movl	$0, -4(%rbp)
.LBB45_5:                               # %for.cond5
                                        #   Parent Loop BB45_1 Depth=1
                                        #     Parent Loop BB45_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB45_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB45_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB45_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB45_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB45_9
.LBB45_8:                               # %if.else
                                        #   in Loop: Header=BB45_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB45_9:                               # %if.end
                                        #   in Loop: Header=BB45_5 Depth=3
	jmp	.LBB45_10
.LBB45_10:                              # %for.inc
                                        #   in Loop: Header=BB45_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_5
.LBB45_11:                              # %for.end
                                        #   in Loop: Header=BB45_3 Depth=2
	jmp	.LBB45_12
.LBB45_12:                              # %for.inc33
                                        #   in Loop: Header=BB45_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_3
.LBB45_13:                              # %for.end35
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	$0, -8(%rbp)
.LBB45_14:                              # %for.cond36
                                        #   Parent Loop BB45_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB45_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB45_14 Depth=2
	movl	$0, -4(%rbp)
.LBB45_16:                              # %for.cond39
                                        #   Parent Loop BB45_1 Depth=1
                                        #     Parent Loop BB45_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB45_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB45_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB45_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB45_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB45_20
.LBB45_19:                              # %if.else58
                                        #   in Loop: Header=BB45_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB45_20:                              # %if.end73
                                        #   in Loop: Header=BB45_16 Depth=3
	jmp	.LBB45_21
.LBB45_21:                              # %for.inc74
                                        #   in Loop: Header=BB45_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_16
.LBB45_22:                              # %for.end76
                                        #   in Loop: Header=BB45_14 Depth=2
	jmp	.LBB45_23
.LBB45_23:                              # %for.inc77
                                        #   in Loop: Header=BB45_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_14
.LBB45_24:                              # %for.end79
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	$0, -8(%rbp)
.LBB45_25:                              # %for.cond80
                                        #   Parent Loop BB45_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB45_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB45_25 Depth=2
	movl	$0, -4(%rbp)
.LBB45_27:                              # %for.cond83
                                        #   Parent Loop BB45_1 Depth=1
                                        #     Parent Loop BB45_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB45_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB45_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB45_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB45_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB45_31
.LBB45_30:                              # %if.else102
                                        #   in Loop: Header=BB45_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB45_31:                              # %if.end117
                                        #   in Loop: Header=BB45_27 Depth=3
	jmp	.LBB45_32
.LBB45_32:                              # %for.inc118
                                        #   in Loop: Header=BB45_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_27
.LBB45_33:                              # %for.end120
                                        #   in Loop: Header=BB45_25 Depth=2
	jmp	.LBB45_34
.LBB45_34:                              # %for.inc121
                                        #   in Loop: Header=BB45_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_25
.LBB45_35:                              # %for.end123
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	$0, -8(%rbp)
.LBB45_36:                              # %for.cond124
                                        #   Parent Loop BB45_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB45_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB45_36 Depth=2
	movl	$0, -4(%rbp)
.LBB45_38:                              # %for.cond127
                                        #   Parent Loop BB45_1 Depth=1
                                        #     Parent Loop BB45_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB45_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB45_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB45_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB45_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB45_42
.LBB45_41:                              # %if.else146
                                        #   in Loop: Header=BB45_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB45_42:                              # %if.end161
                                        #   in Loop: Header=BB45_38 Depth=3
	jmp	.LBB45_43
.LBB45_43:                              # %for.inc162
                                        #   in Loop: Header=BB45_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_38
.LBB45_44:                              # %for.end164
                                        #   in Loop: Header=BB45_36 Depth=2
	jmp	.LBB45_45
.LBB45_45:                              # %for.inc165
                                        #   in Loop: Header=BB45_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_36
.LBB45_46:                              # %for.end167
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	$0, -4(%rbp)
.LBB45_47:                              # %for.cond168
                                        #   Parent Loop BB45_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB45_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB45_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB45_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB45_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB45_51
.LBB45_50:                              # %if.else184
                                        #   in Loop: Header=BB45_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB45_51:                              # %if.end196
                                        #   in Loop: Header=BB45_47 Depth=2
	jmp	.LBB45_52
.LBB45_52:                              # %for.inc197
                                        #   in Loop: Header=BB45_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_47
.LBB45_53:                              # %for.end199
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	$0, -4(%rbp)
.LBB45_54:                              # %for.cond200
                                        #   Parent Loop BB45_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB45_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB45_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB45_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB45_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB45_58
.LBB45_57:                              # %if.else216
                                        #   in Loop: Header=BB45_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB45_58:                              # %if.end228
                                        #   in Loop: Header=BB45_54 Depth=2
	jmp	.LBB45_59
.LBB45_59:                              # %for.inc229
                                        #   in Loop: Header=BB45_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_54
.LBB45_60:                              # %for.end231
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	$0, -4(%rbp)
.LBB45_61:                              # %for.cond232
                                        #   Parent Loop BB45_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB45_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB45_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB45_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB45_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB45_65
.LBB45_64:                              # %if.else248
                                        #   in Loop: Header=BB45_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB45_65:                              # %if.end260
                                        #   in Loop: Header=BB45_61 Depth=2
	jmp	.LBB45_66
.LBB45_66:                              # %for.inc261
                                        #   in Loop: Header=BB45_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_61
.LBB45_67:                              # %for.end263
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	$0, -4(%rbp)
.LBB45_68:                              # %for.cond264
                                        #   Parent Loop BB45_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB45_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB45_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB45_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB45_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB45_72
.LBB45_71:                              # %if.else280
                                        #   in Loop: Header=BB45_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB45_72:                              # %if.end292
                                        #   in Loop: Header=BB45_68 Depth=2
	jmp	.LBB45_73
.LBB45_73:                              # %for.inc293
                                        #   in Loop: Header=BB45_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_68
.LBB45_74:                              # %for.end295
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	$0, -4(%rbp)
.LBB45_75:                              # %for.cond296
                                        #   Parent Loop BB45_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB45_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB45_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB45_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB45_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB45_79
.LBB45_78:                              # %if.else312
                                        #   in Loop: Header=BB45_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB45_79:                              # %if.end324
                                        #   in Loop: Header=BB45_75 Depth=2
	jmp	.LBB45_80
.LBB45_80:                              # %for.inc325
                                        #   in Loop: Header=BB45_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_75
.LBB45_81:                              # %for.end327
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	$0, -8(%rbp)
.LBB45_82:                              # %for.cond328
                                        #   Parent Loop BB45_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB45_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB45_82 Depth=2
	movl	$0, -4(%rbp)
.LBB45_84:                              # %for.cond331
                                        #   Parent Loop BB45_1 Depth=1
                                        #     Parent Loop BB45_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB45_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB45_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB45_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB45_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB45_88
.LBB45_87:                              # %if.else350
                                        #   in Loop: Header=BB45_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB45_88:                              # %if.end365
                                        #   in Loop: Header=BB45_84 Depth=3
	jmp	.LBB45_89
.LBB45_89:                              # %for.inc366
                                        #   in Loop: Header=BB45_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_84
.LBB45_90:                              # %for.end368
                                        #   in Loop: Header=BB45_82 Depth=2
	jmp	.LBB45_91
.LBB45_91:                              # %for.inc369
                                        #   in Loop: Header=BB45_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_82
.LBB45_92:                              # %for.end371
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	$0, -8(%rbp)
.LBB45_93:                              # %for.cond372
                                        #   Parent Loop BB45_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB45_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB45_93 Depth=2
	movl	$0, -4(%rbp)
.LBB45_95:                              # %for.cond375
                                        #   Parent Loop BB45_1 Depth=1
                                        #     Parent Loop BB45_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB45_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB45_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB45_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB45_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB45_99
.LBB45_98:                              # %if.else394
                                        #   in Loop: Header=BB45_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB45_99:                              # %if.end409
                                        #   in Loop: Header=BB45_95 Depth=3
	jmp	.LBB45_100
.LBB45_100:                             # %for.inc410
                                        #   in Loop: Header=BB45_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_95
.LBB45_101:                             # %for.end412
                                        #   in Loop: Header=BB45_93 Depth=2
	jmp	.LBB45_102
.LBB45_102:                             # %for.inc413
                                        #   in Loop: Header=BB45_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_93
.LBB45_103:                             # %for.end415
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	$0, -8(%rbp)
.LBB45_104:                             # %for.cond416
                                        #   Parent Loop BB45_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB45_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB45_104 Depth=2
	movl	$0, -4(%rbp)
.LBB45_106:                             # %for.cond419
                                        #   Parent Loop BB45_1 Depth=1
                                        #     Parent Loop BB45_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB45_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB45_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB45_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB45_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB45_110
.LBB45_109:                             # %if.else438
                                        #   in Loop: Header=BB45_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB45_110:                             # %if.end453
                                        #   in Loop: Header=BB45_106 Depth=3
	jmp	.LBB45_111
.LBB45_111:                             # %for.inc454
                                        #   in Loop: Header=BB45_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_106
.LBB45_112:                             # %for.end456
                                        #   in Loop: Header=BB45_104 Depth=2
	jmp	.LBB45_113
.LBB45_113:                             # %for.inc457
                                        #   in Loop: Header=BB45_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_104
.LBB45_114:                             # %for.end459
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	$0, -8(%rbp)
.LBB45_115:                             # %for.cond460
                                        #   Parent Loop BB45_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB45_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB45_115 Depth=2
	movl	$0, -4(%rbp)
.LBB45_117:                             # %for.cond463
                                        #   Parent Loop BB45_1 Depth=1
                                        #     Parent Loop BB45_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB45_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB45_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB45_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB45_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB45_121
.LBB45_120:                             # %if.else482
                                        #   in Loop: Header=BB45_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB45_121:                             # %if.end497
                                        #   in Loop: Header=BB45_117 Depth=3
	jmp	.LBB45_122
.LBB45_122:                             # %for.inc498
                                        #   in Loop: Header=BB45_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_117
.LBB45_123:                             # %for.end500
                                        #   in Loop: Header=BB45_115 Depth=2
	jmp	.LBB45_124
.LBB45_124:                             # %for.inc501
                                        #   in Loop: Header=BB45_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_115
.LBB45_125:                             # %for.end503
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	$0, -8(%rbp)
.LBB45_126:                             # %for.cond504
                                        #   Parent Loop BB45_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB45_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB45_126 Depth=2
	movl	$0, -4(%rbp)
.LBB45_128:                             # %for.cond507
                                        #   Parent Loop BB45_1 Depth=1
                                        #     Parent Loop BB45_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB45_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB45_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB45_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB45_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB45_132
.LBB45_131:                             # %if.else526
                                        #   in Loop: Header=BB45_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB45_132:                             # %if.end541
                                        #   in Loop: Header=BB45_128 Depth=3
	jmp	.LBB45_133
.LBB45_133:                             # %for.inc542
                                        #   in Loop: Header=BB45_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_128
.LBB45_134:                             # %for.end544
                                        #   in Loop: Header=BB45_126 Depth=2
	jmp	.LBB45_135
.LBB45_135:                             # %for.inc545
                                        #   in Loop: Header=BB45_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_126
.LBB45_136:                             # %for.end547
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	$0, -8(%rbp)
.LBB45_137:                             # %for.cond548
                                        #   Parent Loop BB45_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB45_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB45_137 Depth=2
	movl	$0, -4(%rbp)
.LBB45_139:                             # %for.cond551
                                        #   Parent Loop BB45_1 Depth=1
                                        #     Parent Loop BB45_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB45_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB45_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB45_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB45_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB45_143
.LBB45_142:                             # %if.else570
                                        #   in Loop: Header=BB45_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB45_143:                             # %if.end585
                                        #   in Loop: Header=BB45_139 Depth=3
	jmp	.LBB45_144
.LBB45_144:                             # %for.inc586
                                        #   in Loop: Header=BB45_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_139
.LBB45_145:                             # %for.end588
                                        #   in Loop: Header=BB45_137 Depth=2
	jmp	.LBB45_146
.LBB45_146:                             # %for.inc589
                                        #   in Loop: Header=BB45_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_137
.LBB45_147:                             # %for.end591
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	$0, -8(%rbp)
.LBB45_148:                             # %for.cond592
                                        #   Parent Loop BB45_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB45_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB45_148 Depth=2
	movl	$0, -4(%rbp)
.LBB45_150:                             # %for.cond595
                                        #   Parent Loop BB45_1 Depth=1
                                        #     Parent Loop BB45_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB45_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB45_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB45_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB45_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB45_154
.LBB45_153:                             # %if.else614
                                        #   in Loop: Header=BB45_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB45_154:                             # %if.end629
                                        #   in Loop: Header=BB45_150 Depth=3
	jmp	.LBB45_155
.LBB45_155:                             # %for.inc630
                                        #   in Loop: Header=BB45_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_150
.LBB45_156:                             # %for.end632
                                        #   in Loop: Header=BB45_148 Depth=2
	jmp	.LBB45_157
.LBB45_157:                             # %for.inc633
                                        #   in Loop: Header=BB45_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_148
.LBB45_158:                             # %for.end635
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	$0, -8(%rbp)
.LBB45_159:                             # %for.cond636
                                        #   Parent Loop BB45_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB45_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB45_159 Depth=2
	movl	$0, -4(%rbp)
.LBB45_161:                             # %for.cond639
                                        #   Parent Loop BB45_1 Depth=1
                                        #     Parent Loop BB45_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB45_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB45_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB45_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB45_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB45_165
.LBB45_164:                             # %if.else658
                                        #   in Loop: Header=BB45_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB45_165:                             # %if.end673
                                        #   in Loop: Header=BB45_161 Depth=3
	jmp	.LBB45_166
.LBB45_166:                             # %for.inc674
                                        #   in Loop: Header=BB45_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_161
.LBB45_167:                             # %for.end676
                                        #   in Loop: Header=BB45_159 Depth=2
	jmp	.LBB45_168
.LBB45_168:                             # %for.inc677
                                        #   in Loop: Header=BB45_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_159
.LBB45_169:                             # %for.end679
                                        #   in Loop: Header=BB45_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB45_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB45_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB45_171:                             # %if.end682
                                        #   in Loop: Header=BB45_1 Depth=1
	jmp	.LBB45_172
.LBB45_172:                             # %for.inc683
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_1
.LBB45_173:                             # %for.end685
	cmpl	$917499580, -44(%rbp)   # imm = 0x36AFEEBC
	jne	.LBB45_175
.LBB45_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_174
.Lfunc_end45:
	.size	GetCtxModelNumber.38, .Lfunc_end45-GetCtxModelNumber.38
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.39    # -- Begin function SetCtxModelNumber.39
	.p2align	4, 0x90
	.type	SetCtxModelNumber.39,@function
SetCtxModelNumber.39:                   # @SetCtxModelNumber.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$744205110, -16(%rbp)   # imm = 0x2C5BAB36
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB46_11
.LBB46_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB46_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB46_11
.LBB46_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB46_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB46_11
.LBB46_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB46_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB46_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB46_10
.LBB46_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB46_10:                              # %if.end38
	jmp	.LBB46_11
.LBB46_11:                              # %if.end39
	cmpl	$744205110, -16(%rbp)   # imm = 0x2C5BAB36
	jne	.LBB46_13
.LBB46_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_12
.Lfunc_end46:
	.size	SetCtxModelNumber.39, .Lfunc_end46-SetCtxModelNumber.39
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.40
.LCPI47_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.40
	.p2align	4, 0x90
	.type	GetCtxModelNumber.40,@function
GetCtxModelNumber.40:                   # @GetCtxModelNumber.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI47_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1040946874, -44(%rbp)  # imm = 0x3E0B96BA
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB47_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_3 Depth 2
                                        #       Child Loop BB47_5 Depth 3
                                        #     Child Loop BB47_14 Depth 2
                                        #       Child Loop BB47_16 Depth 3
                                        #     Child Loop BB47_25 Depth 2
                                        #       Child Loop BB47_27 Depth 3
                                        #     Child Loop BB47_36 Depth 2
                                        #       Child Loop BB47_38 Depth 3
                                        #     Child Loop BB47_47 Depth 2
                                        #     Child Loop BB47_54 Depth 2
                                        #     Child Loop BB47_61 Depth 2
                                        #     Child Loop BB47_68 Depth 2
                                        #     Child Loop BB47_75 Depth 2
                                        #     Child Loop BB47_82 Depth 2
                                        #       Child Loop BB47_84 Depth 3
                                        #     Child Loop BB47_93 Depth 2
                                        #       Child Loop BB47_95 Depth 3
                                        #     Child Loop BB47_104 Depth 2
                                        #       Child Loop BB47_106 Depth 3
                                        #     Child Loop BB47_115 Depth 2
                                        #       Child Loop BB47_117 Depth 3
                                        #     Child Loop BB47_126 Depth 2
                                        #       Child Loop BB47_128 Depth 3
                                        #     Child Loop BB47_137 Depth 2
                                        #       Child Loop BB47_139 Depth 3
                                        #     Child Loop BB47_148 Depth 2
                                        #       Child Loop BB47_150 Depth 3
                                        #     Child Loop BB47_159 Depth 2
                                        #       Child Loop BB47_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB47_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB47_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB47_3:                               # %for.cond2
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB47_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB47_3 Depth=2
	movl	$0, -4(%rbp)
.LBB47_5:                               # %for.cond5
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB47_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB47_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB47_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_9
.LBB47_8:                               # %if.else
                                        #   in Loop: Header=BB47_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_9:                               # %if.end
                                        #   in Loop: Header=BB47_5 Depth=3
	jmp	.LBB47_10
.LBB47_10:                              # %for.inc
                                        #   in Loop: Header=BB47_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_5
.LBB47_11:                              # %for.end
                                        #   in Loop: Header=BB47_3 Depth=2
	jmp	.LBB47_12
.LBB47_12:                              # %for.inc33
                                        #   in Loop: Header=BB47_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_3
.LBB47_13:                              # %for.end35
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -8(%rbp)
.LBB47_14:                              # %for.cond36
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB47_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB47_14 Depth=2
	movl	$0, -4(%rbp)
.LBB47_16:                              # %for.cond39
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB47_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB47_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB47_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_20
.LBB47_19:                              # %if.else58
                                        #   in Loop: Header=BB47_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_20:                              # %if.end73
                                        #   in Loop: Header=BB47_16 Depth=3
	jmp	.LBB47_21
.LBB47_21:                              # %for.inc74
                                        #   in Loop: Header=BB47_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_16
.LBB47_22:                              # %for.end76
                                        #   in Loop: Header=BB47_14 Depth=2
	jmp	.LBB47_23
.LBB47_23:                              # %for.inc77
                                        #   in Loop: Header=BB47_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_14
.LBB47_24:                              # %for.end79
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -8(%rbp)
.LBB47_25:                              # %for.cond80
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB47_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB47_25 Depth=2
	movl	$0, -4(%rbp)
.LBB47_27:                              # %for.cond83
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB47_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB47_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB47_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_31
.LBB47_30:                              # %if.else102
                                        #   in Loop: Header=BB47_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_31:                              # %if.end117
                                        #   in Loop: Header=BB47_27 Depth=3
	jmp	.LBB47_32
.LBB47_32:                              # %for.inc118
                                        #   in Loop: Header=BB47_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_27
.LBB47_33:                              # %for.end120
                                        #   in Loop: Header=BB47_25 Depth=2
	jmp	.LBB47_34
.LBB47_34:                              # %for.inc121
                                        #   in Loop: Header=BB47_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_25
.LBB47_35:                              # %for.end123
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -8(%rbp)
.LBB47_36:                              # %for.cond124
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB47_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB47_36 Depth=2
	movl	$0, -4(%rbp)
.LBB47_38:                              # %for.cond127
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB47_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB47_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB47_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_42
.LBB47_41:                              # %if.else146
                                        #   in Loop: Header=BB47_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_42:                              # %if.end161
                                        #   in Loop: Header=BB47_38 Depth=3
	jmp	.LBB47_43
.LBB47_43:                              # %for.inc162
                                        #   in Loop: Header=BB47_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_38
.LBB47_44:                              # %for.end164
                                        #   in Loop: Header=BB47_36 Depth=2
	jmp	.LBB47_45
.LBB47_45:                              # %for.inc165
                                        #   in Loop: Header=BB47_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_36
.LBB47_46:                              # %for.end167
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -4(%rbp)
.LBB47_47:                              # %for.cond168
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB47_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB47_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB47_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_51
.LBB47_50:                              # %if.else184
                                        #   in Loop: Header=BB47_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_51:                              # %if.end196
                                        #   in Loop: Header=BB47_47 Depth=2
	jmp	.LBB47_52
.LBB47_52:                              # %for.inc197
                                        #   in Loop: Header=BB47_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_47
.LBB47_53:                              # %for.end199
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -4(%rbp)
.LBB47_54:                              # %for.cond200
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB47_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB47_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB47_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_58
.LBB47_57:                              # %if.else216
                                        #   in Loop: Header=BB47_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_58:                              # %if.end228
                                        #   in Loop: Header=BB47_54 Depth=2
	jmp	.LBB47_59
.LBB47_59:                              # %for.inc229
                                        #   in Loop: Header=BB47_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_54
.LBB47_60:                              # %for.end231
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -4(%rbp)
.LBB47_61:                              # %for.cond232
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB47_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB47_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB47_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_65
.LBB47_64:                              # %if.else248
                                        #   in Loop: Header=BB47_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_65:                              # %if.end260
                                        #   in Loop: Header=BB47_61 Depth=2
	jmp	.LBB47_66
.LBB47_66:                              # %for.inc261
                                        #   in Loop: Header=BB47_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_61
.LBB47_67:                              # %for.end263
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -4(%rbp)
.LBB47_68:                              # %for.cond264
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB47_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB47_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB47_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_72
.LBB47_71:                              # %if.else280
                                        #   in Loop: Header=BB47_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_72:                              # %if.end292
                                        #   in Loop: Header=BB47_68 Depth=2
	jmp	.LBB47_73
.LBB47_73:                              # %for.inc293
                                        #   in Loop: Header=BB47_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_68
.LBB47_74:                              # %for.end295
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -4(%rbp)
.LBB47_75:                              # %for.cond296
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB47_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB47_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB47_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_79
.LBB47_78:                              # %if.else312
                                        #   in Loop: Header=BB47_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_79:                              # %if.end324
                                        #   in Loop: Header=BB47_75 Depth=2
	jmp	.LBB47_80
.LBB47_80:                              # %for.inc325
                                        #   in Loop: Header=BB47_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_75
.LBB47_81:                              # %for.end327
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -8(%rbp)
.LBB47_82:                              # %for.cond328
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB47_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB47_82 Depth=2
	movl	$0, -4(%rbp)
.LBB47_84:                              # %for.cond331
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB47_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB47_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB47_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_88
.LBB47_87:                              # %if.else350
                                        #   in Loop: Header=BB47_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_88:                              # %if.end365
                                        #   in Loop: Header=BB47_84 Depth=3
	jmp	.LBB47_89
.LBB47_89:                              # %for.inc366
                                        #   in Loop: Header=BB47_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_84
.LBB47_90:                              # %for.end368
                                        #   in Loop: Header=BB47_82 Depth=2
	jmp	.LBB47_91
.LBB47_91:                              # %for.inc369
                                        #   in Loop: Header=BB47_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_82
.LBB47_92:                              # %for.end371
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -8(%rbp)
.LBB47_93:                              # %for.cond372
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB47_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB47_93 Depth=2
	movl	$0, -4(%rbp)
.LBB47_95:                              # %for.cond375
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB47_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB47_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB47_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_99
.LBB47_98:                              # %if.else394
                                        #   in Loop: Header=BB47_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_99:                              # %if.end409
                                        #   in Loop: Header=BB47_95 Depth=3
	jmp	.LBB47_100
.LBB47_100:                             # %for.inc410
                                        #   in Loop: Header=BB47_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_95
.LBB47_101:                             # %for.end412
                                        #   in Loop: Header=BB47_93 Depth=2
	jmp	.LBB47_102
.LBB47_102:                             # %for.inc413
                                        #   in Loop: Header=BB47_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_93
.LBB47_103:                             # %for.end415
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -8(%rbp)
.LBB47_104:                             # %for.cond416
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB47_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB47_104 Depth=2
	movl	$0, -4(%rbp)
.LBB47_106:                             # %for.cond419
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB47_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB47_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB47_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_110
.LBB47_109:                             # %if.else438
                                        #   in Loop: Header=BB47_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_110:                             # %if.end453
                                        #   in Loop: Header=BB47_106 Depth=3
	jmp	.LBB47_111
.LBB47_111:                             # %for.inc454
                                        #   in Loop: Header=BB47_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_106
.LBB47_112:                             # %for.end456
                                        #   in Loop: Header=BB47_104 Depth=2
	jmp	.LBB47_113
.LBB47_113:                             # %for.inc457
                                        #   in Loop: Header=BB47_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_104
.LBB47_114:                             # %for.end459
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -8(%rbp)
.LBB47_115:                             # %for.cond460
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB47_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB47_115 Depth=2
	movl	$0, -4(%rbp)
.LBB47_117:                             # %for.cond463
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB47_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB47_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB47_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_121
.LBB47_120:                             # %if.else482
                                        #   in Loop: Header=BB47_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_121:                             # %if.end497
                                        #   in Loop: Header=BB47_117 Depth=3
	jmp	.LBB47_122
.LBB47_122:                             # %for.inc498
                                        #   in Loop: Header=BB47_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_117
.LBB47_123:                             # %for.end500
                                        #   in Loop: Header=BB47_115 Depth=2
	jmp	.LBB47_124
.LBB47_124:                             # %for.inc501
                                        #   in Loop: Header=BB47_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_115
.LBB47_125:                             # %for.end503
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -8(%rbp)
.LBB47_126:                             # %for.cond504
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB47_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB47_126 Depth=2
	movl	$0, -4(%rbp)
.LBB47_128:                             # %for.cond507
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB47_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB47_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB47_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_132
.LBB47_131:                             # %if.else526
                                        #   in Loop: Header=BB47_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_132:                             # %if.end541
                                        #   in Loop: Header=BB47_128 Depth=3
	jmp	.LBB47_133
.LBB47_133:                             # %for.inc542
                                        #   in Loop: Header=BB47_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_128
.LBB47_134:                             # %for.end544
                                        #   in Loop: Header=BB47_126 Depth=2
	jmp	.LBB47_135
.LBB47_135:                             # %for.inc545
                                        #   in Loop: Header=BB47_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_126
.LBB47_136:                             # %for.end547
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -8(%rbp)
.LBB47_137:                             # %for.cond548
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB47_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB47_137 Depth=2
	movl	$0, -4(%rbp)
.LBB47_139:                             # %for.cond551
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB47_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB47_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB47_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_143
.LBB47_142:                             # %if.else570
                                        #   in Loop: Header=BB47_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_143:                             # %if.end585
                                        #   in Loop: Header=BB47_139 Depth=3
	jmp	.LBB47_144
.LBB47_144:                             # %for.inc586
                                        #   in Loop: Header=BB47_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_139
.LBB47_145:                             # %for.end588
                                        #   in Loop: Header=BB47_137 Depth=2
	jmp	.LBB47_146
.LBB47_146:                             # %for.inc589
                                        #   in Loop: Header=BB47_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_137
.LBB47_147:                             # %for.end591
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -8(%rbp)
.LBB47_148:                             # %for.cond592
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB47_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB47_148 Depth=2
	movl	$0, -4(%rbp)
.LBB47_150:                             # %for.cond595
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB47_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB47_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB47_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_154
.LBB47_153:                             # %if.else614
                                        #   in Loop: Header=BB47_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_154:                             # %if.end629
                                        #   in Loop: Header=BB47_150 Depth=3
	jmp	.LBB47_155
.LBB47_155:                             # %for.inc630
                                        #   in Loop: Header=BB47_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_150
.LBB47_156:                             # %for.end632
                                        #   in Loop: Header=BB47_148 Depth=2
	jmp	.LBB47_157
.LBB47_157:                             # %for.inc633
                                        #   in Loop: Header=BB47_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_148
.LBB47_158:                             # %for.end635
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -8(%rbp)
.LBB47_159:                             # %for.cond636
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB47_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB47_159 Depth=2
	movl	$0, -4(%rbp)
.LBB47_161:                             # %for.cond639
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB47_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB47_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB47_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_165
.LBB47_164:                             # %if.else658
                                        #   in Loop: Header=BB47_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_165:                             # %if.end673
                                        #   in Loop: Header=BB47_161 Depth=3
	jmp	.LBB47_166
.LBB47_166:                             # %for.inc674
                                        #   in Loop: Header=BB47_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_161
.LBB47_167:                             # %for.end676
                                        #   in Loop: Header=BB47_159 Depth=2
	jmp	.LBB47_168
.LBB47_168:                             # %for.inc677
                                        #   in Loop: Header=BB47_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_159
.LBB47_169:                             # %for.end679
                                        #   in Loop: Header=BB47_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB47_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB47_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB47_171:                             # %if.end682
                                        #   in Loop: Header=BB47_1 Depth=1
	jmp	.LBB47_172
.LBB47_172:                             # %for.inc683
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_1
.LBB47_173:                             # %for.end685
	cmpl	$1040946874, -44(%rbp)  # imm = 0x3E0B96BA
	jne	.LBB47_175
.LBB47_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_174
.Lfunc_end47:
	.size	GetCtxModelNumber.40, .Lfunc_end47-GetCtxModelNumber.40
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.41        # -- Begin function init_contexts.41
	.p2align	4, 0x90
	.type	init_contexts.41,@function
init_contexts.41:                       # @init_contexts.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$543572396, -28(%rbp)   # imm = 0x206641AC
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB48_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB48_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB48_1 Depth=1
	movl	$0, -4(%rbp)
.LBB48_3:                               # %for.cond2
                                        #   Parent Loop BB48_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB48_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB48_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB48_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_7
.LBB48_6:                               # %if.else
                                        #   in Loop: Header=BB48_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_7:                               # %if.end
                                        #   in Loop: Header=BB48_3 Depth=2
	jmp	.LBB48_8
.LBB48_8:                               # %for.inc
                                        #   in Loop: Header=BB48_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_3
.LBB48_9:                               # %for.end
                                        #   in Loop: Header=BB48_1 Depth=1
	jmp	.LBB48_10
.LBB48_10:                              # %for.inc28
                                        #   in Loop: Header=BB48_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_1
.LBB48_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB48_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB48_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB48_12 Depth=1
	movl	$0, -4(%rbp)
.LBB48_14:                              # %for.cond34
                                        #   Parent Loop BB48_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB48_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB48_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB48_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_18
.LBB48_17:                              # %if.else52
                                        #   in Loop: Header=BB48_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_18:                              # %if.end66
                                        #   in Loop: Header=BB48_14 Depth=2
	jmp	.LBB48_19
.LBB48_19:                              # %for.inc67
                                        #   in Loop: Header=BB48_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_14
.LBB48_20:                              # %for.end69
                                        #   in Loop: Header=BB48_12 Depth=1
	jmp	.LBB48_21
.LBB48_21:                              # %for.inc70
                                        #   in Loop: Header=BB48_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_12
.LBB48_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB48_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB48_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB48_23 Depth=1
	movl	$0, -4(%rbp)
.LBB48_25:                              # %for.cond76
                                        #   Parent Loop BB48_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB48_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB48_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB48_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_29
.LBB48_28:                              # %if.else94
                                        #   in Loop: Header=BB48_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_29:                              # %if.end108
                                        #   in Loop: Header=BB48_25 Depth=2
	jmp	.LBB48_30
.LBB48_30:                              # %for.inc109
                                        #   in Loop: Header=BB48_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_25
.LBB48_31:                              # %for.end111
                                        #   in Loop: Header=BB48_23 Depth=1
	jmp	.LBB48_32
.LBB48_32:                              # %for.inc112
                                        #   in Loop: Header=BB48_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_23
.LBB48_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB48_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB48_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB48_34 Depth=1
	movl	$0, -4(%rbp)
.LBB48_36:                              # %for.cond118
                                        #   Parent Loop BB48_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB48_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB48_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB48_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_40
.LBB48_39:                              # %if.else136
                                        #   in Loop: Header=BB48_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_40:                              # %if.end150
                                        #   in Loop: Header=BB48_36 Depth=2
	jmp	.LBB48_41
.LBB48_41:                              # %for.inc151
                                        #   in Loop: Header=BB48_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_36
.LBB48_42:                              # %for.end153
                                        #   in Loop: Header=BB48_34 Depth=1
	jmp	.LBB48_43
.LBB48_43:                              # %for.inc154
                                        #   in Loop: Header=BB48_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_34
.LBB48_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB48_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB48_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB48_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB48_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_49
.LBB48_48:                              # %if.else172
                                        #   in Loop: Header=BB48_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_49:                              # %if.end183
                                        #   in Loop: Header=BB48_45 Depth=1
	jmp	.LBB48_50
.LBB48_50:                              # %for.inc184
                                        #   in Loop: Header=BB48_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_45
.LBB48_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB48_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB48_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB48_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB48_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_56
.LBB48_55:                              # %if.else202
                                        #   in Loop: Header=BB48_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_56:                              # %if.end213
                                        #   in Loop: Header=BB48_52 Depth=1
	jmp	.LBB48_57
.LBB48_57:                              # %for.inc214
                                        #   in Loop: Header=BB48_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_52
.LBB48_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB48_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB48_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB48_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB48_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_63
.LBB48_62:                              # %if.else232
                                        #   in Loop: Header=BB48_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_63:                              # %if.end243
                                        #   in Loop: Header=BB48_59 Depth=1
	jmp	.LBB48_64
.LBB48_64:                              # %for.inc244
                                        #   in Loop: Header=BB48_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_59
.LBB48_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB48_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB48_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB48_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB48_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_70
.LBB48_69:                              # %if.else262
                                        #   in Loop: Header=BB48_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_70:                              # %if.end273
                                        #   in Loop: Header=BB48_66 Depth=1
	jmp	.LBB48_71
.LBB48_71:                              # %for.inc274
                                        #   in Loop: Header=BB48_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_66
.LBB48_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB48_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB48_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB48_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB48_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_77
.LBB48_76:                              # %if.else292
                                        #   in Loop: Header=BB48_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_77:                              # %if.end303
                                        #   in Loop: Header=BB48_73 Depth=1
	jmp	.LBB48_78
.LBB48_78:                              # %for.inc304
                                        #   in Loop: Header=BB48_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_73
.LBB48_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB48_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB48_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB48_80 Depth=1
	movl	$0, -4(%rbp)
.LBB48_82:                              # %for.cond310
                                        #   Parent Loop BB48_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB48_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB48_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB48_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_86
.LBB48_85:                              # %if.else328
                                        #   in Loop: Header=BB48_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_86:                              # %if.end342
                                        #   in Loop: Header=BB48_82 Depth=2
	jmp	.LBB48_87
.LBB48_87:                              # %for.inc343
                                        #   in Loop: Header=BB48_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_82
.LBB48_88:                              # %for.end345
                                        #   in Loop: Header=BB48_80 Depth=1
	jmp	.LBB48_89
.LBB48_89:                              # %for.inc346
                                        #   in Loop: Header=BB48_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_80
.LBB48_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB48_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB48_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB48_91 Depth=1
	movl	$0, -4(%rbp)
.LBB48_93:                              # %for.cond352
                                        #   Parent Loop BB48_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB48_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB48_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB48_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_97
.LBB48_96:                              # %if.else370
                                        #   in Loop: Header=BB48_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_97:                              # %if.end384
                                        #   in Loop: Header=BB48_93 Depth=2
	jmp	.LBB48_98
.LBB48_98:                              # %for.inc385
                                        #   in Loop: Header=BB48_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_93
.LBB48_99:                              # %for.end387
                                        #   in Loop: Header=BB48_91 Depth=1
	jmp	.LBB48_100
.LBB48_100:                             # %for.inc388
                                        #   in Loop: Header=BB48_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_91
.LBB48_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB48_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB48_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB48_102 Depth=1
	movl	$0, -4(%rbp)
.LBB48_104:                             # %for.cond394
                                        #   Parent Loop BB48_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB48_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB48_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB48_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_108
.LBB48_107:                             # %if.else412
                                        #   in Loop: Header=BB48_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_108:                             # %if.end426
                                        #   in Loop: Header=BB48_104 Depth=2
	jmp	.LBB48_109
.LBB48_109:                             # %for.inc427
                                        #   in Loop: Header=BB48_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_104
.LBB48_110:                             # %for.end429
                                        #   in Loop: Header=BB48_102 Depth=1
	jmp	.LBB48_111
.LBB48_111:                             # %for.inc430
                                        #   in Loop: Header=BB48_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_102
.LBB48_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB48_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB48_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB48_113 Depth=1
	movl	$0, -4(%rbp)
.LBB48_115:                             # %for.cond436
                                        #   Parent Loop BB48_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB48_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB48_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB48_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_119
.LBB48_118:                             # %if.else454
                                        #   in Loop: Header=BB48_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_119:                             # %if.end468
                                        #   in Loop: Header=BB48_115 Depth=2
	jmp	.LBB48_120
.LBB48_120:                             # %for.inc469
                                        #   in Loop: Header=BB48_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_115
.LBB48_121:                             # %for.end471
                                        #   in Loop: Header=BB48_113 Depth=1
	jmp	.LBB48_122
.LBB48_122:                             # %for.inc472
                                        #   in Loop: Header=BB48_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_113
.LBB48_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB48_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB48_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB48_124 Depth=1
	movl	$0, -4(%rbp)
.LBB48_126:                             # %for.cond478
                                        #   Parent Loop BB48_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB48_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB48_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB48_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_130
.LBB48_129:                             # %if.else496
                                        #   in Loop: Header=BB48_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_130:                             # %if.end510
                                        #   in Loop: Header=BB48_126 Depth=2
	jmp	.LBB48_131
.LBB48_131:                             # %for.inc511
                                        #   in Loop: Header=BB48_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_126
.LBB48_132:                             # %for.end513
                                        #   in Loop: Header=BB48_124 Depth=1
	jmp	.LBB48_133
.LBB48_133:                             # %for.inc514
                                        #   in Loop: Header=BB48_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_124
.LBB48_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB48_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB48_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB48_135 Depth=1
	movl	$0, -4(%rbp)
.LBB48_137:                             # %for.cond520
                                        #   Parent Loop BB48_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB48_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB48_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB48_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_141
.LBB48_140:                             # %if.else538
                                        #   in Loop: Header=BB48_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_141:                             # %if.end552
                                        #   in Loop: Header=BB48_137 Depth=2
	jmp	.LBB48_142
.LBB48_142:                             # %for.inc553
                                        #   in Loop: Header=BB48_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_137
.LBB48_143:                             # %for.end555
                                        #   in Loop: Header=BB48_135 Depth=1
	jmp	.LBB48_144
.LBB48_144:                             # %for.inc556
                                        #   in Loop: Header=BB48_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_135
.LBB48_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB48_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB48_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB48_146 Depth=1
	movl	$0, -4(%rbp)
.LBB48_148:                             # %for.cond562
                                        #   Parent Loop BB48_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB48_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB48_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB48_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_152
.LBB48_151:                             # %if.else580
                                        #   in Loop: Header=BB48_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_152:                             # %if.end594
                                        #   in Loop: Header=BB48_148 Depth=2
	jmp	.LBB48_153
.LBB48_153:                             # %for.inc595
                                        #   in Loop: Header=BB48_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_148
.LBB48_154:                             # %for.end597
                                        #   in Loop: Header=BB48_146 Depth=1
	jmp	.LBB48_155
.LBB48_155:                             # %for.inc598
                                        #   in Loop: Header=BB48_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_146
.LBB48_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB48_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB48_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB48_157 Depth=1
	movl	$0, -4(%rbp)
.LBB48_159:                             # %for.cond604
                                        #   Parent Loop BB48_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB48_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB48_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB48_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB48_163
.LBB48_162:                             # %if.else622
                                        #   in Loop: Header=BB48_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB48_163:                             # %if.end636
                                        #   in Loop: Header=BB48_159 Depth=2
	jmp	.LBB48_164
.LBB48_164:                             # %for.inc637
                                        #   in Loop: Header=BB48_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_159
.LBB48_165:                             # %for.end639
                                        #   in Loop: Header=BB48_157 Depth=1
	jmp	.LBB48_166
.LBB48_166:                             # %for.inc640
                                        #   in Loop: Header=BB48_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_157
.LBB48_167:                             # %for.end642
	cmpl	$543572396, -28(%rbp)   # imm = 0x206641AC
	jne	.LBB48_169
.LBB48_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_168
.Lfunc_end48:
	.size	init_contexts.41, .Lfunc_end48-init_contexts.41
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.42        # -- Begin function init_contexts.42
	.p2align	4, 0x90
	.type	init_contexts.42,@function
init_contexts.42:                       # @init_contexts.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1552930075, -28(%rbp)  # imm = 0x5C8FD51B
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB49_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB49_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	$0, -4(%rbp)
.LBB49_3:                               # %for.cond2
                                        #   Parent Loop BB49_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB49_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB49_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB49_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB49_7
.LBB49_6:                               # %if.else
                                        #   in Loop: Header=BB49_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB49_7:                               # %if.end
                                        #   in Loop: Header=BB49_3 Depth=2
	jmp	.LBB49_8
.LBB49_8:                               # %for.inc
                                        #   in Loop: Header=BB49_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_3
.LBB49_9:                               # %for.end
                                        #   in Loop: Header=BB49_1 Depth=1
	jmp	.LBB49_10
.LBB49_10:                              # %for.inc28
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_1
.LBB49_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB49_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB49_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB49_12 Depth=1
	movl	$0, -4(%rbp)
.LBB49_14:                              # %for.cond34
                                        #   Parent Loop BB49_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB49_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB49_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB49_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB49_18
.LBB49_17:                              # %if.else52
                                        #   in Loop: Header=BB49_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB49_18:                              # %if.end66
                                        #   in Loop: Header=BB49_14 Depth=2
	jmp	.LBB49_19
.LBB49_19:                              # %for.inc67
                                        #   in Loop: Header=BB49_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_14
.LBB49_20:                              # %for.end69
                                        #   in Loop: Header=BB49_12 Depth=1
	jmp	.LBB49_21
.LBB49_21:                              # %for.inc70
                                        #   in Loop: Header=BB49_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_12
.LBB49_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB49_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB49_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB49_23 Depth=1
	movl	$0, -4(%rbp)
.LBB49_25:                              # %for.cond76
                                        #   Parent Loop BB49_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB49_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB49_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB49_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB49_29
.LBB49_28:                              # %if.else94
                                        #   in Loop: Header=BB49_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB49_29:                              # %if.end108
                                        #   in Loop: Header=BB49_25 Depth=2
	jmp	.LBB49_30
.LBB49_30:                              # %for.inc109
                                        #   in Loop: Header=BB49_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_25
.LBB49_31:                              # %for.end111
                                        #   in Loop: Header=BB49_23 Depth=1
	jmp	.LBB49_32
.LBB49_32:                              # %for.inc112
                                        #   in Loop: Header=BB49_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_23
.LBB49_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB49_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB49_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB49_34 Depth=1
	movl	$0, -4(%rbp)
.LBB49_36:                              # %for.cond118
                                        #   Parent Loop BB49_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB49_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB49_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB49_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB49_40
.LBB49_39:                              # %if.else136
                                        #   in Loop: Header=BB49_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB49_40:                              # %if.end150
                                        #   in Loop: Header=BB49_36 Depth=2
	jmp	.LBB49_41
.LBB49_41:                              # %for.inc151
                                        #   in Loop: Header=BB49_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_36
.LBB49_42:                              # %for.end153
                                        #   in Loop: Header=BB49_34 Depth=1
	jmp	.LBB49_43
.LBB49_43:                              # %for.inc154
                                        #   in Loop: Header=BB49_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_34
.LBB49_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB49_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB49_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB49_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB49_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB49_49
.LBB49_48:                              # %if.else172
                                        #   in Loop: Header=BB49_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB49_49:                              # %if.end183
                                        #   in Loop: Header=BB49_45 Depth=1
	jmp	.LBB49_50
.LBB49_50:                              # %for.inc184
                                        #   in Loop: Header=BB49_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_45
.LBB49_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB49_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB49_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB49_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB49_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB49_56
.LBB49_55:                              # %if.else202
                                        #   in Loop: Header=BB49_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB49_56:                              # %if.end213
                                        #   in Loop: Header=BB49_52 Depth=1
	jmp	.LBB49_57
.LBB49_57:                              # %for.inc214
                                        #   in Loop: Header=BB49_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_52
.LBB49_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB49_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB49_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB49_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB49_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB49_63
.LBB49_62:                              # %if.else232
                                        #   in Loop: Header=BB49_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB49_63:                              # %if.end243
                                        #   in Loop: Header=BB49_59 Depth=1
	jmp	.LBB49_64
.LBB49_64:                              # %for.inc244
                                        #   in Loop: Header=BB49_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_59
.LBB49_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB49_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB49_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB49_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB49_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB49_70
.LBB49_69:                              # %if.else262
                                        #   in Loop: Header=BB49_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB49_70:                              # %if.end273
                                        #   in Loop: Header=BB49_66 Depth=1
	jmp	.LBB49_71
.LBB49_71:                              # %for.inc274
                                        #   in Loop: Header=BB49_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_66
.LBB49_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB49_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB49_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB49_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB49_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB49_77
.LBB49_76:                              # %if.else292
                                        #   in Loop: Header=BB49_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB49_77:                              # %if.end303
                                        #   in Loop: Header=BB49_73 Depth=1
	jmp	.LBB49_78
.LBB49_78:                              # %for.inc304
                                        #   in Loop: Header=BB49_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_73
.LBB49_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB49_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB49_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB49_80 Depth=1
	movl	$0, -4(%rbp)
.LBB49_82:                              # %for.cond310
                                        #   Parent Loop BB49_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB49_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB49_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB49_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB49_86
.LBB49_85:                              # %if.else328
                                        #   in Loop: Header=BB49_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB49_86:                              # %if.end342
                                        #   in Loop: Header=BB49_82 Depth=2
	jmp	.LBB49_87
.LBB49_87:                              # %for.inc343
                                        #   in Loop: Header=BB49_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_82
.LBB49_88:                              # %for.end345
                                        #   in Loop: Header=BB49_80 Depth=1
	jmp	.LBB49_89
.LBB49_89:                              # %for.inc346
                                        #   in Loop: Header=BB49_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_80
.LBB49_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB49_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB49_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB49_91 Depth=1
	movl	$0, -4(%rbp)
.LBB49_93:                              # %for.cond352
                                        #   Parent Loop BB49_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB49_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB49_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB49_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB49_97
.LBB49_96:                              # %if.else370
                                        #   in Loop: Header=BB49_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB49_97:                              # %if.end384
                                        #   in Loop: Header=BB49_93 Depth=2
	jmp	.LBB49_98
.LBB49_98:                              # %for.inc385
                                        #   in Loop: Header=BB49_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_93
.LBB49_99:                              # %for.end387
                                        #   in Loop: Header=BB49_91 Depth=1
	jmp	.LBB49_100
.LBB49_100:                             # %for.inc388
                                        #   in Loop: Header=BB49_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_91
.LBB49_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB49_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB49_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB49_102 Depth=1
	movl	$0, -4(%rbp)
.LBB49_104:                             # %for.cond394
                                        #   Parent Loop BB49_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB49_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB49_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB49_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB49_108
.LBB49_107:                             # %if.else412
                                        #   in Loop: Header=BB49_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB49_108:                             # %if.end426
                                        #   in Loop: Header=BB49_104 Depth=2
	jmp	.LBB49_109
.LBB49_109:                             # %for.inc427
                                        #   in Loop: Header=BB49_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_104
.LBB49_110:                             # %for.end429
                                        #   in Loop: Header=BB49_102 Depth=1
	jmp	.LBB49_111
.LBB49_111:                             # %for.inc430
                                        #   in Loop: Header=BB49_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_102
.LBB49_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB49_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB49_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB49_113 Depth=1
	movl	$0, -4(%rbp)
.LBB49_115:                             # %for.cond436
                                        #   Parent Loop BB49_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB49_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB49_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB49_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB49_119
.LBB49_118:                             # %if.else454
                                        #   in Loop: Header=BB49_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB49_119:                             # %if.end468
                                        #   in Loop: Header=BB49_115 Depth=2
	jmp	.LBB49_120
.LBB49_120:                             # %for.inc469
                                        #   in Loop: Header=BB49_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_115
.LBB49_121:                             # %for.end471
                                        #   in Loop: Header=BB49_113 Depth=1
	jmp	.LBB49_122
.LBB49_122:                             # %for.inc472
                                        #   in Loop: Header=BB49_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_113
.LBB49_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB49_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB49_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB49_124 Depth=1
	movl	$0, -4(%rbp)
.LBB49_126:                             # %for.cond478
                                        #   Parent Loop BB49_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB49_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB49_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB49_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB49_130
.LBB49_129:                             # %if.else496
                                        #   in Loop: Header=BB49_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB49_130:                             # %if.end510
                                        #   in Loop: Header=BB49_126 Depth=2
	jmp	.LBB49_131
.LBB49_131:                             # %for.inc511
                                        #   in Loop: Header=BB49_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_126
.LBB49_132:                             # %for.end513
                                        #   in Loop: Header=BB49_124 Depth=1
	jmp	.LBB49_133
.LBB49_133:                             # %for.inc514
                                        #   in Loop: Header=BB49_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_124
.LBB49_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB49_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB49_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB49_135 Depth=1
	movl	$0, -4(%rbp)
.LBB49_137:                             # %for.cond520
                                        #   Parent Loop BB49_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB49_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB49_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB49_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB49_141
.LBB49_140:                             # %if.else538
                                        #   in Loop: Header=BB49_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB49_141:                             # %if.end552
                                        #   in Loop: Header=BB49_137 Depth=2
	jmp	.LBB49_142
.LBB49_142:                             # %for.inc553
                                        #   in Loop: Header=BB49_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_137
.LBB49_143:                             # %for.end555
                                        #   in Loop: Header=BB49_135 Depth=1
	jmp	.LBB49_144
.LBB49_144:                             # %for.inc556
                                        #   in Loop: Header=BB49_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_135
.LBB49_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB49_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB49_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB49_146 Depth=1
	movl	$0, -4(%rbp)
.LBB49_148:                             # %for.cond562
                                        #   Parent Loop BB49_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB49_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB49_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB49_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB49_152
.LBB49_151:                             # %if.else580
                                        #   in Loop: Header=BB49_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB49_152:                             # %if.end594
                                        #   in Loop: Header=BB49_148 Depth=2
	jmp	.LBB49_153
.LBB49_153:                             # %for.inc595
                                        #   in Loop: Header=BB49_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_148
.LBB49_154:                             # %for.end597
                                        #   in Loop: Header=BB49_146 Depth=1
	jmp	.LBB49_155
.LBB49_155:                             # %for.inc598
                                        #   in Loop: Header=BB49_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_146
.LBB49_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB49_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB49_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB49_157 Depth=1
	movl	$0, -4(%rbp)
.LBB49_159:                             # %for.cond604
                                        #   Parent Loop BB49_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB49_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB49_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB49_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB49_163
.LBB49_162:                             # %if.else622
                                        #   in Loop: Header=BB49_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB49_163:                             # %if.end636
                                        #   in Loop: Header=BB49_159 Depth=2
	jmp	.LBB49_164
.LBB49_164:                             # %for.inc637
                                        #   in Loop: Header=BB49_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_159
.LBB49_165:                             # %for.end639
                                        #   in Loop: Header=BB49_157 Depth=1
	jmp	.LBB49_166
.LBB49_166:                             # %for.inc640
                                        #   in Loop: Header=BB49_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_157
.LBB49_167:                             # %for.end642
	cmpl	$1552930075, -28(%rbp)  # imm = 0x5C8FD51B
	jne	.LBB49_169
.LBB49_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_168
.Lfunc_end49:
	.size	init_contexts.42, .Lfunc_end49-init_contexts.42
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.43 # -- Begin function update_field_frame_contexts.43
	.p2align	4, 0x90
	.type	update_field_frame_contexts.43,@function
update_field_frame_contexts.43:         # @update_field_frame_contexts.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1206894083, -16(%rbp)  # imm = 0x47EFBE03
	movl	%edi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB50_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB50_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_4 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB50_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB50_2 Depth=1
	movl	$0, -8(%rbp)
.LBB50_4:                               # %for.cond1
                                        #   Parent Loop BB50_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB50_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB50_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB50_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_4
.LBB50_7:                               # %for.end
                                        #   in Loop: Header=BB50_2 Depth=1
	jmp	.LBB50_8
.LBB50_8:                               # %for.inc23
                                        #   in Loop: Header=BB50_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_2
.LBB50_9:                               # %for.end25
	jmp	.LBB50_19
.LBB50_10:                              # %if.else
	movl	$0, -4(%rbp)
.LBB50_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_13 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB50_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB50_11 Depth=1
	movl	$0, -8(%rbp)
.LBB50_13:                              # %for.cond29
                                        #   Parent Loop BB50_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB50_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB50_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_13
.LBB50_16:                              # %for.end56
                                        #   in Loop: Header=BB50_11 Depth=1
	jmp	.LBB50_17
.LBB50_17:                              # %for.inc57
                                        #   in Loop: Header=BB50_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_11
.LBB50_18:                              # %for.end59
	jmp	.LBB50_19
.LBB50_19:                              # %if.end
	cmpl	$1206894083, -16(%rbp)  # imm = 0x47EFBE03
	jne	.LBB50_21
.LBB50_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_20
.Lfunc_end50:
	.size	update_field_frame_contexts.43, .Lfunc_end50-update_field_frame_contexts.43
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.44
.LCPI51_0:
	.quad	4607182418800017408     # double 1
.LCPI51_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI51_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI51_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.44
	.p2align	4, 0x90
	.type	XRate.44,@function
XRate.44:                               # @XRate.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$626235194, -36(%rbp)   # imm = 0x2553973A
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB51_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB51_3
.LBB51_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB51_3:                               # %cond.end
	vmovsd	.LCPI51_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI51_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI51_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI51_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB51_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI51_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB51_6
.LBB51_5:                               # %cond.false6
	vmovsd	.LCPI51_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI51_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI51_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB51_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB51_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB51_9
.LBB51_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB51_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB51_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB51_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB51_13
.LBB51_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB51_13:                              # %cond.end26
	jmp	.LBB51_15
.LBB51_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB51_15
.LBB51_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB51_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB51_18
.LBB51_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB51_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$626235194, -36(%rbp)   # imm = 0x2553973A
	jne	.LBB51_20
.LBB51_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB51_19
.Lfunc_end51:
	.size	XRate.44, .Lfunc_end51-XRate.44
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.45    # -- Begin function SetCtxModelNumber.45
	.p2align	4, 0x90
	.type	SetCtxModelNumber.45,@function
SetCtxModelNumber.45:                   # @SetCtxModelNumber.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1543209216, -16(%rbp)  # imm = 0x5BFB8100
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB52_11
.LBB52_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB52_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB52_11
.LBB52_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB52_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB52_11
.LBB52_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB52_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB52_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB52_10
.LBB52_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB52_10:                              # %if.end38
	jmp	.LBB52_11
.LBB52_11:                              # %if.end39
	cmpl	$1543209216, -16(%rbp)  # imm = 0x5BFB8100
	jne	.LBB52_13
.LBB52_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_12
.Lfunc_end52:
	.size	SetCtxModelNumber.45, .Lfunc_end52-SetCtxModelNumber.45
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.46
.LCPI53_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.46
	.p2align	4, 0x90
	.type	GetCtxModelNumber.46,@function
GetCtxModelNumber.46:                   # @GetCtxModelNumber.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI53_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1287885788, -44(%rbp)  # imm = 0x4CC393DC
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB53_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_3 Depth 2
                                        #       Child Loop BB53_5 Depth 3
                                        #     Child Loop BB53_14 Depth 2
                                        #       Child Loop BB53_16 Depth 3
                                        #     Child Loop BB53_25 Depth 2
                                        #       Child Loop BB53_27 Depth 3
                                        #     Child Loop BB53_36 Depth 2
                                        #       Child Loop BB53_38 Depth 3
                                        #     Child Loop BB53_47 Depth 2
                                        #     Child Loop BB53_54 Depth 2
                                        #     Child Loop BB53_61 Depth 2
                                        #     Child Loop BB53_68 Depth 2
                                        #     Child Loop BB53_75 Depth 2
                                        #     Child Loop BB53_82 Depth 2
                                        #       Child Loop BB53_84 Depth 3
                                        #     Child Loop BB53_93 Depth 2
                                        #       Child Loop BB53_95 Depth 3
                                        #     Child Loop BB53_104 Depth 2
                                        #       Child Loop BB53_106 Depth 3
                                        #     Child Loop BB53_115 Depth 2
                                        #       Child Loop BB53_117 Depth 3
                                        #     Child Loop BB53_126 Depth 2
                                        #       Child Loop BB53_128 Depth 3
                                        #     Child Loop BB53_137 Depth 2
                                        #       Child Loop BB53_139 Depth 3
                                        #     Child Loop BB53_148 Depth 2
                                        #       Child Loop BB53_150 Depth 3
                                        #     Child Loop BB53_159 Depth 2
                                        #       Child Loop BB53_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB53_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB53_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB53_3:                               # %for.cond2
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB53_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB53_3 Depth=2
	movl	$0, -4(%rbp)
.LBB53_5:                               # %for.cond5
                                        #   Parent Loop BB53_1 Depth=1
                                        #     Parent Loop BB53_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB53_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB53_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB53_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB53_9
.LBB53_8:                               # %if.else
                                        #   in Loop: Header=BB53_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB53_9:                               # %if.end
                                        #   in Loop: Header=BB53_5 Depth=3
	jmp	.LBB53_10
.LBB53_10:                              # %for.inc
                                        #   in Loop: Header=BB53_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_5
.LBB53_11:                              # %for.end
                                        #   in Loop: Header=BB53_3 Depth=2
	jmp	.LBB53_12
.LBB53_12:                              # %for.inc33
                                        #   in Loop: Header=BB53_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_3
.LBB53_13:                              # %for.end35
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -8(%rbp)
.LBB53_14:                              # %for.cond36
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB53_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB53_14 Depth=2
	movl	$0, -4(%rbp)
.LBB53_16:                              # %for.cond39
                                        #   Parent Loop BB53_1 Depth=1
                                        #     Parent Loop BB53_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB53_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB53_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB53_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB53_20
.LBB53_19:                              # %if.else58
                                        #   in Loop: Header=BB53_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB53_20:                              # %if.end73
                                        #   in Loop: Header=BB53_16 Depth=3
	jmp	.LBB53_21
.LBB53_21:                              # %for.inc74
                                        #   in Loop: Header=BB53_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_16
.LBB53_22:                              # %for.end76
                                        #   in Loop: Header=BB53_14 Depth=2
	jmp	.LBB53_23
.LBB53_23:                              # %for.inc77
                                        #   in Loop: Header=BB53_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_14
.LBB53_24:                              # %for.end79
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -8(%rbp)
.LBB53_25:                              # %for.cond80
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB53_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB53_25 Depth=2
	movl	$0, -4(%rbp)
.LBB53_27:                              # %for.cond83
                                        #   Parent Loop BB53_1 Depth=1
                                        #     Parent Loop BB53_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB53_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB53_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB53_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB53_31
.LBB53_30:                              # %if.else102
                                        #   in Loop: Header=BB53_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB53_31:                              # %if.end117
                                        #   in Loop: Header=BB53_27 Depth=3
	jmp	.LBB53_32
.LBB53_32:                              # %for.inc118
                                        #   in Loop: Header=BB53_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_27
.LBB53_33:                              # %for.end120
                                        #   in Loop: Header=BB53_25 Depth=2
	jmp	.LBB53_34
.LBB53_34:                              # %for.inc121
                                        #   in Loop: Header=BB53_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_25
.LBB53_35:                              # %for.end123
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -8(%rbp)
.LBB53_36:                              # %for.cond124
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB53_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB53_36 Depth=2
	movl	$0, -4(%rbp)
.LBB53_38:                              # %for.cond127
                                        #   Parent Loop BB53_1 Depth=1
                                        #     Parent Loop BB53_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB53_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB53_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB53_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB53_42
.LBB53_41:                              # %if.else146
                                        #   in Loop: Header=BB53_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB53_42:                              # %if.end161
                                        #   in Loop: Header=BB53_38 Depth=3
	jmp	.LBB53_43
.LBB53_43:                              # %for.inc162
                                        #   in Loop: Header=BB53_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_38
.LBB53_44:                              # %for.end164
                                        #   in Loop: Header=BB53_36 Depth=2
	jmp	.LBB53_45
.LBB53_45:                              # %for.inc165
                                        #   in Loop: Header=BB53_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_36
.LBB53_46:                              # %for.end167
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -4(%rbp)
.LBB53_47:                              # %for.cond168
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB53_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB53_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB53_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB53_51
.LBB53_50:                              # %if.else184
                                        #   in Loop: Header=BB53_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB53_51:                              # %if.end196
                                        #   in Loop: Header=BB53_47 Depth=2
	jmp	.LBB53_52
.LBB53_52:                              # %for.inc197
                                        #   in Loop: Header=BB53_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_47
.LBB53_53:                              # %for.end199
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -4(%rbp)
.LBB53_54:                              # %for.cond200
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB53_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB53_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB53_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB53_58
.LBB53_57:                              # %if.else216
                                        #   in Loop: Header=BB53_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB53_58:                              # %if.end228
                                        #   in Loop: Header=BB53_54 Depth=2
	jmp	.LBB53_59
.LBB53_59:                              # %for.inc229
                                        #   in Loop: Header=BB53_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_54
.LBB53_60:                              # %for.end231
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -4(%rbp)
.LBB53_61:                              # %for.cond232
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB53_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB53_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB53_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB53_65
.LBB53_64:                              # %if.else248
                                        #   in Loop: Header=BB53_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB53_65:                              # %if.end260
                                        #   in Loop: Header=BB53_61 Depth=2
	jmp	.LBB53_66
.LBB53_66:                              # %for.inc261
                                        #   in Loop: Header=BB53_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_61
.LBB53_67:                              # %for.end263
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -4(%rbp)
.LBB53_68:                              # %for.cond264
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB53_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB53_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB53_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB53_72
.LBB53_71:                              # %if.else280
                                        #   in Loop: Header=BB53_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB53_72:                              # %if.end292
                                        #   in Loop: Header=BB53_68 Depth=2
	jmp	.LBB53_73
.LBB53_73:                              # %for.inc293
                                        #   in Loop: Header=BB53_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_68
.LBB53_74:                              # %for.end295
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -4(%rbp)
.LBB53_75:                              # %for.cond296
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB53_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB53_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB53_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB53_79
.LBB53_78:                              # %if.else312
                                        #   in Loop: Header=BB53_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB53_79:                              # %if.end324
                                        #   in Loop: Header=BB53_75 Depth=2
	jmp	.LBB53_80
.LBB53_80:                              # %for.inc325
                                        #   in Loop: Header=BB53_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_75
.LBB53_81:                              # %for.end327
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -8(%rbp)
.LBB53_82:                              # %for.cond328
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB53_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB53_82 Depth=2
	movl	$0, -4(%rbp)
.LBB53_84:                              # %for.cond331
                                        #   Parent Loop BB53_1 Depth=1
                                        #     Parent Loop BB53_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB53_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB53_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB53_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB53_88
.LBB53_87:                              # %if.else350
                                        #   in Loop: Header=BB53_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB53_88:                              # %if.end365
                                        #   in Loop: Header=BB53_84 Depth=3
	jmp	.LBB53_89
.LBB53_89:                              # %for.inc366
                                        #   in Loop: Header=BB53_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_84
.LBB53_90:                              # %for.end368
                                        #   in Loop: Header=BB53_82 Depth=2
	jmp	.LBB53_91
.LBB53_91:                              # %for.inc369
                                        #   in Loop: Header=BB53_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_82
.LBB53_92:                              # %for.end371
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -8(%rbp)
.LBB53_93:                              # %for.cond372
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB53_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB53_93 Depth=2
	movl	$0, -4(%rbp)
.LBB53_95:                              # %for.cond375
                                        #   Parent Loop BB53_1 Depth=1
                                        #     Parent Loop BB53_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB53_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB53_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB53_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB53_99
.LBB53_98:                              # %if.else394
                                        #   in Loop: Header=BB53_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB53_99:                              # %if.end409
                                        #   in Loop: Header=BB53_95 Depth=3
	jmp	.LBB53_100
.LBB53_100:                             # %for.inc410
                                        #   in Loop: Header=BB53_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_95
.LBB53_101:                             # %for.end412
                                        #   in Loop: Header=BB53_93 Depth=2
	jmp	.LBB53_102
.LBB53_102:                             # %for.inc413
                                        #   in Loop: Header=BB53_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_93
.LBB53_103:                             # %for.end415
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -8(%rbp)
.LBB53_104:                             # %for.cond416
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB53_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB53_104 Depth=2
	movl	$0, -4(%rbp)
.LBB53_106:                             # %for.cond419
                                        #   Parent Loop BB53_1 Depth=1
                                        #     Parent Loop BB53_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB53_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB53_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB53_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB53_110
.LBB53_109:                             # %if.else438
                                        #   in Loop: Header=BB53_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB53_110:                             # %if.end453
                                        #   in Loop: Header=BB53_106 Depth=3
	jmp	.LBB53_111
.LBB53_111:                             # %for.inc454
                                        #   in Loop: Header=BB53_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_106
.LBB53_112:                             # %for.end456
                                        #   in Loop: Header=BB53_104 Depth=2
	jmp	.LBB53_113
.LBB53_113:                             # %for.inc457
                                        #   in Loop: Header=BB53_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_104
.LBB53_114:                             # %for.end459
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -8(%rbp)
.LBB53_115:                             # %for.cond460
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB53_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB53_115 Depth=2
	movl	$0, -4(%rbp)
.LBB53_117:                             # %for.cond463
                                        #   Parent Loop BB53_1 Depth=1
                                        #     Parent Loop BB53_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB53_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB53_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB53_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB53_121
.LBB53_120:                             # %if.else482
                                        #   in Loop: Header=BB53_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB53_121:                             # %if.end497
                                        #   in Loop: Header=BB53_117 Depth=3
	jmp	.LBB53_122
.LBB53_122:                             # %for.inc498
                                        #   in Loop: Header=BB53_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_117
.LBB53_123:                             # %for.end500
                                        #   in Loop: Header=BB53_115 Depth=2
	jmp	.LBB53_124
.LBB53_124:                             # %for.inc501
                                        #   in Loop: Header=BB53_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_115
.LBB53_125:                             # %for.end503
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -8(%rbp)
.LBB53_126:                             # %for.cond504
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB53_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB53_126 Depth=2
	movl	$0, -4(%rbp)
.LBB53_128:                             # %for.cond507
                                        #   Parent Loop BB53_1 Depth=1
                                        #     Parent Loop BB53_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB53_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB53_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB53_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB53_132
.LBB53_131:                             # %if.else526
                                        #   in Loop: Header=BB53_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB53_132:                             # %if.end541
                                        #   in Loop: Header=BB53_128 Depth=3
	jmp	.LBB53_133
.LBB53_133:                             # %for.inc542
                                        #   in Loop: Header=BB53_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_128
.LBB53_134:                             # %for.end544
                                        #   in Loop: Header=BB53_126 Depth=2
	jmp	.LBB53_135
.LBB53_135:                             # %for.inc545
                                        #   in Loop: Header=BB53_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_126
.LBB53_136:                             # %for.end547
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -8(%rbp)
.LBB53_137:                             # %for.cond548
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB53_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB53_137 Depth=2
	movl	$0, -4(%rbp)
.LBB53_139:                             # %for.cond551
                                        #   Parent Loop BB53_1 Depth=1
                                        #     Parent Loop BB53_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB53_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB53_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB53_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB53_143
.LBB53_142:                             # %if.else570
                                        #   in Loop: Header=BB53_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB53_143:                             # %if.end585
                                        #   in Loop: Header=BB53_139 Depth=3
	jmp	.LBB53_144
.LBB53_144:                             # %for.inc586
                                        #   in Loop: Header=BB53_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_139
.LBB53_145:                             # %for.end588
                                        #   in Loop: Header=BB53_137 Depth=2
	jmp	.LBB53_146
.LBB53_146:                             # %for.inc589
                                        #   in Loop: Header=BB53_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_137
.LBB53_147:                             # %for.end591
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -8(%rbp)
.LBB53_148:                             # %for.cond592
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB53_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB53_148 Depth=2
	movl	$0, -4(%rbp)
.LBB53_150:                             # %for.cond595
                                        #   Parent Loop BB53_1 Depth=1
                                        #     Parent Loop BB53_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB53_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB53_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB53_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB53_154
.LBB53_153:                             # %if.else614
                                        #   in Loop: Header=BB53_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB53_154:                             # %if.end629
                                        #   in Loop: Header=BB53_150 Depth=3
	jmp	.LBB53_155
.LBB53_155:                             # %for.inc630
                                        #   in Loop: Header=BB53_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_150
.LBB53_156:                             # %for.end632
                                        #   in Loop: Header=BB53_148 Depth=2
	jmp	.LBB53_157
.LBB53_157:                             # %for.inc633
                                        #   in Loop: Header=BB53_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_148
.LBB53_158:                             # %for.end635
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -8(%rbp)
.LBB53_159:                             # %for.cond636
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB53_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB53_159 Depth=2
	movl	$0, -4(%rbp)
.LBB53_161:                             # %for.cond639
                                        #   Parent Loop BB53_1 Depth=1
                                        #     Parent Loop BB53_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB53_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB53_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB53_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB53_165
.LBB53_164:                             # %if.else658
                                        #   in Loop: Header=BB53_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB53_165:                             # %if.end673
                                        #   in Loop: Header=BB53_161 Depth=3
	jmp	.LBB53_166
.LBB53_166:                             # %for.inc674
                                        #   in Loop: Header=BB53_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_161
.LBB53_167:                             # %for.end676
                                        #   in Loop: Header=BB53_159 Depth=2
	jmp	.LBB53_168
.LBB53_168:                             # %for.inc677
                                        #   in Loop: Header=BB53_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_159
.LBB53_169:                             # %for.end679
                                        #   in Loop: Header=BB53_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB53_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB53_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB53_171:                             # %if.end682
                                        #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_172
.LBB53_172:                             # %for.inc683
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_1
.LBB53_173:                             # %for.end685
	cmpl	$1287885788, -44(%rbp)  # imm = 0x4CC393DC
	jne	.LBB53_175
.LBB53_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_174
.Lfunc_end53:
	.size	GetCtxModelNumber.46, .Lfunc_end53-GetCtxModelNumber.46
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.47 # -- Begin function update_field_frame_contexts.47
	.p2align	4, 0x90
	.type	update_field_frame_contexts.47,@function
update_field_frame_contexts.47:         # @update_field_frame_contexts.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1313193472, -16(%rbp)  # imm = 0x4E45BE00
	movl	%edi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB54_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB54_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_4 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB54_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB54_2 Depth=1
	movl	$0, -4(%rbp)
.LBB54_4:                               # %for.cond1
                                        #   Parent Loop BB54_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB54_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB54_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB54_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_4
.LBB54_7:                               # %for.end
                                        #   in Loop: Header=BB54_2 Depth=1
	jmp	.LBB54_8
.LBB54_8:                               # %for.inc23
                                        #   in Loop: Header=BB54_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_2
.LBB54_9:                               # %for.end25
	jmp	.LBB54_19
.LBB54_10:                              # %if.else
	movl	$0, -8(%rbp)
.LBB54_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB54_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB54_11 Depth=1
	movl	$0, -4(%rbp)
.LBB54_13:                              # %for.cond29
                                        #   Parent Loop BB54_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB54_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB54_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_13
.LBB54_16:                              # %for.end56
                                        #   in Loop: Header=BB54_11 Depth=1
	jmp	.LBB54_17
.LBB54_17:                              # %for.inc57
                                        #   in Loop: Header=BB54_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_11
.LBB54_18:                              # %for.end59
	jmp	.LBB54_19
.LBB54_19:                              # %if.end
	cmpl	$1313193472, -16(%rbp)  # imm = 0x4E45BE00
	jne	.LBB54_21
.LBB54_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_20
.Lfunc_end54:
	.size	update_field_frame_contexts.47, .Lfunc_end54-update_field_frame_contexts.47
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.48    # -- Begin function SetCtxModelNumber.48
	.p2align	4, 0x90
	.type	SetCtxModelNumber.48,@function
SetCtxModelNumber.48:                   # @SetCtxModelNumber.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$531435034, -16(%rbp)   # imm = 0x1FAD0E1A
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB55_11
.LBB55_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB55_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB55_11
.LBB55_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB55_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB55_11
.LBB55_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB55_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB55_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB55_10
.LBB55_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB55_10:                              # %if.end38
	jmp	.LBB55_11
.LBB55_11:                              # %if.end39
	cmpl	$531435034, -16(%rbp)   # imm = 0x1FAD0E1A
	jne	.LBB55_13
.LBB55_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_12
.Lfunc_end55:
	.size	SetCtxModelNumber.48, .Lfunc_end55-SetCtxModelNumber.48
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.49
.LCPI56_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.49
	.p2align	4, 0x90
	.type	GetCtxModelNumber.49,@function
GetCtxModelNumber.49:                   # @GetCtxModelNumber.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI56_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$267333143, -48(%rbp)   # imm = 0xFEF2E17
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB56_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_3 Depth 2
                                        #       Child Loop BB56_5 Depth 3
                                        #     Child Loop BB56_14 Depth 2
                                        #       Child Loop BB56_16 Depth 3
                                        #     Child Loop BB56_25 Depth 2
                                        #       Child Loop BB56_27 Depth 3
                                        #     Child Loop BB56_36 Depth 2
                                        #       Child Loop BB56_38 Depth 3
                                        #     Child Loop BB56_47 Depth 2
                                        #     Child Loop BB56_54 Depth 2
                                        #     Child Loop BB56_61 Depth 2
                                        #     Child Loop BB56_68 Depth 2
                                        #     Child Loop BB56_75 Depth 2
                                        #     Child Loop BB56_82 Depth 2
                                        #       Child Loop BB56_84 Depth 3
                                        #     Child Loop BB56_93 Depth 2
                                        #       Child Loop BB56_95 Depth 3
                                        #     Child Loop BB56_104 Depth 2
                                        #       Child Loop BB56_106 Depth 3
                                        #     Child Loop BB56_115 Depth 2
                                        #       Child Loop BB56_117 Depth 3
                                        #     Child Loop BB56_126 Depth 2
                                        #       Child Loop BB56_128 Depth 3
                                        #     Child Loop BB56_137 Depth 2
                                        #       Child Loop BB56_139 Depth 3
                                        #     Child Loop BB56_148 Depth 2
                                        #       Child Loop BB56_150 Depth 3
                                        #     Child Loop BB56_159 Depth 2
                                        #       Child Loop BB56_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB56_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB56_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB56_3:                               # %for.cond2
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB56_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB56_3 Depth=2
	movl	$0, -4(%rbp)
.LBB56_5:                               # %for.cond5
                                        #   Parent Loop BB56_1 Depth=1
                                        #     Parent Loop BB56_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB56_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB56_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB56_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB56_9
.LBB56_8:                               # %if.else
                                        #   in Loop: Header=BB56_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB56_9:                               # %if.end
                                        #   in Loop: Header=BB56_5 Depth=3
	jmp	.LBB56_10
.LBB56_10:                              # %for.inc
                                        #   in Loop: Header=BB56_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_5
.LBB56_11:                              # %for.end
                                        #   in Loop: Header=BB56_3 Depth=2
	jmp	.LBB56_12
.LBB56_12:                              # %for.inc33
                                        #   in Loop: Header=BB56_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_3
.LBB56_13:                              # %for.end35
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -8(%rbp)
.LBB56_14:                              # %for.cond36
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB56_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB56_14 Depth=2
	movl	$0, -4(%rbp)
.LBB56_16:                              # %for.cond39
                                        #   Parent Loop BB56_1 Depth=1
                                        #     Parent Loop BB56_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB56_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB56_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB56_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB56_20
.LBB56_19:                              # %if.else58
                                        #   in Loop: Header=BB56_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB56_20:                              # %if.end73
                                        #   in Loop: Header=BB56_16 Depth=3
	jmp	.LBB56_21
.LBB56_21:                              # %for.inc74
                                        #   in Loop: Header=BB56_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_16
.LBB56_22:                              # %for.end76
                                        #   in Loop: Header=BB56_14 Depth=2
	jmp	.LBB56_23
.LBB56_23:                              # %for.inc77
                                        #   in Loop: Header=BB56_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_14
.LBB56_24:                              # %for.end79
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -8(%rbp)
.LBB56_25:                              # %for.cond80
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB56_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB56_25 Depth=2
	movl	$0, -4(%rbp)
.LBB56_27:                              # %for.cond83
                                        #   Parent Loop BB56_1 Depth=1
                                        #     Parent Loop BB56_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB56_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB56_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB56_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB56_31
.LBB56_30:                              # %if.else102
                                        #   in Loop: Header=BB56_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB56_31:                              # %if.end117
                                        #   in Loop: Header=BB56_27 Depth=3
	jmp	.LBB56_32
.LBB56_32:                              # %for.inc118
                                        #   in Loop: Header=BB56_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_27
.LBB56_33:                              # %for.end120
                                        #   in Loop: Header=BB56_25 Depth=2
	jmp	.LBB56_34
.LBB56_34:                              # %for.inc121
                                        #   in Loop: Header=BB56_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_25
.LBB56_35:                              # %for.end123
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -8(%rbp)
.LBB56_36:                              # %for.cond124
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB56_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB56_36 Depth=2
	movl	$0, -4(%rbp)
.LBB56_38:                              # %for.cond127
                                        #   Parent Loop BB56_1 Depth=1
                                        #     Parent Loop BB56_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB56_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB56_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB56_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB56_42
.LBB56_41:                              # %if.else146
                                        #   in Loop: Header=BB56_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB56_42:                              # %if.end161
                                        #   in Loop: Header=BB56_38 Depth=3
	jmp	.LBB56_43
.LBB56_43:                              # %for.inc162
                                        #   in Loop: Header=BB56_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_38
.LBB56_44:                              # %for.end164
                                        #   in Loop: Header=BB56_36 Depth=2
	jmp	.LBB56_45
.LBB56_45:                              # %for.inc165
                                        #   in Loop: Header=BB56_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_36
.LBB56_46:                              # %for.end167
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -4(%rbp)
.LBB56_47:                              # %for.cond168
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB56_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB56_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB56_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB56_51
.LBB56_50:                              # %if.else184
                                        #   in Loop: Header=BB56_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB56_51:                              # %if.end196
                                        #   in Loop: Header=BB56_47 Depth=2
	jmp	.LBB56_52
.LBB56_52:                              # %for.inc197
                                        #   in Loop: Header=BB56_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_47
.LBB56_53:                              # %for.end199
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -4(%rbp)
.LBB56_54:                              # %for.cond200
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB56_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB56_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB56_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB56_58
.LBB56_57:                              # %if.else216
                                        #   in Loop: Header=BB56_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB56_58:                              # %if.end228
                                        #   in Loop: Header=BB56_54 Depth=2
	jmp	.LBB56_59
.LBB56_59:                              # %for.inc229
                                        #   in Loop: Header=BB56_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_54
.LBB56_60:                              # %for.end231
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -4(%rbp)
.LBB56_61:                              # %for.cond232
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB56_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB56_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB56_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB56_65
.LBB56_64:                              # %if.else248
                                        #   in Loop: Header=BB56_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB56_65:                              # %if.end260
                                        #   in Loop: Header=BB56_61 Depth=2
	jmp	.LBB56_66
.LBB56_66:                              # %for.inc261
                                        #   in Loop: Header=BB56_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_61
.LBB56_67:                              # %for.end263
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -4(%rbp)
.LBB56_68:                              # %for.cond264
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB56_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB56_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB56_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB56_72
.LBB56_71:                              # %if.else280
                                        #   in Loop: Header=BB56_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB56_72:                              # %if.end292
                                        #   in Loop: Header=BB56_68 Depth=2
	jmp	.LBB56_73
.LBB56_73:                              # %for.inc293
                                        #   in Loop: Header=BB56_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_68
.LBB56_74:                              # %for.end295
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -4(%rbp)
.LBB56_75:                              # %for.cond296
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB56_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB56_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB56_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB56_79
.LBB56_78:                              # %if.else312
                                        #   in Loop: Header=BB56_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB56_79:                              # %if.end324
                                        #   in Loop: Header=BB56_75 Depth=2
	jmp	.LBB56_80
.LBB56_80:                              # %for.inc325
                                        #   in Loop: Header=BB56_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_75
.LBB56_81:                              # %for.end327
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -8(%rbp)
.LBB56_82:                              # %for.cond328
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB56_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB56_82 Depth=2
	movl	$0, -4(%rbp)
.LBB56_84:                              # %for.cond331
                                        #   Parent Loop BB56_1 Depth=1
                                        #     Parent Loop BB56_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB56_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB56_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB56_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB56_88
.LBB56_87:                              # %if.else350
                                        #   in Loop: Header=BB56_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB56_88:                              # %if.end365
                                        #   in Loop: Header=BB56_84 Depth=3
	jmp	.LBB56_89
.LBB56_89:                              # %for.inc366
                                        #   in Loop: Header=BB56_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_84
.LBB56_90:                              # %for.end368
                                        #   in Loop: Header=BB56_82 Depth=2
	jmp	.LBB56_91
.LBB56_91:                              # %for.inc369
                                        #   in Loop: Header=BB56_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_82
.LBB56_92:                              # %for.end371
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -8(%rbp)
.LBB56_93:                              # %for.cond372
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB56_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB56_93 Depth=2
	movl	$0, -4(%rbp)
.LBB56_95:                              # %for.cond375
                                        #   Parent Loop BB56_1 Depth=1
                                        #     Parent Loop BB56_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB56_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB56_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB56_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB56_99
.LBB56_98:                              # %if.else394
                                        #   in Loop: Header=BB56_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB56_99:                              # %if.end409
                                        #   in Loop: Header=BB56_95 Depth=3
	jmp	.LBB56_100
.LBB56_100:                             # %for.inc410
                                        #   in Loop: Header=BB56_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_95
.LBB56_101:                             # %for.end412
                                        #   in Loop: Header=BB56_93 Depth=2
	jmp	.LBB56_102
.LBB56_102:                             # %for.inc413
                                        #   in Loop: Header=BB56_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_93
.LBB56_103:                             # %for.end415
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -8(%rbp)
.LBB56_104:                             # %for.cond416
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB56_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB56_104 Depth=2
	movl	$0, -4(%rbp)
.LBB56_106:                             # %for.cond419
                                        #   Parent Loop BB56_1 Depth=1
                                        #     Parent Loop BB56_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB56_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB56_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB56_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB56_110
.LBB56_109:                             # %if.else438
                                        #   in Loop: Header=BB56_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB56_110:                             # %if.end453
                                        #   in Loop: Header=BB56_106 Depth=3
	jmp	.LBB56_111
.LBB56_111:                             # %for.inc454
                                        #   in Loop: Header=BB56_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_106
.LBB56_112:                             # %for.end456
                                        #   in Loop: Header=BB56_104 Depth=2
	jmp	.LBB56_113
.LBB56_113:                             # %for.inc457
                                        #   in Loop: Header=BB56_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_104
.LBB56_114:                             # %for.end459
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -8(%rbp)
.LBB56_115:                             # %for.cond460
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB56_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB56_115 Depth=2
	movl	$0, -4(%rbp)
.LBB56_117:                             # %for.cond463
                                        #   Parent Loop BB56_1 Depth=1
                                        #     Parent Loop BB56_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB56_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB56_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB56_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB56_121
.LBB56_120:                             # %if.else482
                                        #   in Loop: Header=BB56_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB56_121:                             # %if.end497
                                        #   in Loop: Header=BB56_117 Depth=3
	jmp	.LBB56_122
.LBB56_122:                             # %for.inc498
                                        #   in Loop: Header=BB56_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_117
.LBB56_123:                             # %for.end500
                                        #   in Loop: Header=BB56_115 Depth=2
	jmp	.LBB56_124
.LBB56_124:                             # %for.inc501
                                        #   in Loop: Header=BB56_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_115
.LBB56_125:                             # %for.end503
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -8(%rbp)
.LBB56_126:                             # %for.cond504
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB56_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB56_126 Depth=2
	movl	$0, -4(%rbp)
.LBB56_128:                             # %for.cond507
                                        #   Parent Loop BB56_1 Depth=1
                                        #     Parent Loop BB56_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB56_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB56_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB56_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB56_132
.LBB56_131:                             # %if.else526
                                        #   in Loop: Header=BB56_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB56_132:                             # %if.end541
                                        #   in Loop: Header=BB56_128 Depth=3
	jmp	.LBB56_133
.LBB56_133:                             # %for.inc542
                                        #   in Loop: Header=BB56_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_128
.LBB56_134:                             # %for.end544
                                        #   in Loop: Header=BB56_126 Depth=2
	jmp	.LBB56_135
.LBB56_135:                             # %for.inc545
                                        #   in Loop: Header=BB56_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_126
.LBB56_136:                             # %for.end547
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -8(%rbp)
.LBB56_137:                             # %for.cond548
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB56_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB56_137 Depth=2
	movl	$0, -4(%rbp)
.LBB56_139:                             # %for.cond551
                                        #   Parent Loop BB56_1 Depth=1
                                        #     Parent Loop BB56_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB56_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB56_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB56_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB56_143
.LBB56_142:                             # %if.else570
                                        #   in Loop: Header=BB56_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB56_143:                             # %if.end585
                                        #   in Loop: Header=BB56_139 Depth=3
	jmp	.LBB56_144
.LBB56_144:                             # %for.inc586
                                        #   in Loop: Header=BB56_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_139
.LBB56_145:                             # %for.end588
                                        #   in Loop: Header=BB56_137 Depth=2
	jmp	.LBB56_146
.LBB56_146:                             # %for.inc589
                                        #   in Loop: Header=BB56_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_137
.LBB56_147:                             # %for.end591
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -8(%rbp)
.LBB56_148:                             # %for.cond592
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB56_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB56_148 Depth=2
	movl	$0, -4(%rbp)
.LBB56_150:                             # %for.cond595
                                        #   Parent Loop BB56_1 Depth=1
                                        #     Parent Loop BB56_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB56_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB56_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB56_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB56_154
.LBB56_153:                             # %if.else614
                                        #   in Loop: Header=BB56_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB56_154:                             # %if.end629
                                        #   in Loop: Header=BB56_150 Depth=3
	jmp	.LBB56_155
.LBB56_155:                             # %for.inc630
                                        #   in Loop: Header=BB56_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_150
.LBB56_156:                             # %for.end632
                                        #   in Loop: Header=BB56_148 Depth=2
	jmp	.LBB56_157
.LBB56_157:                             # %for.inc633
                                        #   in Loop: Header=BB56_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_148
.LBB56_158:                             # %for.end635
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -8(%rbp)
.LBB56_159:                             # %for.cond636
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB56_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB56_159 Depth=2
	movl	$0, -4(%rbp)
.LBB56_161:                             # %for.cond639
                                        #   Parent Loop BB56_1 Depth=1
                                        #     Parent Loop BB56_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB56_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB56_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB56_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB56_165
.LBB56_164:                             # %if.else658
                                        #   in Loop: Header=BB56_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB56_165:                             # %if.end673
                                        #   in Loop: Header=BB56_161 Depth=3
	jmp	.LBB56_166
.LBB56_166:                             # %for.inc674
                                        #   in Loop: Header=BB56_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_161
.LBB56_167:                             # %for.end676
                                        #   in Loop: Header=BB56_159 Depth=2
	jmp	.LBB56_168
.LBB56_168:                             # %for.inc677
                                        #   in Loop: Header=BB56_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_159
.LBB56_169:                             # %for.end679
                                        #   in Loop: Header=BB56_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB56_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB56_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB56_171:                             # %if.end682
                                        #   in Loop: Header=BB56_1 Depth=1
	jmp	.LBB56_172
.LBB56_172:                             # %for.inc683
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_1
.LBB56_173:                             # %for.end685
	cmpl	$267333143, -48(%rbp)   # imm = 0xFEF2E17
	jne	.LBB56_175
.LBB56_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_174
.Lfunc_end56:
	.size	GetCtxModelNumber.49, .Lfunc_end56-GetCtxModelNumber.49
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.50 # -- Begin function update_field_frame_contexts.50
	.p2align	4, 0x90
	.type	update_field_frame_contexts.50,@function
update_field_frame_contexts.50:         # @update_field_frame_contexts.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$383409061, -12(%rbp)   # imm = 0x16DA5BA5
	movl	%edi, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB57_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB57_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_4 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB57_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB57_2 Depth=1
	movl	$0, -8(%rbp)
.LBB57_4:                               # %for.cond1
                                        #   Parent Loop BB57_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB57_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB57_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB57_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_4
.LBB57_7:                               # %for.end
                                        #   in Loop: Header=BB57_2 Depth=1
	jmp	.LBB57_8
.LBB57_8:                               # %for.inc23
                                        #   in Loop: Header=BB57_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_2
.LBB57_9:                               # %for.end25
	jmp	.LBB57_19
.LBB57_10:                              # %if.else
	movl	$0, -4(%rbp)
.LBB57_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_13 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB57_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB57_11 Depth=1
	movl	$0, -8(%rbp)
.LBB57_13:                              # %for.cond29
                                        #   Parent Loop BB57_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB57_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB57_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_13
.LBB57_16:                              # %for.end56
                                        #   in Loop: Header=BB57_11 Depth=1
	jmp	.LBB57_17
.LBB57_17:                              # %for.inc57
                                        #   in Loop: Header=BB57_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_11
.LBB57_18:                              # %for.end59
	jmp	.LBB57_19
.LBB57_19:                              # %if.end
	cmpl	$383409061, -12(%rbp)   # imm = 0x16DA5BA5
	jne	.LBB57_21
.LBB57_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_20
.Lfunc_end57:
	.size	update_field_frame_contexts.50, .Lfunc_end57-update_field_frame_contexts.50
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.51
.LCPI58_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.51
	.p2align	4, 0x90
	.type	GetCtxModelNumber.51,@function
GetCtxModelNumber.51:                   # @GetCtxModelNumber.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI58_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$2047018195, -48(%rbp)  # imm = 0x7A0304D3
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB58_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_3 Depth 2
                                        #       Child Loop BB58_5 Depth 3
                                        #     Child Loop BB58_14 Depth 2
                                        #       Child Loop BB58_16 Depth 3
                                        #     Child Loop BB58_25 Depth 2
                                        #       Child Loop BB58_27 Depth 3
                                        #     Child Loop BB58_36 Depth 2
                                        #       Child Loop BB58_38 Depth 3
                                        #     Child Loop BB58_47 Depth 2
                                        #     Child Loop BB58_54 Depth 2
                                        #     Child Loop BB58_61 Depth 2
                                        #     Child Loop BB58_68 Depth 2
                                        #     Child Loop BB58_75 Depth 2
                                        #     Child Loop BB58_82 Depth 2
                                        #       Child Loop BB58_84 Depth 3
                                        #     Child Loop BB58_93 Depth 2
                                        #       Child Loop BB58_95 Depth 3
                                        #     Child Loop BB58_104 Depth 2
                                        #       Child Loop BB58_106 Depth 3
                                        #     Child Loop BB58_115 Depth 2
                                        #       Child Loop BB58_117 Depth 3
                                        #     Child Loop BB58_126 Depth 2
                                        #       Child Loop BB58_128 Depth 3
                                        #     Child Loop BB58_137 Depth 2
                                        #       Child Loop BB58_139 Depth 3
                                        #     Child Loop BB58_148 Depth 2
                                        #       Child Loop BB58_150 Depth 3
                                        #     Child Loop BB58_159 Depth 2
                                        #       Child Loop BB58_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB58_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB58_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB58_3:                               # %for.cond2
                                        #   Parent Loop BB58_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB58_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB58_3 Depth=2
	movl	$0, -4(%rbp)
.LBB58_5:                               # %for.cond5
                                        #   Parent Loop BB58_1 Depth=1
                                        #     Parent Loop BB58_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB58_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB58_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB58_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB58_9
.LBB58_8:                               # %if.else
                                        #   in Loop: Header=BB58_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB58_9:                               # %if.end
                                        #   in Loop: Header=BB58_5 Depth=3
	jmp	.LBB58_10
.LBB58_10:                              # %for.inc
                                        #   in Loop: Header=BB58_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_5
.LBB58_11:                              # %for.end
                                        #   in Loop: Header=BB58_3 Depth=2
	jmp	.LBB58_12
.LBB58_12:                              # %for.inc33
                                        #   in Loop: Header=BB58_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_3
.LBB58_13:                              # %for.end35
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	$0, -8(%rbp)
.LBB58_14:                              # %for.cond36
                                        #   Parent Loop BB58_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB58_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB58_14 Depth=2
	movl	$0, -4(%rbp)
.LBB58_16:                              # %for.cond39
                                        #   Parent Loop BB58_1 Depth=1
                                        #     Parent Loop BB58_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB58_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB58_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB58_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB58_20
.LBB58_19:                              # %if.else58
                                        #   in Loop: Header=BB58_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB58_20:                              # %if.end73
                                        #   in Loop: Header=BB58_16 Depth=3
	jmp	.LBB58_21
.LBB58_21:                              # %for.inc74
                                        #   in Loop: Header=BB58_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_16
.LBB58_22:                              # %for.end76
                                        #   in Loop: Header=BB58_14 Depth=2
	jmp	.LBB58_23
.LBB58_23:                              # %for.inc77
                                        #   in Loop: Header=BB58_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_14
.LBB58_24:                              # %for.end79
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	$0, -8(%rbp)
.LBB58_25:                              # %for.cond80
                                        #   Parent Loop BB58_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB58_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB58_25 Depth=2
	movl	$0, -4(%rbp)
.LBB58_27:                              # %for.cond83
                                        #   Parent Loop BB58_1 Depth=1
                                        #     Parent Loop BB58_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB58_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB58_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB58_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB58_31
.LBB58_30:                              # %if.else102
                                        #   in Loop: Header=BB58_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB58_31:                              # %if.end117
                                        #   in Loop: Header=BB58_27 Depth=3
	jmp	.LBB58_32
.LBB58_32:                              # %for.inc118
                                        #   in Loop: Header=BB58_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_27
.LBB58_33:                              # %for.end120
                                        #   in Loop: Header=BB58_25 Depth=2
	jmp	.LBB58_34
.LBB58_34:                              # %for.inc121
                                        #   in Loop: Header=BB58_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_25
.LBB58_35:                              # %for.end123
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	$0, -8(%rbp)
.LBB58_36:                              # %for.cond124
                                        #   Parent Loop BB58_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB58_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB58_36 Depth=2
	movl	$0, -4(%rbp)
.LBB58_38:                              # %for.cond127
                                        #   Parent Loop BB58_1 Depth=1
                                        #     Parent Loop BB58_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB58_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB58_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB58_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB58_42
.LBB58_41:                              # %if.else146
                                        #   in Loop: Header=BB58_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB58_42:                              # %if.end161
                                        #   in Loop: Header=BB58_38 Depth=3
	jmp	.LBB58_43
.LBB58_43:                              # %for.inc162
                                        #   in Loop: Header=BB58_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_38
.LBB58_44:                              # %for.end164
                                        #   in Loop: Header=BB58_36 Depth=2
	jmp	.LBB58_45
.LBB58_45:                              # %for.inc165
                                        #   in Loop: Header=BB58_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_36
.LBB58_46:                              # %for.end167
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	$0, -4(%rbp)
.LBB58_47:                              # %for.cond168
                                        #   Parent Loop BB58_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB58_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB58_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB58_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB58_51
.LBB58_50:                              # %if.else184
                                        #   in Loop: Header=BB58_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB58_51:                              # %if.end196
                                        #   in Loop: Header=BB58_47 Depth=2
	jmp	.LBB58_52
.LBB58_52:                              # %for.inc197
                                        #   in Loop: Header=BB58_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_47
.LBB58_53:                              # %for.end199
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	$0, -4(%rbp)
.LBB58_54:                              # %for.cond200
                                        #   Parent Loop BB58_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB58_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB58_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB58_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB58_58
.LBB58_57:                              # %if.else216
                                        #   in Loop: Header=BB58_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB58_58:                              # %if.end228
                                        #   in Loop: Header=BB58_54 Depth=2
	jmp	.LBB58_59
.LBB58_59:                              # %for.inc229
                                        #   in Loop: Header=BB58_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_54
.LBB58_60:                              # %for.end231
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	$0, -4(%rbp)
.LBB58_61:                              # %for.cond232
                                        #   Parent Loop BB58_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB58_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB58_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB58_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB58_65
.LBB58_64:                              # %if.else248
                                        #   in Loop: Header=BB58_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB58_65:                              # %if.end260
                                        #   in Loop: Header=BB58_61 Depth=2
	jmp	.LBB58_66
.LBB58_66:                              # %for.inc261
                                        #   in Loop: Header=BB58_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_61
.LBB58_67:                              # %for.end263
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	$0, -4(%rbp)
.LBB58_68:                              # %for.cond264
                                        #   Parent Loop BB58_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB58_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB58_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB58_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB58_72
.LBB58_71:                              # %if.else280
                                        #   in Loop: Header=BB58_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB58_72:                              # %if.end292
                                        #   in Loop: Header=BB58_68 Depth=2
	jmp	.LBB58_73
.LBB58_73:                              # %for.inc293
                                        #   in Loop: Header=BB58_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_68
.LBB58_74:                              # %for.end295
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	$0, -4(%rbp)
.LBB58_75:                              # %for.cond296
                                        #   Parent Loop BB58_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB58_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB58_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB58_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB58_79
.LBB58_78:                              # %if.else312
                                        #   in Loop: Header=BB58_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB58_79:                              # %if.end324
                                        #   in Loop: Header=BB58_75 Depth=2
	jmp	.LBB58_80
.LBB58_80:                              # %for.inc325
                                        #   in Loop: Header=BB58_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_75
.LBB58_81:                              # %for.end327
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	$0, -8(%rbp)
.LBB58_82:                              # %for.cond328
                                        #   Parent Loop BB58_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB58_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB58_82 Depth=2
	movl	$0, -4(%rbp)
.LBB58_84:                              # %for.cond331
                                        #   Parent Loop BB58_1 Depth=1
                                        #     Parent Loop BB58_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB58_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB58_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB58_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB58_88
.LBB58_87:                              # %if.else350
                                        #   in Loop: Header=BB58_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB58_88:                              # %if.end365
                                        #   in Loop: Header=BB58_84 Depth=3
	jmp	.LBB58_89
.LBB58_89:                              # %for.inc366
                                        #   in Loop: Header=BB58_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_84
.LBB58_90:                              # %for.end368
                                        #   in Loop: Header=BB58_82 Depth=2
	jmp	.LBB58_91
.LBB58_91:                              # %for.inc369
                                        #   in Loop: Header=BB58_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_82
.LBB58_92:                              # %for.end371
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	$0, -8(%rbp)
.LBB58_93:                              # %for.cond372
                                        #   Parent Loop BB58_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB58_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB58_93 Depth=2
	movl	$0, -4(%rbp)
.LBB58_95:                              # %for.cond375
                                        #   Parent Loop BB58_1 Depth=1
                                        #     Parent Loop BB58_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB58_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB58_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB58_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB58_99
.LBB58_98:                              # %if.else394
                                        #   in Loop: Header=BB58_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB58_99:                              # %if.end409
                                        #   in Loop: Header=BB58_95 Depth=3
	jmp	.LBB58_100
.LBB58_100:                             # %for.inc410
                                        #   in Loop: Header=BB58_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_95
.LBB58_101:                             # %for.end412
                                        #   in Loop: Header=BB58_93 Depth=2
	jmp	.LBB58_102
.LBB58_102:                             # %for.inc413
                                        #   in Loop: Header=BB58_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_93
.LBB58_103:                             # %for.end415
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	$0, -8(%rbp)
.LBB58_104:                             # %for.cond416
                                        #   Parent Loop BB58_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB58_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB58_104 Depth=2
	movl	$0, -4(%rbp)
.LBB58_106:                             # %for.cond419
                                        #   Parent Loop BB58_1 Depth=1
                                        #     Parent Loop BB58_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB58_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB58_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB58_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB58_110
.LBB58_109:                             # %if.else438
                                        #   in Loop: Header=BB58_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB58_110:                             # %if.end453
                                        #   in Loop: Header=BB58_106 Depth=3
	jmp	.LBB58_111
.LBB58_111:                             # %for.inc454
                                        #   in Loop: Header=BB58_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_106
.LBB58_112:                             # %for.end456
                                        #   in Loop: Header=BB58_104 Depth=2
	jmp	.LBB58_113
.LBB58_113:                             # %for.inc457
                                        #   in Loop: Header=BB58_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_104
.LBB58_114:                             # %for.end459
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	$0, -8(%rbp)
.LBB58_115:                             # %for.cond460
                                        #   Parent Loop BB58_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB58_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB58_115 Depth=2
	movl	$0, -4(%rbp)
.LBB58_117:                             # %for.cond463
                                        #   Parent Loop BB58_1 Depth=1
                                        #     Parent Loop BB58_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB58_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB58_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB58_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB58_121
.LBB58_120:                             # %if.else482
                                        #   in Loop: Header=BB58_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB58_121:                             # %if.end497
                                        #   in Loop: Header=BB58_117 Depth=3
	jmp	.LBB58_122
.LBB58_122:                             # %for.inc498
                                        #   in Loop: Header=BB58_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_117
.LBB58_123:                             # %for.end500
                                        #   in Loop: Header=BB58_115 Depth=2
	jmp	.LBB58_124
.LBB58_124:                             # %for.inc501
                                        #   in Loop: Header=BB58_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_115
.LBB58_125:                             # %for.end503
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	$0, -8(%rbp)
.LBB58_126:                             # %for.cond504
                                        #   Parent Loop BB58_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB58_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB58_126 Depth=2
	movl	$0, -4(%rbp)
.LBB58_128:                             # %for.cond507
                                        #   Parent Loop BB58_1 Depth=1
                                        #     Parent Loop BB58_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB58_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB58_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB58_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB58_132
.LBB58_131:                             # %if.else526
                                        #   in Loop: Header=BB58_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB58_132:                             # %if.end541
                                        #   in Loop: Header=BB58_128 Depth=3
	jmp	.LBB58_133
.LBB58_133:                             # %for.inc542
                                        #   in Loop: Header=BB58_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_128
.LBB58_134:                             # %for.end544
                                        #   in Loop: Header=BB58_126 Depth=2
	jmp	.LBB58_135
.LBB58_135:                             # %for.inc545
                                        #   in Loop: Header=BB58_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_126
.LBB58_136:                             # %for.end547
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	$0, -8(%rbp)
.LBB58_137:                             # %for.cond548
                                        #   Parent Loop BB58_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB58_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB58_137 Depth=2
	movl	$0, -4(%rbp)
.LBB58_139:                             # %for.cond551
                                        #   Parent Loop BB58_1 Depth=1
                                        #     Parent Loop BB58_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB58_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB58_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB58_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB58_143
.LBB58_142:                             # %if.else570
                                        #   in Loop: Header=BB58_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB58_143:                             # %if.end585
                                        #   in Loop: Header=BB58_139 Depth=3
	jmp	.LBB58_144
.LBB58_144:                             # %for.inc586
                                        #   in Loop: Header=BB58_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_139
.LBB58_145:                             # %for.end588
                                        #   in Loop: Header=BB58_137 Depth=2
	jmp	.LBB58_146
.LBB58_146:                             # %for.inc589
                                        #   in Loop: Header=BB58_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_137
.LBB58_147:                             # %for.end591
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	$0, -8(%rbp)
.LBB58_148:                             # %for.cond592
                                        #   Parent Loop BB58_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB58_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB58_148 Depth=2
	movl	$0, -4(%rbp)
.LBB58_150:                             # %for.cond595
                                        #   Parent Loop BB58_1 Depth=1
                                        #     Parent Loop BB58_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB58_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB58_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB58_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB58_154
.LBB58_153:                             # %if.else614
                                        #   in Loop: Header=BB58_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB58_154:                             # %if.end629
                                        #   in Loop: Header=BB58_150 Depth=3
	jmp	.LBB58_155
.LBB58_155:                             # %for.inc630
                                        #   in Loop: Header=BB58_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_150
.LBB58_156:                             # %for.end632
                                        #   in Loop: Header=BB58_148 Depth=2
	jmp	.LBB58_157
.LBB58_157:                             # %for.inc633
                                        #   in Loop: Header=BB58_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_148
.LBB58_158:                             # %for.end635
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	$0, -8(%rbp)
.LBB58_159:                             # %for.cond636
                                        #   Parent Loop BB58_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB58_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB58_159 Depth=2
	movl	$0, -4(%rbp)
.LBB58_161:                             # %for.cond639
                                        #   Parent Loop BB58_1 Depth=1
                                        #     Parent Loop BB58_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB58_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB58_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB58_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB58_165
.LBB58_164:                             # %if.else658
                                        #   in Loop: Header=BB58_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB58_165:                             # %if.end673
                                        #   in Loop: Header=BB58_161 Depth=3
	jmp	.LBB58_166
.LBB58_166:                             # %for.inc674
                                        #   in Loop: Header=BB58_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_161
.LBB58_167:                             # %for.end676
                                        #   in Loop: Header=BB58_159 Depth=2
	jmp	.LBB58_168
.LBB58_168:                             # %for.inc677
                                        #   in Loop: Header=BB58_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_159
.LBB58_169:                             # %for.end679
                                        #   in Loop: Header=BB58_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB58_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB58_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB58_171:                             # %if.end682
                                        #   in Loop: Header=BB58_1 Depth=1
	jmp	.LBB58_172
.LBB58_172:                             # %for.inc683
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_1
.LBB58_173:                             # %for.end685
	cmpl	$2047018195, -48(%rbp)  # imm = 0x7A0304D3
	jne	.LBB58_175
.LBB58_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_174
.Lfunc_end58:
	.size	GetCtxModelNumber.51, .Lfunc_end58-GetCtxModelNumber.51
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.52
.LCPI59_0:
	.quad	4611686018427387904     # double 2
.LCPI59_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.52
	.p2align	4, 0x90
	.type	create_context_memory.52,@function
create_context_memory.52:               # @create_context_memory.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1395577810, -20(%rbp)  # imm = 0x532ED3D2
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB59_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB59_3
.LBB59_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB59_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB59_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB59_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB59_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB59_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB59_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB59_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB59_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB59_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB59_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB59_11:                              # %if.end10
                                        #   in Loop: Header=BB59_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB59_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB59_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB59_13:                              # %if.end16
                                        #   in Loop: Header=BB59_8 Depth=1
	movl	$0, -8(%rbp)
.LBB59_14:                              # %for.cond17
                                        #   Parent Loop BB59_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB59_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB59_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB59_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB59_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB59_17:                              # %if.end28
                                        #   in Loop: Header=BB59_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB59_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB59_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB59_19:                              # %if.end39
                                        #   in Loop: Header=BB59_14 Depth=2
	jmp	.LBB59_20
.LBB59_20:                              # %for.inc
                                        #   in Loop: Header=BB59_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_14
.LBB59_21:                              # %for.end
                                        #   in Loop: Header=BB59_8 Depth=1
	jmp	.LBB59_22
.LBB59_22:                              # %for.inc40
                                        #   in Loop: Header=BB59_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_8
.LBB59_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB59_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_26 Depth 2
                                        #       Child Loop BB59_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB59_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB59_24 Depth=1
	movl	$0, -8(%rbp)
.LBB59_26:                              # %for.cond47
                                        #   Parent Loop BB59_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB59_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB59_26 Depth=2
	movl	$0, -12(%rbp)
.LBB59_28:                              # %for.cond51
                                        #   Parent Loop BB59_24 Depth=1
                                        #     Parent Loop BB59_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB59_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB59_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB59_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_28
.LBB59_31:                              # %for.end63
                                        #   in Loop: Header=BB59_26 Depth=2
	jmp	.LBB59_32
.LBB59_32:                              # %for.inc64
                                        #   in Loop: Header=BB59_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_26
.LBB59_33:                              # %for.end66
                                        #   in Loop: Header=BB59_24 Depth=1
	jmp	.LBB59_34
.LBB59_34:                              # %for.inc67
                                        #   in Loop: Header=BB59_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_24
.LBB59_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB59_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB59_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB59_36 Depth=1
	vmovsd	.LCPI59_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI59_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI59_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB59_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_36
.LBB59_39:                              # %for.end98
	cmpl	$1395577810, -20(%rbp)  # imm = 0x532ED3D2
	jne	.LBB59_41
.LBB59_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_40
.Lfunc_end59:
	.size	create_context_memory.52, .Lfunc_end59-create_context_memory.52
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.53
.LCPI60_0:
	.quad	4607182418800017408     # double 1
.LCPI60_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI60_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI60_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.53
	.p2align	4, 0x90
	.type	XRate.53,@function
XRate.53:                               # @XRate.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$978766191, -32(%rbp)   # imm = 0x3A56C96F
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB60_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB60_3
.LBB60_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB60_3:                               # %cond.end
	vmovsd	.LCPI60_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI60_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI60_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI60_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB60_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI60_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB60_6
.LBB60_5:                               # %cond.false6
	vmovsd	.LCPI60_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI60_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI60_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB60_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB60_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB60_9
.LBB60_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB60_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB60_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB60_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB60_13
.LBB60_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB60_13:                              # %cond.end26
	jmp	.LBB60_15
.LBB60_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB60_15
.LBB60_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB60_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB60_18
.LBB60_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB60_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$978766191, -32(%rbp)   # imm = 0x3A56C96F
	jne	.LBB60_20
.LBB60_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB60_19
.Lfunc_end60:
	.size	XRate.53, .Lfunc_end60-XRate.53
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.54        # -- Begin function init_contexts.54
	.p2align	4, 0x90
	.type	init_contexts.54,@function
init_contexts.54:                       # @init_contexts.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$349093956, -28(%rbp)   # imm = 0x14CEC044
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB61_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB61_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB61_1 Depth=1
	movl	$0, -4(%rbp)
.LBB61_3:                               # %for.cond2
                                        #   Parent Loop BB61_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB61_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB61_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB61_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB61_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB61_7
.LBB61_6:                               # %if.else
                                        #   in Loop: Header=BB61_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB61_7:                               # %if.end
                                        #   in Loop: Header=BB61_3 Depth=2
	jmp	.LBB61_8
.LBB61_8:                               # %for.inc
                                        #   in Loop: Header=BB61_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_3
.LBB61_9:                               # %for.end
                                        #   in Loop: Header=BB61_1 Depth=1
	jmp	.LBB61_10
.LBB61_10:                              # %for.inc28
                                        #   in Loop: Header=BB61_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_1
.LBB61_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB61_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB61_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB61_12 Depth=1
	movl	$0, -4(%rbp)
.LBB61_14:                              # %for.cond34
                                        #   Parent Loop BB61_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB61_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB61_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB61_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB61_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB61_18
.LBB61_17:                              # %if.else52
                                        #   in Loop: Header=BB61_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB61_18:                              # %if.end66
                                        #   in Loop: Header=BB61_14 Depth=2
	jmp	.LBB61_19
.LBB61_19:                              # %for.inc67
                                        #   in Loop: Header=BB61_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_14
.LBB61_20:                              # %for.end69
                                        #   in Loop: Header=BB61_12 Depth=1
	jmp	.LBB61_21
.LBB61_21:                              # %for.inc70
                                        #   in Loop: Header=BB61_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_12
.LBB61_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB61_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB61_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB61_23 Depth=1
	movl	$0, -4(%rbp)
.LBB61_25:                              # %for.cond76
                                        #   Parent Loop BB61_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB61_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB61_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB61_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB61_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB61_29
.LBB61_28:                              # %if.else94
                                        #   in Loop: Header=BB61_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB61_29:                              # %if.end108
                                        #   in Loop: Header=BB61_25 Depth=2
	jmp	.LBB61_30
.LBB61_30:                              # %for.inc109
                                        #   in Loop: Header=BB61_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_25
.LBB61_31:                              # %for.end111
                                        #   in Loop: Header=BB61_23 Depth=1
	jmp	.LBB61_32
.LBB61_32:                              # %for.inc112
                                        #   in Loop: Header=BB61_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_23
.LBB61_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB61_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB61_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB61_34 Depth=1
	movl	$0, -4(%rbp)
.LBB61_36:                              # %for.cond118
                                        #   Parent Loop BB61_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB61_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB61_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB61_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB61_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB61_40
.LBB61_39:                              # %if.else136
                                        #   in Loop: Header=BB61_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB61_40:                              # %if.end150
                                        #   in Loop: Header=BB61_36 Depth=2
	jmp	.LBB61_41
.LBB61_41:                              # %for.inc151
                                        #   in Loop: Header=BB61_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_36
.LBB61_42:                              # %for.end153
                                        #   in Loop: Header=BB61_34 Depth=1
	jmp	.LBB61_43
.LBB61_43:                              # %for.inc154
                                        #   in Loop: Header=BB61_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_34
.LBB61_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB61_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB61_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB61_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB61_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB61_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB61_49
.LBB61_48:                              # %if.else172
                                        #   in Loop: Header=BB61_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB61_49:                              # %if.end183
                                        #   in Loop: Header=BB61_45 Depth=1
	jmp	.LBB61_50
.LBB61_50:                              # %for.inc184
                                        #   in Loop: Header=BB61_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_45
.LBB61_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB61_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB61_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB61_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB61_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB61_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB61_56
.LBB61_55:                              # %if.else202
                                        #   in Loop: Header=BB61_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB61_56:                              # %if.end213
                                        #   in Loop: Header=BB61_52 Depth=1
	jmp	.LBB61_57
.LBB61_57:                              # %for.inc214
                                        #   in Loop: Header=BB61_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_52
.LBB61_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB61_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB61_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB61_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB61_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB61_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB61_63
.LBB61_62:                              # %if.else232
                                        #   in Loop: Header=BB61_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB61_63:                              # %if.end243
                                        #   in Loop: Header=BB61_59 Depth=1
	jmp	.LBB61_64
.LBB61_64:                              # %for.inc244
                                        #   in Loop: Header=BB61_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_59
.LBB61_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB61_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB61_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB61_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB61_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB61_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB61_70
.LBB61_69:                              # %if.else262
                                        #   in Loop: Header=BB61_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB61_70:                              # %if.end273
                                        #   in Loop: Header=BB61_66 Depth=1
	jmp	.LBB61_71
.LBB61_71:                              # %for.inc274
                                        #   in Loop: Header=BB61_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_66
.LBB61_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB61_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB61_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB61_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB61_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB61_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB61_77
.LBB61_76:                              # %if.else292
                                        #   in Loop: Header=BB61_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB61_77:                              # %if.end303
                                        #   in Loop: Header=BB61_73 Depth=1
	jmp	.LBB61_78
.LBB61_78:                              # %for.inc304
                                        #   in Loop: Header=BB61_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_73
.LBB61_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB61_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB61_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB61_80 Depth=1
	movl	$0, -4(%rbp)
.LBB61_82:                              # %for.cond310
                                        #   Parent Loop BB61_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB61_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB61_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB61_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB61_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB61_86
.LBB61_85:                              # %if.else328
                                        #   in Loop: Header=BB61_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB61_86:                              # %if.end342
                                        #   in Loop: Header=BB61_82 Depth=2
	jmp	.LBB61_87
.LBB61_87:                              # %for.inc343
                                        #   in Loop: Header=BB61_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_82
.LBB61_88:                              # %for.end345
                                        #   in Loop: Header=BB61_80 Depth=1
	jmp	.LBB61_89
.LBB61_89:                              # %for.inc346
                                        #   in Loop: Header=BB61_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_80
.LBB61_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB61_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB61_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB61_91 Depth=1
	movl	$0, -4(%rbp)
.LBB61_93:                              # %for.cond352
                                        #   Parent Loop BB61_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB61_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB61_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB61_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB61_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB61_97
.LBB61_96:                              # %if.else370
                                        #   in Loop: Header=BB61_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB61_97:                              # %if.end384
                                        #   in Loop: Header=BB61_93 Depth=2
	jmp	.LBB61_98
.LBB61_98:                              # %for.inc385
                                        #   in Loop: Header=BB61_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_93
.LBB61_99:                              # %for.end387
                                        #   in Loop: Header=BB61_91 Depth=1
	jmp	.LBB61_100
.LBB61_100:                             # %for.inc388
                                        #   in Loop: Header=BB61_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_91
.LBB61_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB61_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB61_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB61_102 Depth=1
	movl	$0, -4(%rbp)
.LBB61_104:                             # %for.cond394
                                        #   Parent Loop BB61_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB61_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB61_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB61_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB61_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB61_108
.LBB61_107:                             # %if.else412
                                        #   in Loop: Header=BB61_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB61_108:                             # %if.end426
                                        #   in Loop: Header=BB61_104 Depth=2
	jmp	.LBB61_109
.LBB61_109:                             # %for.inc427
                                        #   in Loop: Header=BB61_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_104
.LBB61_110:                             # %for.end429
                                        #   in Loop: Header=BB61_102 Depth=1
	jmp	.LBB61_111
.LBB61_111:                             # %for.inc430
                                        #   in Loop: Header=BB61_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_102
.LBB61_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB61_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB61_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB61_113 Depth=1
	movl	$0, -4(%rbp)
.LBB61_115:                             # %for.cond436
                                        #   Parent Loop BB61_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB61_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB61_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB61_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB61_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB61_119
.LBB61_118:                             # %if.else454
                                        #   in Loop: Header=BB61_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB61_119:                             # %if.end468
                                        #   in Loop: Header=BB61_115 Depth=2
	jmp	.LBB61_120
.LBB61_120:                             # %for.inc469
                                        #   in Loop: Header=BB61_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_115
.LBB61_121:                             # %for.end471
                                        #   in Loop: Header=BB61_113 Depth=1
	jmp	.LBB61_122
.LBB61_122:                             # %for.inc472
                                        #   in Loop: Header=BB61_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_113
.LBB61_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB61_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB61_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB61_124 Depth=1
	movl	$0, -4(%rbp)
.LBB61_126:                             # %for.cond478
                                        #   Parent Loop BB61_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB61_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB61_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB61_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB61_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB61_130
.LBB61_129:                             # %if.else496
                                        #   in Loop: Header=BB61_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB61_130:                             # %if.end510
                                        #   in Loop: Header=BB61_126 Depth=2
	jmp	.LBB61_131
.LBB61_131:                             # %for.inc511
                                        #   in Loop: Header=BB61_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_126
.LBB61_132:                             # %for.end513
                                        #   in Loop: Header=BB61_124 Depth=1
	jmp	.LBB61_133
.LBB61_133:                             # %for.inc514
                                        #   in Loop: Header=BB61_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_124
.LBB61_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB61_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB61_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB61_135 Depth=1
	movl	$0, -4(%rbp)
.LBB61_137:                             # %for.cond520
                                        #   Parent Loop BB61_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB61_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB61_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB61_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB61_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB61_141
.LBB61_140:                             # %if.else538
                                        #   in Loop: Header=BB61_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB61_141:                             # %if.end552
                                        #   in Loop: Header=BB61_137 Depth=2
	jmp	.LBB61_142
.LBB61_142:                             # %for.inc553
                                        #   in Loop: Header=BB61_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_137
.LBB61_143:                             # %for.end555
                                        #   in Loop: Header=BB61_135 Depth=1
	jmp	.LBB61_144
.LBB61_144:                             # %for.inc556
                                        #   in Loop: Header=BB61_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_135
.LBB61_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB61_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB61_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB61_146 Depth=1
	movl	$0, -4(%rbp)
.LBB61_148:                             # %for.cond562
                                        #   Parent Loop BB61_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB61_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB61_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB61_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB61_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB61_152
.LBB61_151:                             # %if.else580
                                        #   in Loop: Header=BB61_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB61_152:                             # %if.end594
                                        #   in Loop: Header=BB61_148 Depth=2
	jmp	.LBB61_153
.LBB61_153:                             # %for.inc595
                                        #   in Loop: Header=BB61_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_148
.LBB61_154:                             # %for.end597
                                        #   in Loop: Header=BB61_146 Depth=1
	jmp	.LBB61_155
.LBB61_155:                             # %for.inc598
                                        #   in Loop: Header=BB61_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_146
.LBB61_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB61_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB61_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB61_157 Depth=1
	movl	$0, -4(%rbp)
.LBB61_159:                             # %for.cond604
                                        #   Parent Loop BB61_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB61_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB61_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB61_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB61_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB61_163
.LBB61_162:                             # %if.else622
                                        #   in Loop: Header=BB61_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB61_163:                             # %if.end636
                                        #   in Loop: Header=BB61_159 Depth=2
	jmp	.LBB61_164
.LBB61_164:                             # %for.inc637
                                        #   in Loop: Header=BB61_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_159
.LBB61_165:                             # %for.end639
                                        #   in Loop: Header=BB61_157 Depth=1
	jmp	.LBB61_166
.LBB61_166:                             # %for.inc640
                                        #   in Loop: Header=BB61_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_157
.LBB61_167:                             # %for.end642
	cmpl	$349093956, -28(%rbp)   # imm = 0x14CEC044
	jne	.LBB61_169
.LBB61_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_168
.Lfunc_end61:
	.size	init_contexts.54, .Lfunc_end61-init_contexts.54
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.55        # -- Begin function init_contexts.55
	.p2align	4, 0x90
	.type	init_contexts.55,@function
init_contexts.55:                       # @init_contexts.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1995680363, -28(%rbp)  # imm = 0x76F3AA6B
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB62_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB62_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	$0, -4(%rbp)
.LBB62_3:                               # %for.cond2
                                        #   Parent Loop BB62_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB62_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB62_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB62_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB62_7
.LBB62_6:                               # %if.else
                                        #   in Loop: Header=BB62_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB62_7:                               # %if.end
                                        #   in Loop: Header=BB62_3 Depth=2
	jmp	.LBB62_8
.LBB62_8:                               # %for.inc
                                        #   in Loop: Header=BB62_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_3
.LBB62_9:                               # %for.end
                                        #   in Loop: Header=BB62_1 Depth=1
	jmp	.LBB62_10
.LBB62_10:                              # %for.inc28
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_1
.LBB62_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB62_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB62_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB62_12 Depth=1
	movl	$0, -4(%rbp)
.LBB62_14:                              # %for.cond34
                                        #   Parent Loop BB62_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB62_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB62_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB62_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB62_18
.LBB62_17:                              # %if.else52
                                        #   in Loop: Header=BB62_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB62_18:                              # %if.end66
                                        #   in Loop: Header=BB62_14 Depth=2
	jmp	.LBB62_19
.LBB62_19:                              # %for.inc67
                                        #   in Loop: Header=BB62_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_14
.LBB62_20:                              # %for.end69
                                        #   in Loop: Header=BB62_12 Depth=1
	jmp	.LBB62_21
.LBB62_21:                              # %for.inc70
                                        #   in Loop: Header=BB62_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_12
.LBB62_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB62_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB62_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB62_23 Depth=1
	movl	$0, -4(%rbp)
.LBB62_25:                              # %for.cond76
                                        #   Parent Loop BB62_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB62_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB62_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB62_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB62_29
.LBB62_28:                              # %if.else94
                                        #   in Loop: Header=BB62_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB62_29:                              # %if.end108
                                        #   in Loop: Header=BB62_25 Depth=2
	jmp	.LBB62_30
.LBB62_30:                              # %for.inc109
                                        #   in Loop: Header=BB62_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_25
.LBB62_31:                              # %for.end111
                                        #   in Loop: Header=BB62_23 Depth=1
	jmp	.LBB62_32
.LBB62_32:                              # %for.inc112
                                        #   in Loop: Header=BB62_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_23
.LBB62_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB62_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB62_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB62_34 Depth=1
	movl	$0, -4(%rbp)
.LBB62_36:                              # %for.cond118
                                        #   Parent Loop BB62_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB62_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB62_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB62_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB62_40
.LBB62_39:                              # %if.else136
                                        #   in Loop: Header=BB62_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB62_40:                              # %if.end150
                                        #   in Loop: Header=BB62_36 Depth=2
	jmp	.LBB62_41
.LBB62_41:                              # %for.inc151
                                        #   in Loop: Header=BB62_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_36
.LBB62_42:                              # %for.end153
                                        #   in Loop: Header=BB62_34 Depth=1
	jmp	.LBB62_43
.LBB62_43:                              # %for.inc154
                                        #   in Loop: Header=BB62_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_34
.LBB62_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB62_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB62_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB62_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB62_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB62_49
.LBB62_48:                              # %if.else172
                                        #   in Loop: Header=BB62_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB62_49:                              # %if.end183
                                        #   in Loop: Header=BB62_45 Depth=1
	jmp	.LBB62_50
.LBB62_50:                              # %for.inc184
                                        #   in Loop: Header=BB62_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_45
.LBB62_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB62_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB62_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB62_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB62_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB62_56
.LBB62_55:                              # %if.else202
                                        #   in Loop: Header=BB62_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB62_56:                              # %if.end213
                                        #   in Loop: Header=BB62_52 Depth=1
	jmp	.LBB62_57
.LBB62_57:                              # %for.inc214
                                        #   in Loop: Header=BB62_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_52
.LBB62_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB62_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB62_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB62_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB62_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB62_63
.LBB62_62:                              # %if.else232
                                        #   in Loop: Header=BB62_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB62_63:                              # %if.end243
                                        #   in Loop: Header=BB62_59 Depth=1
	jmp	.LBB62_64
.LBB62_64:                              # %for.inc244
                                        #   in Loop: Header=BB62_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_59
.LBB62_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB62_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB62_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB62_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB62_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB62_70
.LBB62_69:                              # %if.else262
                                        #   in Loop: Header=BB62_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB62_70:                              # %if.end273
                                        #   in Loop: Header=BB62_66 Depth=1
	jmp	.LBB62_71
.LBB62_71:                              # %for.inc274
                                        #   in Loop: Header=BB62_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_66
.LBB62_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB62_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB62_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB62_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB62_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB62_77
.LBB62_76:                              # %if.else292
                                        #   in Loop: Header=BB62_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB62_77:                              # %if.end303
                                        #   in Loop: Header=BB62_73 Depth=1
	jmp	.LBB62_78
.LBB62_78:                              # %for.inc304
                                        #   in Loop: Header=BB62_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_73
.LBB62_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB62_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB62_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB62_80 Depth=1
	movl	$0, -4(%rbp)
.LBB62_82:                              # %for.cond310
                                        #   Parent Loop BB62_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB62_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB62_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB62_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB62_86
.LBB62_85:                              # %if.else328
                                        #   in Loop: Header=BB62_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB62_86:                              # %if.end342
                                        #   in Loop: Header=BB62_82 Depth=2
	jmp	.LBB62_87
.LBB62_87:                              # %for.inc343
                                        #   in Loop: Header=BB62_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_82
.LBB62_88:                              # %for.end345
                                        #   in Loop: Header=BB62_80 Depth=1
	jmp	.LBB62_89
.LBB62_89:                              # %for.inc346
                                        #   in Loop: Header=BB62_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_80
.LBB62_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB62_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB62_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB62_91 Depth=1
	movl	$0, -4(%rbp)
.LBB62_93:                              # %for.cond352
                                        #   Parent Loop BB62_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB62_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB62_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB62_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB62_97
.LBB62_96:                              # %if.else370
                                        #   in Loop: Header=BB62_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB62_97:                              # %if.end384
                                        #   in Loop: Header=BB62_93 Depth=2
	jmp	.LBB62_98
.LBB62_98:                              # %for.inc385
                                        #   in Loop: Header=BB62_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_93
.LBB62_99:                              # %for.end387
                                        #   in Loop: Header=BB62_91 Depth=1
	jmp	.LBB62_100
.LBB62_100:                             # %for.inc388
                                        #   in Loop: Header=BB62_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_91
.LBB62_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB62_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB62_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB62_102 Depth=1
	movl	$0, -4(%rbp)
.LBB62_104:                             # %for.cond394
                                        #   Parent Loop BB62_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB62_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB62_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB62_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB62_108
.LBB62_107:                             # %if.else412
                                        #   in Loop: Header=BB62_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB62_108:                             # %if.end426
                                        #   in Loop: Header=BB62_104 Depth=2
	jmp	.LBB62_109
.LBB62_109:                             # %for.inc427
                                        #   in Loop: Header=BB62_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_104
.LBB62_110:                             # %for.end429
                                        #   in Loop: Header=BB62_102 Depth=1
	jmp	.LBB62_111
.LBB62_111:                             # %for.inc430
                                        #   in Loop: Header=BB62_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_102
.LBB62_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB62_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB62_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB62_113 Depth=1
	movl	$0, -4(%rbp)
.LBB62_115:                             # %for.cond436
                                        #   Parent Loop BB62_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB62_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB62_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB62_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB62_119
.LBB62_118:                             # %if.else454
                                        #   in Loop: Header=BB62_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB62_119:                             # %if.end468
                                        #   in Loop: Header=BB62_115 Depth=2
	jmp	.LBB62_120
.LBB62_120:                             # %for.inc469
                                        #   in Loop: Header=BB62_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_115
.LBB62_121:                             # %for.end471
                                        #   in Loop: Header=BB62_113 Depth=1
	jmp	.LBB62_122
.LBB62_122:                             # %for.inc472
                                        #   in Loop: Header=BB62_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_113
.LBB62_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB62_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB62_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB62_124 Depth=1
	movl	$0, -4(%rbp)
.LBB62_126:                             # %for.cond478
                                        #   Parent Loop BB62_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB62_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB62_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB62_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB62_130
.LBB62_129:                             # %if.else496
                                        #   in Loop: Header=BB62_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB62_130:                             # %if.end510
                                        #   in Loop: Header=BB62_126 Depth=2
	jmp	.LBB62_131
.LBB62_131:                             # %for.inc511
                                        #   in Loop: Header=BB62_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_126
.LBB62_132:                             # %for.end513
                                        #   in Loop: Header=BB62_124 Depth=1
	jmp	.LBB62_133
.LBB62_133:                             # %for.inc514
                                        #   in Loop: Header=BB62_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_124
.LBB62_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB62_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB62_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB62_135 Depth=1
	movl	$0, -4(%rbp)
.LBB62_137:                             # %for.cond520
                                        #   Parent Loop BB62_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB62_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB62_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB62_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB62_141
.LBB62_140:                             # %if.else538
                                        #   in Loop: Header=BB62_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB62_141:                             # %if.end552
                                        #   in Loop: Header=BB62_137 Depth=2
	jmp	.LBB62_142
.LBB62_142:                             # %for.inc553
                                        #   in Loop: Header=BB62_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_137
.LBB62_143:                             # %for.end555
                                        #   in Loop: Header=BB62_135 Depth=1
	jmp	.LBB62_144
.LBB62_144:                             # %for.inc556
                                        #   in Loop: Header=BB62_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_135
.LBB62_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB62_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB62_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB62_146 Depth=1
	movl	$0, -4(%rbp)
.LBB62_148:                             # %for.cond562
                                        #   Parent Loop BB62_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB62_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB62_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB62_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB62_152
.LBB62_151:                             # %if.else580
                                        #   in Loop: Header=BB62_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB62_152:                             # %if.end594
                                        #   in Loop: Header=BB62_148 Depth=2
	jmp	.LBB62_153
.LBB62_153:                             # %for.inc595
                                        #   in Loop: Header=BB62_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_148
.LBB62_154:                             # %for.end597
                                        #   in Loop: Header=BB62_146 Depth=1
	jmp	.LBB62_155
.LBB62_155:                             # %for.inc598
                                        #   in Loop: Header=BB62_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_146
.LBB62_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB62_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB62_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB62_157 Depth=1
	movl	$0, -4(%rbp)
.LBB62_159:                             # %for.cond604
                                        #   Parent Loop BB62_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB62_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB62_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB62_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB62_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB62_163
.LBB62_162:                             # %if.else622
                                        #   in Loop: Header=BB62_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB62_163:                             # %if.end636
                                        #   in Loop: Header=BB62_159 Depth=2
	jmp	.LBB62_164
.LBB62_164:                             # %for.inc637
                                        #   in Loop: Header=BB62_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_159
.LBB62_165:                             # %for.end639
                                        #   in Loop: Header=BB62_157 Depth=1
	jmp	.LBB62_166
.LBB62_166:                             # %for.inc640
                                        #   in Loop: Header=BB62_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_157
.LBB62_167:                             # %for.end642
	cmpl	$1995680363, -28(%rbp)  # imm = 0x76F3AA6B
	jne	.LBB62_169
.LBB62_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_168
.Lfunc_end62:
	.size	init_contexts.55, .Lfunc_end62-init_contexts.55
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.56
.LCPI63_0:
	.quad	4607182418800017408     # double 1
.LCPI63_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI63_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI63_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.56
	.p2align	4, 0x90
	.type	XRate.56,@function
XRate.56:                               # @XRate.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1072913513, -32(%rbp)  # imm = 0x3FF35C69
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB63_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB63_3
.LBB63_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB63_3:                               # %cond.end
	vmovsd	.LCPI63_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI63_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI63_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI63_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB63_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI63_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB63_6
.LBB63_5:                               # %cond.false6
	vmovsd	.LCPI63_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI63_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI63_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB63_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB63_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB63_9
.LBB63_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB63_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB63_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB63_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB63_13
.LBB63_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB63_13:                              # %cond.end26
	jmp	.LBB63_15
.LBB63_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB63_15
.LBB63_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB63_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB63_18
.LBB63_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB63_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1072913513, -32(%rbp)  # imm = 0x3FF35C69
	jne	.LBB63_20
.LBB63_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB63_19
.Lfunc_end63:
	.size	XRate.56, .Lfunc_end63-XRate.56
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.57
.LCPI64_0:
	.quad	4611686018427387904     # double 2
.LCPI64_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.57
	.p2align	4, 0x90
	.type	create_context_memory.57,@function
create_context_memory.57:               # @create_context_memory.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$832811058, -20(%rbp)   # imm = 0x31A3B032
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB64_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB64_3
.LBB64_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB64_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB64_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB64_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB64_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB64_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB64_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB64_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB64_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB64_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB64_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB64_11:                              # %if.end10
                                        #   in Loop: Header=BB64_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB64_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB64_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB64_13:                              # %if.end16
                                        #   in Loop: Header=BB64_8 Depth=1
	movl	$0, -8(%rbp)
.LBB64_14:                              # %for.cond17
                                        #   Parent Loop BB64_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB64_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB64_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB64_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB64_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB64_17:                              # %if.end28
                                        #   in Loop: Header=BB64_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB64_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB64_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB64_19:                              # %if.end39
                                        #   in Loop: Header=BB64_14 Depth=2
	jmp	.LBB64_20
.LBB64_20:                              # %for.inc
                                        #   in Loop: Header=BB64_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_14
.LBB64_21:                              # %for.end
                                        #   in Loop: Header=BB64_8 Depth=1
	jmp	.LBB64_22
.LBB64_22:                              # %for.inc40
                                        #   in Loop: Header=BB64_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_8
.LBB64_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB64_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_26 Depth 2
                                        #       Child Loop BB64_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB64_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB64_24 Depth=1
	movl	$0, -8(%rbp)
.LBB64_26:                              # %for.cond47
                                        #   Parent Loop BB64_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB64_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB64_26 Depth=2
	movl	$0, -12(%rbp)
.LBB64_28:                              # %for.cond51
                                        #   Parent Loop BB64_24 Depth=1
                                        #     Parent Loop BB64_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB64_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB64_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB64_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_28
.LBB64_31:                              # %for.end63
                                        #   in Loop: Header=BB64_26 Depth=2
	jmp	.LBB64_32
.LBB64_32:                              # %for.inc64
                                        #   in Loop: Header=BB64_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_26
.LBB64_33:                              # %for.end66
                                        #   in Loop: Header=BB64_24 Depth=1
	jmp	.LBB64_34
.LBB64_34:                              # %for.inc67
                                        #   in Loop: Header=BB64_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_24
.LBB64_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB64_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB64_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB64_36 Depth=1
	vmovsd	.LCPI64_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI64_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI64_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB64_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_36
.LBB64_39:                              # %for.end98
	cmpl	$832811058, -20(%rbp)   # imm = 0x31A3B032
	jne	.LBB64_41
.LBB64_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_40
.Lfunc_end64:
	.size	create_context_memory.57, .Lfunc_end64-create_context_memory.57
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.58
.LCPI65_0:
	.quad	4611686018427387904     # double 2
.LCPI65_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.58
	.p2align	4, 0x90
	.type	create_context_memory.58,@function
create_context_memory.58:               # @create_context_memory.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1610745133, -20(%rbp)  # imm = 0x6002052D
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB65_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB65_3
.LBB65_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB65_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB65_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB65_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB65_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB65_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB65_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB65_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB65_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB65_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB65_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB65_11:                              # %if.end10
                                        #   in Loop: Header=BB65_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB65_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB65_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB65_13:                              # %if.end16
                                        #   in Loop: Header=BB65_8 Depth=1
	movl	$0, -8(%rbp)
.LBB65_14:                              # %for.cond17
                                        #   Parent Loop BB65_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB65_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB65_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB65_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB65_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB65_17:                              # %if.end28
                                        #   in Loop: Header=BB65_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB65_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB65_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB65_19:                              # %if.end39
                                        #   in Loop: Header=BB65_14 Depth=2
	jmp	.LBB65_20
.LBB65_20:                              # %for.inc
                                        #   in Loop: Header=BB65_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_14
.LBB65_21:                              # %for.end
                                        #   in Loop: Header=BB65_8 Depth=1
	jmp	.LBB65_22
.LBB65_22:                              # %for.inc40
                                        #   in Loop: Header=BB65_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_8
.LBB65_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB65_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_26 Depth 2
                                        #       Child Loop BB65_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB65_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB65_24 Depth=1
	movl	$0, -8(%rbp)
.LBB65_26:                              # %for.cond47
                                        #   Parent Loop BB65_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB65_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB65_26 Depth=2
	movl	$0, -12(%rbp)
.LBB65_28:                              # %for.cond51
                                        #   Parent Loop BB65_24 Depth=1
                                        #     Parent Loop BB65_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB65_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB65_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB65_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_28
.LBB65_31:                              # %for.end63
                                        #   in Loop: Header=BB65_26 Depth=2
	jmp	.LBB65_32
.LBB65_32:                              # %for.inc64
                                        #   in Loop: Header=BB65_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_26
.LBB65_33:                              # %for.end66
                                        #   in Loop: Header=BB65_24 Depth=1
	jmp	.LBB65_34
.LBB65_34:                              # %for.inc67
                                        #   in Loop: Header=BB65_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_24
.LBB65_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB65_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB65_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB65_36 Depth=1
	vmovsd	.LCPI65_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI65_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI65_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB65_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_36
.LBB65_39:                              # %for.end98
	cmpl	$1610745133, -20(%rbp)  # imm = 0x6002052D
	jne	.LBB65_41
.LBB65_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_40
.Lfunc_end65:
	.size	create_context_memory.58, .Lfunc_end65-create_context_memory.58
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.59
.LCPI66_0:
	.quad	4607182418800017408     # double 1
.LCPI66_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI66_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI66_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.59
	.p2align	4, 0x90
	.type	XRate.59,@function
XRate.59:                               # @XRate.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1445985229, -32(%rbp)  # imm = 0x562FFBCD
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB66_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB66_3
.LBB66_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB66_3:                               # %cond.end
	vmovsd	.LCPI66_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI66_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI66_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI66_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB66_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI66_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB66_6
.LBB66_5:                               # %cond.false6
	vmovsd	.LCPI66_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI66_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI66_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB66_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB66_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB66_9
.LBB66_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB66_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB66_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB66_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB66_13
.LBB66_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB66_13:                              # %cond.end26
	jmp	.LBB66_15
.LBB66_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB66_15
.LBB66_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB66_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB66_18
.LBB66_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB66_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1445985229, -32(%rbp)  # imm = 0x562FFBCD
	jne	.LBB66_20
.LBB66_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB66_19
.Lfunc_end66:
	.size	XRate.59, .Lfunc_end66-XRate.59
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.60        # -- Begin function init_contexts.60
	.p2align	4, 0x90
	.type	init_contexts.60,@function
init_contexts.60:                       # @init_contexts.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$242924905, -28(%rbp)   # imm = 0xE7ABD69
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB67_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB67_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -4(%rbp)
.LBB67_3:                               # %for.cond2
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB67_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB67_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB67_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_7
.LBB67_6:                               # %if.else
                                        #   in Loop: Header=BB67_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_7:                               # %if.end
                                        #   in Loop: Header=BB67_3 Depth=2
	jmp	.LBB67_8
.LBB67_8:                               # %for.inc
                                        #   in Loop: Header=BB67_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_3
.LBB67_9:                               # %for.end
                                        #   in Loop: Header=BB67_1 Depth=1
	jmp	.LBB67_10
.LBB67_10:                              # %for.inc28
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_1
.LBB67_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB67_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB67_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB67_12 Depth=1
	movl	$0, -4(%rbp)
.LBB67_14:                              # %for.cond34
                                        #   Parent Loop BB67_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB67_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB67_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB67_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_18
.LBB67_17:                              # %if.else52
                                        #   in Loop: Header=BB67_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_18:                              # %if.end66
                                        #   in Loop: Header=BB67_14 Depth=2
	jmp	.LBB67_19
.LBB67_19:                              # %for.inc67
                                        #   in Loop: Header=BB67_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_14
.LBB67_20:                              # %for.end69
                                        #   in Loop: Header=BB67_12 Depth=1
	jmp	.LBB67_21
.LBB67_21:                              # %for.inc70
                                        #   in Loop: Header=BB67_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_12
.LBB67_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB67_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB67_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB67_23 Depth=1
	movl	$0, -4(%rbp)
.LBB67_25:                              # %for.cond76
                                        #   Parent Loop BB67_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB67_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB67_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB67_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_29
.LBB67_28:                              # %if.else94
                                        #   in Loop: Header=BB67_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_29:                              # %if.end108
                                        #   in Loop: Header=BB67_25 Depth=2
	jmp	.LBB67_30
.LBB67_30:                              # %for.inc109
                                        #   in Loop: Header=BB67_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_25
.LBB67_31:                              # %for.end111
                                        #   in Loop: Header=BB67_23 Depth=1
	jmp	.LBB67_32
.LBB67_32:                              # %for.inc112
                                        #   in Loop: Header=BB67_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_23
.LBB67_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB67_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB67_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB67_34 Depth=1
	movl	$0, -4(%rbp)
.LBB67_36:                              # %for.cond118
                                        #   Parent Loop BB67_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB67_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB67_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB67_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_40
.LBB67_39:                              # %if.else136
                                        #   in Loop: Header=BB67_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_40:                              # %if.end150
                                        #   in Loop: Header=BB67_36 Depth=2
	jmp	.LBB67_41
.LBB67_41:                              # %for.inc151
                                        #   in Loop: Header=BB67_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_36
.LBB67_42:                              # %for.end153
                                        #   in Loop: Header=BB67_34 Depth=1
	jmp	.LBB67_43
.LBB67_43:                              # %for.inc154
                                        #   in Loop: Header=BB67_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_34
.LBB67_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB67_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB67_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB67_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB67_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_49
.LBB67_48:                              # %if.else172
                                        #   in Loop: Header=BB67_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_49:                              # %if.end183
                                        #   in Loop: Header=BB67_45 Depth=1
	jmp	.LBB67_50
.LBB67_50:                              # %for.inc184
                                        #   in Loop: Header=BB67_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_45
.LBB67_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB67_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB67_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB67_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB67_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_56
.LBB67_55:                              # %if.else202
                                        #   in Loop: Header=BB67_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_56:                              # %if.end213
                                        #   in Loop: Header=BB67_52 Depth=1
	jmp	.LBB67_57
.LBB67_57:                              # %for.inc214
                                        #   in Loop: Header=BB67_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_52
.LBB67_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB67_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB67_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB67_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB67_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_63
.LBB67_62:                              # %if.else232
                                        #   in Loop: Header=BB67_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_63:                              # %if.end243
                                        #   in Loop: Header=BB67_59 Depth=1
	jmp	.LBB67_64
.LBB67_64:                              # %for.inc244
                                        #   in Loop: Header=BB67_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_59
.LBB67_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB67_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB67_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB67_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB67_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_70
.LBB67_69:                              # %if.else262
                                        #   in Loop: Header=BB67_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_70:                              # %if.end273
                                        #   in Loop: Header=BB67_66 Depth=1
	jmp	.LBB67_71
.LBB67_71:                              # %for.inc274
                                        #   in Loop: Header=BB67_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_66
.LBB67_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB67_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB67_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB67_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB67_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_77
.LBB67_76:                              # %if.else292
                                        #   in Loop: Header=BB67_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_77:                              # %if.end303
                                        #   in Loop: Header=BB67_73 Depth=1
	jmp	.LBB67_78
.LBB67_78:                              # %for.inc304
                                        #   in Loop: Header=BB67_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_73
.LBB67_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB67_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB67_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB67_80 Depth=1
	movl	$0, -4(%rbp)
.LBB67_82:                              # %for.cond310
                                        #   Parent Loop BB67_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB67_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB67_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB67_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_86
.LBB67_85:                              # %if.else328
                                        #   in Loop: Header=BB67_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_86:                              # %if.end342
                                        #   in Loop: Header=BB67_82 Depth=2
	jmp	.LBB67_87
.LBB67_87:                              # %for.inc343
                                        #   in Loop: Header=BB67_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_82
.LBB67_88:                              # %for.end345
                                        #   in Loop: Header=BB67_80 Depth=1
	jmp	.LBB67_89
.LBB67_89:                              # %for.inc346
                                        #   in Loop: Header=BB67_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_80
.LBB67_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB67_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB67_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB67_91 Depth=1
	movl	$0, -4(%rbp)
.LBB67_93:                              # %for.cond352
                                        #   Parent Loop BB67_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB67_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB67_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB67_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_97
.LBB67_96:                              # %if.else370
                                        #   in Loop: Header=BB67_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_97:                              # %if.end384
                                        #   in Loop: Header=BB67_93 Depth=2
	jmp	.LBB67_98
.LBB67_98:                              # %for.inc385
                                        #   in Loop: Header=BB67_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_93
.LBB67_99:                              # %for.end387
                                        #   in Loop: Header=BB67_91 Depth=1
	jmp	.LBB67_100
.LBB67_100:                             # %for.inc388
                                        #   in Loop: Header=BB67_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_91
.LBB67_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB67_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB67_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB67_102 Depth=1
	movl	$0, -4(%rbp)
.LBB67_104:                             # %for.cond394
                                        #   Parent Loop BB67_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB67_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB67_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB67_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_108
.LBB67_107:                             # %if.else412
                                        #   in Loop: Header=BB67_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_108:                             # %if.end426
                                        #   in Loop: Header=BB67_104 Depth=2
	jmp	.LBB67_109
.LBB67_109:                             # %for.inc427
                                        #   in Loop: Header=BB67_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_104
.LBB67_110:                             # %for.end429
                                        #   in Loop: Header=BB67_102 Depth=1
	jmp	.LBB67_111
.LBB67_111:                             # %for.inc430
                                        #   in Loop: Header=BB67_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_102
.LBB67_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB67_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB67_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB67_113 Depth=1
	movl	$0, -4(%rbp)
.LBB67_115:                             # %for.cond436
                                        #   Parent Loop BB67_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB67_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB67_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB67_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_119
.LBB67_118:                             # %if.else454
                                        #   in Loop: Header=BB67_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_119:                             # %if.end468
                                        #   in Loop: Header=BB67_115 Depth=2
	jmp	.LBB67_120
.LBB67_120:                             # %for.inc469
                                        #   in Loop: Header=BB67_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_115
.LBB67_121:                             # %for.end471
                                        #   in Loop: Header=BB67_113 Depth=1
	jmp	.LBB67_122
.LBB67_122:                             # %for.inc472
                                        #   in Loop: Header=BB67_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_113
.LBB67_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB67_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB67_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB67_124 Depth=1
	movl	$0, -4(%rbp)
.LBB67_126:                             # %for.cond478
                                        #   Parent Loop BB67_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB67_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB67_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB67_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_130
.LBB67_129:                             # %if.else496
                                        #   in Loop: Header=BB67_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_130:                             # %if.end510
                                        #   in Loop: Header=BB67_126 Depth=2
	jmp	.LBB67_131
.LBB67_131:                             # %for.inc511
                                        #   in Loop: Header=BB67_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_126
.LBB67_132:                             # %for.end513
                                        #   in Loop: Header=BB67_124 Depth=1
	jmp	.LBB67_133
.LBB67_133:                             # %for.inc514
                                        #   in Loop: Header=BB67_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_124
.LBB67_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB67_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB67_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB67_135 Depth=1
	movl	$0, -4(%rbp)
.LBB67_137:                             # %for.cond520
                                        #   Parent Loop BB67_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB67_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB67_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB67_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_141
.LBB67_140:                             # %if.else538
                                        #   in Loop: Header=BB67_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_141:                             # %if.end552
                                        #   in Loop: Header=BB67_137 Depth=2
	jmp	.LBB67_142
.LBB67_142:                             # %for.inc553
                                        #   in Loop: Header=BB67_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_137
.LBB67_143:                             # %for.end555
                                        #   in Loop: Header=BB67_135 Depth=1
	jmp	.LBB67_144
.LBB67_144:                             # %for.inc556
                                        #   in Loop: Header=BB67_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_135
.LBB67_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB67_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB67_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB67_146 Depth=1
	movl	$0, -4(%rbp)
.LBB67_148:                             # %for.cond562
                                        #   Parent Loop BB67_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB67_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB67_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB67_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_152
.LBB67_151:                             # %if.else580
                                        #   in Loop: Header=BB67_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_152:                             # %if.end594
                                        #   in Loop: Header=BB67_148 Depth=2
	jmp	.LBB67_153
.LBB67_153:                             # %for.inc595
                                        #   in Loop: Header=BB67_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_148
.LBB67_154:                             # %for.end597
                                        #   in Loop: Header=BB67_146 Depth=1
	jmp	.LBB67_155
.LBB67_155:                             # %for.inc598
                                        #   in Loop: Header=BB67_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_146
.LBB67_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB67_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB67_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB67_157 Depth=1
	movl	$0, -4(%rbp)
.LBB67_159:                             # %for.cond604
                                        #   Parent Loop BB67_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB67_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB67_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB67_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB67_163
.LBB67_162:                             # %if.else622
                                        #   in Loop: Header=BB67_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB67_163:                             # %if.end636
                                        #   in Loop: Header=BB67_159 Depth=2
	jmp	.LBB67_164
.LBB67_164:                             # %for.inc637
                                        #   in Loop: Header=BB67_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_159
.LBB67_165:                             # %for.end639
                                        #   in Loop: Header=BB67_157 Depth=1
	jmp	.LBB67_166
.LBB67_166:                             # %for.inc640
                                        #   in Loop: Header=BB67_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_157
.LBB67_167:                             # %for.end642
	cmpl	$242924905, -28(%rbp)   # imm = 0xE7ABD69
	jne	.LBB67_169
.LBB67_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_168
.Lfunc_end67:
	.size	init_contexts.60, .Lfunc_end67-init_contexts.60
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.61
.LCPI68_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.61
	.p2align	4, 0x90
	.type	GetCtxModelNumber.61,@function
GetCtxModelNumber.61:                   # @GetCtxModelNumber.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI68_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$255580332, -44(%rbp)   # imm = 0xF3BD8AC
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB68_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_3 Depth 2
                                        #       Child Loop BB68_5 Depth 3
                                        #     Child Loop BB68_14 Depth 2
                                        #       Child Loop BB68_16 Depth 3
                                        #     Child Loop BB68_25 Depth 2
                                        #       Child Loop BB68_27 Depth 3
                                        #     Child Loop BB68_36 Depth 2
                                        #       Child Loop BB68_38 Depth 3
                                        #     Child Loop BB68_47 Depth 2
                                        #     Child Loop BB68_54 Depth 2
                                        #     Child Loop BB68_61 Depth 2
                                        #     Child Loop BB68_68 Depth 2
                                        #     Child Loop BB68_75 Depth 2
                                        #     Child Loop BB68_82 Depth 2
                                        #       Child Loop BB68_84 Depth 3
                                        #     Child Loop BB68_93 Depth 2
                                        #       Child Loop BB68_95 Depth 3
                                        #     Child Loop BB68_104 Depth 2
                                        #       Child Loop BB68_106 Depth 3
                                        #     Child Loop BB68_115 Depth 2
                                        #       Child Loop BB68_117 Depth 3
                                        #     Child Loop BB68_126 Depth 2
                                        #       Child Loop BB68_128 Depth 3
                                        #     Child Loop BB68_137 Depth 2
                                        #       Child Loop BB68_139 Depth 3
                                        #     Child Loop BB68_148 Depth 2
                                        #       Child Loop BB68_150 Depth 3
                                        #     Child Loop BB68_159 Depth 2
                                        #       Child Loop BB68_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB68_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB68_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB68_3:                               # %for.cond2
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB68_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB68_3 Depth=2
	movl	$0, -4(%rbp)
.LBB68_5:                               # %for.cond5
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB68_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB68_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB68_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_9
.LBB68_8:                               # %if.else
                                        #   in Loop: Header=BB68_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_9:                               # %if.end
                                        #   in Loop: Header=BB68_5 Depth=3
	jmp	.LBB68_10
.LBB68_10:                              # %for.inc
                                        #   in Loop: Header=BB68_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_5
.LBB68_11:                              # %for.end
                                        #   in Loop: Header=BB68_3 Depth=2
	jmp	.LBB68_12
.LBB68_12:                              # %for.inc33
                                        #   in Loop: Header=BB68_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_3
.LBB68_13:                              # %for.end35
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_14:                              # %for.cond36
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB68_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB68_14 Depth=2
	movl	$0, -4(%rbp)
.LBB68_16:                              # %for.cond39
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB68_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB68_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB68_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_20
.LBB68_19:                              # %if.else58
                                        #   in Loop: Header=BB68_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_20:                              # %if.end73
                                        #   in Loop: Header=BB68_16 Depth=3
	jmp	.LBB68_21
.LBB68_21:                              # %for.inc74
                                        #   in Loop: Header=BB68_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_16
.LBB68_22:                              # %for.end76
                                        #   in Loop: Header=BB68_14 Depth=2
	jmp	.LBB68_23
.LBB68_23:                              # %for.inc77
                                        #   in Loop: Header=BB68_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_14
.LBB68_24:                              # %for.end79
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_25:                              # %for.cond80
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB68_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB68_25 Depth=2
	movl	$0, -4(%rbp)
.LBB68_27:                              # %for.cond83
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB68_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB68_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB68_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_31
.LBB68_30:                              # %if.else102
                                        #   in Loop: Header=BB68_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_31:                              # %if.end117
                                        #   in Loop: Header=BB68_27 Depth=3
	jmp	.LBB68_32
.LBB68_32:                              # %for.inc118
                                        #   in Loop: Header=BB68_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_27
.LBB68_33:                              # %for.end120
                                        #   in Loop: Header=BB68_25 Depth=2
	jmp	.LBB68_34
.LBB68_34:                              # %for.inc121
                                        #   in Loop: Header=BB68_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_25
.LBB68_35:                              # %for.end123
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_36:                              # %for.cond124
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB68_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB68_36 Depth=2
	movl	$0, -4(%rbp)
.LBB68_38:                              # %for.cond127
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB68_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB68_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB68_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_42
.LBB68_41:                              # %if.else146
                                        #   in Loop: Header=BB68_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_42:                              # %if.end161
                                        #   in Loop: Header=BB68_38 Depth=3
	jmp	.LBB68_43
.LBB68_43:                              # %for.inc162
                                        #   in Loop: Header=BB68_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_38
.LBB68_44:                              # %for.end164
                                        #   in Loop: Header=BB68_36 Depth=2
	jmp	.LBB68_45
.LBB68_45:                              # %for.inc165
                                        #   in Loop: Header=BB68_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_36
.LBB68_46:                              # %for.end167
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -4(%rbp)
.LBB68_47:                              # %for.cond168
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB68_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB68_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB68_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_51
.LBB68_50:                              # %if.else184
                                        #   in Loop: Header=BB68_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_51:                              # %if.end196
                                        #   in Loop: Header=BB68_47 Depth=2
	jmp	.LBB68_52
.LBB68_52:                              # %for.inc197
                                        #   in Loop: Header=BB68_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_47
.LBB68_53:                              # %for.end199
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -4(%rbp)
.LBB68_54:                              # %for.cond200
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB68_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB68_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB68_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_58
.LBB68_57:                              # %if.else216
                                        #   in Loop: Header=BB68_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_58:                              # %if.end228
                                        #   in Loop: Header=BB68_54 Depth=2
	jmp	.LBB68_59
.LBB68_59:                              # %for.inc229
                                        #   in Loop: Header=BB68_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_54
.LBB68_60:                              # %for.end231
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -4(%rbp)
.LBB68_61:                              # %for.cond232
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB68_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB68_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB68_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_65
.LBB68_64:                              # %if.else248
                                        #   in Loop: Header=BB68_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_65:                              # %if.end260
                                        #   in Loop: Header=BB68_61 Depth=2
	jmp	.LBB68_66
.LBB68_66:                              # %for.inc261
                                        #   in Loop: Header=BB68_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_61
.LBB68_67:                              # %for.end263
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -4(%rbp)
.LBB68_68:                              # %for.cond264
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB68_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB68_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB68_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_72
.LBB68_71:                              # %if.else280
                                        #   in Loop: Header=BB68_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_72:                              # %if.end292
                                        #   in Loop: Header=BB68_68 Depth=2
	jmp	.LBB68_73
.LBB68_73:                              # %for.inc293
                                        #   in Loop: Header=BB68_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_68
.LBB68_74:                              # %for.end295
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -4(%rbp)
.LBB68_75:                              # %for.cond296
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB68_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB68_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB68_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_79
.LBB68_78:                              # %if.else312
                                        #   in Loop: Header=BB68_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_79:                              # %if.end324
                                        #   in Loop: Header=BB68_75 Depth=2
	jmp	.LBB68_80
.LBB68_80:                              # %for.inc325
                                        #   in Loop: Header=BB68_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_75
.LBB68_81:                              # %for.end327
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_82:                              # %for.cond328
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB68_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB68_82 Depth=2
	movl	$0, -4(%rbp)
.LBB68_84:                              # %for.cond331
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB68_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB68_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB68_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_88
.LBB68_87:                              # %if.else350
                                        #   in Loop: Header=BB68_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_88:                              # %if.end365
                                        #   in Loop: Header=BB68_84 Depth=3
	jmp	.LBB68_89
.LBB68_89:                              # %for.inc366
                                        #   in Loop: Header=BB68_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_84
.LBB68_90:                              # %for.end368
                                        #   in Loop: Header=BB68_82 Depth=2
	jmp	.LBB68_91
.LBB68_91:                              # %for.inc369
                                        #   in Loop: Header=BB68_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_82
.LBB68_92:                              # %for.end371
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_93:                              # %for.cond372
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB68_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB68_93 Depth=2
	movl	$0, -4(%rbp)
.LBB68_95:                              # %for.cond375
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB68_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB68_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB68_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_99
.LBB68_98:                              # %if.else394
                                        #   in Loop: Header=BB68_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_99:                              # %if.end409
                                        #   in Loop: Header=BB68_95 Depth=3
	jmp	.LBB68_100
.LBB68_100:                             # %for.inc410
                                        #   in Loop: Header=BB68_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_95
.LBB68_101:                             # %for.end412
                                        #   in Loop: Header=BB68_93 Depth=2
	jmp	.LBB68_102
.LBB68_102:                             # %for.inc413
                                        #   in Loop: Header=BB68_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_93
.LBB68_103:                             # %for.end415
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_104:                             # %for.cond416
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB68_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB68_104 Depth=2
	movl	$0, -4(%rbp)
.LBB68_106:                             # %for.cond419
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB68_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB68_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB68_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_110
.LBB68_109:                             # %if.else438
                                        #   in Loop: Header=BB68_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_110:                             # %if.end453
                                        #   in Loop: Header=BB68_106 Depth=3
	jmp	.LBB68_111
.LBB68_111:                             # %for.inc454
                                        #   in Loop: Header=BB68_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_106
.LBB68_112:                             # %for.end456
                                        #   in Loop: Header=BB68_104 Depth=2
	jmp	.LBB68_113
.LBB68_113:                             # %for.inc457
                                        #   in Loop: Header=BB68_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_104
.LBB68_114:                             # %for.end459
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_115:                             # %for.cond460
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB68_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB68_115 Depth=2
	movl	$0, -4(%rbp)
.LBB68_117:                             # %for.cond463
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB68_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB68_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB68_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_121
.LBB68_120:                             # %if.else482
                                        #   in Loop: Header=BB68_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_121:                             # %if.end497
                                        #   in Loop: Header=BB68_117 Depth=3
	jmp	.LBB68_122
.LBB68_122:                             # %for.inc498
                                        #   in Loop: Header=BB68_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_117
.LBB68_123:                             # %for.end500
                                        #   in Loop: Header=BB68_115 Depth=2
	jmp	.LBB68_124
.LBB68_124:                             # %for.inc501
                                        #   in Loop: Header=BB68_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_115
.LBB68_125:                             # %for.end503
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_126:                             # %for.cond504
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB68_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB68_126 Depth=2
	movl	$0, -4(%rbp)
.LBB68_128:                             # %for.cond507
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB68_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB68_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB68_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_132
.LBB68_131:                             # %if.else526
                                        #   in Loop: Header=BB68_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_132:                             # %if.end541
                                        #   in Loop: Header=BB68_128 Depth=3
	jmp	.LBB68_133
.LBB68_133:                             # %for.inc542
                                        #   in Loop: Header=BB68_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_128
.LBB68_134:                             # %for.end544
                                        #   in Loop: Header=BB68_126 Depth=2
	jmp	.LBB68_135
.LBB68_135:                             # %for.inc545
                                        #   in Loop: Header=BB68_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_126
.LBB68_136:                             # %for.end547
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_137:                             # %for.cond548
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB68_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB68_137 Depth=2
	movl	$0, -4(%rbp)
.LBB68_139:                             # %for.cond551
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB68_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB68_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB68_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_143
.LBB68_142:                             # %if.else570
                                        #   in Loop: Header=BB68_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_143:                             # %if.end585
                                        #   in Loop: Header=BB68_139 Depth=3
	jmp	.LBB68_144
.LBB68_144:                             # %for.inc586
                                        #   in Loop: Header=BB68_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_139
.LBB68_145:                             # %for.end588
                                        #   in Loop: Header=BB68_137 Depth=2
	jmp	.LBB68_146
.LBB68_146:                             # %for.inc589
                                        #   in Loop: Header=BB68_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_137
.LBB68_147:                             # %for.end591
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_148:                             # %for.cond592
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB68_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB68_148 Depth=2
	movl	$0, -4(%rbp)
.LBB68_150:                             # %for.cond595
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB68_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB68_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB68_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_154
.LBB68_153:                             # %if.else614
                                        #   in Loop: Header=BB68_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_154:                             # %if.end629
                                        #   in Loop: Header=BB68_150 Depth=3
	jmp	.LBB68_155
.LBB68_155:                             # %for.inc630
                                        #   in Loop: Header=BB68_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_150
.LBB68_156:                             # %for.end632
                                        #   in Loop: Header=BB68_148 Depth=2
	jmp	.LBB68_157
.LBB68_157:                             # %for.inc633
                                        #   in Loop: Header=BB68_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_148
.LBB68_158:                             # %for.end635
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_159:                             # %for.cond636
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB68_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB68_159 Depth=2
	movl	$0, -4(%rbp)
.LBB68_161:                             # %for.cond639
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB68_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB68_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB68_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB68_165
.LBB68_164:                             # %if.else658
                                        #   in Loop: Header=BB68_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB68_165:                             # %if.end673
                                        #   in Loop: Header=BB68_161 Depth=3
	jmp	.LBB68_166
.LBB68_166:                             # %for.inc674
                                        #   in Loop: Header=BB68_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_161
.LBB68_167:                             # %for.end676
                                        #   in Loop: Header=BB68_159 Depth=2
	jmp	.LBB68_168
.LBB68_168:                             # %for.inc677
                                        #   in Loop: Header=BB68_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_159
.LBB68_169:                             # %for.end679
                                        #   in Loop: Header=BB68_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB68_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB68_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB68_171:                             # %if.end682
                                        #   in Loop: Header=BB68_1 Depth=1
	jmp	.LBB68_172
.LBB68_172:                             # %for.inc683
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_1
.LBB68_173:                             # %for.end685
	cmpl	$255580332, -44(%rbp)   # imm = 0xF3BD8AC
	jne	.LBB68_175
.LBB68_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_174
.Lfunc_end68:
	.size	GetCtxModelNumber.61, .Lfunc_end68-GetCtxModelNumber.61
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.62
.LCPI69_0:
	.quad	4607182418800017408     # double 1
.LCPI69_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI69_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI69_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.62
	.p2align	4, 0x90
	.type	XRate.62,@function
XRate.62:                               # @XRate.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$555496069, -36(%rbp)   # imm = 0x211C3285
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB69_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB69_3
.LBB69_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB69_3:                               # %cond.end
	vmovsd	.LCPI69_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI69_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI69_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI69_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB69_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI69_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB69_6
.LBB69_5:                               # %cond.false6
	vmovsd	.LCPI69_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI69_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI69_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB69_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB69_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB69_9
.LBB69_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB69_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB69_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB69_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB69_13
.LBB69_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB69_13:                              # %cond.end26
	jmp	.LBB69_15
.LBB69_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB69_15
.LBB69_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB69_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB69_18
.LBB69_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB69_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$555496069, -36(%rbp)   # imm = 0x211C3285
	jne	.LBB69_20
.LBB69_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB69_19
.Lfunc_end69:
	.size	XRate.62, .Lfunc_end69-XRate.62
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.63        # -- Begin function init_contexts.63
	.p2align	4, 0x90
	.type	init_contexts.63,@function
init_contexts.63:                       # @init_contexts.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1793218082, -28(%rbp)  # imm = 0x6AE25622
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB70_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB70_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB70_1 Depth=1
	movl	$0, -4(%rbp)
.LBB70_3:                               # %for.cond2
                                        #   Parent Loop BB70_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB70_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB70_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB70_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB70_7
.LBB70_6:                               # %if.else
                                        #   in Loop: Header=BB70_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB70_7:                               # %if.end
                                        #   in Loop: Header=BB70_3 Depth=2
	jmp	.LBB70_8
.LBB70_8:                               # %for.inc
                                        #   in Loop: Header=BB70_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_3
.LBB70_9:                               # %for.end
                                        #   in Loop: Header=BB70_1 Depth=1
	jmp	.LBB70_10
.LBB70_10:                              # %for.inc28
                                        #   in Loop: Header=BB70_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_1
.LBB70_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB70_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB70_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB70_12 Depth=1
	movl	$0, -4(%rbp)
.LBB70_14:                              # %for.cond34
                                        #   Parent Loop BB70_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB70_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB70_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB70_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB70_18
.LBB70_17:                              # %if.else52
                                        #   in Loop: Header=BB70_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB70_18:                              # %if.end66
                                        #   in Loop: Header=BB70_14 Depth=2
	jmp	.LBB70_19
.LBB70_19:                              # %for.inc67
                                        #   in Loop: Header=BB70_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_14
.LBB70_20:                              # %for.end69
                                        #   in Loop: Header=BB70_12 Depth=1
	jmp	.LBB70_21
.LBB70_21:                              # %for.inc70
                                        #   in Loop: Header=BB70_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_12
.LBB70_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB70_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB70_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB70_23 Depth=1
	movl	$0, -4(%rbp)
.LBB70_25:                              # %for.cond76
                                        #   Parent Loop BB70_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB70_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB70_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB70_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB70_29
.LBB70_28:                              # %if.else94
                                        #   in Loop: Header=BB70_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB70_29:                              # %if.end108
                                        #   in Loop: Header=BB70_25 Depth=2
	jmp	.LBB70_30
.LBB70_30:                              # %for.inc109
                                        #   in Loop: Header=BB70_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_25
.LBB70_31:                              # %for.end111
                                        #   in Loop: Header=BB70_23 Depth=1
	jmp	.LBB70_32
.LBB70_32:                              # %for.inc112
                                        #   in Loop: Header=BB70_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_23
.LBB70_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB70_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB70_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB70_34 Depth=1
	movl	$0, -4(%rbp)
.LBB70_36:                              # %for.cond118
                                        #   Parent Loop BB70_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB70_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB70_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB70_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB70_40
.LBB70_39:                              # %if.else136
                                        #   in Loop: Header=BB70_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB70_40:                              # %if.end150
                                        #   in Loop: Header=BB70_36 Depth=2
	jmp	.LBB70_41
.LBB70_41:                              # %for.inc151
                                        #   in Loop: Header=BB70_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_36
.LBB70_42:                              # %for.end153
                                        #   in Loop: Header=BB70_34 Depth=1
	jmp	.LBB70_43
.LBB70_43:                              # %for.inc154
                                        #   in Loop: Header=BB70_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_34
.LBB70_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB70_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB70_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB70_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB70_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB70_49
.LBB70_48:                              # %if.else172
                                        #   in Loop: Header=BB70_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB70_49:                              # %if.end183
                                        #   in Loop: Header=BB70_45 Depth=1
	jmp	.LBB70_50
.LBB70_50:                              # %for.inc184
                                        #   in Loop: Header=BB70_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_45
.LBB70_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB70_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB70_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB70_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB70_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB70_56
.LBB70_55:                              # %if.else202
                                        #   in Loop: Header=BB70_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB70_56:                              # %if.end213
                                        #   in Loop: Header=BB70_52 Depth=1
	jmp	.LBB70_57
.LBB70_57:                              # %for.inc214
                                        #   in Loop: Header=BB70_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_52
.LBB70_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB70_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB70_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB70_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB70_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB70_63
.LBB70_62:                              # %if.else232
                                        #   in Loop: Header=BB70_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB70_63:                              # %if.end243
                                        #   in Loop: Header=BB70_59 Depth=1
	jmp	.LBB70_64
.LBB70_64:                              # %for.inc244
                                        #   in Loop: Header=BB70_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_59
.LBB70_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB70_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB70_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB70_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB70_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB70_70
.LBB70_69:                              # %if.else262
                                        #   in Loop: Header=BB70_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB70_70:                              # %if.end273
                                        #   in Loop: Header=BB70_66 Depth=1
	jmp	.LBB70_71
.LBB70_71:                              # %for.inc274
                                        #   in Loop: Header=BB70_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_66
.LBB70_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB70_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB70_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB70_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB70_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB70_77
.LBB70_76:                              # %if.else292
                                        #   in Loop: Header=BB70_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB70_77:                              # %if.end303
                                        #   in Loop: Header=BB70_73 Depth=1
	jmp	.LBB70_78
.LBB70_78:                              # %for.inc304
                                        #   in Loop: Header=BB70_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_73
.LBB70_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB70_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB70_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB70_80 Depth=1
	movl	$0, -4(%rbp)
.LBB70_82:                              # %for.cond310
                                        #   Parent Loop BB70_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB70_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB70_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB70_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB70_86
.LBB70_85:                              # %if.else328
                                        #   in Loop: Header=BB70_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB70_86:                              # %if.end342
                                        #   in Loop: Header=BB70_82 Depth=2
	jmp	.LBB70_87
.LBB70_87:                              # %for.inc343
                                        #   in Loop: Header=BB70_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_82
.LBB70_88:                              # %for.end345
                                        #   in Loop: Header=BB70_80 Depth=1
	jmp	.LBB70_89
.LBB70_89:                              # %for.inc346
                                        #   in Loop: Header=BB70_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_80
.LBB70_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB70_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB70_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB70_91 Depth=1
	movl	$0, -4(%rbp)
.LBB70_93:                              # %for.cond352
                                        #   Parent Loop BB70_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB70_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB70_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB70_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB70_97
.LBB70_96:                              # %if.else370
                                        #   in Loop: Header=BB70_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB70_97:                              # %if.end384
                                        #   in Loop: Header=BB70_93 Depth=2
	jmp	.LBB70_98
.LBB70_98:                              # %for.inc385
                                        #   in Loop: Header=BB70_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_93
.LBB70_99:                              # %for.end387
                                        #   in Loop: Header=BB70_91 Depth=1
	jmp	.LBB70_100
.LBB70_100:                             # %for.inc388
                                        #   in Loop: Header=BB70_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_91
.LBB70_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB70_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB70_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB70_102 Depth=1
	movl	$0, -4(%rbp)
.LBB70_104:                             # %for.cond394
                                        #   Parent Loop BB70_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB70_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB70_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB70_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB70_108
.LBB70_107:                             # %if.else412
                                        #   in Loop: Header=BB70_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB70_108:                             # %if.end426
                                        #   in Loop: Header=BB70_104 Depth=2
	jmp	.LBB70_109
.LBB70_109:                             # %for.inc427
                                        #   in Loop: Header=BB70_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_104
.LBB70_110:                             # %for.end429
                                        #   in Loop: Header=BB70_102 Depth=1
	jmp	.LBB70_111
.LBB70_111:                             # %for.inc430
                                        #   in Loop: Header=BB70_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_102
.LBB70_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB70_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB70_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB70_113 Depth=1
	movl	$0, -4(%rbp)
.LBB70_115:                             # %for.cond436
                                        #   Parent Loop BB70_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB70_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB70_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB70_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB70_119
.LBB70_118:                             # %if.else454
                                        #   in Loop: Header=BB70_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB70_119:                             # %if.end468
                                        #   in Loop: Header=BB70_115 Depth=2
	jmp	.LBB70_120
.LBB70_120:                             # %for.inc469
                                        #   in Loop: Header=BB70_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_115
.LBB70_121:                             # %for.end471
                                        #   in Loop: Header=BB70_113 Depth=1
	jmp	.LBB70_122
.LBB70_122:                             # %for.inc472
                                        #   in Loop: Header=BB70_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_113
.LBB70_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB70_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB70_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB70_124 Depth=1
	movl	$0, -4(%rbp)
.LBB70_126:                             # %for.cond478
                                        #   Parent Loop BB70_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB70_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB70_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB70_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB70_130
.LBB70_129:                             # %if.else496
                                        #   in Loop: Header=BB70_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB70_130:                             # %if.end510
                                        #   in Loop: Header=BB70_126 Depth=2
	jmp	.LBB70_131
.LBB70_131:                             # %for.inc511
                                        #   in Loop: Header=BB70_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_126
.LBB70_132:                             # %for.end513
                                        #   in Loop: Header=BB70_124 Depth=1
	jmp	.LBB70_133
.LBB70_133:                             # %for.inc514
                                        #   in Loop: Header=BB70_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_124
.LBB70_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB70_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB70_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB70_135 Depth=1
	movl	$0, -4(%rbp)
.LBB70_137:                             # %for.cond520
                                        #   Parent Loop BB70_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB70_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB70_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB70_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB70_141
.LBB70_140:                             # %if.else538
                                        #   in Loop: Header=BB70_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB70_141:                             # %if.end552
                                        #   in Loop: Header=BB70_137 Depth=2
	jmp	.LBB70_142
.LBB70_142:                             # %for.inc553
                                        #   in Loop: Header=BB70_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_137
.LBB70_143:                             # %for.end555
                                        #   in Loop: Header=BB70_135 Depth=1
	jmp	.LBB70_144
.LBB70_144:                             # %for.inc556
                                        #   in Loop: Header=BB70_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_135
.LBB70_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB70_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB70_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB70_146 Depth=1
	movl	$0, -4(%rbp)
.LBB70_148:                             # %for.cond562
                                        #   Parent Loop BB70_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB70_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB70_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB70_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB70_152
.LBB70_151:                             # %if.else580
                                        #   in Loop: Header=BB70_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB70_152:                             # %if.end594
                                        #   in Loop: Header=BB70_148 Depth=2
	jmp	.LBB70_153
.LBB70_153:                             # %for.inc595
                                        #   in Loop: Header=BB70_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_148
.LBB70_154:                             # %for.end597
                                        #   in Loop: Header=BB70_146 Depth=1
	jmp	.LBB70_155
.LBB70_155:                             # %for.inc598
                                        #   in Loop: Header=BB70_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_146
.LBB70_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB70_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB70_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB70_157 Depth=1
	movl	$0, -4(%rbp)
.LBB70_159:                             # %for.cond604
                                        #   Parent Loop BB70_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB70_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB70_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB70_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB70_163
.LBB70_162:                             # %if.else622
                                        #   in Loop: Header=BB70_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB70_163:                             # %if.end636
                                        #   in Loop: Header=BB70_159 Depth=2
	jmp	.LBB70_164
.LBB70_164:                             # %for.inc637
                                        #   in Loop: Header=BB70_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_159
.LBB70_165:                             # %for.end639
                                        #   in Loop: Header=BB70_157 Depth=1
	jmp	.LBB70_166
.LBB70_166:                             # %for.inc640
                                        #   in Loop: Header=BB70_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_157
.LBB70_167:                             # %for.end642
	cmpl	$1793218082, -28(%rbp)  # imm = 0x6AE25622
	jne	.LBB70_169
.LBB70_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_168
.Lfunc_end70:
	.size	init_contexts.63, .Lfunc_end70-init_contexts.63
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.64        # -- Begin function init_contexts.64
	.p2align	4, 0x90
	.type	init_contexts.64,@function
init_contexts.64:                       # @init_contexts.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1037809098, -28(%rbp)  # imm = 0x3DDBB5CA
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB71_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB71_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -4(%rbp)
.LBB71_3:                               # %for.cond2
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB71_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB71_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB71_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB71_7
.LBB71_6:                               # %if.else
                                        #   in Loop: Header=BB71_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB71_7:                               # %if.end
                                        #   in Loop: Header=BB71_3 Depth=2
	jmp	.LBB71_8
.LBB71_8:                               # %for.inc
                                        #   in Loop: Header=BB71_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_3
.LBB71_9:                               # %for.end
                                        #   in Loop: Header=BB71_1 Depth=1
	jmp	.LBB71_10
.LBB71_10:                              # %for.inc28
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_1
.LBB71_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB71_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB71_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB71_12 Depth=1
	movl	$0, -4(%rbp)
.LBB71_14:                              # %for.cond34
                                        #   Parent Loop BB71_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB71_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB71_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB71_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB71_18
.LBB71_17:                              # %if.else52
                                        #   in Loop: Header=BB71_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB71_18:                              # %if.end66
                                        #   in Loop: Header=BB71_14 Depth=2
	jmp	.LBB71_19
.LBB71_19:                              # %for.inc67
                                        #   in Loop: Header=BB71_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_14
.LBB71_20:                              # %for.end69
                                        #   in Loop: Header=BB71_12 Depth=1
	jmp	.LBB71_21
.LBB71_21:                              # %for.inc70
                                        #   in Loop: Header=BB71_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_12
.LBB71_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB71_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB71_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB71_23 Depth=1
	movl	$0, -4(%rbp)
.LBB71_25:                              # %for.cond76
                                        #   Parent Loop BB71_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB71_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB71_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB71_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB71_29
.LBB71_28:                              # %if.else94
                                        #   in Loop: Header=BB71_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB71_29:                              # %if.end108
                                        #   in Loop: Header=BB71_25 Depth=2
	jmp	.LBB71_30
.LBB71_30:                              # %for.inc109
                                        #   in Loop: Header=BB71_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_25
.LBB71_31:                              # %for.end111
                                        #   in Loop: Header=BB71_23 Depth=1
	jmp	.LBB71_32
.LBB71_32:                              # %for.inc112
                                        #   in Loop: Header=BB71_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_23
.LBB71_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB71_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB71_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB71_34 Depth=1
	movl	$0, -4(%rbp)
.LBB71_36:                              # %for.cond118
                                        #   Parent Loop BB71_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB71_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB71_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB71_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB71_40
.LBB71_39:                              # %if.else136
                                        #   in Loop: Header=BB71_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB71_40:                              # %if.end150
                                        #   in Loop: Header=BB71_36 Depth=2
	jmp	.LBB71_41
.LBB71_41:                              # %for.inc151
                                        #   in Loop: Header=BB71_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_36
.LBB71_42:                              # %for.end153
                                        #   in Loop: Header=BB71_34 Depth=1
	jmp	.LBB71_43
.LBB71_43:                              # %for.inc154
                                        #   in Loop: Header=BB71_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_34
.LBB71_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB71_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB71_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB71_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB71_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB71_49
.LBB71_48:                              # %if.else172
                                        #   in Loop: Header=BB71_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB71_49:                              # %if.end183
                                        #   in Loop: Header=BB71_45 Depth=1
	jmp	.LBB71_50
.LBB71_50:                              # %for.inc184
                                        #   in Loop: Header=BB71_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_45
.LBB71_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB71_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB71_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB71_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB71_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB71_56
.LBB71_55:                              # %if.else202
                                        #   in Loop: Header=BB71_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB71_56:                              # %if.end213
                                        #   in Loop: Header=BB71_52 Depth=1
	jmp	.LBB71_57
.LBB71_57:                              # %for.inc214
                                        #   in Loop: Header=BB71_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_52
.LBB71_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB71_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB71_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB71_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB71_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB71_63
.LBB71_62:                              # %if.else232
                                        #   in Loop: Header=BB71_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB71_63:                              # %if.end243
                                        #   in Loop: Header=BB71_59 Depth=1
	jmp	.LBB71_64
.LBB71_64:                              # %for.inc244
                                        #   in Loop: Header=BB71_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_59
.LBB71_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB71_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB71_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB71_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB71_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB71_70
.LBB71_69:                              # %if.else262
                                        #   in Loop: Header=BB71_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB71_70:                              # %if.end273
                                        #   in Loop: Header=BB71_66 Depth=1
	jmp	.LBB71_71
.LBB71_71:                              # %for.inc274
                                        #   in Loop: Header=BB71_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_66
.LBB71_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB71_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB71_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB71_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB71_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB71_77
.LBB71_76:                              # %if.else292
                                        #   in Loop: Header=BB71_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB71_77:                              # %if.end303
                                        #   in Loop: Header=BB71_73 Depth=1
	jmp	.LBB71_78
.LBB71_78:                              # %for.inc304
                                        #   in Loop: Header=BB71_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_73
.LBB71_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB71_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB71_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB71_80 Depth=1
	movl	$0, -4(%rbp)
.LBB71_82:                              # %for.cond310
                                        #   Parent Loop BB71_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB71_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB71_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB71_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB71_86
.LBB71_85:                              # %if.else328
                                        #   in Loop: Header=BB71_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB71_86:                              # %if.end342
                                        #   in Loop: Header=BB71_82 Depth=2
	jmp	.LBB71_87
.LBB71_87:                              # %for.inc343
                                        #   in Loop: Header=BB71_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_82
.LBB71_88:                              # %for.end345
                                        #   in Loop: Header=BB71_80 Depth=1
	jmp	.LBB71_89
.LBB71_89:                              # %for.inc346
                                        #   in Loop: Header=BB71_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_80
.LBB71_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB71_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB71_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB71_91 Depth=1
	movl	$0, -4(%rbp)
.LBB71_93:                              # %for.cond352
                                        #   Parent Loop BB71_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB71_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB71_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB71_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB71_97
.LBB71_96:                              # %if.else370
                                        #   in Loop: Header=BB71_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB71_97:                              # %if.end384
                                        #   in Loop: Header=BB71_93 Depth=2
	jmp	.LBB71_98
.LBB71_98:                              # %for.inc385
                                        #   in Loop: Header=BB71_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_93
.LBB71_99:                              # %for.end387
                                        #   in Loop: Header=BB71_91 Depth=1
	jmp	.LBB71_100
.LBB71_100:                             # %for.inc388
                                        #   in Loop: Header=BB71_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_91
.LBB71_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB71_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB71_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB71_102 Depth=1
	movl	$0, -4(%rbp)
.LBB71_104:                             # %for.cond394
                                        #   Parent Loop BB71_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB71_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB71_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB71_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB71_108
.LBB71_107:                             # %if.else412
                                        #   in Loop: Header=BB71_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB71_108:                             # %if.end426
                                        #   in Loop: Header=BB71_104 Depth=2
	jmp	.LBB71_109
.LBB71_109:                             # %for.inc427
                                        #   in Loop: Header=BB71_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_104
.LBB71_110:                             # %for.end429
                                        #   in Loop: Header=BB71_102 Depth=1
	jmp	.LBB71_111
.LBB71_111:                             # %for.inc430
                                        #   in Loop: Header=BB71_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_102
.LBB71_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB71_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB71_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB71_113 Depth=1
	movl	$0, -4(%rbp)
.LBB71_115:                             # %for.cond436
                                        #   Parent Loop BB71_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB71_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB71_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB71_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB71_119
.LBB71_118:                             # %if.else454
                                        #   in Loop: Header=BB71_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB71_119:                             # %if.end468
                                        #   in Loop: Header=BB71_115 Depth=2
	jmp	.LBB71_120
.LBB71_120:                             # %for.inc469
                                        #   in Loop: Header=BB71_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_115
.LBB71_121:                             # %for.end471
                                        #   in Loop: Header=BB71_113 Depth=1
	jmp	.LBB71_122
.LBB71_122:                             # %for.inc472
                                        #   in Loop: Header=BB71_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_113
.LBB71_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB71_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB71_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB71_124 Depth=1
	movl	$0, -4(%rbp)
.LBB71_126:                             # %for.cond478
                                        #   Parent Loop BB71_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB71_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB71_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB71_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB71_130
.LBB71_129:                             # %if.else496
                                        #   in Loop: Header=BB71_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB71_130:                             # %if.end510
                                        #   in Loop: Header=BB71_126 Depth=2
	jmp	.LBB71_131
.LBB71_131:                             # %for.inc511
                                        #   in Loop: Header=BB71_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_126
.LBB71_132:                             # %for.end513
                                        #   in Loop: Header=BB71_124 Depth=1
	jmp	.LBB71_133
.LBB71_133:                             # %for.inc514
                                        #   in Loop: Header=BB71_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_124
.LBB71_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB71_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB71_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB71_135 Depth=1
	movl	$0, -4(%rbp)
.LBB71_137:                             # %for.cond520
                                        #   Parent Loop BB71_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB71_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB71_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB71_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB71_141
.LBB71_140:                             # %if.else538
                                        #   in Loop: Header=BB71_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB71_141:                             # %if.end552
                                        #   in Loop: Header=BB71_137 Depth=2
	jmp	.LBB71_142
.LBB71_142:                             # %for.inc553
                                        #   in Loop: Header=BB71_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_137
.LBB71_143:                             # %for.end555
                                        #   in Loop: Header=BB71_135 Depth=1
	jmp	.LBB71_144
.LBB71_144:                             # %for.inc556
                                        #   in Loop: Header=BB71_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_135
.LBB71_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB71_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB71_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB71_146 Depth=1
	movl	$0, -4(%rbp)
.LBB71_148:                             # %for.cond562
                                        #   Parent Loop BB71_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB71_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB71_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB71_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB71_152
.LBB71_151:                             # %if.else580
                                        #   in Loop: Header=BB71_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB71_152:                             # %if.end594
                                        #   in Loop: Header=BB71_148 Depth=2
	jmp	.LBB71_153
.LBB71_153:                             # %for.inc595
                                        #   in Loop: Header=BB71_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_148
.LBB71_154:                             # %for.end597
                                        #   in Loop: Header=BB71_146 Depth=1
	jmp	.LBB71_155
.LBB71_155:                             # %for.inc598
                                        #   in Loop: Header=BB71_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_146
.LBB71_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB71_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB71_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB71_157 Depth=1
	movl	$0, -4(%rbp)
.LBB71_159:                             # %for.cond604
                                        #   Parent Loop BB71_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB71_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB71_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB71_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB71_163
.LBB71_162:                             # %if.else622
                                        #   in Loop: Header=BB71_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB71_163:                             # %if.end636
                                        #   in Loop: Header=BB71_159 Depth=2
	jmp	.LBB71_164
.LBB71_164:                             # %for.inc637
                                        #   in Loop: Header=BB71_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_159
.LBB71_165:                             # %for.end639
                                        #   in Loop: Header=BB71_157 Depth=1
	jmp	.LBB71_166
.LBB71_166:                             # %for.inc640
                                        #   in Loop: Header=BB71_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_157
.LBB71_167:                             # %for.end642
	cmpl	$1037809098, -28(%rbp)  # imm = 0x3DDBB5CA
	jne	.LBB71_169
.LBB71_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_168
.Lfunc_end71:
	.size	init_contexts.64, .Lfunc_end71-init_contexts.64
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.65
.LCPI72_0:
	.quad	4611686018427387904     # double 2
.LCPI72_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.65
	.p2align	4, 0x90
	.type	create_context_memory.65,@function
create_context_memory.65:               # @create_context_memory.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$354269740, -20(%rbp)   # imm = 0x151DBA2C
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB72_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB72_3
.LBB72_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB72_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB72_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB72_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB72_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB72_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB72_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB72_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB72_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB72_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB72_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB72_11:                              # %if.end10
                                        #   in Loop: Header=BB72_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB72_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB72_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB72_13:                              # %if.end16
                                        #   in Loop: Header=BB72_8 Depth=1
	movl	$0, -8(%rbp)
.LBB72_14:                              # %for.cond17
                                        #   Parent Loop BB72_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB72_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB72_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB72_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB72_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB72_17:                              # %if.end28
                                        #   in Loop: Header=BB72_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB72_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB72_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB72_19:                              # %if.end39
                                        #   in Loop: Header=BB72_14 Depth=2
	jmp	.LBB72_20
.LBB72_20:                              # %for.inc
                                        #   in Loop: Header=BB72_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_14
.LBB72_21:                              # %for.end
                                        #   in Loop: Header=BB72_8 Depth=1
	jmp	.LBB72_22
.LBB72_22:                              # %for.inc40
                                        #   in Loop: Header=BB72_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_8
.LBB72_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB72_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_26 Depth 2
                                        #       Child Loop BB72_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB72_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB72_24 Depth=1
	movl	$0, -8(%rbp)
.LBB72_26:                              # %for.cond47
                                        #   Parent Loop BB72_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB72_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB72_26 Depth=2
	movl	$0, -12(%rbp)
.LBB72_28:                              # %for.cond51
                                        #   Parent Loop BB72_24 Depth=1
                                        #     Parent Loop BB72_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB72_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB72_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB72_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_28
.LBB72_31:                              # %for.end63
                                        #   in Loop: Header=BB72_26 Depth=2
	jmp	.LBB72_32
.LBB72_32:                              # %for.inc64
                                        #   in Loop: Header=BB72_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_26
.LBB72_33:                              # %for.end66
                                        #   in Loop: Header=BB72_24 Depth=1
	jmp	.LBB72_34
.LBB72_34:                              # %for.inc67
                                        #   in Loop: Header=BB72_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_24
.LBB72_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB72_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB72_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB72_36 Depth=1
	vmovsd	.LCPI72_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI72_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI72_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB72_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_36
.LBB72_39:                              # %for.end98
	cmpl	$354269740, -20(%rbp)   # imm = 0x151DBA2C
	jne	.LBB72_41
.LBB72_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_40
.Lfunc_end72:
	.size	create_context_memory.65, .Lfunc_end72-create_context_memory.65
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.66
.LCPI73_0:
	.quad	4611686018427387904     # double 2
.LCPI73_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.66
	.p2align	4, 0x90
	.type	create_context_memory.66,@function
create_context_memory.66:               # @create_context_memory.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$419413406, -20(%rbp)   # imm = 0x18FFBD9E
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB73_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB73_3
.LBB73_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB73_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB73_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB73_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB73_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB73_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB73_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB73_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB73_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB73_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB73_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB73_11:                              # %if.end10
                                        #   in Loop: Header=BB73_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB73_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB73_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB73_13:                              # %if.end16
                                        #   in Loop: Header=BB73_8 Depth=1
	movl	$0, -8(%rbp)
.LBB73_14:                              # %for.cond17
                                        #   Parent Loop BB73_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB73_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB73_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB73_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB73_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB73_17:                              # %if.end28
                                        #   in Loop: Header=BB73_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB73_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB73_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB73_19:                              # %if.end39
                                        #   in Loop: Header=BB73_14 Depth=2
	jmp	.LBB73_20
.LBB73_20:                              # %for.inc
                                        #   in Loop: Header=BB73_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_14
.LBB73_21:                              # %for.end
                                        #   in Loop: Header=BB73_8 Depth=1
	jmp	.LBB73_22
.LBB73_22:                              # %for.inc40
                                        #   in Loop: Header=BB73_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_8
.LBB73_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB73_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_26 Depth 2
                                        #       Child Loop BB73_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB73_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB73_24 Depth=1
	movl	$0, -8(%rbp)
.LBB73_26:                              # %for.cond47
                                        #   Parent Loop BB73_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB73_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB73_26 Depth=2
	movl	$0, -12(%rbp)
.LBB73_28:                              # %for.cond51
                                        #   Parent Loop BB73_24 Depth=1
                                        #     Parent Loop BB73_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB73_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB73_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB73_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_28
.LBB73_31:                              # %for.end63
                                        #   in Loop: Header=BB73_26 Depth=2
	jmp	.LBB73_32
.LBB73_32:                              # %for.inc64
                                        #   in Loop: Header=BB73_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_26
.LBB73_33:                              # %for.end66
                                        #   in Loop: Header=BB73_24 Depth=1
	jmp	.LBB73_34
.LBB73_34:                              # %for.inc67
                                        #   in Loop: Header=BB73_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_24
.LBB73_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB73_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB73_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB73_36 Depth=1
	vmovsd	.LCPI73_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI73_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI73_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB73_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_36
.LBB73_39:                              # %for.end98
	cmpl	$419413406, -20(%rbp)   # imm = 0x18FFBD9E
	jne	.LBB73_41
.LBB73_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_40
.Lfunc_end73:
	.size	create_context_memory.66, .Lfunc_end73-create_context_memory.66
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.67        # -- Begin function init_contexts.67
	.p2align	4, 0x90
	.type	init_contexts.67,@function
init_contexts.67:                       # @init_contexts.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$445471216, -28(%rbp)   # imm = 0x1A8D59F0
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB74_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB74_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -4(%rbp)
.LBB74_3:                               # %for.cond2
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB74_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB74_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB74_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_7
.LBB74_6:                               # %if.else
                                        #   in Loop: Header=BB74_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_7:                               # %if.end
                                        #   in Loop: Header=BB74_3 Depth=2
	jmp	.LBB74_8
.LBB74_8:                               # %for.inc
                                        #   in Loop: Header=BB74_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_3
.LBB74_9:                               # %for.end
                                        #   in Loop: Header=BB74_1 Depth=1
	jmp	.LBB74_10
.LBB74_10:                              # %for.inc28
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_1
.LBB74_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB74_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB74_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB74_12 Depth=1
	movl	$0, -4(%rbp)
.LBB74_14:                              # %for.cond34
                                        #   Parent Loop BB74_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB74_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB74_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB74_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_18
.LBB74_17:                              # %if.else52
                                        #   in Loop: Header=BB74_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_18:                              # %if.end66
                                        #   in Loop: Header=BB74_14 Depth=2
	jmp	.LBB74_19
.LBB74_19:                              # %for.inc67
                                        #   in Loop: Header=BB74_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_14
.LBB74_20:                              # %for.end69
                                        #   in Loop: Header=BB74_12 Depth=1
	jmp	.LBB74_21
.LBB74_21:                              # %for.inc70
                                        #   in Loop: Header=BB74_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_12
.LBB74_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB74_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB74_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB74_23 Depth=1
	movl	$0, -4(%rbp)
.LBB74_25:                              # %for.cond76
                                        #   Parent Loop BB74_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB74_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB74_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB74_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_29
.LBB74_28:                              # %if.else94
                                        #   in Loop: Header=BB74_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_29:                              # %if.end108
                                        #   in Loop: Header=BB74_25 Depth=2
	jmp	.LBB74_30
.LBB74_30:                              # %for.inc109
                                        #   in Loop: Header=BB74_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_25
.LBB74_31:                              # %for.end111
                                        #   in Loop: Header=BB74_23 Depth=1
	jmp	.LBB74_32
.LBB74_32:                              # %for.inc112
                                        #   in Loop: Header=BB74_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_23
.LBB74_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB74_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB74_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB74_34 Depth=1
	movl	$0, -4(%rbp)
.LBB74_36:                              # %for.cond118
                                        #   Parent Loop BB74_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB74_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB74_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB74_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_40
.LBB74_39:                              # %if.else136
                                        #   in Loop: Header=BB74_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_40:                              # %if.end150
                                        #   in Loop: Header=BB74_36 Depth=2
	jmp	.LBB74_41
.LBB74_41:                              # %for.inc151
                                        #   in Loop: Header=BB74_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_36
.LBB74_42:                              # %for.end153
                                        #   in Loop: Header=BB74_34 Depth=1
	jmp	.LBB74_43
.LBB74_43:                              # %for.inc154
                                        #   in Loop: Header=BB74_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_34
.LBB74_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB74_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB74_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB74_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB74_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_49
.LBB74_48:                              # %if.else172
                                        #   in Loop: Header=BB74_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_49:                              # %if.end183
                                        #   in Loop: Header=BB74_45 Depth=1
	jmp	.LBB74_50
.LBB74_50:                              # %for.inc184
                                        #   in Loop: Header=BB74_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_45
.LBB74_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB74_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB74_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB74_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB74_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_56
.LBB74_55:                              # %if.else202
                                        #   in Loop: Header=BB74_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_56:                              # %if.end213
                                        #   in Loop: Header=BB74_52 Depth=1
	jmp	.LBB74_57
.LBB74_57:                              # %for.inc214
                                        #   in Loop: Header=BB74_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_52
.LBB74_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB74_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB74_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB74_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB74_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_63
.LBB74_62:                              # %if.else232
                                        #   in Loop: Header=BB74_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_63:                              # %if.end243
                                        #   in Loop: Header=BB74_59 Depth=1
	jmp	.LBB74_64
.LBB74_64:                              # %for.inc244
                                        #   in Loop: Header=BB74_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_59
.LBB74_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB74_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB74_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB74_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB74_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_70
.LBB74_69:                              # %if.else262
                                        #   in Loop: Header=BB74_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_70:                              # %if.end273
                                        #   in Loop: Header=BB74_66 Depth=1
	jmp	.LBB74_71
.LBB74_71:                              # %for.inc274
                                        #   in Loop: Header=BB74_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_66
.LBB74_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB74_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB74_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB74_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB74_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_77
.LBB74_76:                              # %if.else292
                                        #   in Loop: Header=BB74_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_77:                              # %if.end303
                                        #   in Loop: Header=BB74_73 Depth=1
	jmp	.LBB74_78
.LBB74_78:                              # %for.inc304
                                        #   in Loop: Header=BB74_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_73
.LBB74_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB74_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB74_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB74_80 Depth=1
	movl	$0, -4(%rbp)
.LBB74_82:                              # %for.cond310
                                        #   Parent Loop BB74_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB74_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB74_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB74_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_86
.LBB74_85:                              # %if.else328
                                        #   in Loop: Header=BB74_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_86:                              # %if.end342
                                        #   in Loop: Header=BB74_82 Depth=2
	jmp	.LBB74_87
.LBB74_87:                              # %for.inc343
                                        #   in Loop: Header=BB74_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_82
.LBB74_88:                              # %for.end345
                                        #   in Loop: Header=BB74_80 Depth=1
	jmp	.LBB74_89
.LBB74_89:                              # %for.inc346
                                        #   in Loop: Header=BB74_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_80
.LBB74_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB74_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB74_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB74_91 Depth=1
	movl	$0, -4(%rbp)
.LBB74_93:                              # %for.cond352
                                        #   Parent Loop BB74_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB74_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB74_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB74_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_97
.LBB74_96:                              # %if.else370
                                        #   in Loop: Header=BB74_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_97:                              # %if.end384
                                        #   in Loop: Header=BB74_93 Depth=2
	jmp	.LBB74_98
.LBB74_98:                              # %for.inc385
                                        #   in Loop: Header=BB74_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_93
.LBB74_99:                              # %for.end387
                                        #   in Loop: Header=BB74_91 Depth=1
	jmp	.LBB74_100
.LBB74_100:                             # %for.inc388
                                        #   in Loop: Header=BB74_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_91
.LBB74_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB74_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB74_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB74_102 Depth=1
	movl	$0, -4(%rbp)
.LBB74_104:                             # %for.cond394
                                        #   Parent Loop BB74_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB74_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB74_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB74_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_108
.LBB74_107:                             # %if.else412
                                        #   in Loop: Header=BB74_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_108:                             # %if.end426
                                        #   in Loop: Header=BB74_104 Depth=2
	jmp	.LBB74_109
.LBB74_109:                             # %for.inc427
                                        #   in Loop: Header=BB74_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_104
.LBB74_110:                             # %for.end429
                                        #   in Loop: Header=BB74_102 Depth=1
	jmp	.LBB74_111
.LBB74_111:                             # %for.inc430
                                        #   in Loop: Header=BB74_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_102
.LBB74_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB74_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB74_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB74_113 Depth=1
	movl	$0, -4(%rbp)
.LBB74_115:                             # %for.cond436
                                        #   Parent Loop BB74_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB74_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB74_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB74_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_119
.LBB74_118:                             # %if.else454
                                        #   in Loop: Header=BB74_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_119:                             # %if.end468
                                        #   in Loop: Header=BB74_115 Depth=2
	jmp	.LBB74_120
.LBB74_120:                             # %for.inc469
                                        #   in Loop: Header=BB74_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_115
.LBB74_121:                             # %for.end471
                                        #   in Loop: Header=BB74_113 Depth=1
	jmp	.LBB74_122
.LBB74_122:                             # %for.inc472
                                        #   in Loop: Header=BB74_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_113
.LBB74_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB74_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB74_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB74_124 Depth=1
	movl	$0, -4(%rbp)
.LBB74_126:                             # %for.cond478
                                        #   Parent Loop BB74_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB74_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB74_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB74_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_130
.LBB74_129:                             # %if.else496
                                        #   in Loop: Header=BB74_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_130:                             # %if.end510
                                        #   in Loop: Header=BB74_126 Depth=2
	jmp	.LBB74_131
.LBB74_131:                             # %for.inc511
                                        #   in Loop: Header=BB74_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_126
.LBB74_132:                             # %for.end513
                                        #   in Loop: Header=BB74_124 Depth=1
	jmp	.LBB74_133
.LBB74_133:                             # %for.inc514
                                        #   in Loop: Header=BB74_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_124
.LBB74_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB74_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB74_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB74_135 Depth=1
	movl	$0, -4(%rbp)
.LBB74_137:                             # %for.cond520
                                        #   Parent Loop BB74_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB74_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB74_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB74_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_141
.LBB74_140:                             # %if.else538
                                        #   in Loop: Header=BB74_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_141:                             # %if.end552
                                        #   in Loop: Header=BB74_137 Depth=2
	jmp	.LBB74_142
.LBB74_142:                             # %for.inc553
                                        #   in Loop: Header=BB74_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_137
.LBB74_143:                             # %for.end555
                                        #   in Loop: Header=BB74_135 Depth=1
	jmp	.LBB74_144
.LBB74_144:                             # %for.inc556
                                        #   in Loop: Header=BB74_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_135
.LBB74_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB74_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB74_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB74_146 Depth=1
	movl	$0, -4(%rbp)
.LBB74_148:                             # %for.cond562
                                        #   Parent Loop BB74_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB74_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB74_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB74_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_152
.LBB74_151:                             # %if.else580
                                        #   in Loop: Header=BB74_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_152:                             # %if.end594
                                        #   in Loop: Header=BB74_148 Depth=2
	jmp	.LBB74_153
.LBB74_153:                             # %for.inc595
                                        #   in Loop: Header=BB74_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_148
.LBB74_154:                             # %for.end597
                                        #   in Loop: Header=BB74_146 Depth=1
	jmp	.LBB74_155
.LBB74_155:                             # %for.inc598
                                        #   in Loop: Header=BB74_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_146
.LBB74_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB74_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB74_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB74_157 Depth=1
	movl	$0, -4(%rbp)
.LBB74_159:                             # %for.cond604
                                        #   Parent Loop BB74_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB74_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB74_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB74_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB74_163
.LBB74_162:                             # %if.else622
                                        #   in Loop: Header=BB74_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB74_163:                             # %if.end636
                                        #   in Loop: Header=BB74_159 Depth=2
	jmp	.LBB74_164
.LBB74_164:                             # %for.inc637
                                        #   in Loop: Header=BB74_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_159
.LBB74_165:                             # %for.end639
                                        #   in Loop: Header=BB74_157 Depth=1
	jmp	.LBB74_166
.LBB74_166:                             # %for.inc640
                                        #   in Loop: Header=BB74_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_157
.LBB74_167:                             # %for.end642
	cmpl	$445471216, -28(%rbp)   # imm = 0x1A8D59F0
	jne	.LBB74_169
.LBB74_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_168
.Lfunc_end74:
	.size	init_contexts.67, .Lfunc_end74-init_contexts.67
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.68
.LCPI75_0:
	.quad	4611686018427387904     # double 2
.LCPI75_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.68
	.p2align	4, 0x90
	.type	create_context_memory.68,@function
create_context_memory.68:               # @create_context_memory.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$147388065, -20(%rbp)   # imm = 0x8C8F6A1
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB75_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB75_3
.LBB75_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB75_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB75_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB75_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB75_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB75_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB75_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB75_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB75_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB75_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB75_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB75_11:                              # %if.end10
                                        #   in Loop: Header=BB75_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB75_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB75_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB75_13:                              # %if.end16
                                        #   in Loop: Header=BB75_8 Depth=1
	movl	$0, -8(%rbp)
.LBB75_14:                              # %for.cond17
                                        #   Parent Loop BB75_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB75_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB75_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB75_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB75_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB75_17:                              # %if.end28
                                        #   in Loop: Header=BB75_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB75_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB75_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB75_19:                              # %if.end39
                                        #   in Loop: Header=BB75_14 Depth=2
	jmp	.LBB75_20
.LBB75_20:                              # %for.inc
                                        #   in Loop: Header=BB75_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_14
.LBB75_21:                              # %for.end
                                        #   in Loop: Header=BB75_8 Depth=1
	jmp	.LBB75_22
.LBB75_22:                              # %for.inc40
                                        #   in Loop: Header=BB75_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_8
.LBB75_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB75_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_26 Depth 2
                                        #       Child Loop BB75_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB75_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB75_24 Depth=1
	movl	$0, -8(%rbp)
.LBB75_26:                              # %for.cond47
                                        #   Parent Loop BB75_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB75_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB75_26 Depth=2
	movl	$0, -12(%rbp)
.LBB75_28:                              # %for.cond51
                                        #   Parent Loop BB75_24 Depth=1
                                        #     Parent Loop BB75_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB75_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB75_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB75_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_28
.LBB75_31:                              # %for.end63
                                        #   in Loop: Header=BB75_26 Depth=2
	jmp	.LBB75_32
.LBB75_32:                              # %for.inc64
                                        #   in Loop: Header=BB75_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_26
.LBB75_33:                              # %for.end66
                                        #   in Loop: Header=BB75_24 Depth=1
	jmp	.LBB75_34
.LBB75_34:                              # %for.inc67
                                        #   in Loop: Header=BB75_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_24
.LBB75_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB75_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB75_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB75_36 Depth=1
	vmovsd	.LCPI75_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI75_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI75_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB75_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_36
.LBB75_39:                              # %for.end98
	cmpl	$147388065, -20(%rbp)   # imm = 0x8C8F6A1
	jne	.LBB75_41
.LBB75_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_40
.Lfunc_end75:
	.size	create_context_memory.68, .Lfunc_end75-create_context_memory.68
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.69        # -- Begin function init_contexts.69
	.p2align	4, 0x90
	.type	init_contexts.69,@function
init_contexts.69:                       # @init_contexts.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$153891008, -28(%rbp)   # imm = 0x92C30C0
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB76_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB76_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -4(%rbp)
.LBB76_3:                               # %for.cond2
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB76_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB76_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB76_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB76_7
.LBB76_6:                               # %if.else
                                        #   in Loop: Header=BB76_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB76_7:                               # %if.end
                                        #   in Loop: Header=BB76_3 Depth=2
	jmp	.LBB76_8
.LBB76_8:                               # %for.inc
                                        #   in Loop: Header=BB76_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_3
.LBB76_9:                               # %for.end
                                        #   in Loop: Header=BB76_1 Depth=1
	jmp	.LBB76_10
.LBB76_10:                              # %for.inc28
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_1
.LBB76_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB76_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB76_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB76_12 Depth=1
	movl	$0, -4(%rbp)
.LBB76_14:                              # %for.cond34
                                        #   Parent Loop BB76_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB76_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB76_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB76_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB76_18
.LBB76_17:                              # %if.else52
                                        #   in Loop: Header=BB76_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB76_18:                              # %if.end66
                                        #   in Loop: Header=BB76_14 Depth=2
	jmp	.LBB76_19
.LBB76_19:                              # %for.inc67
                                        #   in Loop: Header=BB76_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_14
.LBB76_20:                              # %for.end69
                                        #   in Loop: Header=BB76_12 Depth=1
	jmp	.LBB76_21
.LBB76_21:                              # %for.inc70
                                        #   in Loop: Header=BB76_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_12
.LBB76_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB76_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB76_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB76_23 Depth=1
	movl	$0, -4(%rbp)
.LBB76_25:                              # %for.cond76
                                        #   Parent Loop BB76_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB76_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB76_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB76_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB76_29
.LBB76_28:                              # %if.else94
                                        #   in Loop: Header=BB76_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB76_29:                              # %if.end108
                                        #   in Loop: Header=BB76_25 Depth=2
	jmp	.LBB76_30
.LBB76_30:                              # %for.inc109
                                        #   in Loop: Header=BB76_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_25
.LBB76_31:                              # %for.end111
                                        #   in Loop: Header=BB76_23 Depth=1
	jmp	.LBB76_32
.LBB76_32:                              # %for.inc112
                                        #   in Loop: Header=BB76_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_23
.LBB76_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB76_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB76_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB76_34 Depth=1
	movl	$0, -4(%rbp)
.LBB76_36:                              # %for.cond118
                                        #   Parent Loop BB76_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB76_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB76_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB76_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB76_40
.LBB76_39:                              # %if.else136
                                        #   in Loop: Header=BB76_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB76_40:                              # %if.end150
                                        #   in Loop: Header=BB76_36 Depth=2
	jmp	.LBB76_41
.LBB76_41:                              # %for.inc151
                                        #   in Loop: Header=BB76_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_36
.LBB76_42:                              # %for.end153
                                        #   in Loop: Header=BB76_34 Depth=1
	jmp	.LBB76_43
.LBB76_43:                              # %for.inc154
                                        #   in Loop: Header=BB76_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_34
.LBB76_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB76_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB76_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB76_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB76_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB76_49
.LBB76_48:                              # %if.else172
                                        #   in Loop: Header=BB76_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB76_49:                              # %if.end183
                                        #   in Loop: Header=BB76_45 Depth=1
	jmp	.LBB76_50
.LBB76_50:                              # %for.inc184
                                        #   in Loop: Header=BB76_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_45
.LBB76_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB76_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB76_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB76_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB76_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB76_56
.LBB76_55:                              # %if.else202
                                        #   in Loop: Header=BB76_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB76_56:                              # %if.end213
                                        #   in Loop: Header=BB76_52 Depth=1
	jmp	.LBB76_57
.LBB76_57:                              # %for.inc214
                                        #   in Loop: Header=BB76_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_52
.LBB76_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB76_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB76_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB76_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB76_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB76_63
.LBB76_62:                              # %if.else232
                                        #   in Loop: Header=BB76_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB76_63:                              # %if.end243
                                        #   in Loop: Header=BB76_59 Depth=1
	jmp	.LBB76_64
.LBB76_64:                              # %for.inc244
                                        #   in Loop: Header=BB76_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_59
.LBB76_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB76_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB76_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB76_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB76_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB76_70
.LBB76_69:                              # %if.else262
                                        #   in Loop: Header=BB76_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB76_70:                              # %if.end273
                                        #   in Loop: Header=BB76_66 Depth=1
	jmp	.LBB76_71
.LBB76_71:                              # %for.inc274
                                        #   in Loop: Header=BB76_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_66
.LBB76_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB76_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB76_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB76_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB76_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB76_77
.LBB76_76:                              # %if.else292
                                        #   in Loop: Header=BB76_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB76_77:                              # %if.end303
                                        #   in Loop: Header=BB76_73 Depth=1
	jmp	.LBB76_78
.LBB76_78:                              # %for.inc304
                                        #   in Loop: Header=BB76_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_73
.LBB76_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB76_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB76_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB76_80 Depth=1
	movl	$0, -4(%rbp)
.LBB76_82:                              # %for.cond310
                                        #   Parent Loop BB76_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB76_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB76_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB76_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB76_86
.LBB76_85:                              # %if.else328
                                        #   in Loop: Header=BB76_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB76_86:                              # %if.end342
                                        #   in Loop: Header=BB76_82 Depth=2
	jmp	.LBB76_87
.LBB76_87:                              # %for.inc343
                                        #   in Loop: Header=BB76_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_82
.LBB76_88:                              # %for.end345
                                        #   in Loop: Header=BB76_80 Depth=1
	jmp	.LBB76_89
.LBB76_89:                              # %for.inc346
                                        #   in Loop: Header=BB76_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_80
.LBB76_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB76_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB76_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB76_91 Depth=1
	movl	$0, -4(%rbp)
.LBB76_93:                              # %for.cond352
                                        #   Parent Loop BB76_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB76_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB76_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB76_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB76_97
.LBB76_96:                              # %if.else370
                                        #   in Loop: Header=BB76_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB76_97:                              # %if.end384
                                        #   in Loop: Header=BB76_93 Depth=2
	jmp	.LBB76_98
.LBB76_98:                              # %for.inc385
                                        #   in Loop: Header=BB76_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_93
.LBB76_99:                              # %for.end387
                                        #   in Loop: Header=BB76_91 Depth=1
	jmp	.LBB76_100
.LBB76_100:                             # %for.inc388
                                        #   in Loop: Header=BB76_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_91
.LBB76_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB76_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB76_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB76_102 Depth=1
	movl	$0, -4(%rbp)
.LBB76_104:                             # %for.cond394
                                        #   Parent Loop BB76_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB76_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB76_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB76_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB76_108
.LBB76_107:                             # %if.else412
                                        #   in Loop: Header=BB76_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB76_108:                             # %if.end426
                                        #   in Loop: Header=BB76_104 Depth=2
	jmp	.LBB76_109
.LBB76_109:                             # %for.inc427
                                        #   in Loop: Header=BB76_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_104
.LBB76_110:                             # %for.end429
                                        #   in Loop: Header=BB76_102 Depth=1
	jmp	.LBB76_111
.LBB76_111:                             # %for.inc430
                                        #   in Loop: Header=BB76_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_102
.LBB76_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB76_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB76_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB76_113 Depth=1
	movl	$0, -4(%rbp)
.LBB76_115:                             # %for.cond436
                                        #   Parent Loop BB76_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB76_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB76_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB76_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB76_119
.LBB76_118:                             # %if.else454
                                        #   in Loop: Header=BB76_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB76_119:                             # %if.end468
                                        #   in Loop: Header=BB76_115 Depth=2
	jmp	.LBB76_120
.LBB76_120:                             # %for.inc469
                                        #   in Loop: Header=BB76_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_115
.LBB76_121:                             # %for.end471
                                        #   in Loop: Header=BB76_113 Depth=1
	jmp	.LBB76_122
.LBB76_122:                             # %for.inc472
                                        #   in Loop: Header=BB76_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_113
.LBB76_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB76_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB76_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB76_124 Depth=1
	movl	$0, -4(%rbp)
.LBB76_126:                             # %for.cond478
                                        #   Parent Loop BB76_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB76_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB76_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB76_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB76_130
.LBB76_129:                             # %if.else496
                                        #   in Loop: Header=BB76_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB76_130:                             # %if.end510
                                        #   in Loop: Header=BB76_126 Depth=2
	jmp	.LBB76_131
.LBB76_131:                             # %for.inc511
                                        #   in Loop: Header=BB76_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_126
.LBB76_132:                             # %for.end513
                                        #   in Loop: Header=BB76_124 Depth=1
	jmp	.LBB76_133
.LBB76_133:                             # %for.inc514
                                        #   in Loop: Header=BB76_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_124
.LBB76_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB76_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB76_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB76_135 Depth=1
	movl	$0, -4(%rbp)
.LBB76_137:                             # %for.cond520
                                        #   Parent Loop BB76_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB76_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB76_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB76_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB76_141
.LBB76_140:                             # %if.else538
                                        #   in Loop: Header=BB76_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB76_141:                             # %if.end552
                                        #   in Loop: Header=BB76_137 Depth=2
	jmp	.LBB76_142
.LBB76_142:                             # %for.inc553
                                        #   in Loop: Header=BB76_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_137
.LBB76_143:                             # %for.end555
                                        #   in Loop: Header=BB76_135 Depth=1
	jmp	.LBB76_144
.LBB76_144:                             # %for.inc556
                                        #   in Loop: Header=BB76_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_135
.LBB76_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB76_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB76_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB76_146 Depth=1
	movl	$0, -4(%rbp)
.LBB76_148:                             # %for.cond562
                                        #   Parent Loop BB76_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB76_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB76_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB76_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB76_152
.LBB76_151:                             # %if.else580
                                        #   in Loop: Header=BB76_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB76_152:                             # %if.end594
                                        #   in Loop: Header=BB76_148 Depth=2
	jmp	.LBB76_153
.LBB76_153:                             # %for.inc595
                                        #   in Loop: Header=BB76_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_148
.LBB76_154:                             # %for.end597
                                        #   in Loop: Header=BB76_146 Depth=1
	jmp	.LBB76_155
.LBB76_155:                             # %for.inc598
                                        #   in Loop: Header=BB76_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_146
.LBB76_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB76_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB76_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB76_157 Depth=1
	movl	$0, -4(%rbp)
.LBB76_159:                             # %for.cond604
                                        #   Parent Loop BB76_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB76_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB76_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB76_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB76_163
.LBB76_162:                             # %if.else622
                                        #   in Loop: Header=BB76_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB76_163:                             # %if.end636
                                        #   in Loop: Header=BB76_159 Depth=2
	jmp	.LBB76_164
.LBB76_164:                             # %for.inc637
                                        #   in Loop: Header=BB76_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_159
.LBB76_165:                             # %for.end639
                                        #   in Loop: Header=BB76_157 Depth=1
	jmp	.LBB76_166
.LBB76_166:                             # %for.inc640
                                        #   in Loop: Header=BB76_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_157
.LBB76_167:                             # %for.end642
	cmpl	$153891008, -28(%rbp)   # imm = 0x92C30C0
	jne	.LBB76_169
.LBB76_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_168
.Lfunc_end76:
	.size	init_contexts.69, .Lfunc_end76-init_contexts.69
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.70
.LCPI77_0:
	.quad	4611686018427387904     # double 2
.LCPI77_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.70
	.p2align	4, 0x90
	.type	create_context_memory.70,@function
create_context_memory.70:               # @create_context_memory.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1834924661, -20(%rbp)  # imm = 0x6D5EBA75
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB77_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB77_3
.LBB77_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB77_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB77_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB77_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB77_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB77_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB77_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB77_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB77_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB77_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB77_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB77_11:                              # %if.end10
                                        #   in Loop: Header=BB77_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB77_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB77_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB77_13:                              # %if.end16
                                        #   in Loop: Header=BB77_8 Depth=1
	movl	$0, -8(%rbp)
.LBB77_14:                              # %for.cond17
                                        #   Parent Loop BB77_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB77_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB77_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB77_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB77_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB77_17:                              # %if.end28
                                        #   in Loop: Header=BB77_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB77_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB77_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB77_19:                              # %if.end39
                                        #   in Loop: Header=BB77_14 Depth=2
	jmp	.LBB77_20
.LBB77_20:                              # %for.inc
                                        #   in Loop: Header=BB77_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_14
.LBB77_21:                              # %for.end
                                        #   in Loop: Header=BB77_8 Depth=1
	jmp	.LBB77_22
.LBB77_22:                              # %for.inc40
                                        #   in Loop: Header=BB77_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_8
.LBB77_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB77_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_26 Depth 2
                                        #       Child Loop BB77_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB77_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB77_24 Depth=1
	movl	$0, -8(%rbp)
.LBB77_26:                              # %for.cond47
                                        #   Parent Loop BB77_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB77_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB77_26 Depth=2
	movl	$0, -12(%rbp)
.LBB77_28:                              # %for.cond51
                                        #   Parent Loop BB77_24 Depth=1
                                        #     Parent Loop BB77_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB77_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB77_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB77_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_28
.LBB77_31:                              # %for.end63
                                        #   in Loop: Header=BB77_26 Depth=2
	jmp	.LBB77_32
.LBB77_32:                              # %for.inc64
                                        #   in Loop: Header=BB77_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_26
.LBB77_33:                              # %for.end66
                                        #   in Loop: Header=BB77_24 Depth=1
	jmp	.LBB77_34
.LBB77_34:                              # %for.inc67
                                        #   in Loop: Header=BB77_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_24
.LBB77_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB77_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB77_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB77_36 Depth=1
	vmovsd	.LCPI77_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI77_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI77_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB77_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_36
.LBB77_39:                              # %for.end98
	cmpl	$1834924661, -20(%rbp)  # imm = 0x6D5EBA75
	jne	.LBB77_41
.LBB77_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_40
.Lfunc_end77:
	.size	create_context_memory.70, .Lfunc_end77-create_context_memory.70
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.71
.LCPI78_0:
	.quad	4611686018427387904     # double 2
.LCPI78_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.71
	.p2align	4, 0x90
	.type	create_context_memory.71,@function
create_context_memory.71:               # @create_context_memory.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1453131980, -20(%rbp)  # imm = 0x569D08CC
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB78_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB78_3
.LBB78_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB78_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB78_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB78_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB78_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB78_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB78_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB78_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB78_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB78_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB78_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB78_11:                              # %if.end10
                                        #   in Loop: Header=BB78_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB78_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB78_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB78_13:                              # %if.end16
                                        #   in Loop: Header=BB78_8 Depth=1
	movl	$0, -8(%rbp)
.LBB78_14:                              # %for.cond17
                                        #   Parent Loop BB78_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB78_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB78_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB78_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB78_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB78_17:                              # %if.end28
                                        #   in Loop: Header=BB78_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB78_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB78_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB78_19:                              # %if.end39
                                        #   in Loop: Header=BB78_14 Depth=2
	jmp	.LBB78_20
.LBB78_20:                              # %for.inc
                                        #   in Loop: Header=BB78_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_14
.LBB78_21:                              # %for.end
                                        #   in Loop: Header=BB78_8 Depth=1
	jmp	.LBB78_22
.LBB78_22:                              # %for.inc40
                                        #   in Loop: Header=BB78_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_8
.LBB78_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB78_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_26 Depth 2
                                        #       Child Loop BB78_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB78_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB78_24 Depth=1
	movl	$0, -8(%rbp)
.LBB78_26:                              # %for.cond47
                                        #   Parent Loop BB78_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB78_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB78_26 Depth=2
	movl	$0, -12(%rbp)
.LBB78_28:                              # %for.cond51
                                        #   Parent Loop BB78_24 Depth=1
                                        #     Parent Loop BB78_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB78_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB78_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB78_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB78_28
.LBB78_31:                              # %for.end63
                                        #   in Loop: Header=BB78_26 Depth=2
	jmp	.LBB78_32
.LBB78_32:                              # %for.inc64
                                        #   in Loop: Header=BB78_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_26
.LBB78_33:                              # %for.end66
                                        #   in Loop: Header=BB78_24 Depth=1
	jmp	.LBB78_34
.LBB78_34:                              # %for.inc67
                                        #   in Loop: Header=BB78_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_24
.LBB78_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB78_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB78_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB78_36 Depth=1
	vmovsd	.LCPI78_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI78_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI78_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB78_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_36
.LBB78_39:                              # %for.end98
	cmpl	$1453131980, -20(%rbp)  # imm = 0x569D08CC
	jne	.LBB78_41
.LBB78_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_40
.Lfunc_end78:
	.size	create_context_memory.71, .Lfunc_end78-create_context_memory.71
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.72
.LCPI79_0:
	.quad	4611686018427387904     # double 2
.LCPI79_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.72
	.p2align	4, 0x90
	.type	create_context_memory.72,@function
create_context_memory.72:               # @create_context_memory.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$854985583, -20(%rbp)   # imm = 0x32F60B6F
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB79_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB79_3
.LBB79_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB79_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB79_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB79_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB79_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB79_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB79_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB79_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB79_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB79_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB79_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB79_11:                              # %if.end10
                                        #   in Loop: Header=BB79_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB79_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB79_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB79_13:                              # %if.end16
                                        #   in Loop: Header=BB79_8 Depth=1
	movl	$0, -8(%rbp)
.LBB79_14:                              # %for.cond17
                                        #   Parent Loop BB79_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB79_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB79_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB79_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB79_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB79_17:                              # %if.end28
                                        #   in Loop: Header=BB79_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB79_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB79_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB79_19:                              # %if.end39
                                        #   in Loop: Header=BB79_14 Depth=2
	jmp	.LBB79_20
.LBB79_20:                              # %for.inc
                                        #   in Loop: Header=BB79_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_14
.LBB79_21:                              # %for.end
                                        #   in Loop: Header=BB79_8 Depth=1
	jmp	.LBB79_22
.LBB79_22:                              # %for.inc40
                                        #   in Loop: Header=BB79_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_8
.LBB79_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB79_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_26 Depth 2
                                        #       Child Loop BB79_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB79_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB79_24 Depth=1
	movl	$0, -8(%rbp)
.LBB79_26:                              # %for.cond47
                                        #   Parent Loop BB79_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB79_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB79_26 Depth=2
	movl	$0, -12(%rbp)
.LBB79_28:                              # %for.cond51
                                        #   Parent Loop BB79_24 Depth=1
                                        #     Parent Loop BB79_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB79_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB79_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB79_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_28
.LBB79_31:                              # %for.end63
                                        #   in Loop: Header=BB79_26 Depth=2
	jmp	.LBB79_32
.LBB79_32:                              # %for.inc64
                                        #   in Loop: Header=BB79_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_26
.LBB79_33:                              # %for.end66
                                        #   in Loop: Header=BB79_24 Depth=1
	jmp	.LBB79_34
.LBB79_34:                              # %for.inc67
                                        #   in Loop: Header=BB79_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_24
.LBB79_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB79_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB79_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB79_36 Depth=1
	vmovsd	.LCPI79_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI79_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI79_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB79_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_36
.LBB79_39:                              # %for.end98
	cmpl	$854985583, -20(%rbp)   # imm = 0x32F60B6F
	jne	.LBB79_41
.LBB79_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_40
.Lfunc_end79:
	.size	create_context_memory.72, .Lfunc_end79-create_context_memory.72
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.73        # -- Begin function init_contexts.73
	.p2align	4, 0x90
	.type	init_contexts.73,@function
init_contexts.73:                       # @init_contexts.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$905336091, -28(%rbp)   # imm = 0x35F6551B
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB80_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB80_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	$0, -4(%rbp)
.LBB80_3:                               # %for.cond2
                                        #   Parent Loop BB80_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB80_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB80_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB80_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB80_7
.LBB80_6:                               # %if.else
                                        #   in Loop: Header=BB80_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB80_7:                               # %if.end
                                        #   in Loop: Header=BB80_3 Depth=2
	jmp	.LBB80_8
.LBB80_8:                               # %for.inc
                                        #   in Loop: Header=BB80_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_3
.LBB80_9:                               # %for.end
                                        #   in Loop: Header=BB80_1 Depth=1
	jmp	.LBB80_10
.LBB80_10:                              # %for.inc28
                                        #   in Loop: Header=BB80_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_1
.LBB80_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB80_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB80_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB80_12 Depth=1
	movl	$0, -4(%rbp)
.LBB80_14:                              # %for.cond34
                                        #   Parent Loop BB80_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB80_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB80_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB80_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB80_18
.LBB80_17:                              # %if.else52
                                        #   in Loop: Header=BB80_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB80_18:                              # %if.end66
                                        #   in Loop: Header=BB80_14 Depth=2
	jmp	.LBB80_19
.LBB80_19:                              # %for.inc67
                                        #   in Loop: Header=BB80_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_14
.LBB80_20:                              # %for.end69
                                        #   in Loop: Header=BB80_12 Depth=1
	jmp	.LBB80_21
.LBB80_21:                              # %for.inc70
                                        #   in Loop: Header=BB80_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_12
.LBB80_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB80_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB80_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB80_23 Depth=1
	movl	$0, -4(%rbp)
.LBB80_25:                              # %for.cond76
                                        #   Parent Loop BB80_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB80_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB80_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB80_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB80_29
.LBB80_28:                              # %if.else94
                                        #   in Loop: Header=BB80_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB80_29:                              # %if.end108
                                        #   in Loop: Header=BB80_25 Depth=2
	jmp	.LBB80_30
.LBB80_30:                              # %for.inc109
                                        #   in Loop: Header=BB80_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_25
.LBB80_31:                              # %for.end111
                                        #   in Loop: Header=BB80_23 Depth=1
	jmp	.LBB80_32
.LBB80_32:                              # %for.inc112
                                        #   in Loop: Header=BB80_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_23
.LBB80_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB80_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB80_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB80_34 Depth=1
	movl	$0, -4(%rbp)
.LBB80_36:                              # %for.cond118
                                        #   Parent Loop BB80_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB80_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB80_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB80_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB80_40
.LBB80_39:                              # %if.else136
                                        #   in Loop: Header=BB80_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB80_40:                              # %if.end150
                                        #   in Loop: Header=BB80_36 Depth=2
	jmp	.LBB80_41
.LBB80_41:                              # %for.inc151
                                        #   in Loop: Header=BB80_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_36
.LBB80_42:                              # %for.end153
                                        #   in Loop: Header=BB80_34 Depth=1
	jmp	.LBB80_43
.LBB80_43:                              # %for.inc154
                                        #   in Loop: Header=BB80_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_34
.LBB80_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB80_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB80_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB80_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB80_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB80_49
.LBB80_48:                              # %if.else172
                                        #   in Loop: Header=BB80_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB80_49:                              # %if.end183
                                        #   in Loop: Header=BB80_45 Depth=1
	jmp	.LBB80_50
.LBB80_50:                              # %for.inc184
                                        #   in Loop: Header=BB80_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_45
.LBB80_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB80_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB80_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB80_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB80_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB80_56
.LBB80_55:                              # %if.else202
                                        #   in Loop: Header=BB80_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB80_56:                              # %if.end213
                                        #   in Loop: Header=BB80_52 Depth=1
	jmp	.LBB80_57
.LBB80_57:                              # %for.inc214
                                        #   in Loop: Header=BB80_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_52
.LBB80_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB80_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB80_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB80_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB80_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB80_63
.LBB80_62:                              # %if.else232
                                        #   in Loop: Header=BB80_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB80_63:                              # %if.end243
                                        #   in Loop: Header=BB80_59 Depth=1
	jmp	.LBB80_64
.LBB80_64:                              # %for.inc244
                                        #   in Loop: Header=BB80_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_59
.LBB80_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB80_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB80_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB80_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB80_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB80_70
.LBB80_69:                              # %if.else262
                                        #   in Loop: Header=BB80_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB80_70:                              # %if.end273
                                        #   in Loop: Header=BB80_66 Depth=1
	jmp	.LBB80_71
.LBB80_71:                              # %for.inc274
                                        #   in Loop: Header=BB80_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_66
.LBB80_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB80_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB80_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB80_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB80_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB80_77
.LBB80_76:                              # %if.else292
                                        #   in Loop: Header=BB80_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB80_77:                              # %if.end303
                                        #   in Loop: Header=BB80_73 Depth=1
	jmp	.LBB80_78
.LBB80_78:                              # %for.inc304
                                        #   in Loop: Header=BB80_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_73
.LBB80_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB80_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB80_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB80_80 Depth=1
	movl	$0, -4(%rbp)
.LBB80_82:                              # %for.cond310
                                        #   Parent Loop BB80_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB80_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB80_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB80_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB80_86
.LBB80_85:                              # %if.else328
                                        #   in Loop: Header=BB80_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB80_86:                              # %if.end342
                                        #   in Loop: Header=BB80_82 Depth=2
	jmp	.LBB80_87
.LBB80_87:                              # %for.inc343
                                        #   in Loop: Header=BB80_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_82
.LBB80_88:                              # %for.end345
                                        #   in Loop: Header=BB80_80 Depth=1
	jmp	.LBB80_89
.LBB80_89:                              # %for.inc346
                                        #   in Loop: Header=BB80_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_80
.LBB80_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB80_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB80_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB80_91 Depth=1
	movl	$0, -4(%rbp)
.LBB80_93:                              # %for.cond352
                                        #   Parent Loop BB80_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB80_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB80_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB80_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB80_97
.LBB80_96:                              # %if.else370
                                        #   in Loop: Header=BB80_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB80_97:                              # %if.end384
                                        #   in Loop: Header=BB80_93 Depth=2
	jmp	.LBB80_98
.LBB80_98:                              # %for.inc385
                                        #   in Loop: Header=BB80_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_93
.LBB80_99:                              # %for.end387
                                        #   in Loop: Header=BB80_91 Depth=1
	jmp	.LBB80_100
.LBB80_100:                             # %for.inc388
                                        #   in Loop: Header=BB80_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_91
.LBB80_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB80_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB80_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB80_102 Depth=1
	movl	$0, -4(%rbp)
.LBB80_104:                             # %for.cond394
                                        #   Parent Loop BB80_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB80_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB80_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB80_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB80_108
.LBB80_107:                             # %if.else412
                                        #   in Loop: Header=BB80_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB80_108:                             # %if.end426
                                        #   in Loop: Header=BB80_104 Depth=2
	jmp	.LBB80_109
.LBB80_109:                             # %for.inc427
                                        #   in Loop: Header=BB80_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_104
.LBB80_110:                             # %for.end429
                                        #   in Loop: Header=BB80_102 Depth=1
	jmp	.LBB80_111
.LBB80_111:                             # %for.inc430
                                        #   in Loop: Header=BB80_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_102
.LBB80_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB80_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB80_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB80_113 Depth=1
	movl	$0, -4(%rbp)
.LBB80_115:                             # %for.cond436
                                        #   Parent Loop BB80_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB80_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB80_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB80_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB80_119
.LBB80_118:                             # %if.else454
                                        #   in Loop: Header=BB80_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB80_119:                             # %if.end468
                                        #   in Loop: Header=BB80_115 Depth=2
	jmp	.LBB80_120
.LBB80_120:                             # %for.inc469
                                        #   in Loop: Header=BB80_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_115
.LBB80_121:                             # %for.end471
                                        #   in Loop: Header=BB80_113 Depth=1
	jmp	.LBB80_122
.LBB80_122:                             # %for.inc472
                                        #   in Loop: Header=BB80_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_113
.LBB80_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB80_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB80_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB80_124 Depth=1
	movl	$0, -4(%rbp)
.LBB80_126:                             # %for.cond478
                                        #   Parent Loop BB80_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB80_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB80_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB80_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB80_130
.LBB80_129:                             # %if.else496
                                        #   in Loop: Header=BB80_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB80_130:                             # %if.end510
                                        #   in Loop: Header=BB80_126 Depth=2
	jmp	.LBB80_131
.LBB80_131:                             # %for.inc511
                                        #   in Loop: Header=BB80_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_126
.LBB80_132:                             # %for.end513
                                        #   in Loop: Header=BB80_124 Depth=1
	jmp	.LBB80_133
.LBB80_133:                             # %for.inc514
                                        #   in Loop: Header=BB80_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_124
.LBB80_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB80_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB80_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB80_135 Depth=1
	movl	$0, -4(%rbp)
.LBB80_137:                             # %for.cond520
                                        #   Parent Loop BB80_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB80_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB80_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB80_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB80_141
.LBB80_140:                             # %if.else538
                                        #   in Loop: Header=BB80_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB80_141:                             # %if.end552
                                        #   in Loop: Header=BB80_137 Depth=2
	jmp	.LBB80_142
.LBB80_142:                             # %for.inc553
                                        #   in Loop: Header=BB80_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_137
.LBB80_143:                             # %for.end555
                                        #   in Loop: Header=BB80_135 Depth=1
	jmp	.LBB80_144
.LBB80_144:                             # %for.inc556
                                        #   in Loop: Header=BB80_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_135
.LBB80_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB80_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB80_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB80_146 Depth=1
	movl	$0, -4(%rbp)
.LBB80_148:                             # %for.cond562
                                        #   Parent Loop BB80_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB80_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB80_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB80_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB80_152
.LBB80_151:                             # %if.else580
                                        #   in Loop: Header=BB80_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB80_152:                             # %if.end594
                                        #   in Loop: Header=BB80_148 Depth=2
	jmp	.LBB80_153
.LBB80_153:                             # %for.inc595
                                        #   in Loop: Header=BB80_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_148
.LBB80_154:                             # %for.end597
                                        #   in Loop: Header=BB80_146 Depth=1
	jmp	.LBB80_155
.LBB80_155:                             # %for.inc598
                                        #   in Loop: Header=BB80_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_146
.LBB80_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB80_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB80_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB80_157 Depth=1
	movl	$0, -4(%rbp)
.LBB80_159:                             # %for.cond604
                                        #   Parent Loop BB80_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB80_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB80_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB80_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB80_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB80_163
.LBB80_162:                             # %if.else622
                                        #   in Loop: Header=BB80_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB80_163:                             # %if.end636
                                        #   in Loop: Header=BB80_159 Depth=2
	jmp	.LBB80_164
.LBB80_164:                             # %for.inc637
                                        #   in Loop: Header=BB80_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_159
.LBB80_165:                             # %for.end639
                                        #   in Loop: Header=BB80_157 Depth=1
	jmp	.LBB80_166
.LBB80_166:                             # %for.inc640
                                        #   in Loop: Header=BB80_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_157
.LBB80_167:                             # %for.end642
	cmpl	$905336091, -28(%rbp)   # imm = 0x35F6551B
	jne	.LBB80_169
.LBB80_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_168
.Lfunc_end80:
	.size	init_contexts.73, .Lfunc_end80-init_contexts.73
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.74        # -- Begin function init_contexts.74
	.p2align	4, 0x90
	.type	init_contexts.74,@function
init_contexts.74:                       # @init_contexts.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$433289092, -28(%rbp)   # imm = 0x19D37784
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB81_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB81_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	$0, -4(%rbp)
.LBB81_3:                               # %for.cond2
                                        #   Parent Loop BB81_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB81_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB81_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB81_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB81_7
.LBB81_6:                               # %if.else
                                        #   in Loop: Header=BB81_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB81_7:                               # %if.end
                                        #   in Loop: Header=BB81_3 Depth=2
	jmp	.LBB81_8
.LBB81_8:                               # %for.inc
                                        #   in Loop: Header=BB81_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_3
.LBB81_9:                               # %for.end
                                        #   in Loop: Header=BB81_1 Depth=1
	jmp	.LBB81_10
.LBB81_10:                              # %for.inc28
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_1
.LBB81_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB81_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB81_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB81_12 Depth=1
	movl	$0, -4(%rbp)
.LBB81_14:                              # %for.cond34
                                        #   Parent Loop BB81_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB81_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB81_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB81_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB81_18
.LBB81_17:                              # %if.else52
                                        #   in Loop: Header=BB81_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB81_18:                              # %if.end66
                                        #   in Loop: Header=BB81_14 Depth=2
	jmp	.LBB81_19
.LBB81_19:                              # %for.inc67
                                        #   in Loop: Header=BB81_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_14
.LBB81_20:                              # %for.end69
                                        #   in Loop: Header=BB81_12 Depth=1
	jmp	.LBB81_21
.LBB81_21:                              # %for.inc70
                                        #   in Loop: Header=BB81_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_12
.LBB81_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB81_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB81_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB81_23 Depth=1
	movl	$0, -4(%rbp)
.LBB81_25:                              # %for.cond76
                                        #   Parent Loop BB81_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB81_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB81_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB81_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB81_29
.LBB81_28:                              # %if.else94
                                        #   in Loop: Header=BB81_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB81_29:                              # %if.end108
                                        #   in Loop: Header=BB81_25 Depth=2
	jmp	.LBB81_30
.LBB81_30:                              # %for.inc109
                                        #   in Loop: Header=BB81_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_25
.LBB81_31:                              # %for.end111
                                        #   in Loop: Header=BB81_23 Depth=1
	jmp	.LBB81_32
.LBB81_32:                              # %for.inc112
                                        #   in Loop: Header=BB81_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_23
.LBB81_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB81_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB81_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB81_34 Depth=1
	movl	$0, -4(%rbp)
.LBB81_36:                              # %for.cond118
                                        #   Parent Loop BB81_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB81_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB81_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB81_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB81_40
.LBB81_39:                              # %if.else136
                                        #   in Loop: Header=BB81_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB81_40:                              # %if.end150
                                        #   in Loop: Header=BB81_36 Depth=2
	jmp	.LBB81_41
.LBB81_41:                              # %for.inc151
                                        #   in Loop: Header=BB81_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_36
.LBB81_42:                              # %for.end153
                                        #   in Loop: Header=BB81_34 Depth=1
	jmp	.LBB81_43
.LBB81_43:                              # %for.inc154
                                        #   in Loop: Header=BB81_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_34
.LBB81_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB81_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB81_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB81_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB81_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB81_49
.LBB81_48:                              # %if.else172
                                        #   in Loop: Header=BB81_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB81_49:                              # %if.end183
                                        #   in Loop: Header=BB81_45 Depth=1
	jmp	.LBB81_50
.LBB81_50:                              # %for.inc184
                                        #   in Loop: Header=BB81_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_45
.LBB81_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB81_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB81_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB81_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB81_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB81_56
.LBB81_55:                              # %if.else202
                                        #   in Loop: Header=BB81_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB81_56:                              # %if.end213
                                        #   in Loop: Header=BB81_52 Depth=1
	jmp	.LBB81_57
.LBB81_57:                              # %for.inc214
                                        #   in Loop: Header=BB81_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_52
.LBB81_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB81_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB81_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB81_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB81_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB81_63
.LBB81_62:                              # %if.else232
                                        #   in Loop: Header=BB81_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB81_63:                              # %if.end243
                                        #   in Loop: Header=BB81_59 Depth=1
	jmp	.LBB81_64
.LBB81_64:                              # %for.inc244
                                        #   in Loop: Header=BB81_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_59
.LBB81_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB81_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB81_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB81_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB81_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB81_70
.LBB81_69:                              # %if.else262
                                        #   in Loop: Header=BB81_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB81_70:                              # %if.end273
                                        #   in Loop: Header=BB81_66 Depth=1
	jmp	.LBB81_71
.LBB81_71:                              # %for.inc274
                                        #   in Loop: Header=BB81_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_66
.LBB81_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB81_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB81_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB81_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB81_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB81_77
.LBB81_76:                              # %if.else292
                                        #   in Loop: Header=BB81_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB81_77:                              # %if.end303
                                        #   in Loop: Header=BB81_73 Depth=1
	jmp	.LBB81_78
.LBB81_78:                              # %for.inc304
                                        #   in Loop: Header=BB81_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_73
.LBB81_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB81_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB81_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB81_80 Depth=1
	movl	$0, -4(%rbp)
.LBB81_82:                              # %for.cond310
                                        #   Parent Loop BB81_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB81_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB81_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB81_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB81_86
.LBB81_85:                              # %if.else328
                                        #   in Loop: Header=BB81_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB81_86:                              # %if.end342
                                        #   in Loop: Header=BB81_82 Depth=2
	jmp	.LBB81_87
.LBB81_87:                              # %for.inc343
                                        #   in Loop: Header=BB81_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_82
.LBB81_88:                              # %for.end345
                                        #   in Loop: Header=BB81_80 Depth=1
	jmp	.LBB81_89
.LBB81_89:                              # %for.inc346
                                        #   in Loop: Header=BB81_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_80
.LBB81_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB81_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB81_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB81_91 Depth=1
	movl	$0, -4(%rbp)
.LBB81_93:                              # %for.cond352
                                        #   Parent Loop BB81_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB81_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB81_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB81_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB81_97
.LBB81_96:                              # %if.else370
                                        #   in Loop: Header=BB81_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB81_97:                              # %if.end384
                                        #   in Loop: Header=BB81_93 Depth=2
	jmp	.LBB81_98
.LBB81_98:                              # %for.inc385
                                        #   in Loop: Header=BB81_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_93
.LBB81_99:                              # %for.end387
                                        #   in Loop: Header=BB81_91 Depth=1
	jmp	.LBB81_100
.LBB81_100:                             # %for.inc388
                                        #   in Loop: Header=BB81_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_91
.LBB81_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB81_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB81_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB81_102 Depth=1
	movl	$0, -4(%rbp)
.LBB81_104:                             # %for.cond394
                                        #   Parent Loop BB81_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB81_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB81_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB81_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB81_108
.LBB81_107:                             # %if.else412
                                        #   in Loop: Header=BB81_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB81_108:                             # %if.end426
                                        #   in Loop: Header=BB81_104 Depth=2
	jmp	.LBB81_109
.LBB81_109:                             # %for.inc427
                                        #   in Loop: Header=BB81_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_104
.LBB81_110:                             # %for.end429
                                        #   in Loop: Header=BB81_102 Depth=1
	jmp	.LBB81_111
.LBB81_111:                             # %for.inc430
                                        #   in Loop: Header=BB81_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_102
.LBB81_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB81_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB81_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB81_113 Depth=1
	movl	$0, -4(%rbp)
.LBB81_115:                             # %for.cond436
                                        #   Parent Loop BB81_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB81_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB81_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB81_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB81_119
.LBB81_118:                             # %if.else454
                                        #   in Loop: Header=BB81_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB81_119:                             # %if.end468
                                        #   in Loop: Header=BB81_115 Depth=2
	jmp	.LBB81_120
.LBB81_120:                             # %for.inc469
                                        #   in Loop: Header=BB81_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_115
.LBB81_121:                             # %for.end471
                                        #   in Loop: Header=BB81_113 Depth=1
	jmp	.LBB81_122
.LBB81_122:                             # %for.inc472
                                        #   in Loop: Header=BB81_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_113
.LBB81_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB81_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB81_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB81_124 Depth=1
	movl	$0, -4(%rbp)
.LBB81_126:                             # %for.cond478
                                        #   Parent Loop BB81_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB81_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB81_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB81_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB81_130
.LBB81_129:                             # %if.else496
                                        #   in Loop: Header=BB81_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB81_130:                             # %if.end510
                                        #   in Loop: Header=BB81_126 Depth=2
	jmp	.LBB81_131
.LBB81_131:                             # %for.inc511
                                        #   in Loop: Header=BB81_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_126
.LBB81_132:                             # %for.end513
                                        #   in Loop: Header=BB81_124 Depth=1
	jmp	.LBB81_133
.LBB81_133:                             # %for.inc514
                                        #   in Loop: Header=BB81_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_124
.LBB81_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB81_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB81_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB81_135 Depth=1
	movl	$0, -4(%rbp)
.LBB81_137:                             # %for.cond520
                                        #   Parent Loop BB81_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB81_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB81_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB81_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB81_141
.LBB81_140:                             # %if.else538
                                        #   in Loop: Header=BB81_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB81_141:                             # %if.end552
                                        #   in Loop: Header=BB81_137 Depth=2
	jmp	.LBB81_142
.LBB81_142:                             # %for.inc553
                                        #   in Loop: Header=BB81_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_137
.LBB81_143:                             # %for.end555
                                        #   in Loop: Header=BB81_135 Depth=1
	jmp	.LBB81_144
.LBB81_144:                             # %for.inc556
                                        #   in Loop: Header=BB81_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_135
.LBB81_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB81_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB81_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB81_146 Depth=1
	movl	$0, -4(%rbp)
.LBB81_148:                             # %for.cond562
                                        #   Parent Loop BB81_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB81_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB81_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB81_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB81_152
.LBB81_151:                             # %if.else580
                                        #   in Loop: Header=BB81_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB81_152:                             # %if.end594
                                        #   in Loop: Header=BB81_148 Depth=2
	jmp	.LBB81_153
.LBB81_153:                             # %for.inc595
                                        #   in Loop: Header=BB81_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_148
.LBB81_154:                             # %for.end597
                                        #   in Loop: Header=BB81_146 Depth=1
	jmp	.LBB81_155
.LBB81_155:                             # %for.inc598
                                        #   in Loop: Header=BB81_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_146
.LBB81_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB81_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB81_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB81_157 Depth=1
	movl	$0, -4(%rbp)
.LBB81_159:                             # %for.cond604
                                        #   Parent Loop BB81_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB81_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB81_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB81_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB81_163
.LBB81_162:                             # %if.else622
                                        #   in Loop: Header=BB81_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB81_163:                             # %if.end636
                                        #   in Loop: Header=BB81_159 Depth=2
	jmp	.LBB81_164
.LBB81_164:                             # %for.inc637
                                        #   in Loop: Header=BB81_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_159
.LBB81_165:                             # %for.end639
                                        #   in Loop: Header=BB81_157 Depth=1
	jmp	.LBB81_166
.LBB81_166:                             # %for.inc640
                                        #   in Loop: Header=BB81_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_157
.LBB81_167:                             # %for.end642
	cmpl	$433289092, -28(%rbp)   # imm = 0x19D37784
	jne	.LBB81_169
.LBB81_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_168
.Lfunc_end81:
	.size	init_contexts.74, .Lfunc_end81-init_contexts.74
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.75
.LCPI82_0:
	.quad	4607182418800017408     # double 1
.LCPI82_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI82_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI82_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.75
	.p2align	4, 0x90
	.type	XRate.75,@function
XRate.75:                               # @XRate.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$172537109, -36(%rbp)   # imm = 0xA48B515
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB82_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB82_3
.LBB82_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB82_3:                               # %cond.end
	vmovsd	.LCPI82_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI82_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI82_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI82_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB82_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI82_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB82_6
.LBB82_5:                               # %cond.false6
	vmovsd	.LCPI82_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI82_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI82_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB82_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB82_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB82_9
.LBB82_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB82_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB82_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB82_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB82_13
.LBB82_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB82_13:                              # %cond.end26
	jmp	.LBB82_15
.LBB82_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB82_15
.LBB82_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB82_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB82_18
.LBB82_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB82_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$172537109, -36(%rbp)   # imm = 0xA48B515
	jne	.LBB82_20
.LBB82_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB82_19
.Lfunc_end82:
	.size	XRate.75, .Lfunc_end82-XRate.75
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.76        # -- Begin function init_contexts.76
	.p2align	4, 0x90
	.type	init_contexts.76,@function
init_contexts.76:                       # @init_contexts.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$757060002, -28(%rbp)   # imm = 0x2D1FD1A2
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB83_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB83_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -4(%rbp)
.LBB83_3:                               # %for.cond2
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB83_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB83_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB83_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB83_7
.LBB83_6:                               # %if.else
                                        #   in Loop: Header=BB83_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB83_7:                               # %if.end
                                        #   in Loop: Header=BB83_3 Depth=2
	jmp	.LBB83_8
.LBB83_8:                               # %for.inc
                                        #   in Loop: Header=BB83_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_3
.LBB83_9:                               # %for.end
                                        #   in Loop: Header=BB83_1 Depth=1
	jmp	.LBB83_10
.LBB83_10:                              # %for.inc28
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_1
.LBB83_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB83_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB83_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB83_12 Depth=1
	movl	$0, -4(%rbp)
.LBB83_14:                              # %for.cond34
                                        #   Parent Loop BB83_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB83_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB83_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB83_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB83_18
.LBB83_17:                              # %if.else52
                                        #   in Loop: Header=BB83_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB83_18:                              # %if.end66
                                        #   in Loop: Header=BB83_14 Depth=2
	jmp	.LBB83_19
.LBB83_19:                              # %for.inc67
                                        #   in Loop: Header=BB83_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_14
.LBB83_20:                              # %for.end69
                                        #   in Loop: Header=BB83_12 Depth=1
	jmp	.LBB83_21
.LBB83_21:                              # %for.inc70
                                        #   in Loop: Header=BB83_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_12
.LBB83_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB83_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB83_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB83_23 Depth=1
	movl	$0, -4(%rbp)
.LBB83_25:                              # %for.cond76
                                        #   Parent Loop BB83_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB83_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB83_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB83_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB83_29
.LBB83_28:                              # %if.else94
                                        #   in Loop: Header=BB83_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB83_29:                              # %if.end108
                                        #   in Loop: Header=BB83_25 Depth=2
	jmp	.LBB83_30
.LBB83_30:                              # %for.inc109
                                        #   in Loop: Header=BB83_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_25
.LBB83_31:                              # %for.end111
                                        #   in Loop: Header=BB83_23 Depth=1
	jmp	.LBB83_32
.LBB83_32:                              # %for.inc112
                                        #   in Loop: Header=BB83_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_23
.LBB83_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB83_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB83_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB83_34 Depth=1
	movl	$0, -4(%rbp)
.LBB83_36:                              # %for.cond118
                                        #   Parent Loop BB83_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB83_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB83_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB83_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB83_40
.LBB83_39:                              # %if.else136
                                        #   in Loop: Header=BB83_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB83_40:                              # %if.end150
                                        #   in Loop: Header=BB83_36 Depth=2
	jmp	.LBB83_41
.LBB83_41:                              # %for.inc151
                                        #   in Loop: Header=BB83_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_36
.LBB83_42:                              # %for.end153
                                        #   in Loop: Header=BB83_34 Depth=1
	jmp	.LBB83_43
.LBB83_43:                              # %for.inc154
                                        #   in Loop: Header=BB83_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_34
.LBB83_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB83_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB83_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB83_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB83_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB83_49
.LBB83_48:                              # %if.else172
                                        #   in Loop: Header=BB83_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB83_49:                              # %if.end183
                                        #   in Loop: Header=BB83_45 Depth=1
	jmp	.LBB83_50
.LBB83_50:                              # %for.inc184
                                        #   in Loop: Header=BB83_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_45
.LBB83_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB83_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB83_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB83_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB83_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB83_56
.LBB83_55:                              # %if.else202
                                        #   in Loop: Header=BB83_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB83_56:                              # %if.end213
                                        #   in Loop: Header=BB83_52 Depth=1
	jmp	.LBB83_57
.LBB83_57:                              # %for.inc214
                                        #   in Loop: Header=BB83_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_52
.LBB83_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB83_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB83_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB83_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB83_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB83_63
.LBB83_62:                              # %if.else232
                                        #   in Loop: Header=BB83_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB83_63:                              # %if.end243
                                        #   in Loop: Header=BB83_59 Depth=1
	jmp	.LBB83_64
.LBB83_64:                              # %for.inc244
                                        #   in Loop: Header=BB83_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_59
.LBB83_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB83_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB83_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB83_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB83_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB83_70
.LBB83_69:                              # %if.else262
                                        #   in Loop: Header=BB83_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB83_70:                              # %if.end273
                                        #   in Loop: Header=BB83_66 Depth=1
	jmp	.LBB83_71
.LBB83_71:                              # %for.inc274
                                        #   in Loop: Header=BB83_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_66
.LBB83_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB83_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB83_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB83_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB83_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB83_77
.LBB83_76:                              # %if.else292
                                        #   in Loop: Header=BB83_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB83_77:                              # %if.end303
                                        #   in Loop: Header=BB83_73 Depth=1
	jmp	.LBB83_78
.LBB83_78:                              # %for.inc304
                                        #   in Loop: Header=BB83_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_73
.LBB83_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB83_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB83_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB83_80 Depth=1
	movl	$0, -4(%rbp)
.LBB83_82:                              # %for.cond310
                                        #   Parent Loop BB83_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB83_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB83_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB83_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB83_86
.LBB83_85:                              # %if.else328
                                        #   in Loop: Header=BB83_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB83_86:                              # %if.end342
                                        #   in Loop: Header=BB83_82 Depth=2
	jmp	.LBB83_87
.LBB83_87:                              # %for.inc343
                                        #   in Loop: Header=BB83_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_82
.LBB83_88:                              # %for.end345
                                        #   in Loop: Header=BB83_80 Depth=1
	jmp	.LBB83_89
.LBB83_89:                              # %for.inc346
                                        #   in Loop: Header=BB83_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_80
.LBB83_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB83_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB83_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB83_91 Depth=1
	movl	$0, -4(%rbp)
.LBB83_93:                              # %for.cond352
                                        #   Parent Loop BB83_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB83_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB83_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB83_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB83_97
.LBB83_96:                              # %if.else370
                                        #   in Loop: Header=BB83_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB83_97:                              # %if.end384
                                        #   in Loop: Header=BB83_93 Depth=2
	jmp	.LBB83_98
.LBB83_98:                              # %for.inc385
                                        #   in Loop: Header=BB83_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_93
.LBB83_99:                              # %for.end387
                                        #   in Loop: Header=BB83_91 Depth=1
	jmp	.LBB83_100
.LBB83_100:                             # %for.inc388
                                        #   in Loop: Header=BB83_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_91
.LBB83_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB83_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB83_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB83_102 Depth=1
	movl	$0, -4(%rbp)
.LBB83_104:                             # %for.cond394
                                        #   Parent Loop BB83_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB83_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB83_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB83_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB83_108
.LBB83_107:                             # %if.else412
                                        #   in Loop: Header=BB83_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB83_108:                             # %if.end426
                                        #   in Loop: Header=BB83_104 Depth=2
	jmp	.LBB83_109
.LBB83_109:                             # %for.inc427
                                        #   in Loop: Header=BB83_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_104
.LBB83_110:                             # %for.end429
                                        #   in Loop: Header=BB83_102 Depth=1
	jmp	.LBB83_111
.LBB83_111:                             # %for.inc430
                                        #   in Loop: Header=BB83_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_102
.LBB83_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB83_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB83_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB83_113 Depth=1
	movl	$0, -4(%rbp)
.LBB83_115:                             # %for.cond436
                                        #   Parent Loop BB83_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB83_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB83_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB83_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB83_119
.LBB83_118:                             # %if.else454
                                        #   in Loop: Header=BB83_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB83_119:                             # %if.end468
                                        #   in Loop: Header=BB83_115 Depth=2
	jmp	.LBB83_120
.LBB83_120:                             # %for.inc469
                                        #   in Loop: Header=BB83_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_115
.LBB83_121:                             # %for.end471
                                        #   in Loop: Header=BB83_113 Depth=1
	jmp	.LBB83_122
.LBB83_122:                             # %for.inc472
                                        #   in Loop: Header=BB83_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_113
.LBB83_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB83_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB83_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB83_124 Depth=1
	movl	$0, -4(%rbp)
.LBB83_126:                             # %for.cond478
                                        #   Parent Loop BB83_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB83_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB83_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB83_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB83_130
.LBB83_129:                             # %if.else496
                                        #   in Loop: Header=BB83_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB83_130:                             # %if.end510
                                        #   in Loop: Header=BB83_126 Depth=2
	jmp	.LBB83_131
.LBB83_131:                             # %for.inc511
                                        #   in Loop: Header=BB83_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_126
.LBB83_132:                             # %for.end513
                                        #   in Loop: Header=BB83_124 Depth=1
	jmp	.LBB83_133
.LBB83_133:                             # %for.inc514
                                        #   in Loop: Header=BB83_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_124
.LBB83_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB83_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB83_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB83_135 Depth=1
	movl	$0, -4(%rbp)
.LBB83_137:                             # %for.cond520
                                        #   Parent Loop BB83_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB83_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB83_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB83_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB83_141
.LBB83_140:                             # %if.else538
                                        #   in Loop: Header=BB83_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB83_141:                             # %if.end552
                                        #   in Loop: Header=BB83_137 Depth=2
	jmp	.LBB83_142
.LBB83_142:                             # %for.inc553
                                        #   in Loop: Header=BB83_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_137
.LBB83_143:                             # %for.end555
                                        #   in Loop: Header=BB83_135 Depth=1
	jmp	.LBB83_144
.LBB83_144:                             # %for.inc556
                                        #   in Loop: Header=BB83_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_135
.LBB83_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB83_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB83_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB83_146 Depth=1
	movl	$0, -4(%rbp)
.LBB83_148:                             # %for.cond562
                                        #   Parent Loop BB83_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB83_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB83_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB83_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB83_152
.LBB83_151:                             # %if.else580
                                        #   in Loop: Header=BB83_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB83_152:                             # %if.end594
                                        #   in Loop: Header=BB83_148 Depth=2
	jmp	.LBB83_153
.LBB83_153:                             # %for.inc595
                                        #   in Loop: Header=BB83_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_148
.LBB83_154:                             # %for.end597
                                        #   in Loop: Header=BB83_146 Depth=1
	jmp	.LBB83_155
.LBB83_155:                             # %for.inc598
                                        #   in Loop: Header=BB83_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_146
.LBB83_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB83_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB83_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB83_157 Depth=1
	movl	$0, -4(%rbp)
.LBB83_159:                             # %for.cond604
                                        #   Parent Loop BB83_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB83_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB83_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB83_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB83_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB83_163
.LBB83_162:                             # %if.else622
                                        #   in Loop: Header=BB83_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB83_163:                             # %if.end636
                                        #   in Loop: Header=BB83_159 Depth=2
	jmp	.LBB83_164
.LBB83_164:                             # %for.inc637
                                        #   in Loop: Header=BB83_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_159
.LBB83_165:                             # %for.end639
                                        #   in Loop: Header=BB83_157 Depth=1
	jmp	.LBB83_166
.LBB83_166:                             # %for.inc640
                                        #   in Loop: Header=BB83_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_157
.LBB83_167:                             # %for.end642
	cmpl	$757060002, -28(%rbp)   # imm = 0x2D1FD1A2
	jne	.LBB83_169
.LBB83_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_168
.Lfunc_end83:
	.size	init_contexts.76, .Lfunc_end83-init_contexts.76
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.77
.LCPI84_0:
	.quad	4607182418800017408     # double 1
.LCPI84_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI84_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI84_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.77
	.p2align	4, 0x90
	.type	XRate.77,@function
XRate.77:                               # @XRate.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1011871186, -32(%rbp)  # imm = 0x3C4FEDD2
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB84_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB84_3
.LBB84_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB84_3:                               # %cond.end
	vmovsd	.LCPI84_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI84_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI84_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI84_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB84_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI84_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB84_6
.LBB84_5:                               # %cond.false6
	vmovsd	.LCPI84_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI84_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI84_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB84_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB84_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB84_9
.LBB84_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB84_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB84_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB84_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB84_13
.LBB84_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB84_13:                              # %cond.end26
	jmp	.LBB84_15
.LBB84_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB84_15
.LBB84_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB84_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB84_18
.LBB84_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB84_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1011871186, -32(%rbp)  # imm = 0x3C4FEDD2
	jne	.LBB84_20
.LBB84_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB84_19
.Lfunc_end84:
	.size	XRate.77, .Lfunc_end84-XRate.77
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.78
.LCPI85_0:
	.quad	4607182418800017408     # double 1
.LCPI85_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI85_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI85_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.78
	.p2align	4, 0x90
	.type	XRate.78,@function
XRate.78:                               # @XRate.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1477627366, -32(%rbp)  # imm = 0x5812CDE6
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB85_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB85_3
.LBB85_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB85_3:                               # %cond.end
	vmovsd	.LCPI85_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI85_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI85_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI85_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB85_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI85_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB85_6
.LBB85_5:                               # %cond.false6
	vmovsd	.LCPI85_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI85_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI85_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB85_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB85_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB85_9
.LBB85_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB85_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB85_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB85_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB85_13
.LBB85_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB85_13:                              # %cond.end26
	jmp	.LBB85_15
.LBB85_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB85_15
.LBB85_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB85_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB85_18
.LBB85_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB85_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1477627366, -32(%rbp)  # imm = 0x5812CDE6
	jne	.LBB85_20
.LBB85_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB85_19
.Lfunc_end85:
	.size	XRate.78, .Lfunc_end85-XRate.78
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.79
.LCPI86_0:
	.quad	4611686018427387904     # double 2
.LCPI86_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.79
	.p2align	4, 0x90
	.type	create_context_memory.79,@function
create_context_memory.79:               # @create_context_memory.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$76971213, -20(%rbp)    # imm = 0x4967CCD
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB86_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB86_3
.LBB86_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB86_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB86_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB86_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB86_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB86_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB86_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB86_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB86_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB86_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB86_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB86_11:                              # %if.end10
                                        #   in Loop: Header=BB86_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB86_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB86_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB86_13:                              # %if.end16
                                        #   in Loop: Header=BB86_8 Depth=1
	movl	$0, -8(%rbp)
.LBB86_14:                              # %for.cond17
                                        #   Parent Loop BB86_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB86_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB86_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB86_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB86_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB86_17:                              # %if.end28
                                        #   in Loop: Header=BB86_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB86_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB86_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB86_19:                              # %if.end39
                                        #   in Loop: Header=BB86_14 Depth=2
	jmp	.LBB86_20
.LBB86_20:                              # %for.inc
                                        #   in Loop: Header=BB86_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_14
.LBB86_21:                              # %for.end
                                        #   in Loop: Header=BB86_8 Depth=1
	jmp	.LBB86_22
.LBB86_22:                              # %for.inc40
                                        #   in Loop: Header=BB86_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_8
.LBB86_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB86_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_26 Depth 2
                                        #       Child Loop BB86_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB86_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB86_24 Depth=1
	movl	$0, -8(%rbp)
.LBB86_26:                              # %for.cond47
                                        #   Parent Loop BB86_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB86_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB86_26 Depth=2
	movl	$0, -12(%rbp)
.LBB86_28:                              # %for.cond51
                                        #   Parent Loop BB86_24 Depth=1
                                        #     Parent Loop BB86_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB86_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB86_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB86_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_28
.LBB86_31:                              # %for.end63
                                        #   in Loop: Header=BB86_26 Depth=2
	jmp	.LBB86_32
.LBB86_32:                              # %for.inc64
                                        #   in Loop: Header=BB86_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_26
.LBB86_33:                              # %for.end66
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_34
.LBB86_34:                              # %for.inc67
                                        #   in Loop: Header=BB86_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_24
.LBB86_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB86_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB86_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB86_36 Depth=1
	vmovsd	.LCPI86_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI86_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI86_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB86_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_36
.LBB86_39:                              # %for.end98
	cmpl	$76971213, -20(%rbp)    # imm = 0x4967CCD
	jne	.LBB86_41
.LBB86_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_40
.Lfunc_end86:
	.size	create_context_memory.79, .Lfunc_end86-create_context_memory.79
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.80
.LCPI87_0:
	.quad	4611686018427387904     # double 2
.LCPI87_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.80
	.p2align	4, 0x90
	.type	create_context_memory.80,@function
create_context_memory.80:               # @create_context_memory.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1548569823, -20(%rbp)  # imm = 0x5C4D4CDF
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB87_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB87_3
.LBB87_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB87_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB87_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB87_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB87_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB87_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB87_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB87_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB87_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB87_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB87_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB87_11:                              # %if.end10
                                        #   in Loop: Header=BB87_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB87_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB87_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB87_13:                              # %if.end16
                                        #   in Loop: Header=BB87_8 Depth=1
	movl	$0, -8(%rbp)
.LBB87_14:                              # %for.cond17
                                        #   Parent Loop BB87_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB87_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB87_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB87_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB87_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB87_17:                              # %if.end28
                                        #   in Loop: Header=BB87_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB87_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB87_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB87_19:                              # %if.end39
                                        #   in Loop: Header=BB87_14 Depth=2
	jmp	.LBB87_20
.LBB87_20:                              # %for.inc
                                        #   in Loop: Header=BB87_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_14
.LBB87_21:                              # %for.end
                                        #   in Loop: Header=BB87_8 Depth=1
	jmp	.LBB87_22
.LBB87_22:                              # %for.inc40
                                        #   in Loop: Header=BB87_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_8
.LBB87_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB87_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_26 Depth 2
                                        #       Child Loop BB87_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB87_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB87_24 Depth=1
	movl	$0, -8(%rbp)
.LBB87_26:                              # %for.cond47
                                        #   Parent Loop BB87_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB87_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB87_26 Depth=2
	movl	$0, -12(%rbp)
.LBB87_28:                              # %for.cond51
                                        #   Parent Loop BB87_24 Depth=1
                                        #     Parent Loop BB87_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB87_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB87_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB87_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_28
.LBB87_31:                              # %for.end63
                                        #   in Loop: Header=BB87_26 Depth=2
	jmp	.LBB87_32
.LBB87_32:                              # %for.inc64
                                        #   in Loop: Header=BB87_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_26
.LBB87_33:                              # %for.end66
                                        #   in Loop: Header=BB87_24 Depth=1
	jmp	.LBB87_34
.LBB87_34:                              # %for.inc67
                                        #   in Loop: Header=BB87_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_24
.LBB87_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB87_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB87_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB87_36 Depth=1
	vmovsd	.LCPI87_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI87_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI87_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB87_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_36
.LBB87_39:                              # %for.end98
	cmpl	$1548569823, -20(%rbp)  # imm = 0x5C4D4CDF
	jne	.LBB87_41
.LBB87_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_40
.Lfunc_end87:
	.size	create_context_memory.80, .Lfunc_end87-create_context_memory.80
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.81
.LCPI88_0:
	.quad	4607182418800017408     # double 1
.LCPI88_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI88_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI88_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.81
	.p2align	4, 0x90
	.type	XRate.81,@function
XRate.81:                               # @XRate.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$684781855, -36(%rbp)   # imm = 0x28D0F11F
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB88_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB88_3
.LBB88_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB88_3:                               # %cond.end
	vmovsd	.LCPI88_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI88_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI88_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI88_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB88_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI88_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB88_6
.LBB88_5:                               # %cond.false6
	vmovsd	.LCPI88_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI88_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI88_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB88_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB88_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB88_9
.LBB88_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB88_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB88_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB88_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB88_13
.LBB88_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB88_13:                              # %cond.end26
	jmp	.LBB88_15
.LBB88_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB88_15
.LBB88_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB88_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB88_18
.LBB88_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB88_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$684781855, -36(%rbp)   # imm = 0x28D0F11F
	jne	.LBB88_20
.LBB88_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB88_19
.Lfunc_end88:
	.size	XRate.81, .Lfunc_end88-XRate.81
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.82
.LCPI89_0:
	.quad	4607182418800017408     # double 1
.LCPI89_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI89_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI89_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.82
	.p2align	4, 0x90
	.type	XRate.82,@function
XRate.82:                               # @XRate.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$18228263, -32(%rbp)    # imm = 0x1162427
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB89_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB89_3
.LBB89_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB89_3:                               # %cond.end
	vmovsd	.LCPI89_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI89_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI89_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI89_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB89_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI89_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB89_6
.LBB89_5:                               # %cond.false6
	vmovsd	.LCPI89_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI89_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI89_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB89_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB89_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB89_9
.LBB89_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB89_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB89_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB89_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB89_13
.LBB89_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB89_13:                              # %cond.end26
	jmp	.LBB89_15
.LBB89_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB89_15
.LBB89_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB89_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB89_18
.LBB89_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB89_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$18228263, -32(%rbp)    # imm = 0x1162427
	jne	.LBB89_20
.LBB89_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB89_19
.Lfunc_end89:
	.size	XRate.82, .Lfunc_end89-XRate.82
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.83
.LCPI90_0:
	.quad	4607182418800017408     # double 1
.LCPI90_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI90_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI90_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.83
	.p2align	4, 0x90
	.type	XRate.83,@function
XRate.83:                               # @XRate.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1796696971, -32(%rbp)  # imm = 0x6B176B8B
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB90_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB90_3
.LBB90_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB90_3:                               # %cond.end
	vmovsd	.LCPI90_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI90_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI90_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI90_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB90_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI90_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB90_6
.LBB90_5:                               # %cond.false6
	vmovsd	.LCPI90_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI90_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI90_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB90_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB90_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB90_9
.LBB90_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB90_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB90_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB90_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB90_13
.LBB90_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB90_13:                              # %cond.end26
	jmp	.LBB90_15
.LBB90_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB90_15
.LBB90_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB90_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB90_18
.LBB90_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB90_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1796696971, -32(%rbp)  # imm = 0x6B176B8B
	jne	.LBB90_20
.LBB90_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB90_19
.Lfunc_end90:
	.size	XRate.83, .Lfunc_end90-XRate.83
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.84
.LCPI91_0:
	.quad	4611686018427387904     # double 2
.LCPI91_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.84
	.p2align	4, 0x90
	.type	create_context_memory.84,@function
create_context_memory.84:               # @create_context_memory.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$326885010, -20(%rbp)   # imm = 0x137BDE92
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB91_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB91_3
.LBB91_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB91_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB91_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB91_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB91_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB91_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB91_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB91_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB91_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB91_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB91_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB91_11:                              # %if.end10
                                        #   in Loop: Header=BB91_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB91_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB91_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB91_13:                              # %if.end16
                                        #   in Loop: Header=BB91_8 Depth=1
	movl	$0, -8(%rbp)
.LBB91_14:                              # %for.cond17
                                        #   Parent Loop BB91_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB91_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB91_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB91_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB91_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB91_17:                              # %if.end28
                                        #   in Loop: Header=BB91_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB91_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB91_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB91_19:                              # %if.end39
                                        #   in Loop: Header=BB91_14 Depth=2
	jmp	.LBB91_20
.LBB91_20:                              # %for.inc
                                        #   in Loop: Header=BB91_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_14
.LBB91_21:                              # %for.end
                                        #   in Loop: Header=BB91_8 Depth=1
	jmp	.LBB91_22
.LBB91_22:                              # %for.inc40
                                        #   in Loop: Header=BB91_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_8
.LBB91_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB91_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_26 Depth 2
                                        #       Child Loop BB91_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB91_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB91_24 Depth=1
	movl	$0, -8(%rbp)
.LBB91_26:                              # %for.cond47
                                        #   Parent Loop BB91_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB91_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB91_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB91_26 Depth=2
	movl	$0, -12(%rbp)
.LBB91_28:                              # %for.cond51
                                        #   Parent Loop BB91_24 Depth=1
                                        #     Parent Loop BB91_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB91_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB91_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB91_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_28
.LBB91_31:                              # %for.end63
                                        #   in Loop: Header=BB91_26 Depth=2
	jmp	.LBB91_32
.LBB91_32:                              # %for.inc64
                                        #   in Loop: Header=BB91_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_26
.LBB91_33:                              # %for.end66
                                        #   in Loop: Header=BB91_24 Depth=1
	jmp	.LBB91_34
.LBB91_34:                              # %for.inc67
                                        #   in Loop: Header=BB91_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_24
.LBB91_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB91_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB91_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB91_36 Depth=1
	vmovsd	.LCPI91_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI91_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI91_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB91_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_36
.LBB91_39:                              # %for.end98
	cmpl	$326885010, -20(%rbp)   # imm = 0x137BDE92
	jne	.LBB91_41
.LBB91_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_40
.Lfunc_end91:
	.size	create_context_memory.84, .Lfunc_end91-create_context_memory.84
	.cfi_endproc
                                        # -- End function
	.type	num_mb_per_slice,@object # @num_mb_per_slice
	.comm	num_mb_per_slice,4,4
	.type	number_of_slices,@object # @number_of_slices
	.comm	number_of_slices,4,4
	.type	initialized,@object     # @initialized
	.comm	initialized,8,8
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"create_context_memory: initialized"
	.size	.L.str, 35

	.type	model_number,@object    # @model_number
	.comm	model_number,8,8
	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"create_context_memory: model_number"
	.size	.L.str.1, 36

	.type	probability,@object     # @probability
	.data
	.globl	probability
	.p2align	4
probability:
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	4602678819172646912     # double 0.5
	.quad	4602221415580092655     # double 0.474609
	.quad	4601787232547217120     # double 0.45050699999999999
	.quad	4601375099138117191     # double 0.42762899999999998
	.quad	4600983880445686771     # double 0.405912
	.quad	4600612549649210819     # double 0.385299
	.quad	4600260061913575785     # double 0.365732
	.quad	4599925480490059176     # double 0.347159
	.quad	4599607904658735518     # double 0.32952999999999999
	.quad	4599306433699679337     # double 0.31279499999999999
	.quad	4599020292993754725     # double 0.29691099999999998
	.quad	4598748671893028756     # double 0.281833
	.quad	4598490831807162540     # double 0.26751999999999998
	.quad	4598246106203411228     # double 0.25393500000000002
	.quad	4597852365495189480     # double 0.241039
	.quad	4597411373019677361     # double 0.228799
	.quad	4596992754427114019     # double 0.21718000000000001
	.quad	4596595392824791865     # double 0.206151
	.quad	4596218207348800331     # double 0.19568199999999999
	.quad	4595860153164025867     # double 0.18574399999999999
	.quad	4595520329550542999     # double 0.176312
	.quad	4595197727702035196     # double 0.16735800000000001
	.quad	4594891518956171021     # double 0.158859
	.quad	4594600874650619039     # double 0.15079200000000001
	.quad	4594324966123047813     # double 0.14313400000000001
	.quad	4594063108826313982     # double 0.13586599999999999
	.quad	4593814510126883131     # double 0.128966
	.quad	4593485495152505952     # double 0.122417
	.quad	4593037513090372154     # double 0.1162
	.quad	4592612301227954341     # double 0.11029899999999999
	.quad	4592208706643747907     # double 0.104698
	.quad	4591825576416248244     # double 0.099380999999999997
	.quad	4591461901739138822     # double 0.094334000000000001
	.quad	4591116673806103109     # double 0.089542999999999998
	.quad	4590789027926012651     # double 0.084996000000000002
	.quad	4590478027350144954     # double 0.080680000000000001
	.quad	4590182807387371563     # double 0.076582999999999998
	.quad	4589902575404158061     # double 0.072693999999999995
	.quad	4589636538766970031     # double 0.069001999999999994
	.quad	4589384048957461132     # double 0.065498000000000001
	.quad	4589120750508846543     # double 0.062171999999999998
	.quad	4588665634744902990     # double 0.059013999999999997
	.quad	4588233865641427726     # double 0.056017999999999998
	.quad	4587823857931351916     # double 0.053172999999999998
	.quad	4587434746923547105     # double 0.050472999999999997
	.quad	4587065235581320611     # double 0.047909
	.quad	4586714603328732054     # double 0.045476000000000003
	.quad	4586381841359464902     # double 0.043166999999999997
	.quad	4586065940867202626     # double 0.040974999999999998
	.quad	4585766037160816770     # double 0.038893999999999998
	.quad	4585481409664366955     # double 0.036919
	.quad	4585211193686724725     # double 0.035043999999999999
	.quad	4584954668651949702     # double 0.033264000000000002
	.quad	4584711258099289581     # double 0.031574999999999999
	.quad	4584296062242443040     # double 0.029971999999999999
	.quad	4583857375609940135     # double 0.02845
	.quad	4583440882716400912     # double 0.027005000000000001
	.quad	4583045430640320763     # double 0.025633
	.quad	4582670442920947386     # double 0.024331999999999999
	.quad	4582314190176023870     # double 0.023095999999999998
	.quad	4581976095944797913     # double 0.021923000000000002
	.quad	4581655295536141057     # double 0.020809999999999999
	.quad	4581350636028548698     # double 0.019753
	.quad	4581061540961268531     # double 0.018749999999999999
	.size	probability, 1024

	.type	entropy,@object         # @entropy
	.comm	entropy,1024,16
	.type	INIT_MB_TYPE_I,@object  # @INIT_MB_TYPE_I
	.section	.rodata,"a",@progbits
	.p2align	4
INIT_MB_TYPE_I:
	.long	20                      # 0x14
	.long	4294967281              # 0xfffffff1
	.long	2                       # 0x2
	.long	54                      # 0x36
	.long	3                       # 0x3
	.long	74                      # 0x4a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967268              # 0xffffffe4
	.long	127                     # 0x7f
	.long	4294967273              # 0xffffffe9
	.long	104                     # 0x68
	.long	4294967290              # 0xfffffffa
	.long	53                      # 0x35
	.long	4294967295              # 0xffffffff
	.long	54                      # 0x36
	.long	7                       # 0x7
	.long	51                      # 0x33
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	20                      # 0x14
	.long	4294967281              # 0xfffffff1
	.long	2                       # 0x2
	.long	54                      # 0x36
	.long	3                       # 0x3
	.long	74                      # 0x4a
	.long	20                      # 0x14
	.long	4294967281              # 0xfffffff1
	.long	2                       # 0x2
	.long	54                      # 0x36
	.long	3                       # 0x3
	.long	74                      # 0x4a
	.long	4294967268              # 0xffffffe4
	.long	127                     # 0x7f
	.long	4294967273              # 0xffffffe9
	.long	104                     # 0x68
	.long	4294967290              # 0xfffffffa
	.long	53                      # 0x35
	.long	4294967295              # 0xffffffff
	.long	54                      # 0x36
	.long	7                       # 0x7
	.long	51                      # 0x33
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MB_TYPE_I, 264

	.type	INIT_MB_TYPE_P,@object  # @INIT_MB_TYPE_P
	.p2align	4
INIT_MB_TYPE_P:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	23                      # 0x17
	.long	33                      # 0x21
	.long	23                      # 0x17
	.long	2                       # 0x2
	.long	21                      # 0x15
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	9                       # 0x9
	.long	0                       # 0x0
	.long	49                      # 0x31
	.long	4294967259              # 0xffffffdb
	.long	118                     # 0x76
	.long	5                       # 0x5
	.long	57                      # 0x39
	.long	4294967283              # 0xfffffff3
	.long	78                      # 0x4e
	.long	4294967285              # 0xfffffff5
	.long	65                      # 0x41
	.long	1                       # 0x1
	.long	62                      # 0x3e
	.long	26                      # 0x1a
	.long	67                      # 0x43
	.long	16                      # 0x10
	.long	90                      # 0x5a
	.long	9                       # 0x9
	.long	104                     # 0x68
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967250              # 0xffffffd2
	.long	127                     # 0x7f
	.long	4294967276              # 0xffffffec
	.long	104                     # 0x68
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	18                      # 0x12
	.long	64                      # 0x40
	.long	9                       # 0x9
	.long	43                      # 0x2b
	.long	29                      # 0x1d
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	22                      # 0x16
	.long	25                      # 0x19
	.long	34                      # 0x22
	.long	0                       # 0x0
	.long	16                      # 0x10
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967294              # 0xfffffffe
	.long	9                       # 0x9
	.long	4                       # 0x4
	.long	41                      # 0x29
	.long	4294967267              # 0xffffffe3
	.long	118                     # 0x76
	.long	2                       # 0x2
	.long	65                      # 0x41
	.long	4294967290              # 0xfffffffa
	.long	71                      # 0x47
	.long	4294967283              # 0xfffffff3
	.long	79                      # 0x4f
	.long	5                       # 0x5
	.long	52                      # 0x34
	.long	57                      # 0x39
	.long	2                       # 0x2
	.long	41                      # 0x29
	.long	36                      # 0x24
	.long	26                      # 0x1a
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967251              # 0xffffffd3
	.long	127                     # 0x7f
	.long	4294967281              # 0xfffffff1
	.long	101                     # 0x65
	.long	4294967292              # 0xfffffffc
	.long	76                      # 0x4c
	.long	26                      # 0x1a
	.long	34                      # 0x22
	.long	19                      # 0x13
	.long	22                      # 0x16
	.long	40                      # 0x28
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	29                      # 0x1d
	.long	16                      # 0x10
	.long	25                      # 0x19
	.long	0                       # 0x0
	.long	14                      # 0xe
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967286              # 0xfffffff6
	.long	51                      # 0x33
	.long	4294967293              # 0xfffffffd
	.long	62                      # 0x3e
	.long	4294967269              # 0xffffffe5
	.long	99                      # 0x63
	.long	26                      # 0x1a
	.long	16                      # 0x10
	.long	4294967292              # 0xfffffffc
	.long	85                      # 0x55
	.long	4294967272              # 0xffffffe8
	.long	102                     # 0x66
	.long	5                       # 0x5
	.long	57                      # 0x39
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	37                      # 0x25
	.long	42                      # 0x2a
	.long	12                      # 0xc
	.long	97                      # 0x61
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967264              # 0xffffffe0
	.long	127                     # 0x7f
	.long	4294967274              # 0xffffffea
	.long	117                     # 0x75
	.long	4294967294              # 0xfffffffe
	.long	74                      # 0x4a
	.long	20                      # 0x14
	.long	40                      # 0x28
	.long	20                      # 0x14
	.long	10                      # 0xa
	.long	29                      # 0x1d
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MB_TYPE_P, 792

	.type	INIT_B8_TYPE_I,@object  # @INIT_B8_TYPE_I
	.p2align	4
INIT_B8_TYPE_I:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_B8_TYPE_I, 144

	.type	INIT_B8_TYPE_P,@object  # @INIT_B8_TYPE_P
	.p2align	4
INIT_B8_TYPE_P:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	12                      # 0xc
	.long	49                      # 0x31
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967292              # 0xfffffffc
	.long	73                      # 0x49
	.long	17                      # 0x11
	.long	50                      # 0x32
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967290              # 0xfffffffa
	.long	86                      # 0x56
	.long	4294967279              # 0xffffffef
	.long	95                      # 0x5f
	.long	4294967290              # 0xfffffffa
	.long	61                      # 0x3d
	.long	9                       # 0x9
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	9                       # 0x9
	.long	50                      # 0x32
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	70                      # 0x46
	.long	10                      # 0xa
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	6                       # 0x6
	.long	69                      # 0x45
	.long	4294967283              # 0xfffffff3
	.long	90                      # 0x5a
	.long	0                       # 0x0
	.long	52                      # 0x34
	.long	8                       # 0x8
	.long	43                      # 0x2b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	6                       # 0x6
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967279              # 0xffffffef
	.long	73                      # 0x49
	.long	14                      # 0xe
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967290              # 0xfffffffa
	.long	93                      # 0x5d
	.long	4294967282              # 0xfffffff2
	.long	88                      # 0x58
	.long	4294967290              # 0xfffffffa
	.long	44                      # 0x2c
	.long	4                       # 0x4
	.long	55                      # 0x37
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_B8_TYPE_P, 432

	.type	INIT_MV_RES_I,@object   # @INIT_MV_RES_I
	.p2align	4
INIT_MV_RES_I:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MV_RES_I, 160

	.type	INIT_MV_RES_P,@object   # @INIT_MV_RES_P
	.p2align	4
INIT_MV_RES_P:
	.long	4294967293              # 0xfffffffd
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967290              # 0xfffffffa
	.long	81                      # 0x51
	.long	4294967285              # 0xfffffff5
	.long	96                      # 0x60
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	76                      # 0x4c
	.long	4294967286              # 0xfffffff6
	.long	94                      # 0x5e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	6                       # 0x6
	.long	55                      # 0x37
	.long	7                       # 0x7
	.long	67                      # 0x43
	.long	4294967291              # 0xfffffffb
	.long	86                      # 0x56
	.long	2                       # 0x2
	.long	88                      # 0x58
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	5                       # 0x5
	.long	54                      # 0x36
	.long	4                       # 0x4
	.long	69                      # 0x45
	.long	4294967293              # 0xfffffffd
	.long	81                      # 0x51
	.long	0                       # 0x0
	.long	88                      # 0x58
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967294              # 0xfffffffe
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967291              # 0xfffffffb
	.long	82                      # 0x52
	.long	4294967286              # 0xfffffff6
	.long	96                      # 0x60
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	74                      # 0x4a
	.long	4294967290              # 0xfffffffa
	.long	85                      # 0x55
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	2                       # 0x2
	.long	75                      # 0x4b
	.long	4294967293              # 0xfffffffd
	.long	87                      # 0x57
	.long	4294967293              # 0xfffffffd
	.long	100                     # 0x64
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	4294967293              # 0xfffffffd
	.long	81                      # 0x51
	.long	4294967289              # 0xfffffff9
	.long	86                      # 0x56
	.long	4294967291              # 0xfffffffb
	.long	95                      # 0x5f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967285              # 0xfffffff5
	.long	89                      # 0x59
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967281              # 0xfffffff1
	.long	103                     # 0x67
	.long	4294967275              # 0xffffffeb
	.long	116                     # 0x74
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967291              # 0xfffffffb
	.long	85                      # 0x55
	.long	4294967283              # 0xfffffff3
	.long	106                     # 0x6a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	19                      # 0x13
	.long	57                      # 0x39
	.long	20                      # 0x14
	.long	58                      # 0x3a
	.long	4                       # 0x4
	.long	84                      # 0x54
	.long	6                       # 0x6
	.long	96                      # 0x60
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	5                       # 0x5
	.long	63                      # 0x3f
	.long	6                       # 0x6
	.long	75                      # 0x4b
	.long	4294967293              # 0xfffffffd
	.long	90                      # 0x5a
	.long	4294967295              # 0xffffffff
	.long	101                     # 0x65
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MV_RES_P, 480

	.type	INIT_REF_NO_I,@object   # @INIT_REF_NO_I
	.p2align	4
INIT_REF_NO_I:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_REF_NO_I, 96

	.type	INIT_REF_NO_P,@object   # @INIT_REF_NO_P
	.p2align	4
INIT_REF_NO_P:
	.long	4294967289              # 0xfffffff9
	.long	67                      # 0x43
	.long	4294967291              # 0xfffffffb
	.long	74                      # 0x4a
	.long	4294967292              # 0xfffffffc
	.long	74                      # 0x4a
	.long	4294967291              # 0xfffffffb
	.long	80                      # 0x50
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.long	1                       # 0x1
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967295              # 0xffffffff
	.long	66                      # 0x42
	.long	4294967295              # 0xffffffff
	.long	77                      # 0x4d
	.long	1                       # 0x1
	.long	70                      # 0x46
	.long	4294967294              # 0xfffffffe
	.long	86                      # 0x56
	.long	4294967291              # 0xfffffffb
	.long	72                      # 0x48
	.long	0                       # 0x0
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	3                       # 0x3
	.long	55                      # 0x37
	.long	4294967292              # 0xfffffffc
	.long	79                      # 0x4f
	.long	4294967294              # 0xfffffffe
	.long	75                      # 0x4b
	.long	4294967284              # 0xfffffff4
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	50                      # 0x32
	.long	1                       # 0x1
	.long	60                      # 0x3c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_REF_NO_P, 288

	.type	INIT_DELTA_QP_I,@object # @INIT_DELTA_QP_I
	.p2align	4
INIT_DELTA_QP_I:
	.long	0                       # 0x0
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.size	INIT_DELTA_QP_I, 32

	.type	INIT_DELTA_QP_P,@object # @INIT_DELTA_QP_P
	.p2align	4
INIT_DELTA_QP_P:
	.long	0                       # 0x0
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.size	INIT_DELTA_QP_P, 96

	.type	INIT_MB_AFF_I,@object   # @INIT_MB_AFF_I
	.p2align	4
INIT_MB_AFF_I:
	.long	0                       # 0x0
	.long	11                      # 0xb
	.long	1                       # 0x1
	.long	55                      # 0x37
	.long	0                       # 0x0
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MB_AFF_I, 32

	.type	INIT_MB_AFF_P,@object   # @INIT_MB_AFF_P
	.p2align	4
INIT_MB_AFF_P:
	.long	0                       # 0x0
	.long	45                      # 0x2d
	.long	4294967292              # 0xfffffffc
	.long	78                      # 0x4e
	.long	4294967293              # 0xfffffffd
	.long	96                      # 0x60
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	13                      # 0xd
	.long	15                      # 0xf
	.long	7                       # 0x7
	.long	51                      # 0x33
	.long	2                       # 0x2
	.long	80                      # 0x50
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	7                       # 0x7
	.long	34                      # 0x22
	.long	4294967287              # 0xfffffff7
	.long	88                      # 0x58
	.long	4294967276              # 0xffffffec
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MB_AFF_P, 96

	.type	INIT_TRANSFORM_SIZE_I,@object # @INIT_TRANSFORM_SIZE_I
	.p2align	4
INIT_TRANSFORM_SIZE_I:
	.long	31                      # 0x1f
	.long	21                      # 0x15
	.long	31                      # 0x1f
	.long	31                      # 0x1f
	.long	25                      # 0x19
	.long	50                      # 0x32
	.size	INIT_TRANSFORM_SIZE_I, 24

	.type	INIT_TRANSFORM_SIZE_P,@object # @INIT_TRANSFORM_SIZE_P
	.p2align	4
INIT_TRANSFORM_SIZE_P:
	.long	12                      # 0xc
	.long	40                      # 0x28
	.long	11                      # 0xb
	.long	51                      # 0x33
	.long	14                      # 0xe
	.long	59                      # 0x3b
	.long	25                      # 0x19
	.long	32                      # 0x20
	.long	21                      # 0x15
	.long	49                      # 0x31
	.long	21                      # 0x15
	.long	54                      # 0x36
	.long	21                      # 0x15
	.long	33                      # 0x21
	.long	19                      # 0x13
	.long	50                      # 0x32
	.long	17                      # 0x11
	.long	61                      # 0x3d
	.size	INIT_TRANSFORM_SIZE_P, 72

	.type	INIT_IPR_I,@object      # @INIT_IPR_I
	.p2align	4
INIT_IPR_I:
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.size	INIT_IPR_I, 16

	.type	INIT_IPR_P,@object      # @INIT_IPR_P
	.p2align	4
INIT_IPR_P:
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.size	INIT_IPR_P, 48

	.type	INIT_CIPR_I,@object     # @INIT_CIPR_I
	.p2align	4
INIT_CIPR_I:
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4                       # 0x4
	.long	86                      # 0x56
	.long	0                       # 0x0
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.size	INIT_CIPR_I, 32

	.type	INIT_CIPR_P,@object     # @INIT_CIPR_P
	.p2align	4
INIT_CIPR_P:
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4                       # 0x4
	.long	86                      # 0x56
	.long	0                       # 0x0
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4                       # 0x4
	.long	86                      # 0x56
	.long	0                       # 0x0
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4                       # 0x4
	.long	86                      # 0x56
	.long	0                       # 0x0
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.size	INIT_CIPR_P, 96

	.type	INIT_CBP_I,@object      # @INIT_CBP_I
	.p2align	4
INIT_CBP_I:
	.long	4294967279              # 0xffffffef
	.long	127                     # 0x7f
	.long	4294967283              # 0xfffffff3
	.long	102                     # 0x66
	.long	0                       # 0x0
	.long	82                      # 0x52
	.long	4294967289              # 0xfffffff9
	.long	74                      # 0x4a
	.long	4294967275              # 0xffffffeb
	.long	107                     # 0x6b
	.long	4294967269              # 0xffffffe5
	.long	127                     # 0x7f
	.long	4294967265              # 0xffffffe1
	.long	127                     # 0x7f
	.long	4294967272              # 0xffffffe8
	.long	127                     # 0x7f
	.long	4294967278              # 0xffffffee
	.long	95                      # 0x5f
	.long	4294967269              # 0xffffffe5
	.long	127                     # 0x7f
	.long	4294967275              # 0xffffffeb
	.long	114                     # 0x72
	.long	4294967266              # 0xffffffe2
	.long	127                     # 0x7f
	.size	INIT_CBP_I, 96

	.type	INIT_CBP_P,@object      # @INIT_CBP_P
	.p2align	4
INIT_CBP_P:
	.long	4294967269              # 0xffffffe5
	.long	126                     # 0x7e
	.long	4294967268              # 0xffffffe4
	.long	98                      # 0x62
	.long	4294967271              # 0xffffffe7
	.long	101                     # 0x65
	.long	4294967273              # 0xffffffe9
	.long	67                      # 0x43
	.long	4294967268              # 0xffffffe4
	.long	82                      # 0x52
	.long	4294967276              # 0xffffffec
	.long	94                      # 0x5e
	.long	4294967280              # 0xfffffff0
	.long	83                      # 0x53
	.long	4294967274              # 0xffffffea
	.long	110                     # 0x6e
	.long	4294967275              # 0xffffffeb
	.long	91                      # 0x5b
	.long	4294967278              # 0xffffffee
	.long	102                     # 0x66
	.long	4294967283              # 0xfffffff3
	.long	93                      # 0x5d
	.long	4294967267              # 0xffffffe3
	.long	127                     # 0x7f
	.long	4294967257              # 0xffffffd9
	.long	127                     # 0x7f
	.long	4294967278              # 0xffffffee
	.long	91                      # 0x5b
	.long	4294967279              # 0xffffffef
	.long	96                      # 0x60
	.long	4294967270              # 0xffffffe6
	.long	81                      # 0x51
	.long	4294967261              # 0xffffffdd
	.long	98                      # 0x62
	.long	4294967272              # 0xffffffe8
	.long	102                     # 0x66
	.long	4294967273              # 0xffffffe9
	.long	97                      # 0x61
	.long	4294967269              # 0xffffffe5
	.long	119                     # 0x77
	.long	4294967272              # 0xffffffe8
	.long	99                      # 0x63
	.long	4294967275              # 0xffffffeb
	.long	110                     # 0x6e
	.long	4294967278              # 0xffffffee
	.long	102                     # 0x66
	.long	4294967260              # 0xffffffdc
	.long	127                     # 0x7f
	.long	4294967260              # 0xffffffdc
	.long	127                     # 0x7f
	.long	4294967279              # 0xffffffef
	.long	91                      # 0x5b
	.long	4294967282              # 0xfffffff2
	.long	95                      # 0x5f
	.long	4294967271              # 0xffffffe7
	.long	84                      # 0x54
	.long	4294967271              # 0xffffffe7
	.long	86                      # 0x56
	.long	4294967284              # 0xfffffff4
	.long	89                      # 0x59
	.long	4294967279              # 0xffffffef
	.long	91                      # 0x5b
	.long	4294967265              # 0xffffffe1
	.long	127                     # 0x7f
	.long	4294967282              # 0xfffffff2
	.long	76                      # 0x4c
	.long	4294967278              # 0xffffffee
	.long	103                     # 0x67
	.long	4294967283              # 0xfffffff3
	.long	90                      # 0x5a
	.long	4294967259              # 0xffffffdb
	.long	127                     # 0x7f
	.size	INIT_CBP_P, 288

	.type	INIT_BCBP_I,@object     # @INIT_BCBP_I
	.p2align	4
INIT_BCBP_I:
	.long	4294967279              # 0xffffffef
	.long	123                     # 0x7b
	.long	4294967284              # 0xfffffff4
	.long	115                     # 0x73
	.long	4294967280              # 0xfffffff0
	.long	122                     # 0x7a
	.long	4294967285              # 0xfffffff5
	.long	115                     # 0x73
	.long	4294967284              # 0xfffffff4
	.long	63                      # 0x3f
	.long	4294967294              # 0xfffffffe
	.long	68                      # 0x44
	.long	4294967281              # 0xfffffff1
	.long	84                      # 0x54
	.long	4294967283              # 0xfffffff3
	.long	104                     # 0x68
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	70                      # 0x46
	.long	4294967288              # 0xfffffff8
	.long	93                      # 0x5d
	.long	4294967286              # 0xfffffff6
	.long	90                      # 0x5a
	.long	4294967266              # 0xffffffe2
	.long	127                     # 0x7f
	.long	4294967295              # 0xffffffff
	.long	74                      # 0x4a
	.long	4294967290              # 0xfffffffa
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	91                      # 0x5b
	.long	4294967276              # 0xffffffec
	.long	127                     # 0x7f
	.long	4294967292              # 0xfffffffc
	.long	56                      # 0x38
	.long	4294967291              # 0xfffffffb
	.long	82                      # 0x52
	.long	4294967289              # 0xfffffff9
	.long	76                      # 0x4c
	.long	4294967274              # 0xffffffea
	.long	125                     # 0x7d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_BCBP_I, 256

	.type	INIT_BCBP_P,@object     # @INIT_BCBP_P
	.p2align	4
INIT_BCBP_P:
	.long	4294967289              # 0xfffffff9
	.long	92                      # 0x5c
	.long	4294967291              # 0xfffffffb
	.long	89                      # 0x59
	.long	4294967289              # 0xfffffff9
	.long	96                      # 0x60
	.long	4294967283              # 0xfffffff3
	.long	108                     # 0x6c
	.long	4294967293              # 0xfffffffd
	.long	46                      # 0x2e
	.long	4294967295              # 0xffffffff
	.long	65                      # 0x41
	.long	4294967295              # 0xffffffff
	.long	57                      # 0x39
	.long	4294967287              # 0xfffffff7
	.long	93                      # 0x5d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	92                      # 0x5c
	.long	4294967288              # 0xfffffff8
	.long	87                      # 0x57
	.long	4294967273              # 0xffffffe9
	.long	126                     # 0x7e
	.long	5                       # 0x5
	.long	54                      # 0x36
	.long	6                       # 0x6
	.long	60                      # 0x3c
	.long	6                       # 0x6
	.long	59                      # 0x3b
	.long	6                       # 0x6
	.long	69                      # 0x45
	.long	4294967295              # 0xffffffff
	.long	48                      # 0x30
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967292              # 0xfffffffc
	.long	69                      # 0x45
	.long	4294967288              # 0xfffffff8
	.long	88                      # 0x58
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	80                      # 0x50
	.long	4294967291              # 0xfffffffb
	.long	89                      # 0x59
	.long	4294967289              # 0xfffffff9
	.long	94                      # 0x5e
	.long	4294967292              # 0xfffffffc
	.long	92                      # 0x5c
	.long	0                       # 0x0
	.long	39                      # 0x27
	.long	0                       # 0x0
	.long	65                      # 0x41
	.long	4294967281              # 0xfffffff1
	.long	84                      # 0x54
	.long	4294967261              # 0xffffffdd
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967294              # 0xfffffffe
	.long	73                      # 0x49
	.long	4294967284              # 0xfffffff4
	.long	104                     # 0x68
	.long	4294967287              # 0xfffffff7
	.long	91                      # 0x5b
	.long	4294967265              # 0xffffffe1
	.long	127                     # 0x7f
	.long	3                       # 0x3
	.long	55                      # 0x37
	.long	7                       # 0x7
	.long	56                      # 0x38
	.long	7                       # 0x7
	.long	55                      # 0x37
	.long	8                       # 0x8
	.long	61                      # 0x3d
	.long	4294967293              # 0xfffffffd
	.long	53                      # 0x35
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967289              # 0xfffffff9
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	88                      # 0x58
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	11                      # 0xb
	.long	80                      # 0x50
	.long	5                       # 0x5
	.long	76                      # 0x4c
	.long	2                       # 0x2
	.long	84                      # 0x54
	.long	5                       # 0x5
	.long	78                      # 0x4e
	.long	4294967290              # 0xfffffffa
	.long	55                      # 0x37
	.long	4                       # 0x4
	.long	61                      # 0x3d
	.long	4294967282              # 0xfffffff2
	.long	83                      # 0x53
	.long	4294967259              # 0xffffffdb
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967291              # 0xfffffffb
	.long	79                      # 0x4f
	.long	4294967285              # 0xfffffff5
	.long	104                     # 0x68
	.long	4294967285              # 0xfffffff5
	.long	91                      # 0x5b
	.long	4294967266              # 0xffffffe2
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	65                      # 0x41
	.long	4294967294              # 0xfffffffe
	.long	79                      # 0x4f
	.long	0                       # 0x0
	.long	72                      # 0x48
	.long	4294967292              # 0xfffffffc
	.long	92                      # 0x5c
	.long	4294967290              # 0xfffffffa
	.long	56                      # 0x38
	.long	3                       # 0x3
	.long	68                      # 0x44
	.long	4294967288              # 0xfffffff8
	.long	71                      # 0x47
	.long	4294967283              # 0xfffffff3
	.long	98                      # 0x62
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_BCBP_P, 768

	.type	INIT_MAP_I,@object      # @INIT_MAP_I
	.p2align	4
INIT_MAP_I:
	.long	4294967289              # 0xfffffff9
	.long	93                      # 0x5d
	.long	4294967285              # 0xfffffff5
	.long	87                      # 0x57
	.long	4294967293              # 0xfffffffd
	.long	77                      # 0x4d
	.long	4294967291              # 0xfffffffb
	.long	71                      # 0x47
	.long	4294967292              # 0xfffffffc
	.long	63                      # 0x3f
	.long	4294967292              # 0xfffffffc
	.long	68                      # 0x44
	.long	4294967284              # 0xfffffff4
	.long	84                      # 0x54
	.long	4294967289              # 0xfffffff9
	.long	62                      # 0x3e
	.long	4294967289              # 0xfffffff9
	.long	65                      # 0x41
	.long	8                       # 0x8
	.long	61                      # 0x3d
	.long	5                       # 0x5
	.long	56                      # 0x38
	.long	4294967294              # 0xfffffffe
	.long	66                      # 0x42
	.long	1                       # 0x1
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	61                      # 0x3d
	.long	4294967294              # 0xfffffffe
	.long	78                      # 0x4e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	50                      # 0x32
	.long	7                       # 0x7
	.long	52                      # 0x34
	.long	10                      # 0xa
	.long	35                      # 0x23
	.long	0                       # 0x0
	.long	44                      # 0x2c
	.long	11                      # 0xb
	.long	38                      # 0x26
	.long	1                       # 0x1
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	46                      # 0x2e
	.long	5                       # 0x5
	.long	44                      # 0x2c
	.long	31                      # 0x1f
	.long	17                      # 0x11
	.long	1                       # 0x1
	.long	51                      # 0x33
	.long	7                       # 0x7
	.long	50                      # 0x32
	.long	28                      # 0x1c
	.long	19                      # 0x13
	.long	16                      # 0x10
	.long	33                      # 0x21
	.long	14                      # 0xe
	.long	62                      # 0x3e
	.long	4294967279              # 0xffffffef
	.long	120                     # 0x78
	.long	4294967276              # 0xffffffec
	.long	112                     # 0x70
	.long	4294967278              # 0xffffffee
	.long	114                     # 0x72
	.long	4294967285              # 0xfffffff5
	.long	85                      # 0x55
	.long	4294967281              # 0xfffffff1
	.long	92                      # 0x5c
	.long	4294967282              # 0xfffffff2
	.long	89                      # 0x59
	.long	4294967270              # 0xffffffe6
	.long	71                      # 0x47
	.long	4294967281              # 0xfffffff1
	.long	81                      # 0x51
	.long	4294967282              # 0xfffffff2
	.long	80                      # 0x50
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967282              # 0xfffffff2
	.long	70                      # 0x46
	.long	4294967272              # 0xffffffe8
	.long	56                      # 0x38
	.long	4294967273              # 0xffffffe9
	.long	68                      # 0x44
	.long	4294967272              # 0xffffffe8
	.long	50                      # 0x32
	.long	4294967285              # 0xfffffff5
	.long	74                      # 0x4a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967283              # 0xfffffff3
	.long	108                     # 0x6c
	.long	4294967281              # 0xfffffff1
	.long	100                     # 0x64
	.long	4294967283              # 0xfffffff3
	.long	101                     # 0x65
	.long	4294967283              # 0xfffffff3
	.long	91                      # 0x5b
	.long	4294967284              # 0xfffffff4
	.long	94                      # 0x5e
	.long	4294967286              # 0xfffffff6
	.long	88                      # 0x58
	.long	4294967280              # 0xfffffff0
	.long	84                      # 0x54
	.long	4294967286              # 0xfffffff6
	.long	86                      # 0x56
	.long	4294967289              # 0xfffffff9
	.long	83                      # 0x53
	.long	4294967283              # 0xfffffff3
	.long	87                      # 0x57
	.long	4294967277              # 0xffffffed
	.long	94                      # 0x5e
	.long	1                       # 0x1
	.long	70                      # 0x46
	.long	0                       # 0x0
	.long	72                      # 0x48
	.long	4294967291              # 0xfffffffb
	.long	74                      # 0x4a
	.long	18                      # 0x12
	.long	59                      # 0x3b
	.long	4294967288              # 0xfffffff8
	.long	102                     # 0x66
	.long	4294967281              # 0xfffffff1
	.long	100                     # 0x64
	.long	0                       # 0x0
	.long	95                      # 0x5f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967292              # 0xfffffffc
	.long	75                      # 0x4b
	.long	2                       # 0x2
	.long	72                      # 0x48
	.long	4294967285              # 0xfffffff5
	.long	75                      # 0x4b
	.long	4294967293              # 0xfffffffd
	.long	71                      # 0x47
	.long	15                      # 0xf
	.long	46                      # 0x2e
	.long	4294967283              # 0xfffffff3
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	65                      # 0x41
	.long	21                      # 0x15
	.long	37                      # 0x25
	.long	4294967281              # 0xfffffff1
	.long	72                      # 0x48
	.long	9                       # 0x9
	.long	57                      # 0x39
	.long	16                      # 0x10
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	12                      # 0xc
	.long	72                      # 0x48
	.size	INIT_MAP_I, 960

	.type	INIT_MAP_P,@object      # @INIT_MAP_P
	.p2align	4
INIT_MAP_P:
	.long	4294967294              # 0xfffffffe
	.long	85                      # 0x55
	.long	4294967290              # 0xfffffffa
	.long	78                      # 0x4e
	.long	4294967295              # 0xffffffff
	.long	75                      # 0x4b
	.long	4294967289              # 0xfffffff9
	.long	77                      # 0x4d
	.long	2                       # 0x2
	.long	54                      # 0x36
	.long	5                       # 0x5
	.long	50                      # 0x32
	.long	4294967293              # 0xfffffffd
	.long	68                      # 0x44
	.long	1                       # 0x1
	.long	50                      # 0x32
	.long	6                       # 0x6
	.long	42                      # 0x2a
	.long	4294967292              # 0xfffffffc
	.long	81                      # 0x51
	.long	1                       # 0x1
	.long	63                      # 0x3f
	.long	4294967292              # 0xfffffffc
	.long	70                      # 0x46
	.long	0                       # 0x0
	.long	67                      # 0x43
	.long	2                       # 0x2
	.long	57                      # 0x39
	.long	4294967294              # 0xfffffffe
	.long	76                      # 0x4c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	11                      # 0xb
	.long	35                      # 0x23
	.long	4                       # 0x4
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	61                      # 0x3d
	.long	11                      # 0xb
	.long	35                      # 0x23
	.long	18                      # 0x12
	.long	25                      # 0x19
	.long	12                      # 0xc
	.long	24                      # 0x18
	.long	13                      # 0xd
	.long	29                      # 0x1d
	.long	13                      # 0xd
	.long	36                      # 0x24
	.long	4294967286              # 0xfffffff6
	.long	93                      # 0x5d
	.long	4294967289              # 0xfffffff9
	.long	73                      # 0x49
	.long	4294967294              # 0xfffffffe
	.long	73                      # 0x49
	.long	13                      # 0xd
	.long	46                      # 0x2e
	.long	9                       # 0x9
	.long	49                      # 0x31
	.long	4294967289              # 0xfffffff9
	.long	100                     # 0x64
	.long	4294967292              # 0xfffffffc
	.long	79                      # 0x4f
	.long	4294967289              # 0xfffffff9
	.long	71                      # 0x47
	.long	4294967291              # 0xfffffffb
	.long	69                      # 0x45
	.long	4294967287              # 0xfffffff7
	.long	70                      # 0x46
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967286              # 0xfffffff6
	.long	68                      # 0x44
	.long	4294967277              # 0xffffffed
	.long	73                      # 0x49
	.long	4294967284              # 0xfffffff4
	.long	69                      # 0x45
	.long	4294967280              # 0xfffffff0
	.long	70                      # 0x46
	.long	4294967281              # 0xfffffff1
	.long	67                      # 0x43
	.long	4294967276              # 0xffffffec
	.long	62                      # 0x3e
	.long	4294967277              # 0xffffffed
	.long	70                      # 0x46
	.long	4294967280              # 0xfffffff0
	.long	66                      # 0x42
	.long	4294967274              # 0xffffffea
	.long	65                      # 0x41
	.long	4294967276              # 0xffffffec
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	9                       # 0x9
	.long	53                      # 0x35
	.long	2                       # 0x2
	.long	53                      # 0x35
	.long	5                       # 0x5
	.long	53                      # 0x35
	.long	4294967294              # 0xfffffffe
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	56                      # 0x38
	.long	4294967283              # 0xfffffff3
	.long	63                      # 0x3f
	.long	4294967291              # 0xfffffffb
	.long	60                      # 0x3c
	.long	4294967295              # 0xffffffff
	.long	62                      # 0x3e
	.long	4                       # 0x4
	.long	57                      # 0x39
	.long	4294967290              # 0xfffffffa
	.long	69                      # 0x45
	.long	4                       # 0x4
	.long	57                      # 0x39
	.long	14                      # 0xe
	.long	39                      # 0x27
	.long	4                       # 0x4
	.long	51                      # 0x33
	.long	13                      # 0xd
	.long	68                      # 0x44
	.long	3                       # 0x3
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	61                      # 0x3d
	.long	9                       # 0x9
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	7                       # 0x7
	.long	50                      # 0x32
	.long	16                      # 0x10
	.long	39                      # 0x27
	.long	5                       # 0x5
	.long	44                      # 0x2c
	.long	4                       # 0x4
	.long	52                      # 0x34
	.long	11                      # 0xb
	.long	48                      # 0x30
	.long	4294967291              # 0xfffffffb
	.long	60                      # 0x3c
	.long	4294967295              # 0xffffffff
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	22                      # 0x16
	.long	33                      # 0x21
	.long	5                       # 0x5
	.long	44                      # 0x2c
	.long	14                      # 0xe
	.long	43                      # 0x2b
	.long	4294967295              # 0xffffffff
	.long	78                      # 0x4e
	.long	0                       # 0x0
	.long	60                      # 0x3c
	.long	9                       # 0x9
	.long	69                      # 0x45
	.long	4294967283              # 0xfffffff3
	.long	103                     # 0x67
	.long	4294967283              # 0xfffffff3
	.long	91                      # 0x5b
	.long	4294967287              # 0xfffffff7
	.long	89                      # 0x59
	.long	4294967282              # 0xfffffff2
	.long	92                      # 0x5c
	.long	4294967288              # 0xfffffff8
	.long	76                      # 0x4c
	.long	4294967284              # 0xfffffff4
	.long	87                      # 0x57
	.long	4294967273              # 0xffffffe9
	.long	110                     # 0x6e
	.long	4294967272              # 0xffffffe8
	.long	105                     # 0x69
	.long	4294967286              # 0xfffffff6
	.long	78                      # 0x4e
	.long	4294967276              # 0xffffffec
	.long	112                     # 0x70
	.long	4294967279              # 0xffffffef
	.long	99                      # 0x63
	.long	4294967218              # 0xffffffb2
	.long	127                     # 0x7f
	.long	4294967226              # 0xffffffba
	.long	127                     # 0x7f
	.long	4294967246              # 0xffffffce
	.long	127                     # 0x7f
	.long	4294967250              # 0xffffffd2
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967292              # 0xfffffffc
	.long	66                      # 0x42
	.long	4294967291              # 0xfffffffb
	.long	78                      # 0x4e
	.long	4294967292              # 0xfffffffc
	.long	71                      # 0x47
	.long	4294967288              # 0xfffffff8
	.long	72                      # 0x48
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	4294967295              # 0xffffffff
	.long	55                      # 0x37
	.long	4294967289              # 0xfffffff9
	.long	70                      # 0x46
	.long	4294967290              # 0xfffffffa
	.long	75                      # 0x4b
	.long	4294967288              # 0xfffffff8
	.long	89                      # 0x59
	.long	4294967262              # 0xffffffde
	.long	119                     # 0x77
	.long	4294967293              # 0xfffffffd
	.long	75                      # 0x4b
	.long	32                      # 0x20
	.long	20                      # 0x14
	.long	30                      # 0x1e
	.long	22                      # 0x16
	.long	4294967252              # 0xffffffd4
	.long	127                     # 0x7f
	.long	4294967291              # 0xfffffffb
	.long	85                      # 0x55
	.long	4294967290              # 0xfffffffa
	.long	81                      # 0x51
	.long	4294967286              # 0xfffffff6
	.long	77                      # 0x4d
	.long	4294967289              # 0xfffffff9
	.long	81                      # 0x51
	.long	4294967279              # 0xffffffef
	.long	80                      # 0x50
	.long	4294967278              # 0xffffffee
	.long	73                      # 0x49
	.long	4294967292              # 0xfffffffc
	.long	74                      # 0x4a
	.long	4294967286              # 0xfffffff6
	.long	83                      # 0x53
	.long	4294967287              # 0xfffffff7
	.long	71                      # 0x47
	.long	4294967287              # 0xfffffff7
	.long	67                      # 0x43
	.long	4294967295              # 0xffffffff
	.long	61                      # 0x3d
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967282              # 0xfffffff2
	.long	66                      # 0x42
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	54                      # 0x36
	.long	4294967291              # 0xfffffffb
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	4294967295              # 0xffffffff
	.long	60                      # 0x3c
	.long	4294967293              # 0xfffffffd
	.long	61                      # 0x3d
	.long	4294967288              # 0xfffffff8
	.long	67                      # 0x43
	.long	4294967271              # 0xffffffe7
	.long	84                      # 0x54
	.long	4294967282              # 0xfffffff2
	.long	74                      # 0x4a
	.long	4294967291              # 0xfffffffb
	.long	65                      # 0x41
	.long	5                       # 0x5
	.long	52                      # 0x34
	.long	2                       # 0x2
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	61                      # 0x3d
	.long	4294967287              # 0xfffffff7
	.long	69                      # 0x45
	.long	4294967285              # 0xfffffff5
	.long	70                      # 0x46
	.long	18                      # 0x12
	.long	55                      # 0x37
	.long	4294967292              # 0xfffffffc
	.long	71                      # 0x47
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	7                       # 0x7
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	9                       # 0x9
	.long	41                      # 0x29
	.long	18                      # 0x12
	.long	25                      # 0x19
	.long	9                       # 0x9
	.long	32                      # 0x20
	.long	5                       # 0x5
	.long	43                      # 0x2b
	.long	9                       # 0x9
	.long	47                      # 0x2f
	.long	0                       # 0x0
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	51                      # 0x33
	.long	2                       # 0x2
	.long	46                      # 0x2e
	.long	19                      # 0x13
	.long	38                      # 0x26
	.long	4294967292              # 0xfffffffc
	.long	66                      # 0x42
	.long	15                      # 0xf
	.long	38                      # 0x26
	.long	12                      # 0xc
	.long	42                      # 0x2a
	.long	9                       # 0x9
	.long	34                      # 0x22
	.long	0                       # 0x0
	.long	89                      # 0x59
	.long	4294967292              # 0xfffffffc
	.long	86                      # 0x56
	.long	4294967284              # 0xfffffff4
	.long	88                      # 0x58
	.long	4294967291              # 0xfffffffb
	.long	82                      # 0x52
	.long	4294967293              # 0xfffffffd
	.long	72                      # 0x48
	.long	4294967292              # 0xfffffffc
	.long	67                      # 0x43
	.long	4294967288              # 0xfffffff8
	.long	72                      # 0x48
	.long	4294967280              # 0xfffffff0
	.long	89                      # 0x59
	.long	4294967287              # 0xfffffff7
	.long	69                      # 0x45
	.long	4294967295              # 0xffffffff
	.long	59                      # 0x3b
	.long	5                       # 0x5
	.long	66                      # 0x42
	.long	4                       # 0x4
	.long	57                      # 0x39
	.long	4294967292              # 0xfffffffc
	.long	71                      # 0x47
	.long	4294967294              # 0xfffffffe
	.long	71                      # 0x47
	.long	2                       # 0x2
	.long	58                      # 0x3a
	.long	4294967295              # 0xffffffff
	.long	74                      # 0x4a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967292              # 0xfffffffc
	.long	44                      # 0x2c
	.long	4294967295              # 0xffffffff
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	4294967289              # 0xfffffff9
	.long	51                      # 0x33
	.long	4294967292              # 0xfffffffc
	.long	47                      # 0x2f
	.long	4294967290              # 0xfffffffa
	.long	42                      # 0x2a
	.long	4294967293              # 0xfffffffd
	.long	41                      # 0x29
	.long	4294967290              # 0xfffffffa
	.long	53                      # 0x35
	.long	8                       # 0x8
	.long	76                      # 0x4c
	.long	4294967287              # 0xfffffff7
	.long	78                      # 0x4e
	.long	4294967285              # 0xfffffff5
	.long	83                      # 0x53
	.long	9                       # 0x9
	.long	52                      # 0x34
	.long	0                       # 0x0
	.long	67                      # 0x43
	.long	4294967291              # 0xfffffffb
	.long	90                      # 0x5a
	.long	4294967293              # 0xfffffffd
	.long	78                      # 0x4e
	.long	4294967288              # 0xfffffff8
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	72                      # 0x48
	.long	4294967286              # 0xfffffff6
	.long	72                      # 0x48
	.long	4294967278              # 0xffffffee
	.long	75                      # 0x4b
	.long	4294967284              # 0xfffffff4
	.long	71                      # 0x47
	.long	4294967285              # 0xfffffff5
	.long	63                      # 0x3f
	.long	4294967291              # 0xfffffffb
	.long	70                      # 0x46
	.long	4294967279              # 0xffffffef
	.long	75                      # 0x4b
	.long	4294967282              # 0xfffffff2
	.long	72                      # 0x48
	.long	4294967280              # 0xfffffff0
	.long	67                      # 0x43
	.long	4294967288              # 0xfffffff8
	.long	53                      # 0x35
	.long	4294967282              # 0xfffffff2
	.long	59                      # 0x3b
	.long	4294967287              # 0xfffffff7
	.long	52                      # 0x34
	.long	4294967285              # 0xfffffff5
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	4294967281              # 0xfffffff1
	.long	72                      # 0x48
	.long	4294967291              # 0xfffffffb
	.long	75                      # 0x4b
	.long	4294967288              # 0xfffffff8
	.long	80                      # 0x50
	.long	4294967275              # 0xffffffeb
	.long	83                      # 0x53
	.long	4294967275              # 0xffffffeb
	.long	64                      # 0x40
	.long	4294967283              # 0xfffffff3
	.long	31                      # 0x1f
	.long	4294967271              # 0xffffffe7
	.long	64                      # 0x40
	.long	4294967267              # 0xffffffe3
	.long	94                      # 0x5e
	.long	9                       # 0x9
	.long	75                      # 0x4b
	.long	17                      # 0x11
	.long	63                      # 0x3f
	.long	4294967288              # 0xfffffff8
	.long	74                      # 0x4a
	.long	4294967291              # 0xfffffffb
	.long	35                      # 0x23
	.long	4294967294              # 0xfffffffe
	.long	27                      # 0x1b
	.long	13                      # 0xd
	.long	91                      # 0x5b
	.long	3                       # 0x3
	.long	65                      # 0x41
	.long	4294967289              # 0xfffffff9
	.long	69                      # 0x45
	.long	8                       # 0x8
	.long	77                      # 0x4d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967286              # 0xfffffff6
	.long	66                      # 0x42
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.long	4294967293              # 0xfffffffd
	.long	68                      # 0x44
	.long	4294967276              # 0xffffffec
	.long	81                      # 0x51
	.long	0                       # 0x0
	.long	30                      # 0x1e
	.long	1                       # 0x1
	.long	7                       # 0x7
	.long	4294967293              # 0xfffffffd
	.long	23                      # 0x17
	.long	4294967275              # 0xffffffeb
	.long	74                      # 0x4a
	.long	16                      # 0x10
	.long	66                      # 0x42
	.long	4294967273              # 0xffffffe9
	.long	124                     # 0x7c
	.long	17                      # 0x11
	.long	37                      # 0x25
	.long	44                      # 0x2c
	.long	4294967278              # 0xffffffee
	.long	50                      # 0x32
	.long	4294967262              # 0xffffffde
	.long	4294967274              # 0xffffffea
	.long	127                     # 0x7f
	.size	INIT_MAP_P, 2880

	.type	INIT_LAST_I,@object     # @INIT_LAST_I
	.p2align	4
INIT_LAST_I:
	.long	24                      # 0x18
	.long	0                       # 0x0
	.long	15                      # 0xf
	.long	9                       # 0x9
	.long	8                       # 0x8
	.long	25                      # 0x19
	.long	13                      # 0xd
	.long	18                      # 0x12
	.long	15                      # 0xf
	.long	9                       # 0x9
	.long	13                      # 0xd
	.long	19                      # 0x13
	.long	10                      # 0xa
	.long	37                      # 0x25
	.long	12                      # 0xc
	.long	18                      # 0x12
	.long	6                       # 0x6
	.long	29                      # 0x1d
	.long	20                      # 0x14
	.long	33                      # 0x21
	.long	15                      # 0xf
	.long	30                      # 0x1e
	.long	4                       # 0x4
	.long	45                      # 0x2d
	.long	1                       # 0x1
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	7                       # 0x7
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	12                      # 0xc
	.long	38                      # 0x26
	.long	11                      # 0xb
	.long	45                      # 0x2d
	.long	15                      # 0xf
	.long	39                      # 0x27
	.long	11                      # 0xb
	.long	42                      # 0x2a
	.long	13                      # 0xd
	.long	44                      # 0x2c
	.long	16                      # 0x10
	.long	45                      # 0x2d
	.long	12                      # 0xc
	.long	41                      # 0x29
	.long	10                      # 0xa
	.long	49                      # 0x31
	.long	30                      # 0x1e
	.long	34                      # 0x22
	.long	18                      # 0x12
	.long	42                      # 0x2a
	.long	10                      # 0xa
	.long	55                      # 0x37
	.long	17                      # 0x11
	.long	51                      # 0x33
	.long	17                      # 0x11
	.long	46                      # 0x2e
	.long	0                       # 0x0
	.long	89                      # 0x59
	.long	23                      # 0x17
	.long	4294967283              # 0xfffffff3
	.long	26                      # 0x1a
	.long	4294967283              # 0xfffffff3
	.long	40                      # 0x28
	.long	4294967281              # 0xfffffff1
	.long	49                      # 0x31
	.long	4294967282              # 0xfffffff2
	.long	44                      # 0x2c
	.long	3                       # 0x3
	.long	45                      # 0x2d
	.long	6                       # 0x6
	.long	44                      # 0x2c
	.long	34                      # 0x22
	.long	33                      # 0x21
	.long	54                      # 0x36
	.long	19                      # 0x13
	.long	82                      # 0x52
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	26                      # 0x1a
	.long	4294967277              # 0xffffffed
	.long	22                      # 0x16
	.long	4294967279              # 0xffffffef
	.long	26                      # 0x1a
	.long	4294967279              # 0xffffffef
	.long	30                      # 0x1e
	.long	4294967271              # 0xffffffe7
	.long	28                      # 0x1c
	.long	4294967276              # 0xffffffec
	.long	33                      # 0x21
	.long	4294967273              # 0xffffffe9
	.long	37                      # 0x25
	.long	4294967269              # 0xffffffe5
	.long	33                      # 0x21
	.long	4294967273              # 0xffffffe9
	.long	40                      # 0x28
	.long	4294967268              # 0xffffffe4
	.long	38                      # 0x26
	.long	4294967279              # 0xffffffef
	.long	33                      # 0x21
	.long	4294967285              # 0xfffffff5
	.long	40                      # 0x28
	.long	4294967281              # 0xfffffff1
	.long	41                      # 0x29
	.long	4294967290              # 0xfffffffa
	.long	38                      # 0x26
	.long	1                       # 0x1
	.long	41                      # 0x29
	.long	17                      # 0x11
	.long	30                      # 0x1e
	.long	4294967290              # 0xfffffffa
	.long	27                      # 0x1b
	.long	3                       # 0x3
	.long	26                      # 0x1a
	.long	22                      # 0x16
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	37                      # 0x25
	.long	4294967280              # 0xfffffff0
	.long	35                      # 0x23
	.long	4294967292              # 0xfffffffc
	.long	38                      # 0x26
	.long	4294967288              # 0xfffffff8
	.long	38                      # 0x26
	.long	4294967293              # 0xfffffffd
	.long	37                      # 0x25
	.long	3                       # 0x3
	.long	38                      # 0x26
	.long	5                       # 0x5
	.long	42                      # 0x2a
	.long	0                       # 0x0
	.long	35                      # 0x23
	.long	16                      # 0x10
	.long	39                      # 0x27
	.long	22                      # 0x16
	.long	14                      # 0xe
	.long	48                      # 0x30
	.long	27                      # 0x1b
	.long	37                      # 0x25
	.long	21                      # 0x15
	.long	60                      # 0x3c
	.long	12                      # 0xc
	.long	68                      # 0x44
	.long	2                       # 0x2
	.long	97                      # 0x61
	.size	INIT_LAST_I, 960

	.type	INIT_LAST_P,@object     # @INIT_LAST_P
	.p2align	4
INIT_LAST_P:
	.long	11                      # 0xb
	.long	28                      # 0x1c
	.long	2                       # 0x2
	.long	40                      # 0x28
	.long	3                       # 0x3
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	49                      # 0x31
	.long	0                       # 0x0
	.long	46                      # 0x2e
	.long	2                       # 0x2
	.long	44                      # 0x2c
	.long	2                       # 0x2
	.long	51                      # 0x33
	.long	0                       # 0x0
	.long	47                      # 0x2f
	.long	4                       # 0x4
	.long	39                      # 0x27
	.long	2                       # 0x2
	.long	62                      # 0x3e
	.long	6                       # 0x6
	.long	46                      # 0x2e
	.long	0                       # 0x0
	.long	54                      # 0x36
	.long	3                       # 0x3
	.long	54                      # 0x36
	.long	2                       # 0x2
	.long	58                      # 0x3a
	.long	4                       # 0x4
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	6                       # 0x6
	.long	51                      # 0x33
	.long	6                       # 0x6
	.long	57                      # 0x39
	.long	7                       # 0x7
	.long	53                      # 0x35
	.long	6                       # 0x6
	.long	52                      # 0x34
	.long	6                       # 0x6
	.long	55                      # 0x37
	.long	11                      # 0xb
	.long	45                      # 0x2d
	.long	14                      # 0xe
	.long	36                      # 0x24
	.long	8                       # 0x8
	.long	53                      # 0x35
	.long	4294967295              # 0xffffffff
	.long	82                      # 0x52
	.long	7                       # 0x7
	.long	55                      # 0x37
	.long	4294967293              # 0xfffffffd
	.long	78                      # 0x4e
	.long	15                      # 0xf
	.long	46                      # 0x2e
	.long	22                      # 0x16
	.long	31                      # 0x1f
	.long	4294967295              # 0xffffffff
	.long	84                      # 0x54
	.long	9                       # 0x9
	.long	4294967294              # 0xfffffffe
	.long	26                      # 0x1a
	.long	4294967287              # 0xfffffff7
	.long	33                      # 0x21
	.long	4294967287              # 0xfffffff7
	.long	39                      # 0x27
	.long	4294967289              # 0xfffffff9
	.long	41                      # 0x29
	.long	4294967294              # 0xfffffffe
	.long	45                      # 0x2d
	.long	3                       # 0x3
	.long	49                      # 0x31
	.long	9                       # 0x9
	.long	45                      # 0x2d
	.long	27                      # 0x1b
	.long	36                      # 0x24
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	25                      # 0x19
	.long	7                       # 0x7
	.long	30                      # 0x1e
	.long	4294967289              # 0xfffffff9
	.long	28                      # 0x1c
	.long	3                       # 0x3
	.long	28                      # 0x1c
	.long	4                       # 0x4
	.long	32                      # 0x20
	.long	0                       # 0x0
	.long	34                      # 0x22
	.long	4294967295              # 0xffffffff
	.long	30                      # 0x1e
	.long	6                       # 0x6
	.long	30                      # 0x1e
	.long	6                       # 0x6
	.long	32                      # 0x20
	.long	9                       # 0x9
	.long	31                      # 0x1f
	.long	19                      # 0x13
	.long	26                      # 0x1a
	.long	27                      # 0x1b
	.long	26                      # 0x1a
	.long	30                      # 0x1e
	.long	37                      # 0x25
	.long	20                      # 0x14
	.long	28                      # 0x1c
	.long	34                      # 0x22
	.long	17                      # 0x11
	.long	70                      # 0x46
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	5                       # 0x5
	.long	59                      # 0x3b
	.long	9                       # 0x9
	.long	67                      # 0x43
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	16                      # 0x10
	.long	30                      # 0x1e
	.long	18                      # 0x12
	.long	32                      # 0x20
	.long	18                      # 0x12
	.long	35                      # 0x23
	.long	22                      # 0x16
	.long	29                      # 0x1d
	.long	24                      # 0x18
	.long	31                      # 0x1f
	.long	23                      # 0x17
	.long	38                      # 0x26
	.long	18                      # 0x12
	.long	43                      # 0x2b
	.long	20                      # 0x14
	.long	41                      # 0x29
	.long	11                      # 0xb
	.long	63                      # 0x3f
	.long	9                       # 0x9
	.long	59                      # 0x3b
	.long	9                       # 0x9
	.long	64                      # 0x40
	.long	4294967295              # 0xffffffff
	.long	94                      # 0x5e
	.long	4294967294              # 0xfffffffe
	.long	89                      # 0x59
	.long	4294967287              # 0xfffffff7
	.long	108                     # 0x6c
	.long	4                       # 0x4
	.long	45                      # 0x2d
	.long	10                      # 0xa
	.long	28                      # 0x1c
	.long	10                      # 0xa
	.long	31                      # 0x1f
	.long	33                      # 0x21
	.long	4294967285              # 0xfffffff5
	.long	52                      # 0x34
	.long	4294967253              # 0xffffffd5
	.long	18                      # 0x12
	.long	15                      # 0xf
	.long	28                      # 0x1c
	.long	0                       # 0x0
	.long	35                      # 0x23
	.long	4294967274              # 0xffffffea
	.long	38                      # 0x26
	.long	4294967271              # 0xffffffe7
	.long	34                      # 0x22
	.long	0                       # 0x0
	.long	39                      # 0x27
	.long	4294967278              # 0xffffffee
	.long	32                      # 0x20
	.long	4294967284              # 0xfffffff4
	.long	102                     # 0x66
	.long	4294967202              # 0xffffffa2
	.zero	8
	.long	56                      # 0x38
	.long	4294967281              # 0xfffffff1
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	33                      # 0x21
	.long	4294967292              # 0xfffffffc
	.long	29                      # 0x1d
	.long	10                      # 0xa
	.long	37                      # 0x25
	.long	4294967291              # 0xfffffffb
	.long	51                      # 0x33
	.long	4294967267              # 0xffffffe3
	.long	39                      # 0x27
	.long	4294967287              # 0xfffffff7
	.long	52                      # 0x34
	.long	4294967262              # 0xffffffde
	.long	69                      # 0x45
	.long	4294967238              # 0xffffffc6
	.long	67                      # 0x43
	.long	4294967233              # 0xffffffc1
	.long	44                      # 0x2c
	.long	4294967291              # 0xfffffffb
	.long	32                      # 0x20
	.long	7                       # 0x7
	.long	55                      # 0x37
	.long	4294967267              # 0xffffffe3
	.long	32                      # 0x20
	.long	1                       # 0x1
	.zero	8
	.long	27                      # 0x1b
	.long	36                      # 0x24
	.long	17                      # 0x11
	.long	4294967286              # 0xfffffff6
	.long	32                      # 0x20
	.long	4294967283              # 0xfffffff3
	.long	42                      # 0x2a
	.long	4294967287              # 0xfffffff7
	.long	49                      # 0x31
	.long	4294967291              # 0xfffffffb
	.long	53                      # 0x35
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	3                       # 0x3
	.long	68                      # 0x44
	.long	10                      # 0xa
	.long	66                      # 0x42
	.long	27                      # 0x1b
	.long	47                      # 0x2f
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	33                      # 0x21
	.long	4294967271              # 0xffffffe7
	.long	34                      # 0x22
	.long	4294967266              # 0xffffffe2
	.long	36                      # 0x24
	.long	4294967268              # 0xffffffe4
	.long	38                      # 0x26
	.long	4294967268              # 0xffffffe4
	.long	38                      # 0x26
	.long	4294967269              # 0xffffffe5
	.long	34                      # 0x22
	.long	4294967278              # 0xffffffee
	.long	35                      # 0x23
	.long	4294967280              # 0xfffffff0
	.long	34                      # 0x22
	.long	4294967282              # 0xfffffff2
	.long	32                      # 0x20
	.long	4294967288              # 0xfffffff8
	.long	37                      # 0x25
	.long	4294967290              # 0xfffffffa
	.long	35                      # 0x23
	.long	0                       # 0x0
	.long	30                      # 0x1e
	.long	10                      # 0xa
	.long	28                      # 0x1c
	.long	18                      # 0x12
	.long	26                      # 0x1a
	.long	25                      # 0x19
	.long	29                      # 0x1d
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	75                      # 0x4b
	.long	2                       # 0x2
	.long	72                      # 0x48
	.long	8                       # 0x8
	.long	77                      # 0x4d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	14                      # 0xe
	.long	35                      # 0x23
	.long	18                      # 0x12
	.long	31                      # 0x1f
	.long	17                      # 0x11
	.long	35                      # 0x23
	.long	21                      # 0x15
	.long	30                      # 0x1e
	.long	17                      # 0x11
	.long	45                      # 0x2d
	.long	20                      # 0x14
	.long	42                      # 0x2a
	.long	18                      # 0x12
	.long	45                      # 0x2d
	.long	27                      # 0x1b
	.long	26                      # 0x1a
	.long	16                      # 0x10
	.long	54                      # 0x36
	.long	7                       # 0x7
	.long	66                      # 0x42
	.long	16                      # 0x10
	.long	56                      # 0x38
	.long	11                      # 0xb
	.long	73                      # 0x49
	.long	10                      # 0xa
	.long	67                      # 0x43
	.long	4294967286              # 0xfffffff6
	.long	116                     # 0x74
	.long	4                       # 0x4
	.long	39                      # 0x27
	.long	0                       # 0x0
	.long	42                      # 0x2a
	.long	7                       # 0x7
	.long	34                      # 0x22
	.long	11                      # 0xb
	.long	29                      # 0x1d
	.long	8                       # 0x8
	.long	31                      # 0x1f
	.long	6                       # 0x6
	.long	37                      # 0x25
	.long	7                       # 0x7
	.long	42                      # 0x2a
	.long	3                       # 0x3
	.long	40                      # 0x28
	.long	8                       # 0x8
	.long	33                      # 0x21
	.long	13                      # 0xd
	.long	43                      # 0x2b
	.long	13                      # 0xd
	.long	36                      # 0x24
	.long	4                       # 0x4
	.long	47                      # 0x2f
	.long	3                       # 0x3
	.long	55                      # 0x37
	.long	2                       # 0x2
	.long	58                      # 0x3a
	.long	6                       # 0x6
	.long	60                      # 0x3c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	8                       # 0x8
	.long	44                      # 0x2c
	.long	11                      # 0xb
	.long	44                      # 0x2c
	.long	14                      # 0xe
	.long	42                      # 0x2a
	.long	7                       # 0x7
	.long	48                      # 0x30
	.long	4                       # 0x4
	.long	56                      # 0x38
	.long	4                       # 0x4
	.long	52                      # 0x34
	.long	13                      # 0xd
	.long	37                      # 0x25
	.long	9                       # 0x9
	.long	49                      # 0x31
	.long	19                      # 0x13
	.long	58                      # 0x3a
	.long	10                      # 0xa
	.long	48                      # 0x30
	.long	12                      # 0xc
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	69                      # 0x45
	.long	20                      # 0x14
	.long	33                      # 0x21
	.long	8                       # 0x8
	.long	63                      # 0x3f
	.long	9                       # 0x9
	.long	4294967294              # 0xfffffffe
	.long	30                      # 0x1e
	.long	4294967286              # 0xfffffff6
	.long	31                      # 0x1f
	.long	4294967292              # 0xfffffffc
	.long	33                      # 0x21
	.long	4294967295              # 0xffffffff
	.long	33                      # 0x21
	.long	7                       # 0x7
	.long	31                      # 0x1f
	.long	12                      # 0xc
	.long	37                      # 0x25
	.long	23                      # 0x17
	.long	31                      # 0x1f
	.long	38                      # 0x26
	.long	20                      # 0x14
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	35                      # 0x23
	.long	4294967278              # 0xffffffee
	.long	33                      # 0x21
	.long	4294967271              # 0xffffffe7
	.long	28                      # 0x1c
	.long	4294967293              # 0xfffffffd
	.long	24                      # 0x18
	.long	10                      # 0xa
	.long	27                      # 0x1b
	.long	0                       # 0x0
	.long	34                      # 0x22
	.long	4294967282              # 0xfffffff2
	.long	52                      # 0x34
	.long	4294967252              # 0xffffffd4
	.long	39                      # 0x27
	.long	4294967272              # 0xffffffe8
	.long	19                      # 0x13
	.long	17                      # 0x11
	.long	31                      # 0x1f
	.long	25                      # 0x19
	.long	36                      # 0x24
	.long	29                      # 0x1d
	.long	24                      # 0x18
	.long	33                      # 0x21
	.long	34                      # 0x22
	.long	15                      # 0xf
	.long	30                      # 0x1e
	.long	20                      # 0x14
	.long	22                      # 0x16
	.long	73                      # 0x49
	.long	20                      # 0x14
	.long	34                      # 0x22
	.long	19                      # 0x13
	.long	31                      # 0x1f
	.long	27                      # 0x1b
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	19                      # 0x13
	.long	16                      # 0x10
	.long	15                      # 0xf
	.long	36                      # 0x24
	.long	15                      # 0xf
	.long	36                      # 0x24
	.long	21                      # 0x15
	.long	28                      # 0x1c
	.long	25                      # 0x19
	.long	21                      # 0x15
	.long	30                      # 0x1e
	.long	20                      # 0x14
	.long	31                      # 0x1f
	.long	12                      # 0xc
	.long	27                      # 0x1b
	.long	16                      # 0x10
	.long	24                      # 0x18
	.long	42                      # 0x2a
	.long	0                       # 0x0
	.long	93                      # 0x5d
	.long	14                      # 0xe
	.long	56                      # 0x38
	.long	15                      # 0xf
	.long	57                      # 0x39
	.long	26                      # 0x1a
	.long	38                      # 0x26
	.long	4294967272              # 0xffffffe8
	.long	127                     # 0x7f
	.size	INIT_LAST_P, 2880

	.type	INIT_ONE_I,@object      # @INIT_ONE_I
	.p2align	4
INIT_ONE_I:
	.long	4294967293              # 0xfffffffd
	.long	71                      # 0x47
	.long	4294967290              # 0xfffffffa
	.long	42                      # 0x2a
	.long	4294967291              # 0xfffffffb
	.long	50                      # 0x32
	.long	4294967293              # 0xfffffffd
	.long	54                      # 0x36
	.long	4294967294              # 0xfffffffe
	.long	62                      # 0x3e
	.long	4294967291              # 0xfffffffb
	.long	67                      # 0x43
	.long	4294967291              # 0xfffffffb
	.long	27                      # 0x1b
	.long	4294967293              # 0xfffffffd
	.long	39                      # 0x27
	.long	4294967294              # 0xfffffffe
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	46                      # 0x2e
	.long	4294967293              # 0xfffffffd
	.long	75                      # 0x4b
	.long	4294967295              # 0xffffffff
	.long	23                      # 0x17
	.long	1                       # 0x1
	.long	34                      # 0x22
	.long	1                       # 0x1
	.long	43                      # 0x2b
	.long	0                       # 0x0
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967284              # 0xfffffff4
	.long	92                      # 0x5c
	.long	4294967281              # 0xfffffff1
	.long	55                      # 0x37
	.long	4294967286              # 0xfffffff6
	.long	60                      # 0x3c
	.long	4294967290              # 0xfffffffa
	.long	62                      # 0x3e
	.long	4294967292              # 0xfffffffc
	.long	65                      # 0x41
	.long	4294967285              # 0xfffffff5
	.long	97                      # 0x61
	.long	4294967276              # 0xffffffec
	.long	84                      # 0x54
	.long	4294967285              # 0xfffffff5
	.long	79                      # 0x4f
	.long	4294967290              # 0xfffffffa
	.long	73                      # 0x49
	.long	4294967292              # 0xfffffffc
	.long	74                      # 0x4a
	.long	4294967288              # 0xfffffff8
	.long	78                      # 0x4e
	.long	4294967291              # 0xfffffffb
	.long	33                      # 0x21
	.long	4294967292              # 0xfffffffc
	.long	48                      # 0x30
	.long	4294967294              # 0xfffffffe
	.long	53                      # 0x35
	.long	4294967293              # 0xfffffffd
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_ONE_I, 320

	.type	INIT_ONE_P,@object      # @INIT_ONE_P
	.p2align	4
INIT_ONE_P:
	.long	4294967290              # 0xfffffffa
	.long	76                      # 0x4c
	.long	4294967294              # 0xfffffffe
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	52                      # 0x34
	.long	4294967293              # 0xfffffffd
	.long	64                      # 0x40
	.long	4294967287              # 0xfffffff7
	.long	77                      # 0x4d
	.long	3                       # 0x3
	.long	24                      # 0x18
	.long	0                       # 0x0
	.long	42                      # 0x2a
	.long	0                       # 0x0
	.long	48                      # 0x30
	.long	0                       # 0x0
	.long	55                      # 0x37
	.long	4294967290              # 0xfffffffa
	.long	66                      # 0x42
	.long	4294967289              # 0xfffffff9
	.long	35                      # 0x23
	.long	4294967289              # 0xfffffff9
	.long	42                      # 0x2a
	.long	4294967288              # 0xfffffff8
	.long	45                      # 0x2d
	.long	4294967291              # 0xfffffffb
	.long	48                      # 0x30
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	58                      # 0x3a
	.long	4294967293              # 0xfffffffd
	.long	29                      # 0x1d
	.long	4294967295              # 0xffffffff
	.long	36                      # 0x24
	.long	1                       # 0x1
	.long	38                      # 0x26
	.long	2                       # 0x2
	.long	43                      # 0x2b
	.long	0                       # 0x0
	.long	70                      # 0x46
	.long	4294967292              # 0xfffffffc
	.long	29                      # 0x1d
	.long	5                       # 0x5
	.long	31                      # 0x1f
	.long	7                       # 0x7
	.long	42                      # 0x2a
	.long	1                       # 0x1
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	8                       # 0x8
	.long	5                       # 0x5
	.long	10                      # 0xa
	.long	14                      # 0xe
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	13                      # 0xd
	.long	27                      # 0x1b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967273              # 0xffffffe9
	.long	112                     # 0x70
	.long	4294967281              # 0xfffffff1
	.long	71                      # 0x47
	.long	4294967289              # 0xfffffff9
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	53                      # 0x35
	.long	4294967291              # 0xfffffffb
	.long	66                      # 0x42
	.long	4294967275              # 0xffffffeb
	.long	101                     # 0x65
	.long	4294967293              # 0xfffffffd
	.long	39                      # 0x27
	.long	4294967291              # 0xfffffffb
	.long	53                      # 0x35
	.long	4294967289              # 0xfffffff9
	.long	61                      # 0x3d
	.long	4294967285              # 0xfffffff5
	.long	75                      # 0x4b
	.long	4294967291              # 0xfffffffb
	.long	71                      # 0x47
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	4294967295              # 0xffffffff
	.long	36                      # 0x24
	.long	4294967294              # 0xfffffffe
	.long	42                      # 0x2a
	.long	4294967294              # 0xfffffffe
	.long	52                      # 0x34
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967285              # 0xfffffff5
	.long	76                      # 0x4c
	.long	4294967286              # 0xfffffff6
	.long	44                      # 0x2c
	.long	4294967286              # 0xfffffff6
	.long	52                      # 0x34
	.long	4294967286              # 0xfffffff6
	.long	57                      # 0x39
	.long	4294967287              # 0xfffffff7
	.long	58                      # 0x3a
	.long	2                       # 0x2
	.long	66                      # 0x42
	.long	4294967287              # 0xfffffff7
	.long	34                      # 0x22
	.long	1                       # 0x1
	.long	32                      # 0x20
	.long	11                      # 0xb
	.long	31                      # 0x1f
	.long	5                       # 0x5
	.long	52                      # 0x34
	.long	3                       # 0x3
	.long	52                      # 0x34
	.long	7                       # 0x7
	.long	4                       # 0x4
	.long	10                      # 0xa
	.long	8                       # 0x8
	.long	17                      # 0x11
	.long	8                       # 0x8
	.long	16                      # 0x10
	.long	19                      # 0x13
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967272              # 0xffffffe8
	.long	115                     # 0x73
	.long	4294967274              # 0xffffffea
	.long	82                      # 0x52
	.long	4294967287              # 0xfffffff7
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	53                      # 0x35
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	4294967275              # 0xffffffeb
	.long	100                     # 0x64
	.long	4294967282              # 0xfffffff2
	.long	57                      # 0x39
	.long	4294967284              # 0xfffffff4
	.long	67                      # 0x43
	.long	4294967285              # 0xfffffff5
	.long	71                      # 0x47
	.long	4294967286              # 0xfffffff6
	.long	77                      # 0x4d
	.long	4294967287              # 0xfffffff7
	.long	71                      # 0x47
	.long	4294967289              # 0xfffffff9
	.long	37                      # 0x25
	.long	4294967288              # 0xfffffff8
	.long	44                      # 0x2c
	.long	4294967285              # 0xfffffff5
	.long	49                      # 0x31
	.long	4294967286              # 0xfffffff6
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967286              # 0xfffffff6
	.long	82                      # 0x52
	.long	4294967288              # 0xfffffff8
	.long	48                      # 0x30
	.long	4294967288              # 0xfffffff8
	.long	61                      # 0x3d
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967289              # 0xfffffff9
	.long	70                      # 0x46
	.long	4294967292              # 0xfffffffc
	.long	79                      # 0x4f
	.long	4294967274              # 0xffffffea
	.long	69                      # 0x45
	.long	4294967280              # 0xfffffff0
	.long	75                      # 0x4b
	.long	4294967294              # 0xfffffffe
	.long	58                      # 0x3a
	.long	1                       # 0x1
	.long	58                      # 0x3a
	.long	4294967283              # 0xfffffff3
	.long	81                      # 0x51
	.long	4294967290              # 0xfffffffa
	.long	38                      # 0x26
	.long	4294967283              # 0xfffffff3
	.long	62                      # 0x3e
	.long	4294967290              # 0xfffffffa
	.long	58                      # 0x3a
	.long	4294967294              # 0xfffffffe
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_ONE_P, 960

	.type	INIT_ABS_I,@object      # @INIT_ABS_I
	.p2align	4
INIT_ABS_I:
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	1                       # 0x1
	.long	63                      # 0x3f
	.long	4294967294              # 0xfffffffe
	.long	72                      # 0x48
	.long	4294967295              # 0xffffffff
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	91                      # 0x5b
	.long	4294967280              # 0xfffffff0
	.long	64                      # 0x40
	.long	4294967288              # 0xfffffff8
	.long	68                      # 0x44
	.long	4294967286              # 0xfffffff6
	.long	78                      # 0x4e
	.long	4294967290              # 0xfffffffa
	.long	77                      # 0x4d
	.long	4294967286              # 0xfffffff6
	.long	86                      # 0x56
	.long	4294967294              # 0xfffffffe
	.long	55                      # 0x37
	.long	0                       # 0x0
	.long	61                      # 0x3d
	.long	1                       # 0x1
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967287              # 0xfffffff7
	.long	92                      # 0x5c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967284              # 0xfffffff4
	.long	73                      # 0x49
	.long	4294967288              # 0xfffffff8
	.long	76                      # 0x4c
	.long	4294967289              # 0xfffffff9
	.long	80                      # 0x50
	.long	4294967287              # 0xfffffff7
	.long	88                      # 0x58
	.long	4294967279              # 0xffffffef
	.long	110                     # 0x6e
	.long	4294967283              # 0xfffffff3
	.long	86                      # 0x56
	.long	4294967283              # 0xfffffff3
	.long	96                      # 0x60
	.long	4294967285              # 0xfffffff5
	.long	97                      # 0x61
	.long	4294967277              # 0xffffffed
	.long	117                     # 0x75
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967283              # 0xfffffff3
	.long	71                      # 0x47
	.long	4294967286              # 0xfffffff6
	.long	79                      # 0x4f
	.long	4294967284              # 0xfffffff4
	.long	86                      # 0x56
	.long	4294967283              # 0xfffffff3
	.long	90                      # 0x5a
	.long	4294967282              # 0xfffffff2
	.long	97                      # 0x61
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_ABS_I, 320

	.type	INIT_ABS_P,@object      # @INIT_ABS_P
	.p2align	4
INIT_ABS_P:
	.long	4294967294              # 0xfffffffe
	.long	59                      # 0x3b
	.long	4294967292              # 0xfffffffc
	.long	70                      # 0x46
	.long	4294967292              # 0xfffffffc
	.long	75                      # 0x4b
	.long	4294967288              # 0xfffffff8
	.long	82                      # 0x52
	.long	4294967279              # 0xffffffef
	.long	102                     # 0x66
	.long	4294967290              # 0xfffffffa
	.long	59                      # 0x3b
	.long	4294967289              # 0xfffffff9
	.long	71                      # 0x47
	.long	4294967284              # 0xfffffff4
	.long	83                      # 0x53
	.long	4294967285              # 0xfffffff5
	.long	87                      # 0x57
	.long	4294967266              # 0xffffffe2
	.long	119                     # 0x77
	.long	4294967284              # 0xfffffff4
	.long	56                      # 0x38
	.long	4294967290              # 0xfffffffa
	.long	60                      # 0x3c
	.long	4294967291              # 0xfffffffb
	.long	62                      # 0x3e
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967288              # 0xfffffff8
	.long	76                      # 0x4c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967290              # 0xfffffffa
	.long	55                      # 0x37
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	74                      # 0x4a
	.long	4294967286              # 0xfffffff6
	.long	90                      # 0x5a
	.long	4294967294              # 0xfffffffe
	.long	58                      # 0x3a
	.long	4294967293              # 0xfffffffd
	.long	72                      # 0x48
	.long	4294967293              # 0xfffffffd
	.long	81                      # 0x51
	.long	4294967285              # 0xfffffff5
	.long	97                      # 0x61
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	2                       # 0x2
	.long	40                      # 0x28
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	4294967293              # 0xfffffffd
	.long	70                      # 0x46
	.long	4294967290              # 0xfffffffa
	.long	79                      # 0x4f
	.long	4294967288              # 0xfffffff8
	.long	85                      # 0x55
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967285              # 0xfffffff5
	.long	77                      # 0x4d
	.long	4294967287              # 0xfffffff7
	.long	80                      # 0x50
	.long	4294967287              # 0xfffffff7
	.long	84                      # 0x54
	.long	4294967286              # 0xfffffff6
	.long	87                      # 0x57
	.long	4294967262              # 0xffffffde
	.long	127                     # 0x7f
	.long	4294967281              # 0xfffffff1
	.long	77                      # 0x4d
	.long	4294967279              # 0xffffffef
	.long	91                      # 0x5b
	.long	4294967271              # 0xffffffe7
	.long	107                     # 0x6b
	.long	4294967271              # 0xffffffe7
	.long	111                     # 0x6f
	.long	4294967268              # 0xffffffe4
	.long	122                     # 0x7a
	.long	4294967287              # 0xfffffff7
	.long	57                      # 0x39
	.long	4294967290              # 0xfffffffa
	.long	63                      # 0x3f
	.long	4294967292              # 0xfffffffc
	.long	65                      # 0x41
	.long	4294967292              # 0xfffffffc
	.long	67                      # 0x43
	.long	4294967289              # 0xfffffff9
	.long	82                      # 0x52
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967280              # 0xfffffff0
	.long	72                      # 0x48
	.long	4294967289              # 0xfffffff9
	.long	69                      # 0x45
	.long	4294967292              # 0xfffffffc
	.long	69                      # 0x45
	.long	4294967291              # 0xfffffffb
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	86                      # 0x56
	.long	4294967294              # 0xfffffffe
	.long	55                      # 0x37
	.long	4294967294              # 0xfffffffe
	.long	67                      # 0x43
	.long	0                       # 0x0
	.long	73                      # 0x49
	.long	4294967288              # 0xfffffff8
	.long	89                      # 0x59
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	3                       # 0x3
	.long	37                      # 0x25
	.long	4294967295              # 0xffffffff
	.long	61                      # 0x3d
	.long	4294967291              # 0xfffffffb
	.long	73                      # 0x49
	.long	4294967295              # 0xffffffff
	.long	70                      # 0x46
	.long	4294967292              # 0xfffffffc
	.long	78                      # 0x4e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967282              # 0xfffffff2
	.long	85                      # 0x55
	.long	4294967283              # 0xfffffff3
	.long	89                      # 0x59
	.long	4294967283              # 0xfffffff3
	.long	94                      # 0x5e
	.long	4294967285              # 0xfffffff5
	.long	92                      # 0x5c
	.long	4294967267              # 0xffffffe3
	.long	127                     # 0x7f
	.long	4294967275              # 0xffffffeb
	.long	85                      # 0x55
	.long	4294967280              # 0xfffffff0
	.long	88                      # 0x58
	.long	4294967273              # 0xffffffe9
	.long	104                     # 0x68
	.long	4294967281              # 0xfffffff1
	.long	98                      # 0x62
	.long	4294967259              # 0xffffffdb
	.long	127                     # 0x7f
	.long	4294967284              # 0xfffffff4
	.long	59                      # 0x3b
	.long	4294967288              # 0xfffffff8
	.long	63                      # 0x3f
	.long	4294967287              # 0xfffffff7
	.long	67                      # 0x43
	.long	4294967290              # 0xfffffffa
	.long	68                      # 0x44
	.long	4294967286              # 0xfffffff6
	.long	79                      # 0x4f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967282              # 0xfffffff2
	.long	75                      # 0x4b
	.long	4294967286              # 0xfffffff6
	.long	79                      # 0x4f
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4294967284              # 0xfffffff4
	.long	92                      # 0x5c
	.long	4294967278              # 0xffffffee
	.long	108                     # 0x6c
	.long	4294967283              # 0xfffffff3
	.long	78                      # 0x4e
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4294967292              # 0xfffffffc
	.long	81                      # 0x51
	.long	4294967283              # 0xfffffff3
	.long	99                      # 0x63
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967280              # 0xfffffff0
	.long	73                      # 0x49
	.long	4294967286              # 0xfffffff6
	.long	76                      # 0x4c
	.long	4294967283              # 0xfffffff3
	.long	86                      # 0x56
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4294967286              # 0xfffffff6
	.long	87                      # 0x57
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_ABS_P, 960

	.type	INIT_FLD_MAP_I,@object  # @INIT_FLD_MAP_I
	.p2align	4
INIT_FLD_MAP_I:
	.long	4294967290              # 0xfffffffa
	.long	93                      # 0x5d
	.long	4294967290              # 0xfffffffa
	.long	84                      # 0x54
	.long	4294967288              # 0xfffffff8
	.long	79                      # 0x4f
	.long	0                       # 0x0
	.long	66                      # 0x42
	.long	4294967295              # 0xffffffff
	.long	71                      # 0x47
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	4294967294              # 0xfffffffe
	.long	60                      # 0x3c
	.long	4294967294              # 0xfffffffe
	.long	59                      # 0x3b
	.long	4294967291              # 0xfffffffb
	.long	75                      # 0x4b
	.long	4294967293              # 0xfffffffd
	.long	62                      # 0x3e
	.long	4294967292              # 0xfffffffc
	.long	58                      # 0x3a
	.long	4294967287              # 0xfffffff7
	.long	66                      # 0x42
	.long	4294967295              # 0xffffffff
	.long	79                      # 0x4f
	.long	0                       # 0x0
	.long	71                      # 0x47
	.long	3                       # 0x3
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	10                      # 0xa
	.long	44                      # 0x2c
	.long	4294967289              # 0xfffffff9
	.long	62                      # 0x3e
	.long	15                      # 0xf
	.long	36                      # 0x24
	.long	14                      # 0xe
	.long	40                      # 0x28
	.long	16                      # 0x10
	.long	27                      # 0x1b
	.long	12                      # 0xc
	.long	29                      # 0x1d
	.long	1                       # 0x1
	.long	44                      # 0x2c
	.long	20                      # 0x14
	.long	36                      # 0x24
	.long	18                      # 0x12
	.long	32                      # 0x20
	.long	5                       # 0x5
	.long	42                      # 0x2a
	.long	1                       # 0x1
	.long	48                      # 0x30
	.long	10                      # 0xa
	.long	62                      # 0x3e
	.long	17                      # 0x11
	.long	46                      # 0x2e
	.long	9                       # 0x9
	.long	64                      # 0x40
	.long	4294967282              # 0xfffffff2
	.long	106                     # 0x6a
	.long	4294967283              # 0xfffffff3
	.long	97                      # 0x61
	.long	4294967281              # 0xfffffff1
	.long	90                      # 0x5a
	.long	4294967284              # 0xfffffff4
	.long	90                      # 0x5a
	.long	4294967278              # 0xffffffee
	.long	88                      # 0x58
	.long	4294967286              # 0xfffffff6
	.long	73                      # 0x49
	.long	4294967287              # 0xfffffff7
	.long	79                      # 0x4f
	.long	4294967282              # 0xfffffff2
	.long	86                      # 0x56
	.long	4294967286              # 0xfffffff6
	.long	73                      # 0x49
	.long	4294967286              # 0xfffffff6
	.long	70                      # 0x46
	.long	4294967286              # 0xfffffff6
	.long	69                      # 0x45
	.long	4294967291              # 0xfffffffb
	.long	66                      # 0x42
	.long	4294967287              # 0xfffffff7
	.long	64                      # 0x40
	.long	4294967291              # 0xfffffffb
	.long	58                      # 0x3a
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967284              # 0xfffffff4
	.long	104                     # 0x68
	.long	4294967285              # 0xfffffff5
	.long	97                      # 0x61
	.long	4294967280              # 0xfffffff0
	.long	96                      # 0x60
	.long	4294967289              # 0xfffffff9
	.long	88                      # 0x58
	.long	4294967288              # 0xfffffff8
	.long	85                      # 0x55
	.long	4294967289              # 0xfffffff9
	.long	85                      # 0x55
	.long	4294967287              # 0xfffffff7
	.long	85                      # 0x55
	.long	4294967283              # 0xfffffff3
	.long	88                      # 0x58
	.long	4                       # 0x4
	.long	66                      # 0x42
	.long	4294967293              # 0xfffffffd
	.long	77                      # 0x4d
	.long	4294967293              # 0xfffffffd
	.long	76                      # 0x4c
	.long	4294967290              # 0xfffffffa
	.long	76                      # 0x4c
	.long	10                      # 0xa
	.long	58                      # 0x3a
	.long	4294967295              # 0xffffffff
	.long	76                      # 0x4c
	.long	4294967295              # 0xffffffff
	.long	83                      # 0x53
	.long	4294967289              # 0xfffffff9
	.long	99                      # 0x63
	.long	4294967282              # 0xfffffff2
	.long	95                      # 0x5f
	.long	2                       # 0x2
	.long	95                      # 0x5f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	76                      # 0x4c
	.long	4294967291              # 0xfffffffb
	.long	74                      # 0x4a
	.long	0                       # 0x0
	.long	70                      # 0x46
	.long	4294967285              # 0xfffffff5
	.long	75                      # 0x4b
	.long	1                       # 0x1
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	65                      # 0x41
	.long	4294967282              # 0xfffffff2
	.long	73                      # 0x49
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.long	4                       # 0x4
	.long	62                      # 0x3e
	.long	4294967295              # 0xffffffff
	.long	68                      # 0x44
	.long	4294967283              # 0xfffffff3
	.long	75                      # 0x4b
	.long	11                      # 0xb
	.long	55                      # 0x37
	.long	5                       # 0x5
	.long	64                      # 0x40
	.long	12                      # 0xc
	.long	70                      # 0x46
	.size	INIT_FLD_MAP_I, 960

	.type	INIT_FLD_MAP_P,@object  # @INIT_FLD_MAP_P
	.p2align	4
INIT_FLD_MAP_P:
	.long	4294967283              # 0xfffffff3
	.long	106                     # 0x6a
	.long	4294967280              # 0xfffffff0
	.long	106                     # 0x6a
	.long	4294967286              # 0xfffffff6
	.long	87                      # 0x57
	.long	4294967275              # 0xffffffeb
	.long	114                     # 0x72
	.long	4294967278              # 0xffffffee
	.long	110                     # 0x6e
	.long	4294967282              # 0xfffffff2
	.long	98                      # 0x62
	.long	4294967274              # 0xffffffea
	.long	110                     # 0x6e
	.long	4294967275              # 0xffffffeb
	.long	106                     # 0x6a
	.long	4294967278              # 0xffffffee
	.long	103                     # 0x67
	.long	4294967275              # 0xffffffeb
	.long	107                     # 0x6b
	.long	4294967273              # 0xffffffe9
	.long	108                     # 0x6c
	.long	4294967270              # 0xffffffe6
	.long	112                     # 0x70
	.long	4294967286              # 0xfffffff6
	.long	96                      # 0x60
	.long	4294967284              # 0xfffffff4
	.long	95                      # 0x5f
	.long	4294967291              # 0xfffffffb
	.long	91                      # 0x5b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967287              # 0xfffffff7
	.long	93                      # 0x5d
	.long	4294967274              # 0xffffffea
	.long	94                      # 0x5e
	.long	4294967291              # 0xfffffffb
	.long	86                      # 0x56
	.long	9                       # 0x9
	.long	67                      # 0x43
	.long	4294967292              # 0xfffffffc
	.long	80                      # 0x50
	.long	4294967286              # 0xfffffff6
	.long	85                      # 0x55
	.long	4294967295              # 0xffffffff
	.long	70                      # 0x46
	.long	7                       # 0x7
	.long	60                      # 0x3c
	.long	9                       # 0x9
	.long	58                      # 0x3a
	.long	5                       # 0x5
	.long	61                      # 0x3d
	.long	12                      # 0xc
	.long	50                      # 0x32
	.long	15                      # 0xf
	.long	50                      # 0x32
	.long	18                      # 0x12
	.long	49                      # 0x31
	.long	17                      # 0x11
	.long	54                      # 0x36
	.long	4294967291              # 0xfffffffb
	.long	85                      # 0x55
	.long	4294967290              # 0xfffffffa
	.long	81                      # 0x51
	.long	4294967286              # 0xfffffff6
	.long	77                      # 0x4d
	.long	4294967289              # 0xfffffff9
	.long	81                      # 0x51
	.long	4294967279              # 0xffffffef
	.long	80                      # 0x50
	.long	4294967278              # 0xffffffee
	.long	73                      # 0x49
	.long	4294967292              # 0xfffffffc
	.long	74                      # 0x4a
	.long	4294967286              # 0xfffffff6
	.long	83                      # 0x53
	.long	4294967287              # 0xfffffff7
	.long	71                      # 0x47
	.long	4294967287              # 0xfffffff7
	.long	67                      # 0x43
	.long	4294967295              # 0xffffffff
	.long	61                      # 0x3d
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967282              # 0xfffffff2
	.long	66                      # 0x42
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	10                      # 0xa
	.long	41                      # 0x29
	.long	7                       # 0x7
	.long	46                      # 0x2e
	.long	4294967295              # 0xffffffff
	.long	51                      # 0x33
	.long	7                       # 0x7
	.long	49                      # 0x31
	.long	8                       # 0x8
	.long	52                      # 0x34
	.long	9                       # 0x9
	.long	41                      # 0x29
	.long	6                       # 0x6
	.long	47                      # 0x2f
	.long	2                       # 0x2
	.long	55                      # 0x37
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	10                      # 0xa
	.long	44                      # 0x2c
	.long	6                       # 0x6
	.long	50                      # 0x32
	.long	5                       # 0x5
	.long	53                      # 0x35
	.long	13                      # 0xd
	.long	49                      # 0x31
	.long	4                       # 0x4
	.long	63                      # 0x3f
	.long	6                       # 0x6
	.long	64                      # 0x40
	.long	4294967294              # 0xfffffffe
	.long	69                      # 0x45
	.long	4294967294              # 0xfffffffe
	.long	59                      # 0x3b
	.long	6                       # 0x6
	.long	70                      # 0x46
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	10                      # 0xa
	.long	44                      # 0x2c
	.long	9                       # 0x9
	.long	31                      # 0x1f
	.long	12                      # 0xc
	.long	43                      # 0x2b
	.long	3                       # 0x3
	.long	53                      # 0x35
	.long	14                      # 0xe
	.long	34                      # 0x22
	.long	10                      # 0xa
	.long	38                      # 0x26
	.long	4294967293              # 0xfffffffd
	.long	52                      # 0x34
	.long	13                      # 0xd
	.long	40                      # 0x28
	.long	17                      # 0x11
	.long	32                      # 0x20
	.long	7                       # 0x7
	.long	44                      # 0x2c
	.long	7                       # 0x7
	.long	38                      # 0x26
	.long	13                      # 0xd
	.long	50                      # 0x32
	.long	10                      # 0xa
	.long	57                      # 0x39
	.long	26                      # 0x1a
	.long	43                      # 0x2b
	.long	4294967275              # 0xffffffeb
	.long	126                     # 0x7e
	.long	4294967273              # 0xffffffe9
	.long	124                     # 0x7c
	.long	4294967276              # 0xffffffec
	.long	110                     # 0x6e
	.long	4294967270              # 0xffffffe6
	.long	126                     # 0x7e
	.long	4294967271              # 0xffffffe7
	.long	124                     # 0x7c
	.long	4294967279              # 0xffffffef
	.long	105                     # 0x69
	.long	4294967269              # 0xffffffe5
	.long	121                     # 0x79
	.long	4294967269              # 0xffffffe5
	.long	117                     # 0x75
	.long	4294967279              # 0xffffffef
	.long	102                     # 0x66
	.long	4294967270              # 0xffffffe6
	.long	117                     # 0x75
	.long	4294967269              # 0xffffffe5
	.long	116                     # 0x74
	.long	4294967263              # 0xffffffdf
	.long	122                     # 0x7a
	.long	4294967286              # 0xfffffff6
	.long	95                      # 0x5f
	.long	4294967282              # 0xfffffff2
	.long	100                     # 0x64
	.long	4294967288              # 0xfffffff8
	.long	95                      # 0x5f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967279              # 0xffffffef
	.long	111                     # 0x6f
	.long	4294967268              # 0xffffffe4
	.long	114                     # 0x72
	.long	4294967290              # 0xfffffffa
	.long	89                      # 0x59
	.long	4294967294              # 0xfffffffe
	.long	80                      # 0x50
	.long	4294967292              # 0xfffffffc
	.long	82                      # 0x52
	.long	4294967287              # 0xfffffff7
	.long	85                      # 0x55
	.long	4294967288              # 0xfffffff8
	.long	81                      # 0x51
	.long	4294967295              # 0xffffffff
	.long	72                      # 0x48
	.long	5                       # 0x5
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	9                       # 0x9
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	69                      # 0x45
	.long	1                       # 0x1
	.long	69                      # 0x45
	.long	7                       # 0x7
	.long	69                      # 0x45
	.long	4294967293              # 0xfffffffd
	.long	81                      # 0x51
	.long	4294967293              # 0xfffffffd
	.long	76                      # 0x4c
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.long	4294967290              # 0xfffffffa
	.long	78                      # 0x4e
	.long	4294967284              # 0xfffffff4
	.long	72                      # 0x48
	.long	4294967282              # 0xfffffff2
	.long	68                      # 0x44
	.long	4294967293              # 0xfffffffd
	.long	70                      # 0x46
	.long	4294967290              # 0xfffffffa
	.long	76                      # 0x4c
	.long	4294967291              # 0xfffffffb
	.long	66                      # 0x42
	.long	4294967291              # 0xfffffffb
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	57                      # 0x39
	.long	4294967292              # 0xfffffffc
	.long	61                      # 0x3d
	.long	4294967287              # 0xfffffff7
	.long	60                      # 0x3c
	.long	1                       # 0x1
	.long	54                      # 0x36
	.long	2                       # 0x2
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967289              # 0xfffffff9
	.long	69                      # 0x45
	.long	4294967290              # 0xfffffffa
	.long	67                      # 0x43
	.long	4294967280              # 0xfffffff0
	.long	77                      # 0x4d
	.long	4294967294              # 0xfffffffe
	.long	64                      # 0x40
	.long	2                       # 0x2
	.long	61                      # 0x3d
	.long	4294967290              # 0xfffffffa
	.long	67                      # 0x43
	.long	4294967293              # 0xfffffffd
	.long	64                      # 0x40
	.long	2                       # 0x2
	.long	57                      # 0x39
	.long	4294967293              # 0xfffffffd
	.long	65                      # 0x41
	.long	4294967293              # 0xfffffffd
	.long	66                      # 0x42
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	9                       # 0x9
	.long	51                      # 0x33
	.long	4294967295              # 0xffffffff
	.long	66                      # 0x42
	.long	4294967294              # 0xfffffffe
	.long	71                      # 0x47
	.long	4294967294              # 0xfffffffe
	.long	75                      # 0x4b
	.long	4294967295              # 0xffffffff
	.long	70                      # 0x46
	.long	4294967287              # 0xfffffff7
	.long	72                      # 0x48
	.long	14                      # 0xe
	.long	60                      # 0x3c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	16                      # 0x10
	.long	37                      # 0x25
	.long	0                       # 0x0
	.long	47                      # 0x2f
	.long	18                      # 0x12
	.long	35                      # 0x23
	.long	11                      # 0xb
	.long	37                      # 0x25
	.long	12                      # 0xc
	.long	41                      # 0x29
	.long	10                      # 0xa
	.long	41                      # 0x29
	.long	2                       # 0x2
	.long	48                      # 0x30
	.long	12                      # 0xc
	.long	41                      # 0x29
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	3                       # 0x3
	.long	50                      # 0x32
	.long	19                      # 0x13
	.long	40                      # 0x28
	.long	3                       # 0x3
	.long	66                      # 0x42
	.long	18                      # 0x12
	.long	50                      # 0x32
	.long	4294967274              # 0xffffffea
	.long	127                     # 0x7f
	.long	4294967271              # 0xffffffe7
	.long	127                     # 0x7f
	.long	4294967271              # 0xffffffe7
	.long	120                     # 0x78
	.long	4294967269              # 0xffffffe5
	.long	127                     # 0x7f
	.long	4294967277              # 0xffffffed
	.long	114                     # 0x72
	.long	4294967273              # 0xffffffe9
	.long	117                     # 0x75
	.long	4294967271              # 0xffffffe7
	.long	118                     # 0x76
	.long	4294967270              # 0xffffffe6
	.long	117                     # 0x75
	.long	4294967272              # 0xffffffe8
	.long	113                     # 0x71
	.long	4294967268              # 0xffffffe4
	.long	118                     # 0x76
	.long	4294967265              # 0xffffffe1
	.long	120                     # 0x78
	.long	4294967259              # 0xffffffdb
	.long	124                     # 0x7c
	.long	4294967286              # 0xfffffff6
	.long	94                      # 0x5e
	.long	4294967281              # 0xfffffff1
	.long	102                     # 0x66
	.long	4294967286              # 0xfffffff6
	.long	99                      # 0x63
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967283              # 0xfffffff3
	.long	106                     # 0x6a
	.long	4294967246              # 0xffffffce
	.long	127                     # 0x7f
	.long	4294967291              # 0xfffffffb
	.long	92                      # 0x5c
	.long	17                      # 0x11
	.long	57                      # 0x39
	.long	4294967291              # 0xfffffffb
	.long	86                      # 0x56
	.long	4294967283              # 0xfffffff3
	.long	94                      # 0x5e
	.long	4294967284              # 0xfffffff4
	.long	91                      # 0x5b
	.long	4294967294              # 0xfffffffe
	.long	77                      # 0x4d
	.long	0                       # 0x0
	.long	71                      # 0x47
	.long	4294967295              # 0xffffffff
	.long	73                      # 0x49
	.long	4                       # 0x4
	.long	64                      # 0x40
	.long	4294967289              # 0xfffffff9
	.long	81                      # 0x51
	.long	5                       # 0x5
	.long	64                      # 0x40
	.long	15                      # 0xf
	.long	57                      # 0x39
	.long	4294967293              # 0xfffffffd
	.long	78                      # 0x4e
	.long	4294967288              # 0xfffffff8
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	72                      # 0x48
	.long	4294967286              # 0xfffffff6
	.long	72                      # 0x48
	.long	4294967278              # 0xffffffee
	.long	75                      # 0x4b
	.long	4294967284              # 0xfffffff4
	.long	71                      # 0x47
	.long	4294967285              # 0xfffffff5
	.long	63                      # 0x3f
	.long	4294967291              # 0xfffffffb
	.long	70                      # 0x46
	.long	4294967279              # 0xffffffef
	.long	75                      # 0x4b
	.long	4294967282              # 0xfffffff2
	.long	72                      # 0x48
	.long	4294967280              # 0xfffffff0
	.long	67                      # 0x43
	.long	4294967288              # 0xfffffff8
	.long	53                      # 0x35
	.long	4294967282              # 0xfffffff2
	.long	59                      # 0x3b
	.long	4294967287              # 0xfffffff7
	.long	52                      # 0x34
	.long	4294967285              # 0xfffffff5
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967286              # 0xfffffff6
	.long	67                      # 0x43
	.long	1                       # 0x1
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	77                      # 0x4d
	.long	2                       # 0x2
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967291              # 0xfffffffb
	.long	78                      # 0x4e
	.long	7                       # 0x7
	.long	55                      # 0x37
	.long	5                       # 0x5
	.long	59                      # 0x3b
	.long	2                       # 0x2
	.long	65                      # 0x41
	.long	14                      # 0xe
	.long	54                      # 0x36
	.long	15                      # 0xf
	.long	44                      # 0x2c
	.long	5                       # 0x5
	.long	60                      # 0x3c
	.long	2                       # 0x2
	.long	70                      # 0x46
	.long	4294967294              # 0xfffffffe
	.long	76                      # 0x4c
	.long	4294967278              # 0xffffffee
	.long	86                      # 0x56
	.long	12                      # 0xc
	.long	70                      # 0x46
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	5                       # 0x5
	.long	64                      # 0x40
	.long	4294967284              # 0xfffffff4
	.long	70                      # 0x46
	.long	11                      # 0xb
	.long	55                      # 0x37
	.long	5                       # 0x5
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	69                      # 0x45
	.long	2                       # 0x2
	.long	65                      # 0x41
	.long	4294967290              # 0xfffffffa
	.long	74                      # 0x4a
	.long	5                       # 0x5
	.long	54                      # 0x36
	.long	7                       # 0x7
	.long	54                      # 0x36
	.long	4294967290              # 0xfffffffa
	.long	76                      # 0x4c
	.long	4294967285              # 0xfffffff5
	.long	82                      # 0x52
	.long	4294967294              # 0xfffffffe
	.long	77                      # 0x4d
	.long	4294967294              # 0xfffffffe
	.long	77                      # 0x4d
	.long	25                      # 0x19
	.long	42                      # 0x2a
	.size	INIT_FLD_MAP_P, 2880

	.type	INIT_FLD_LAST_I,@object # @INIT_FLD_LAST_I
	.p2align	4
INIT_FLD_LAST_I:
	.long	15                      # 0xf
	.long	6                       # 0x6
	.long	6                       # 0x6
	.long	19                      # 0x13
	.long	7                       # 0x7
	.long	16                      # 0x10
	.long	12                      # 0xc
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	11                      # 0xb
	.long	13                      # 0xd
	.long	15                      # 0xf
	.long	15                      # 0xf
	.long	16                      # 0x10
	.long	12                      # 0xc
	.long	23                      # 0x17
	.long	13                      # 0xd
	.long	23                      # 0x17
	.long	15                      # 0xf
	.long	20                      # 0x14
	.long	14                      # 0xe
	.long	26                      # 0x1a
	.long	14                      # 0xe
	.long	44                      # 0x2c
	.long	17                      # 0x11
	.long	40                      # 0x28
	.long	17                      # 0x11
	.long	47                      # 0x2f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	24                      # 0x18
	.long	17                      # 0x11
	.long	21                      # 0x15
	.long	21                      # 0x15
	.long	25                      # 0x19
	.long	22                      # 0x16
	.long	31                      # 0x1f
	.long	27                      # 0x1b
	.long	22                      # 0x16
	.long	29                      # 0x1d
	.long	19                      # 0x13
	.long	35                      # 0x23
	.long	14                      # 0xe
	.long	50                      # 0x32
	.long	10                      # 0xa
	.long	57                      # 0x39
	.long	7                       # 0x7
	.long	63                      # 0x3f
	.long	4294967294              # 0xfffffffe
	.long	77                      # 0x4d
	.long	4294967292              # 0xfffffffc
	.long	82                      # 0x52
	.long	4294967293              # 0xfffffffd
	.long	94                      # 0x5e
	.long	9                       # 0x9
	.long	69                      # 0x45
	.long	4294967284              # 0xfffffff4
	.long	109                     # 0x6d
	.long	21                      # 0x15
	.long	4294967286              # 0xfffffff6
	.long	24                      # 0x18
	.long	4294967285              # 0xfffffff5
	.long	28                      # 0x1c
	.long	4294967288              # 0xfffffff8
	.long	28                      # 0x1c
	.long	4294967295              # 0xffffffff
	.long	29                      # 0x1d
	.long	3                       # 0x3
	.long	29                      # 0x1d
	.long	9                       # 0x9
	.long	35                      # 0x23
	.long	20                      # 0x14
	.long	29                      # 0x1d
	.long	36                      # 0x24
	.long	14                      # 0xe
	.long	67                      # 0x43
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	36                      # 0x24
	.long	4294967261              # 0xffffffdd
	.long	36                      # 0x24
	.long	4294967262              # 0xffffffde
	.long	32                      # 0x20
	.long	4294967270              # 0xffffffe6
	.long	37                      # 0x25
	.long	4294967266              # 0xffffffe2
	.long	44                      # 0x2c
	.long	4294967264              # 0xffffffe0
	.long	34                      # 0x22
	.long	4294967278              # 0xffffffee
	.long	34                      # 0x22
	.long	4294967281              # 0xfffffff1
	.long	40                      # 0x28
	.long	4294967281              # 0xfffffff1
	.long	33                      # 0x21
	.long	4294967289              # 0xfffffff9
	.long	35                      # 0x23
	.long	4294967291              # 0xfffffffb
	.long	33                      # 0x21
	.long	0                       # 0x0
	.long	38                      # 0x26
	.long	2                       # 0x2
	.long	33                      # 0x21
	.long	13                      # 0xd
	.long	23                      # 0x17
	.long	35                      # 0x23
	.long	13                      # 0xd
	.long	58                      # 0x3a
	.long	29                      # 0x1d
	.long	4294967293              # 0xfffffffd
	.long	26                      # 0x1a
	.long	0                       # 0x0
	.long	22                      # 0x16
	.long	30                      # 0x1e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	31                      # 0x1f
	.long	4294967289              # 0xfffffff9
	.long	35                      # 0x23
	.long	4294967281              # 0xfffffff1
	.long	34                      # 0x22
	.long	4294967293              # 0xfffffffd
	.long	34                      # 0x22
	.long	3                       # 0x3
	.long	36                      # 0x24
	.long	4294967295              # 0xffffffff
	.long	34                      # 0x22
	.long	5                       # 0x5
	.long	32                      # 0x20
	.long	11                      # 0xb
	.long	35                      # 0x23
	.long	5                       # 0x5
	.long	34                      # 0x22
	.long	12                      # 0xc
	.long	39                      # 0x27
	.long	11                      # 0xb
	.long	30                      # 0x1e
	.long	29                      # 0x1d
	.long	34                      # 0x22
	.long	26                      # 0x1a
	.long	29                      # 0x1d
	.long	39                      # 0x27
	.long	19                      # 0x13
	.long	66                      # 0x42
	.size	INIT_FLD_LAST_I, 960

	.type	INIT_FLD_LAST_P,@object # @INIT_FLD_LAST_P
	.p2align	4
INIT_FLD_LAST_P:
	.long	14                      # 0xe
	.long	11                      # 0xb
	.long	11                      # 0xb
	.long	14                      # 0xe
	.long	9                       # 0x9
	.long	11                      # 0xb
	.long	18                      # 0x12
	.long	11                      # 0xb
	.long	21                      # 0x15
	.long	9                       # 0x9
	.long	23                      # 0x17
	.long	4294967294              # 0xfffffffe
	.long	32                      # 0x20
	.long	4294967281              # 0xfffffff1
	.long	32                      # 0x20
	.long	4294967281              # 0xfffffff1
	.long	34                      # 0x22
	.long	4294967275              # 0xffffffeb
	.long	39                      # 0x27
	.long	4294967273              # 0xffffffe9
	.long	42                      # 0x2a
	.long	4294967263              # 0xffffffdf
	.long	41                      # 0x29
	.long	4294967265              # 0xffffffe1
	.long	46                      # 0x2e
	.long	4294967268              # 0xffffffe4
	.long	38                      # 0x26
	.long	4294967284              # 0xfffffff4
	.long	21                      # 0x15
	.long	29                      # 0x1d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	45                      # 0x2d
	.long	4294967272              # 0xffffffe8
	.long	53                      # 0x35
	.long	4294967251              # 0xffffffd3
	.long	48                      # 0x30
	.long	4294967270              # 0xffffffe6
	.long	65                      # 0x41
	.long	4294967253              # 0xffffffd5
	.long	43                      # 0x2b
	.long	4294967277              # 0xffffffed
	.long	39                      # 0x27
	.long	4294967286              # 0xfffffff6
	.long	30                      # 0x1e
	.long	9                       # 0x9
	.long	18                      # 0x12
	.long	26                      # 0x1a
	.long	20                      # 0x14
	.long	27                      # 0x1b
	.long	0                       # 0x0
	.long	57                      # 0x39
	.long	4294967282              # 0xfffffff2
	.long	82                      # 0x52
	.long	4294967291              # 0xfffffffb
	.long	75                      # 0x4b
	.long	4294967277              # 0xffffffed
	.long	97                      # 0x61
	.long	4294967261              # 0xffffffdd
	.long	125                     # 0x7d
	.long	21                      # 0x15
	.long	4294967283              # 0xfffffff3
	.long	33                      # 0x21
	.long	4294967282              # 0xfffffff2
	.long	39                      # 0x27
	.long	4294967289              # 0xfffffff9
	.long	46                      # 0x2e
	.long	4294967294              # 0xfffffffe
	.long	51                      # 0x33
	.long	2                       # 0x2
	.long	60                      # 0x3c
	.long	6                       # 0x6
	.long	61                      # 0x3d
	.long	17                      # 0x11
	.long	55                      # 0x37
	.long	34                      # 0x22
	.long	42                      # 0x2a
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	27                      # 0x1b
	.long	0                       # 0x0
	.long	28                      # 0x1c
	.long	0                       # 0x0
	.long	31                      # 0x1f
	.long	4294967292              # 0xfffffffc
	.long	27                      # 0x1b
	.long	6                       # 0x6
	.long	34                      # 0x22
	.long	8                       # 0x8
	.long	30                      # 0x1e
	.long	10                      # 0xa
	.long	24                      # 0x18
	.long	22                      # 0x16
	.long	33                      # 0x21
	.long	19                      # 0x13
	.long	22                      # 0x16
	.long	32                      # 0x20
	.long	26                      # 0x1a
	.long	31                      # 0x1f
	.long	21                      # 0x15
	.long	41                      # 0x29
	.long	26                      # 0x1a
	.long	44                      # 0x2c
	.long	23                      # 0x17
	.long	47                      # 0x2f
	.long	16                      # 0x10
	.long	65                      # 0x41
	.long	14                      # 0xe
	.long	71                      # 0x47
	.long	8                       # 0x8
	.long	60                      # 0x3c
	.long	6                       # 0x6
	.long	63                      # 0x3f
	.long	17                      # 0x11
	.long	65                      # 0x41
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	21                      # 0x15
	.long	24                      # 0x18
	.long	23                      # 0x17
	.long	20                      # 0x14
	.long	26                      # 0x1a
	.long	23                      # 0x17
	.long	27                      # 0x1b
	.long	32                      # 0x20
	.long	28                      # 0x1c
	.long	23                      # 0x17
	.long	28                      # 0x1c
	.long	24                      # 0x18
	.long	23                      # 0x17
	.long	40                      # 0x28
	.long	24                      # 0x18
	.long	32                      # 0x20
	.long	28                      # 0x1c
	.long	29                      # 0x1d
	.long	23                      # 0x17
	.long	42                      # 0x2a
	.long	19                      # 0x13
	.long	57                      # 0x39
	.long	22                      # 0x16
	.long	53                      # 0x35
	.long	22                      # 0x16
	.long	61                      # 0x3d
	.long	11                      # 0xb
	.long	86                      # 0x56
	.long	19                      # 0x13
	.long	4294967290              # 0xfffffffa
	.long	18                      # 0x12
	.long	4294967290              # 0xfffffffa
	.long	14                      # 0xe
	.long	0                       # 0x0
	.long	26                      # 0x1a
	.long	4294967284              # 0xfffffff4
	.long	31                      # 0x1f
	.long	4294967280              # 0xfffffff0
	.long	33                      # 0x21
	.long	4294967271              # 0xffffffe7
	.long	33                      # 0x21
	.long	4294967274              # 0xffffffea
	.long	37                      # 0x25
	.long	4294967268              # 0xffffffe4
	.long	39                      # 0x27
	.long	4294967266              # 0xffffffe2
	.long	42                      # 0x2a
	.long	4294967266              # 0xffffffe2
	.long	47                      # 0x2f
	.long	4294967254              # 0xffffffd6
	.long	45                      # 0x2d
	.long	4294967260              # 0xffffffdc
	.long	49                      # 0x31
	.long	4294967262              # 0xffffffde
	.long	41                      # 0x29
	.long	4294967279              # 0xffffffef
	.long	32                      # 0x20
	.long	9                       # 0x9
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	69                      # 0x45
	.long	4294967225              # 0xffffffb9
	.long	63                      # 0x3f
	.long	4294967233              # 0xffffffc1
	.long	66                      # 0x42
	.long	4294967232              # 0xffffffc0
	.long	77                      # 0x4d
	.long	4294967222              # 0xffffffb6
	.long	54                      # 0x36
	.long	4294967257              # 0xffffffd9
	.long	52                      # 0x34
	.long	4294967261              # 0xffffffdd
	.long	41                      # 0x29
	.long	4294967286              # 0xfffffff6
	.long	36                      # 0x24
	.long	0                       # 0x0
	.long	40                      # 0x28
	.long	4294967295              # 0xffffffff
	.long	30                      # 0x1e
	.long	14                      # 0xe
	.long	28                      # 0x1c
	.long	26                      # 0x1a
	.long	23                      # 0x17
	.long	37                      # 0x25
	.long	12                      # 0xc
	.long	55                      # 0x37
	.long	11                      # 0xb
	.long	65                      # 0x41
	.long	17                      # 0x11
	.long	4294967286              # 0xfffffff6
	.long	32                      # 0x20
	.long	4294967283              # 0xfffffff3
	.long	42                      # 0x2a
	.long	4294967287              # 0xfffffff7
	.long	49                      # 0x31
	.long	4294967291              # 0xfffffffb
	.long	53                      # 0x35
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	3                       # 0x3
	.long	68                      # 0x44
	.long	10                      # 0xa
	.long	66                      # 0x42
	.long	27                      # 0x1b
	.long	47                      # 0x2f
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	37                      # 0x25
	.long	4294967263              # 0xffffffdf
	.long	39                      # 0x27
	.long	4294967260              # 0xffffffdc
	.long	40                      # 0x28
	.long	4294967259              # 0xffffffdb
	.long	38                      # 0x26
	.long	4294967266              # 0xffffffe2
	.long	46                      # 0x2e
	.long	4294967263              # 0xffffffdf
	.long	42                      # 0x2a
	.long	4294967266              # 0xffffffe2
	.long	40                      # 0x28
	.long	4294967272              # 0xffffffe8
	.long	49                      # 0x31
	.long	4294967267              # 0xffffffe3
	.long	38                      # 0x26
	.long	4294967284              # 0xfffffff4
	.long	40                      # 0x28
	.long	4294967286              # 0xfffffff6
	.long	38                      # 0x26
	.long	4294967293              # 0xfffffffd
	.long	46                      # 0x2e
	.long	4294967291              # 0xfffffffb
	.long	31                      # 0x1f
	.long	20                      # 0x14
	.long	29                      # 0x1d
	.long	30                      # 0x1e
	.long	25                      # 0x19
	.long	44                      # 0x2c
	.long	12                      # 0xc
	.long	48                      # 0x30
	.long	11                      # 0xb
	.long	49                      # 0x31
	.long	26                      # 0x1a
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	22                      # 0x16
	.long	22                      # 0x16
	.long	23                      # 0x17
	.long	22                      # 0x16
	.long	27                      # 0x1b
	.long	21                      # 0x15
	.long	33                      # 0x21
	.long	20                      # 0x14
	.long	26                      # 0x1a
	.long	28                      # 0x1c
	.long	30                      # 0x1e
	.long	24                      # 0x18
	.long	27                      # 0x1b
	.long	34                      # 0x22
	.long	18                      # 0x12
	.long	42                      # 0x2a
	.long	25                      # 0x19
	.long	39                      # 0x27
	.long	18                      # 0x12
	.long	50                      # 0x32
	.long	12                      # 0xc
	.long	70                      # 0x46
	.long	21                      # 0x15
	.long	54                      # 0x36
	.long	14                      # 0xe
	.long	71                      # 0x47
	.long	11                      # 0xb
	.long	83                      # 0x53
	.long	17                      # 0x11
	.long	4294967283              # 0xfffffff3
	.long	16                      # 0x10
	.long	4294967287              # 0xfffffff7
	.long	17                      # 0x11
	.long	4294967284              # 0xfffffff4
	.long	27                      # 0x1b
	.long	4294967275              # 0xffffffeb
	.long	37                      # 0x25
	.long	4294967266              # 0xffffffe2
	.long	41                      # 0x29
	.long	4294967256              # 0xffffffd8
	.long	42                      # 0x2a
	.long	4294967255              # 0xffffffd7
	.long	48                      # 0x30
	.long	4294967249              # 0xffffffd1
	.long	39                      # 0x27
	.long	4294967264              # 0xffffffe0
	.long	46                      # 0x2e
	.long	4294967256              # 0xffffffd8
	.long	52                      # 0x34
	.long	4294967245              # 0xffffffcd
	.long	46                      # 0x2e
	.long	4294967255              # 0xffffffd7
	.long	52                      # 0x34
	.long	4294967257              # 0xffffffd9
	.long	43                      # 0x2b
	.long	4294967277              # 0xffffffed
	.long	32                      # 0x20
	.long	11                      # 0xb
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	61                      # 0x3d
	.long	4294967241              # 0xffffffc9
	.long	56                      # 0x38
	.long	4294967250              # 0xffffffd2
	.long	62                      # 0x3e
	.long	4294967246              # 0xffffffce
	.long	81                      # 0x51
	.long	4294967229              # 0xffffffbd
	.long	45                      # 0x2d
	.long	4294967276              # 0xffffffec
	.long	35                      # 0x23
	.long	4294967294              # 0xfffffffe
	.long	28                      # 0x1c
	.long	15                      # 0xf
	.long	34                      # 0x22
	.long	1                       # 0x1
	.long	39                      # 0x27
	.long	1                       # 0x1
	.long	30                      # 0x1e
	.long	17                      # 0x11
	.long	20                      # 0x14
	.long	38                      # 0x26
	.long	18                      # 0x12
	.long	45                      # 0x2d
	.long	15                      # 0xf
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	79                      # 0x4f
	.long	9                       # 0x9
	.long	4294967294              # 0xfffffffe
	.long	30                      # 0x1e
	.long	4294967286              # 0xfffffff6
	.long	31                      # 0x1f
	.long	4294967292              # 0xfffffffc
	.long	33                      # 0x21
	.long	4294967295              # 0xffffffff
	.long	33                      # 0x21
	.long	7                       # 0x7
	.long	31                      # 0x1f
	.long	12                      # 0xc
	.long	37                      # 0x25
	.long	23                      # 0x17
	.long	31                      # 0x1f
	.long	38                      # 0x26
	.long	20                      # 0x14
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	36                      # 0x24
	.long	4294967280              # 0xfffffff0
	.long	37                      # 0x25
	.long	4294967282              # 0xfffffff2
	.long	37                      # 0x25
	.long	4294967279              # 0xffffffef
	.long	32                      # 0x20
	.long	1                       # 0x1
	.long	34                      # 0x22
	.long	15                      # 0xf
	.long	29                      # 0x1d
	.long	15                      # 0xf
	.long	24                      # 0x18
	.long	25                      # 0x19
	.long	34                      # 0x22
	.long	22                      # 0x16
	.long	31                      # 0x1f
	.long	16                      # 0x10
	.long	35                      # 0x23
	.long	18                      # 0x12
	.long	31                      # 0x1f
	.long	28                      # 0x1c
	.long	33                      # 0x21
	.long	41                      # 0x29
	.long	36                      # 0x24
	.long	28                      # 0x1c
	.long	27                      # 0x1b
	.long	47                      # 0x2f
	.long	21                      # 0x15
	.long	62                      # 0x3e
	.long	18                      # 0x12
	.long	31                      # 0x1f
	.long	19                      # 0x13
	.long	26                      # 0x1a
	.long	36                      # 0x24
	.long	24                      # 0x18
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	24                      # 0x18
	.long	23                      # 0x17
	.long	27                      # 0x1b
	.long	16                      # 0x10
	.long	24                      # 0x18
	.long	30                      # 0x1e
	.long	31                      # 0x1f
	.long	29                      # 0x1d
	.long	22                      # 0x16
	.long	41                      # 0x29
	.long	22                      # 0x16
	.long	42                      # 0x2a
	.long	16                      # 0x10
	.long	60                      # 0x3c
	.long	15                      # 0xf
	.long	52                      # 0x34
	.long	14                      # 0xe
	.long	60                      # 0x3c
	.long	3                       # 0x3
	.long	78                      # 0x4e
	.long	4294967280              # 0xfffffff0
	.long	123                     # 0x7b
	.long	21                      # 0x15
	.long	53                      # 0x35
	.long	22                      # 0x16
	.long	56                      # 0x38
	.long	25                      # 0x19
	.long	61                      # 0x3d
	.size	INIT_FLD_LAST_P, 2880

	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
